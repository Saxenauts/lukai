// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/compiler/xla/service/session.proto

/*
	Package xla is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/compiler/xla/service/session.proto

	It has these top-level messages:
		OperationRequest
		SessionComputation
		SessionModule
*/
package xla

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import xla1 "github.com/d4l3k/pok/protobuf/tensorflow/compiler/xla"

import fmt "fmt"
import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Describes a single operation request.
type OperationRequest struct {
	OutputHandle *xla1.ComputationDataHandle `protobuf:"bytes,1,opt,name=output_handle,json=outputHandle" json:"output_handle,omitempty"`
	OutputShape  *xla1.Shape                 `protobuf:"bytes,2,opt,name=output_shape,json=outputShape" json:"output_shape,omitempty"`
	// For operations which call embedded computations such as "Map", these are
	// the version(s) that the embedded computation should be called at. A version
	// value of a computation is the ComputationDataHandle of the root of the
	// computation at the point in time.
	//
	// "Call", "Map", "Reduce", and "ReduceWindow" operations take a single
	// embedded computation so this field will have a single value for those
	// operations.
	//
	// "While" operation takes two; index 0 is the "condition" version and index 1
	// is the "body" version.
	EmbeddedComputationVersions []int64 `protobuf:"varint,3,rep,packed,name=embedded_computation_versions,json=embeddedComputationVersions" json:"embedded_computation_versions,omitempty"`
	// The actual request, which in itself is a tagged union of all possible
	// operation request types.
	Request *xla1.OpRequest `protobuf:"bytes,4,opt,name=request" json:"request,omitempty"`
}

func (m *OperationRequest) Reset()                    { *m = OperationRequest{} }
func (*OperationRequest) ProtoMessage()               {}
func (*OperationRequest) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{0} }

func (m *OperationRequest) GetOutputHandle() *xla1.ComputationDataHandle {
	if m != nil {
		return m.OutputHandle
	}
	return nil
}

func (m *OperationRequest) GetOutputShape() *xla1.Shape {
	if m != nil {
		return m.OutputShape
	}
	return nil
}

func (m *OperationRequest) GetEmbeddedComputationVersions() []int64 {
	if m != nil {
		return m.EmbeddedComputationVersions
	}
	return nil
}

func (m *OperationRequest) GetRequest() *xla1.OpRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// Describes a sequence of operation requests which define an XLA
// computation.
type SessionComputation struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The ComputationHandle used to refer to this computation in the XLA
	// service.
	ComputationHandle *xla1.ComputationHandle `protobuf:"bytes,2,opt,name=computation_handle,json=computationHandle" json:"computation_handle,omitempty"`
	// Map from ComputationDataHandle value to operation request. The highest
	// ComputationDataHandle value corresponds to the root of the computation.
	Requests map[int64]*OperationRequest `protobuf:"bytes,3,rep,name=requests" json:"requests,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SessionComputation) Reset()                    { *m = SessionComputation{} }
func (*SessionComputation) ProtoMessage()               {}
func (*SessionComputation) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{1} }

func (m *SessionComputation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SessionComputation) GetComputationHandle() *xla1.ComputationHandle {
	if m != nil {
		return m.ComputationHandle
	}
	return nil
}

func (m *SessionComputation) GetRequests() map[int64]*OperationRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

// Describes a group of SessionComputations with an "entry point" computation
// that may refer to the other non-entry (AKA embedded) computations.
//
// This message is used to serialize a computation that has been built via the
// XLA service API, along with its dependencies, for purposes such as
// analysis/replay/file-storage.
type SessionModule struct {
	// The entry computation, which was requested for serialization. This may have
	// referred to embedded computations, which are reflected below.
	Entry *SessionComputation `protobuf:"bytes,1,opt,name=entry" json:"entry,omitempty"`
	// Embedded computations that are transitively referred to by the entry
	// computation.
	EmbeddedComputations []*SessionComputation `protobuf:"bytes,2,rep,name=embedded_computations,json=embeddedComputations" json:"embedded_computations,omitempty"`
	// The arguments passed to the computation.
	Arguments []*xla1.LiteralProto `protobuf:"bytes,3,rep,name=arguments" json:"arguments,omitempty"`
	// The result of the computation.
	Result *xla1.LiteralProto `protobuf:"bytes,4,opt,name=result" json:"result,omitempty"`
	// The name of the platform used to run the computation.
	ExecutionPlatform string `protobuf:"bytes,5,opt,name=execution_platform,json=executionPlatform,proto3" json:"execution_platform,omitempty"`
}

func (m *SessionModule) Reset()                    { *m = SessionModule{} }
func (*SessionModule) ProtoMessage()               {}
func (*SessionModule) Descriptor() ([]byte, []int) { return fileDescriptorSession, []int{2} }

func (m *SessionModule) GetEntry() *SessionComputation {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *SessionModule) GetEmbeddedComputations() []*SessionComputation {
	if m != nil {
		return m.EmbeddedComputations
	}
	return nil
}

func (m *SessionModule) GetArguments() []*xla1.LiteralProto {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *SessionModule) GetResult() *xla1.LiteralProto {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SessionModule) GetExecutionPlatform() string {
	if m != nil {
		return m.ExecutionPlatform
	}
	return ""
}

func init() {
	proto.RegisterType((*OperationRequest)(nil), "xla.OperationRequest")
	proto.RegisterType((*SessionComputation)(nil), "xla.SessionComputation")
	proto.RegisterType((*SessionModule)(nil), "xla.SessionModule")
}
func (this *OperationRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OperationRequest)
	if !ok {
		that2, ok := that.(OperationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.OutputHandle.Equal(that1.OutputHandle) {
		return false
	}
	if !this.OutputShape.Equal(that1.OutputShape) {
		return false
	}
	if len(this.EmbeddedComputationVersions) != len(that1.EmbeddedComputationVersions) {
		return false
	}
	for i := range this.EmbeddedComputationVersions {
		if this.EmbeddedComputationVersions[i] != that1.EmbeddedComputationVersions[i] {
			return false
		}
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	return true
}
func (this *SessionComputation) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SessionComputation)
	if !ok {
		that2, ok := that.(SessionComputation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.ComputationHandle.Equal(that1.ComputationHandle) {
		return false
	}
	if len(this.Requests) != len(that1.Requests) {
		return false
	}
	for i := range this.Requests {
		if !this.Requests[i].Equal(that1.Requests[i]) {
			return false
		}
	}
	return true
}
func (this *SessionModule) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SessionModule)
	if !ok {
		that2, ok := that.(SessionModule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Entry.Equal(that1.Entry) {
		return false
	}
	if len(this.EmbeddedComputations) != len(that1.EmbeddedComputations) {
		return false
	}
	for i := range this.EmbeddedComputations {
		if !this.EmbeddedComputations[i].Equal(that1.EmbeddedComputations[i]) {
			return false
		}
	}
	if len(this.Arguments) != len(that1.Arguments) {
		return false
	}
	for i := range this.Arguments {
		if !this.Arguments[i].Equal(that1.Arguments[i]) {
			return false
		}
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	if this.ExecutionPlatform != that1.ExecutionPlatform {
		return false
	}
	return true
}
func (this *OperationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&xla.OperationRequest{")
	if this.OutputHandle != nil {
		s = append(s, "OutputHandle: "+fmt.Sprintf("%#v", this.OutputHandle)+",\n")
	}
	if this.OutputShape != nil {
		s = append(s, "OutputShape: "+fmt.Sprintf("%#v", this.OutputShape)+",\n")
	}
	s = append(s, "EmbeddedComputationVersions: "+fmt.Sprintf("%#v", this.EmbeddedComputationVersions)+",\n")
	if this.Request != nil {
		s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SessionComputation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.SessionComputation{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.ComputationHandle != nil {
		s = append(s, "ComputationHandle: "+fmt.Sprintf("%#v", this.ComputationHandle)+",\n")
	}
	keysForRequests := make([]int64, 0, len(this.Requests))
	for k, _ := range this.Requests {
		keysForRequests = append(keysForRequests, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForRequests)
	mapStringForRequests := "map[int64]*OperationRequest{"
	for _, k := range keysForRequests {
		mapStringForRequests += fmt.Sprintf("%#v: %#v,", k, this.Requests[k])
	}
	mapStringForRequests += "}"
	if this.Requests != nil {
		s = append(s, "Requests: "+mapStringForRequests+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SessionModule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&xla.SessionModule{")
	if this.Entry != nil {
		s = append(s, "Entry: "+fmt.Sprintf("%#v", this.Entry)+",\n")
	}
	if this.EmbeddedComputations != nil {
		s = append(s, "EmbeddedComputations: "+fmt.Sprintf("%#v", this.EmbeddedComputations)+",\n")
	}
	if this.Arguments != nil {
		s = append(s, "Arguments: "+fmt.Sprintf("%#v", this.Arguments)+",\n")
	}
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "ExecutionPlatform: "+fmt.Sprintf("%#v", this.ExecutionPlatform)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSession(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *OperationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OutputHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.OutputHandle.Size()))
		n1, err := m.OutputHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.OutputShape != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.OutputShape.Size()))
		n2, err := m.OutputShape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.EmbeddedComputationVersions) > 0 {
		dAtA4 := make([]byte, len(m.EmbeddedComputationVersions)*10)
		var j3 int
		for _, num1 := range m.EmbeddedComputationVersions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSession(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.Request != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Request.Size()))
		n5, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *SessionComputation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionComputation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.ComputationHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.ComputationHandle.Size()))
		n6, err := m.ComputationHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Requests) > 0 {
		for k, _ := range m.Requests {
			dAtA[i] = 0x1a
			i++
			v := m.Requests[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovSession(uint64(msgSize))
			}
			mapSize := 1 + sovSession(uint64(k)) + msgSize
			i = encodeVarintSession(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintSession(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintSession(dAtA, i, uint64(v.Size()))
				n7, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n7
			}
		}
	}
	return i, nil
}

func (m *SessionModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionModule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Entry != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Entry.Size()))
		n8, err := m.Entry.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.EmbeddedComputations) > 0 {
		for _, msg := range m.EmbeddedComputations {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Arguments) > 0 {
		for _, msg := range m.Arguments {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSession(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Result != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSession(dAtA, i, uint64(m.Result.Size()))
		n9, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.ExecutionPlatform) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSession(dAtA, i, uint64(len(m.ExecutionPlatform)))
		i += copy(dAtA[i:], m.ExecutionPlatform)
	}
	return i, nil
}

func encodeFixed64Session(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Session(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSession(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OperationRequest) Size() (n int) {
	var l int
	_ = l
	if m.OutputHandle != nil {
		l = m.OutputHandle.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if m.OutputShape != nil {
		l = m.OutputShape.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if len(m.EmbeddedComputationVersions) > 0 {
		l = 0
		for _, e := range m.EmbeddedComputationVersions {
			l += sovSession(uint64(e))
		}
		n += 1 + sovSession(uint64(l)) + l
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func (m *SessionComputation) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	if m.ComputationHandle != nil {
		l = m.ComputationHandle.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if len(m.Requests) > 0 {
		for k, v := range m.Requests {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSession(uint64(l))
			}
			mapEntrySize := 1 + sovSession(uint64(k)) + l
			n += mapEntrySize + 1 + sovSession(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SessionModule) Size() (n int) {
	var l int
	_ = l
	if m.Entry != nil {
		l = m.Entry.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	if len(m.EmbeddedComputations) > 0 {
		for _, e := range m.EmbeddedComputations {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	if len(m.Arguments) > 0 {
		for _, e := range m.Arguments {
			l = e.Size()
			n += 1 + l + sovSession(uint64(l))
		}
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovSession(uint64(l))
	}
	l = len(m.ExecutionPlatform)
	if l > 0 {
		n += 1 + l + sovSession(uint64(l))
	}
	return n
}

func sovSession(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSession(x uint64) (n int) {
	return sovSession(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *OperationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OperationRequest{`,
		`OutputHandle:` + strings.Replace(fmt.Sprintf("%v", this.OutputHandle), "ComputationDataHandle", "xla1.ComputationDataHandle", 1) + `,`,
		`OutputShape:` + strings.Replace(fmt.Sprintf("%v", this.OutputShape), "Shape", "xla1.Shape", 1) + `,`,
		`EmbeddedComputationVersions:` + fmt.Sprintf("%v", this.EmbeddedComputationVersions) + `,`,
		`Request:` + strings.Replace(fmt.Sprintf("%v", this.Request), "OpRequest", "xla1.OpRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SessionComputation) String() string {
	if this == nil {
		return "nil"
	}
	keysForRequests := make([]int64, 0, len(this.Requests))
	for k, _ := range this.Requests {
		keysForRequests = append(keysForRequests, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForRequests)
	mapStringForRequests := "map[int64]*OperationRequest{"
	for _, k := range keysForRequests {
		mapStringForRequests += fmt.Sprintf("%v: %v,", k, this.Requests[k])
	}
	mapStringForRequests += "}"
	s := strings.Join([]string{`&SessionComputation{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ComputationHandle:` + strings.Replace(fmt.Sprintf("%v", this.ComputationHandle), "ComputationHandle", "xla1.ComputationHandle", 1) + `,`,
		`Requests:` + mapStringForRequests + `,`,
		`}`,
	}, "")
	return s
}
func (this *SessionModule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SessionModule{`,
		`Entry:` + strings.Replace(fmt.Sprintf("%v", this.Entry), "SessionComputation", "SessionComputation", 1) + `,`,
		`EmbeddedComputations:` + strings.Replace(fmt.Sprintf("%v", this.EmbeddedComputations), "SessionComputation", "SessionComputation", 1) + `,`,
		`Arguments:` + strings.Replace(fmt.Sprintf("%v", this.Arguments), "LiteralProto", "xla1.LiteralProto", 1) + `,`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "LiteralProto", "xla1.LiteralProto", 1) + `,`,
		`ExecutionPlatform:` + fmt.Sprintf("%v", this.ExecutionPlatform) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSession(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *OperationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutputHandle == nil {
				m.OutputHandle = &xla1.ComputationDataHandle{}
			}
			if err := m.OutputHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputShape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutputShape == nil {
				m.OutputShape = &xla1.Shape{}
			}
			if err := m.OutputShape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSession
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EmbeddedComputationVersions = append(m.EmbeddedComputationVersions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSession
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSession
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSession
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EmbeddedComputationVersions = append(m.EmbeddedComputationVersions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbeddedComputationVersions", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &xla1.OpRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionComputation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionComputation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionComputation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputationHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ComputationHandle == nil {
				m.ComputationHandle = &xla1.ComputationHandle{}
			}
			if err := m.ComputationHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Requests == nil {
				m.Requests = make(map[int64]*OperationRequest)
			}
			var mapkey int64
			var mapvalue *OperationRequest
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSession
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSession
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSession
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSession
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthSession
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &OperationRequest{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSession(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSession
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Requests[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Entry == nil {
				m.Entry = &SessionComputation{}
			}
			if err := m.Entry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmbeddedComputations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmbeddedComputations = append(m.EmbeddedComputations, &SessionComputation{})
			if err := m.EmbeddedComputations[len(m.EmbeddedComputations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments, &xla1.LiteralProto{})
			if err := m.Arguments[len(m.Arguments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &xla1.LiteralProto{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionPlatform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionPlatform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSession(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSession
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSession
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSession
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSession(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSession = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSession   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/compiler/xla/service/session.proto", fileDescriptorSession)
}

var fileDescriptorSession = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x41, 0x6f, 0x13, 0x3d,
	0x10, 0x8d, 0xb3, 0x4d, 0xbf, 0xaf, 0x0e, 0x41, 0x8d, 0x45, 0x61, 0x15, 0x84, 0x55, 0x45, 0x02,
	0x05, 0x41, 0xb3, 0x52, 0x91, 0x10, 0xe2, 0x82, 0x28, 0x54, 0xe2, 0x50, 0xd4, 0xca, 0x95, 0xb8,
	0x46, 0x4e, 0x76, 0x42, 0x23, 0xbc, 0xeb, 0xc5, 0xf6, 0x86, 0xf4, 0xc6, 0x89, 0x33, 0x37, 0xfe,
	0x02, 0x3f, 0x85, 0x63, 0x8f, 0x1c, 0xc9, 0x72, 0xe1, 0x98, 0x9f, 0x80, 0xd6, 0x76, 0xd2, 0xb4,
	0x24, 0x37, 0xdb, 0xf3, 0xde, 0xcc, 0x7b, 0xf3, 0x76, 0xf1, 0xd3, 0x4c, 0x49, 0x23, 0xfb, 0xf9,
	0x30, 0x32, 0x90, 0x6a, 0xa9, 0x86, 0x42, 0x7e, 0x8a, 0x06, 0x32, 0xc9, 0x46, 0x02, 0x54, 0x34,
	0x11, 0x3c, 0xd2, 0xa0, 0xc6, 0xa3, 0x01, 0x44, 0x1a, 0xb4, 0x1e, 0xc9, 0xb4, 0x6b, 0x09, 0x24,
	0x98, 0x08, 0xde, 0x7a, 0xb0, 0x8e, 0x33, 0x11, 0xbc, 0x17, 0x73, 0xc3, 0x1d, 0xb8, 0x3d, 0x43,
	0x78, 0xfb, 0x38, 0x03, 0xc5, 0xcd, 0x48, 0xa6, 0x0c, 0x3e, 0xe6, 0xa0, 0x0d, 0x79, 0x81, 0x1b,
	0x32, 0x37, 0x59, 0x6e, 0x7a, 0x67, 0x3c, 0x8d, 0x05, 0x84, 0x68, 0x17, 0x75, 0xea, 0xfb, 0xad,
	0xee, 0x44, 0xf0, 0xee, 0x2b, 0x99, 0x64, 0xb9, 0xb1, 0xf8, 0xd7, 0xdc, 0xf0, 0x37, 0x16, 0xc1,
	0x6e, 0x38, 0x82, 0xbb, 0x91, 0x3d, 0xec, 0xef, 0x3d, 0x7d, 0xc6, 0x33, 0x08, 0xab, 0x96, 0x8f,
	0x2d, 0xff, 0xb4, 0x7c, 0x61, 0x75, 0x57, 0xb7, 0x17, 0x72, 0x80, 0xef, 0x41, 0xd2, 0x87, 0x38,
	0x86, 0xb8, 0x37, 0xb8, 0x6c, 0xdf, 0x1b, 0x83, 0x2a, 0x7d, 0xe9, 0x30, 0xd8, 0x0d, 0x3a, 0x01,
	0xbb, 0x3b, 0x07, 0x2d, 0x49, 0x78, 0xe7, 0x21, 0xa4, 0x83, 0xff, 0x53, 0x4e, 0x7e, 0xb8, 0x61,
	0xa7, 0xdd, 0xb4, 0xd3, 0x8e, 0x33, 0x6f, 0x8a, 0xcd, 0xcb, 0xed, 0x2f, 0x55, 0x4c, 0x4e, 0xdd,
	0xc6, 0x96, 0x1a, 0x11, 0x82, 0x37, 0x52, 0x9e, 0x38, 0xaf, 0x5b, 0xcc, 0x9e, 0xc9, 0x21, 0x26,
	0xcb, 0x7a, 0xfc, 0x36, 0x9c, 0x9b, 0xdb, 0xd7, 0xb7, 0xe1, 0x37, 0xd1, 0x1c, 0x5c, 0x7f, 0x22,
	0x2f, 0xf1, 0xff, 0x7e, 0xb8, 0xb3, 0x52, 0xdf, 0xbf, 0xef, 0x56, 0xf1, 0x8f, 0x8a, 0xae, 0x57,
	0xab, 0x0f, 0x53, 0xa3, 0xce, 0xd9, 0x82, 0xd6, 0x62, 0xb8, 0x71, 0xa5, 0x44, 0xb6, 0x71, 0xf0,
	0x01, 0xce, 0xad, 0xda, 0x80, 0x95, 0x47, 0xf2, 0x08, 0xd7, 0xc6, 0x5c, 0xe4, 0x73, 0x7d, 0x3b,
	0xde, 0xff, 0xd5, 0x6c, 0x99, 0xc3, 0x3c, 0xaf, 0x3e, 0x43, 0xed, 0x6f, 0x55, 0xdc, 0xf0, 0x12,
	0xde, 0xca, 0x38, 0xb7, 0xb9, 0xd5, 0xa0, 0xec, 0xee, 0x03, 0xbf, 0xb3, 0x46, 0x25, 0x73, 0x28,
	0x72, 0x84, 0x77, 0x56, 0xe5, 0xa6, 0xc3, 0xaa, 0x35, 0xb9, 0x96, 0x7e, 0x6b, 0x45, 0x90, 0x9a,
	0x44, 0x78, 0x8b, 0xab, 0xf7, 0x79, 0x02, 0xe9, 0x62, 0x4d, 0x4d, 0xdb, 0xe1, 0x68, 0x64, 0x40,
	0x71, 0x71, 0x52, 0x7e, 0xb0, 0xec, 0x12, 0x43, 0x1e, 0xe2, 0x4d, 0x05, 0x3a, 0x17, 0xf3, 0xc4,
	0x57, 0xa0, 0x3d, 0x80, 0xec, 0x61, 0x02, 0x13, 0x18, 0xe4, 0x36, 0xc6, 0x4c, 0x70, 0x33, 0x94,
	0x2a, 0x09, 0x6b, 0x36, 0xea, 0xe6, 0xa2, 0x72, 0xe2, 0x0b, 0x07, 0x8f, 0x2f, 0xa6, 0xb4, 0xf2,
	0x73, 0x4a, 0x2b, 0xb3, 0x29, 0x45, 0x9f, 0x0b, 0x8a, 0xbe, 0x17, 0x14, 0xfd, 0x28, 0x28, 0xba,
	0x28, 0x28, 0xfa, 0x55, 0x50, 0xf4, 0xa7, 0xa0, 0x95, 0x59, 0x41, 0xd1, 0xd7, 0xdf, 0xb4, 0xd2,
	0xdf, 0xb4, 0xbf, 0xd2, 0x93, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x30, 0xc0, 0x9b, 0xb1,
	0x03, 0x00, 0x00,
}
