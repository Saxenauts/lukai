// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/compiler/xla/xla.proto

/*
	Package xla is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/compiler/xla/xla.proto

	It has these top-level messages:
		HloReducePrecisionOptions
		DebugOptions
		ExecutionOptions
		SnapshotComputationRequest
		SnapshotComputationResponse
		LoadComputationSnapshotRequest
		LoadComputationSnapshotResponse
		GetDeviceHandlesRequest
		GetDeviceHandlesResponse
		TransferToClientRequest
		TransferToClientResponse
		TransferToServerRequest
		TransferToServerResponse
		TransferToInfeedRequest
		TransferToInfeedResponse
		TransferFromOutfeedRequest
		TransferFromOutfeedResponse
		ResetDeviceRequest
		ResetDeviceResponse
		ComputationStatsRequest
		ComputationStatsResponse
		ComputationRequest
		ComputationResponse
		CreateChannelHandleRequest
		CreateChannelHandleResponse
		UnregisterRequest
		UnregisterResponse
		SetReturnValueRequest
		SetReturnValueResponse
		ExecuteRequest
		ExecuteParallelRequest
		ExecuteResponse
		ExecuteParallelResponse
		ExecuteAsyncRequest
		ExecuteAsyncResponse
		WaitForExecutionRequest
		WaitForExecutionResponse
		IsConstantRequest
		IsConstantResponse
		ComputeConstantRequest
		ComputeConstantResponse
		DeconstructTupleRequest
		DeconstructTupleResponse
		LoadDataRequest
		LoadDataResponse
		SpecializeRequest
		SpecializeResponse
		GetShapeRequest
		GetShapeResponse
		GetComputationShapeRequest
		GetComputationShapeResponse
		UnpackRequest
		UnpackResponse
*/
package xla

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import xla1 "github.com/d4l3k/pok/tensorflow/compiler/xla"
import xla2 "github.com/d4l3k/pok/tensorflow/compiler/xla/service"

import strconv "strconv"

import fmt "fmt"
import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// When to run the pass.
type HloReducePrecisionOptions_PassTiming int32

const (
	BEFORE_OP_FUSION HloReducePrecisionOptions_PassTiming = 0
	AFTER_OP_FUSION  HloReducePrecisionOptions_PassTiming = 1
)

var HloReducePrecisionOptions_PassTiming_name = map[int32]string{
	0: "BEFORE_OP_FUSION",
	1: "AFTER_OP_FUSION",
}
var HloReducePrecisionOptions_PassTiming_value = map[string]int32{
	"BEFORE_OP_FUSION": 0,
	"AFTER_OP_FUSION":  1,
}

func (HloReducePrecisionOptions_PassTiming) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorXla, []int{0, 0}
}

// Options for the HLO insert-reduce-precision-operations pass.
type HloReducePrecisionOptions struct {
	PassTiming HloReducePrecisionOptions_PassTiming `protobuf:"varint,1,opt,name=pass_timing,json=passTiming,proto3,enum=xla.HloReducePrecisionOptions_PassTiming" json:"pass_timing,omitempty"`
	// Exponent and mantissa bit counts for the reduced precision.
	ExponentBits uint32 `protobuf:"varint,2,opt,name=exponent_bits,json=exponentBits,proto3" json:"exponent_bits,omitempty"`
	MantissaBits uint32 `protobuf:"varint,3,opt,name=mantissa_bits,json=mantissaBits,proto3" json:"mantissa_bits,omitempty"`
	// Opcodes for operations that should be suffixed with reduced-precision
	// operations.
	OpcodesToSuffix []uint32 `protobuf:"varint,4,rep,packed,name=opcodes_to_suffix,json=opcodesToSuffix" json:"opcodes_to_suffix,omitempty"`
}

func (m *HloReducePrecisionOptions) Reset()                    { *m = HloReducePrecisionOptions{} }
func (*HloReducePrecisionOptions) ProtoMessage()               {}
func (*HloReducePrecisionOptions) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{0} }

func (m *HloReducePrecisionOptions) GetPassTiming() HloReducePrecisionOptions_PassTiming {
	if m != nil {
		return m.PassTiming
	}
	return BEFORE_OP_FUSION
}

func (m *HloReducePrecisionOptions) GetExponentBits() uint32 {
	if m != nil {
		return m.ExponentBits
	}
	return 0
}

func (m *HloReducePrecisionOptions) GetMantissaBits() uint32 {
	if m != nil {
		return m.MantissaBits
	}
	return 0
}

func (m *HloReducePrecisionOptions) GetOpcodesToSuffix() []uint32 {
	if m != nil {
		return m.OpcodesToSuffix
	}
	return nil
}

// Debugging options for XLA. These options may change at any time - there are
// no guarantees about backward or forward compatibility for these fields.
type DebugOptions struct {
	// HLO modules matching this regex will be dumped to a .dot file throughout
	// various stages in compilation (file names are LOG(INFO)'d). Set to ".*" to
	// dump *all* HLO modules.
	XlaGenerateHloGraph string `protobuf:"bytes,1,opt,name=xla_generate_hlo_graph,json=xlaGenerateHloGraph,proto3" json:"xla_generate_hlo_graph,omitempty"`
	// Show addresses of HLO ops in graph dump.
	XlaHloGraphAddresses bool `protobuf:"varint,2,opt,name=xla_hlo_graph_addresses,json=xlaHloGraphAddresses,proto3" json:"xla_hlo_graph_addresses,omitempty"`
	// Path to dump HLO graphs to.
	XlaHloGraphPath string `protobuf:"bytes,4,opt,name=xla_hlo_graph_path,json=xlaHloGraphPath,proto3" json:"xla_hlo_graph_path,omitempty"`
	// Dump HLO graphs as TensorFlow GraphDefs.
	XlaHloDumpAsGraphdef bool `protobuf:"varint,5,opt,name=xla_hlo_dump_as_graphdef,json=xlaHloDumpAsGraphdef,proto3" json:"xla_hlo_dump_as_graphdef,omitempty"`
	// HLO modules matching this regex will be dumped to LOG(INFO). Set to ".*" to
	// dump *all* HLO modules.
	XlaLogHloText string `protobuf:"bytes,6,opt,name=xla_log_hlo_text,json=xlaLogHloText,proto3" json:"xla_log_hlo_text,omitempty"`
	// Dump all HLO modules as text into the provided directory path.
	XlaGenerateHloTextTo string `protobuf:"bytes,7,opt,name=xla_generate_hlo_text_to,json=xlaGenerateHloTextTo,proto3" json:"xla_generate_hlo_text_to,omitempty"`
	// Dump compilation artifacts as JSON into this directory.
	XlaDumpDebugJsonTo string `protobuf:"bytes,8,opt,name=xla_dump_debug_json_to,json=xlaDumpDebugJsonTo,proto3" json:"xla_dump_debug_json_to,omitempty"`
	// Instrument the computation to collect per-HLO cycle counts.
	XlaHloProfile bool `protobuf:"varint,9,opt,name=xla_hlo_profile,json=xlaHloProfile,proto3" json:"xla_hlo_profile,omitempty"`
	// Dumps computations that XLA executes into the provided directory path.
	XlaDumpComputationsTo string `protobuf:"bytes,10,opt,name=xla_dump_computations_to,json=xlaDumpComputationsTo,proto3" json:"xla_dump_computations_to,omitempty"`
	// Dumps parameters and results of computations that XLA executes into the
	// provided directory path.
	XlaDumpExecutionsTo string `protobuf:"bytes,11,opt,name=xla_dump_executions_to,json=xlaDumpExecutionsTo,proto3" json:"xla_dump_executions_to,omitempty"`
	// List of HLO passes to disable. These names must exactly match the pass
	// names as specified by the HloPassInterface::name() method.
	XlaDisableHloPasses []string `protobuf:"bytes,30,rep,name=xla_disable_hlo_passes,json=xlaDisableHloPasses" json:"xla_disable_hlo_passes,omitempty"`
	// Numerical optimization level for the XLA compiler backend; the specific
	// interpretation of this value is left to the backends.
	XlaBackendOptimizationLevel int32 `protobuf:"varint,31,opt,name=xla_backend_optimization_level,json=xlaBackendOptimizationLevel,proto3" json:"xla_backend_optimization_level,omitempty"`
	// When true, "unsafe" mathematical optimizations are enabled. These
	// transformations include but are not limited to:
	//
	//  - Reducing the precision of operations (e.g. using an approximate sin
	//    function, or transforming x/y into x * (1/y)).
	//  - Assuming that operations never produce or consume NaN or +/- Inf.
	//  - Assuming that +0 and -0 are indistinguishable.
	XlaEnableFastMath bool `protobuf:"varint,32,opt,name=xla_enable_fast_math,json=xlaEnableFastMath,proto3" json:"xla_enable_fast_math,omitempty"`
	// Embed the compiler IR as a string in the executable.
	XlaEmbedIrInExecutable bool `protobuf:"varint,33,opt,name=xla_embed_ir_in_executable,json=xlaEmbedIrInExecutable,proto3" json:"xla_embed_ir_in_executable,omitempty"`
	// Dump the compiler IR into this directory as individual files.
	XlaDumpIrTo string `protobuf:"bytes,34,opt,name=xla_dump_ir_to,json=xlaDumpIrTo,proto3" json:"xla_dump_ir_to,omitempty"`
	// Eliminate implicit broadcasts when lowering user computations to HLO
	// instructions; use explicit broadcast instead.
	XlaEliminateHloImplicitBroadcast bool `protobuf:"varint,35,opt,name=xla_eliminate_hlo_implicit_broadcast,json=xlaEliminateHloImplicitBroadcast,proto3" json:"xla_eliminate_hlo_implicit_broadcast,omitempty"`
	// When generating calls to Eigen in the CPU backend, use multi-threaded Eigen
	// mode.
	XlaCpuMultiThreadEigen bool `protobuf:"varint,60,opt,name=xla_cpu_multi_thread_eigen,json=xlaCpuMultiThreadEigen,proto3" json:"xla_cpu_multi_thread_eigen,omitempty"`
	// Path to directory with cuda/ptx tools and libraries.
	XlaGpuCudaDataDir string `protobuf:"bytes,61,opt,name=xla_gpu_cuda_data_dir,json=xlaGpuCudaDataDir,proto3" json:"xla_gpu_cuda_data_dir,omitempty"`
	// Enable flush-to-zero semantics in the GPU backend.
	XlaGpuFtz bool `protobuf:"varint,62,opt,name=xla_gpu_ftz,json=xlaGpuFtz,proto3" json:"xla_gpu_ftz,omitempty"`
	// Disable multi-streaming in the GPU backend.
	XlaGpuDisableMultiStreaming bool `protobuf:"varint,63,opt,name=xla_gpu_disable_multi_streaming,json=xlaGpuDisableMultiStreaming,proto3" json:"xla_gpu_disable_multi_streaming,omitempty"`
	// If true, in LLVM-based backends, emit !alias.scope metadata in
	// generated IR.
	XlaLlvmEnableAliasScopeMetadata bool `protobuf:"varint,70,opt,name=xla_llvm_enable_alias_scope_metadata,json=xlaLlvmEnableAliasScopeMetadata,proto3" json:"xla_llvm_enable_alias_scope_metadata,omitempty"`
	// If true, in LLVM-based backends, emit !noalias metadata in the
	// generated IR.
	XlaLlvmEnableNoaliasMetadata bool `protobuf:"varint,71,opt,name=xla_llvm_enable_noalias_metadata,json=xlaLlvmEnableNoaliasMetadata,proto3" json:"xla_llvm_enable_noalias_metadata,omitempty"`
	// If true, in LLVM-based backends, emit !invariant.load metadata in
	// the generated IR.
	XlaLlvmEnableInvariantLoadMetadata bool `protobuf:"varint,72,opt,name=xla_llvm_enable_invariant_load_metadata,json=xlaLlvmEnableInvariantLoadMetadata,proto3" json:"xla_llvm_enable_invariant_load_metadata,omitempty"`
	// Options for inserting reduce-precision operations for numerical
	// experimentation.  This is a repeated field, as we may want to have
	// multiple passes with different parameters.
	HloReducePrecisionOptions []*HloReducePrecisionOptions `protobuf:"bytes,80,rep,name=hlo_reduce_precision_options,json=hloReducePrecisionOptions" json:"hlo_reduce_precision_options,omitempty"`
	// This is used by ClientLibraryTestBase::ComputeAndCompare*. If true, the
	// computation will run n! times with all permunations of layouts for the
	// output shape in rank n. For example, with a 3D shape, all permutations of
	// the set {0, 1, 2} are tried.
	XlaTestAllOutputLayouts bool `protobuf:"varint,90,opt,name=xla_test_all_output_layouts,json=xlaTestAllOutputLayouts,proto3" json:"xla_test_all_output_layouts,omitempty"`
	// This is used by ClientLibraryTestBase::ComputeAndCompare*. If true, the
	// computation will run for all permunations of layouts of all input
	// arguments. For example, with 2 input arguments in 2D and 4D shapes, the
	// computation will run 2! * 4! times.
	XlaTestAllInputLayouts bool `protobuf:"varint,91,opt,name=xla_test_all_input_layouts,json=xlaTestAllInputLayouts,proto3" json:"xla_test_all_input_layouts,omitempty"`
	// Extra options to pass to the compilation backend; specific interpretation
	// of these values is left to the backend.
	XlaBackendExtraOptions map[string]string `protobuf:"bytes,500,rep,name=xla_backend_extra_options,json=xlaBackendExtraOptions" json:"xla_backend_extra_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *DebugOptions) Reset()                    { *m = DebugOptions{} }
func (*DebugOptions) ProtoMessage()               {}
func (*DebugOptions) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{1} }

func (m *DebugOptions) GetXlaGenerateHloGraph() string {
	if m != nil {
		return m.XlaGenerateHloGraph
	}
	return ""
}

func (m *DebugOptions) GetXlaHloGraphAddresses() bool {
	if m != nil {
		return m.XlaHloGraphAddresses
	}
	return false
}

func (m *DebugOptions) GetXlaHloGraphPath() string {
	if m != nil {
		return m.XlaHloGraphPath
	}
	return ""
}

func (m *DebugOptions) GetXlaHloDumpAsGraphdef() bool {
	if m != nil {
		return m.XlaHloDumpAsGraphdef
	}
	return false
}

func (m *DebugOptions) GetXlaLogHloText() string {
	if m != nil {
		return m.XlaLogHloText
	}
	return ""
}

func (m *DebugOptions) GetXlaGenerateHloTextTo() string {
	if m != nil {
		return m.XlaGenerateHloTextTo
	}
	return ""
}

func (m *DebugOptions) GetXlaDumpDebugJsonTo() string {
	if m != nil {
		return m.XlaDumpDebugJsonTo
	}
	return ""
}

func (m *DebugOptions) GetXlaHloProfile() bool {
	if m != nil {
		return m.XlaHloProfile
	}
	return false
}

func (m *DebugOptions) GetXlaDumpComputationsTo() string {
	if m != nil {
		return m.XlaDumpComputationsTo
	}
	return ""
}

func (m *DebugOptions) GetXlaDumpExecutionsTo() string {
	if m != nil {
		return m.XlaDumpExecutionsTo
	}
	return ""
}

func (m *DebugOptions) GetXlaDisableHloPasses() []string {
	if m != nil {
		return m.XlaDisableHloPasses
	}
	return nil
}

func (m *DebugOptions) GetXlaBackendOptimizationLevel() int32 {
	if m != nil {
		return m.XlaBackendOptimizationLevel
	}
	return 0
}

func (m *DebugOptions) GetXlaEnableFastMath() bool {
	if m != nil {
		return m.XlaEnableFastMath
	}
	return false
}

func (m *DebugOptions) GetXlaEmbedIrInExecutable() bool {
	if m != nil {
		return m.XlaEmbedIrInExecutable
	}
	return false
}

func (m *DebugOptions) GetXlaDumpIrTo() string {
	if m != nil {
		return m.XlaDumpIrTo
	}
	return ""
}

func (m *DebugOptions) GetXlaEliminateHloImplicitBroadcast() bool {
	if m != nil {
		return m.XlaEliminateHloImplicitBroadcast
	}
	return false
}

func (m *DebugOptions) GetXlaCpuMultiThreadEigen() bool {
	if m != nil {
		return m.XlaCpuMultiThreadEigen
	}
	return false
}

func (m *DebugOptions) GetXlaGpuCudaDataDir() string {
	if m != nil {
		return m.XlaGpuCudaDataDir
	}
	return ""
}

func (m *DebugOptions) GetXlaGpuFtz() bool {
	if m != nil {
		return m.XlaGpuFtz
	}
	return false
}

func (m *DebugOptions) GetXlaGpuDisableMultiStreaming() bool {
	if m != nil {
		return m.XlaGpuDisableMultiStreaming
	}
	return false
}

func (m *DebugOptions) GetXlaLlvmEnableAliasScopeMetadata() bool {
	if m != nil {
		return m.XlaLlvmEnableAliasScopeMetadata
	}
	return false
}

func (m *DebugOptions) GetXlaLlvmEnableNoaliasMetadata() bool {
	if m != nil {
		return m.XlaLlvmEnableNoaliasMetadata
	}
	return false
}

func (m *DebugOptions) GetXlaLlvmEnableInvariantLoadMetadata() bool {
	if m != nil {
		return m.XlaLlvmEnableInvariantLoadMetadata
	}
	return false
}

func (m *DebugOptions) GetHloReducePrecisionOptions() []*HloReducePrecisionOptions {
	if m != nil {
		return m.HloReducePrecisionOptions
	}
	return nil
}

func (m *DebugOptions) GetXlaTestAllOutputLayouts() bool {
	if m != nil {
		return m.XlaTestAllOutputLayouts
	}
	return false
}

func (m *DebugOptions) GetXlaTestAllInputLayouts() bool {
	if m != nil {
		return m.XlaTestAllInputLayouts
	}
	return false
}

func (m *DebugOptions) GetXlaBackendExtraOptions() map[string]string {
	if m != nil {
		return m.XlaBackendExtraOptions
	}
	return nil
}

// These settings control how XLA compiles and/or runs code.  Not all settings
// will have an effect on every platform.
//
// When adding new fields, keep in mind that boolean fields default to false.
type ExecutionOptions struct {
	// This optional field's layout is used as a hint when storing the output of
	// this computation.  Subsequent transfers of this output array to the client
	// may be faster when using this layout.
	//
	// We use a Shape here to accommodate computations that return a tuple.
	ShapeWithOutputLayout *xla1.Shape `protobuf:"bytes,2,opt,name=shape_with_output_layout,json=shapeWithOutputLayout" json:"shape_with_output_layout,omitempty"`
	// Used to seed random-number generators used in this computation.  If this is
	// 0, we generate a seed ourselves.
	//
	// TODO(b/32083678): Changing the seed unnecessarily forces a recompilation.
	Seed         uint64        `protobuf:"varint,3,opt,name=seed,proto3" json:"seed,omitempty"`
	DebugOptions *DebugOptions `protobuf:"bytes,4,opt,name=debug_options,json=debugOptions" json:"debug_options,omitempty"`
}

func (m *ExecutionOptions) Reset()                    { *m = ExecutionOptions{} }
func (*ExecutionOptions) ProtoMessage()               {}
func (*ExecutionOptions) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{2} }

func (m *ExecutionOptions) GetShapeWithOutputLayout() *xla1.Shape {
	if m != nil {
		return m.ShapeWithOutputLayout
	}
	return nil
}

func (m *ExecutionOptions) GetSeed() uint64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

func (m *ExecutionOptions) GetDebugOptions() *DebugOptions {
	if m != nil {
		return m.DebugOptions
	}
	return nil
}

type SnapshotComputationRequest struct {
	Computation *xla1.ComputationHandle `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
}

func (m *SnapshotComputationRequest) Reset()                    { *m = SnapshotComputationRequest{} }
func (*SnapshotComputationRequest) ProtoMessage()               {}
func (*SnapshotComputationRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{3} }

func (m *SnapshotComputationRequest) GetComputation() *xla1.ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

type SnapshotComputationResponse struct {
	Module *xla2.SessionModule `protobuf:"bytes,1,opt,name=module" json:"module,omitempty"`
}

func (m *SnapshotComputationResponse) Reset()                    { *m = SnapshotComputationResponse{} }
func (*SnapshotComputationResponse) ProtoMessage()               {}
func (*SnapshotComputationResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{4} }

func (m *SnapshotComputationResponse) GetModule() *xla2.SessionModule {
	if m != nil {
		return m.Module
	}
	return nil
}

type LoadComputationSnapshotRequest struct {
	Module *xla2.SessionModule `protobuf:"bytes,1,opt,name=module" json:"module,omitempty"`
}

func (m *LoadComputationSnapshotRequest) Reset()      { *m = LoadComputationSnapshotRequest{} }
func (*LoadComputationSnapshotRequest) ProtoMessage() {}
func (*LoadComputationSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorXla, []int{5}
}

func (m *LoadComputationSnapshotRequest) GetModule() *xla2.SessionModule {
	if m != nil {
		return m.Module
	}
	return nil
}

type LoadComputationSnapshotResponse struct {
	Computation *xla1.ComputationHandle `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
}

func (m *LoadComputationSnapshotResponse) Reset()      { *m = LoadComputationSnapshotResponse{} }
func (*LoadComputationSnapshotResponse) ProtoMessage() {}
func (*LoadComputationSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorXla, []int{6}
}

func (m *LoadComputationSnapshotResponse) GetComputation() *xla1.ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

type GetDeviceHandlesRequest struct {
	DeviceCount int64 `protobuf:"varint,1,opt,name=device_count,json=deviceCount,proto3" json:"device_count,omitempty"`
}

func (m *GetDeviceHandlesRequest) Reset()                    { *m = GetDeviceHandlesRequest{} }
func (*GetDeviceHandlesRequest) ProtoMessage()               {}
func (*GetDeviceHandlesRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{7} }

func (m *GetDeviceHandlesRequest) GetDeviceCount() int64 {
	if m != nil {
		return m.DeviceCount
	}
	return 0
}

type GetDeviceHandlesResponse struct {
	DeviceHandles []*xla1.DeviceHandle `protobuf:"bytes,1,rep,name=device_handles,json=deviceHandles" json:"device_handles,omitempty"`
}

func (m *GetDeviceHandlesResponse) Reset()                    { *m = GetDeviceHandlesResponse{} }
func (*GetDeviceHandlesResponse) ProtoMessage()               {}
func (*GetDeviceHandlesResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{8} }

func (m *GetDeviceHandlesResponse) GetDeviceHandles() []*xla1.DeviceHandle {
	if m != nil {
		return m.DeviceHandles
	}
	return nil
}

type TransferToClientRequest struct {
	Data *xla1.GlobalDataHandle `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	// This optional field directs the service to return the literal in this
	// layout. A shape is used to hold the layout to accommodate tuples.
	ShapeWithLayout *xla1.Shape `protobuf:"bytes,2,opt,name=shape_with_layout,json=shapeWithLayout" json:"shape_with_layout,omitempty"`
}

func (m *TransferToClientRequest) Reset()                    { *m = TransferToClientRequest{} }
func (*TransferToClientRequest) ProtoMessage()               {}
func (*TransferToClientRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{9} }

func (m *TransferToClientRequest) GetData() *xla1.GlobalDataHandle {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TransferToClientRequest) GetShapeWithLayout() *xla1.Shape {
	if m != nil {
		return m.ShapeWithLayout
	}
	return nil
}

type TransferToClientResponse struct {
	Literal *xla1.LiteralProto `protobuf:"bytes,1,opt,name=literal" json:"literal,omitempty"`
}

func (m *TransferToClientResponse) Reset()                    { *m = TransferToClientResponse{} }
func (*TransferToClientResponse) ProtoMessage()               {}
func (*TransferToClientResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{10} }

func (m *TransferToClientResponse) GetLiteral() *xla1.LiteralProto {
	if m != nil {
		return m.Literal
	}
	return nil
}

type TransferToServerRequest struct {
	Literal      *xla1.LiteralProto `protobuf:"bytes,1,opt,name=literal" json:"literal,omitempty"`
	DeviceHandle *xla1.DeviceHandle `protobuf:"bytes,2,opt,name=device_handle,json=deviceHandle" json:"device_handle,omitempty"`
}

func (m *TransferToServerRequest) Reset()                    { *m = TransferToServerRequest{} }
func (*TransferToServerRequest) ProtoMessage()               {}
func (*TransferToServerRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{11} }

func (m *TransferToServerRequest) GetLiteral() *xla1.LiteralProto {
	if m != nil {
		return m.Literal
	}
	return nil
}

func (m *TransferToServerRequest) GetDeviceHandle() *xla1.DeviceHandle {
	if m != nil {
		return m.DeviceHandle
	}
	return nil
}

type TransferToServerResponse struct {
	Data *xla1.GlobalDataHandle `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *TransferToServerResponse) Reset()                    { *m = TransferToServerResponse{} }
func (*TransferToServerResponse) ProtoMessage()               {}
func (*TransferToServerResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{12} }

func (m *TransferToServerResponse) GetData() *xla1.GlobalDataHandle {
	if m != nil {
		return m.Data
	}
	return nil
}

type TransferToInfeedRequest struct {
	Literal      *xla1.LiteralProto `protobuf:"bytes,1,opt,name=literal" json:"literal,omitempty"`
	ReplicaId    int64              `protobuf:"varint,2,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	DeviceHandle *xla1.DeviceHandle `protobuf:"bytes,3,opt,name=device_handle,json=deviceHandle" json:"device_handle,omitempty"`
}

func (m *TransferToInfeedRequest) Reset()                    { *m = TransferToInfeedRequest{} }
func (*TransferToInfeedRequest) ProtoMessage()               {}
func (*TransferToInfeedRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{13} }

func (m *TransferToInfeedRequest) GetLiteral() *xla1.LiteralProto {
	if m != nil {
		return m.Literal
	}
	return nil
}

func (m *TransferToInfeedRequest) GetReplicaId() int64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *TransferToInfeedRequest) GetDeviceHandle() *xla1.DeviceHandle {
	if m != nil {
		return m.DeviceHandle
	}
	return nil
}

type TransferToInfeedResponse struct {
}

func (m *TransferToInfeedResponse) Reset()                    { *m = TransferToInfeedResponse{} }
func (*TransferToInfeedResponse) ProtoMessage()               {}
func (*TransferToInfeedResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{14} }

type TransferFromOutfeedRequest struct {
	// This optional field directs the service to return the literal in this
	// layout. A shape is used to hold the layout to accommodate tuples.
	ShapeWithLayout *xla1.Shape        `protobuf:"bytes,1,opt,name=shape_with_layout,json=shapeWithLayout" json:"shape_with_layout,omitempty"`
	ReplicaId       int64              `protobuf:"varint,2,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	DeviceHandle    *xla1.DeviceHandle `protobuf:"bytes,3,opt,name=device_handle,json=deviceHandle" json:"device_handle,omitempty"`
}

func (m *TransferFromOutfeedRequest) Reset()                    { *m = TransferFromOutfeedRequest{} }
func (*TransferFromOutfeedRequest) ProtoMessage()               {}
func (*TransferFromOutfeedRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{15} }

func (m *TransferFromOutfeedRequest) GetShapeWithLayout() *xla1.Shape {
	if m != nil {
		return m.ShapeWithLayout
	}
	return nil
}

func (m *TransferFromOutfeedRequest) GetReplicaId() int64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *TransferFromOutfeedRequest) GetDeviceHandle() *xla1.DeviceHandle {
	if m != nil {
		return m.DeviceHandle
	}
	return nil
}

type TransferFromOutfeedResponse struct {
	Literal *xla1.LiteralProto `protobuf:"bytes,1,opt,name=literal" json:"literal,omitempty"`
}

func (m *TransferFromOutfeedResponse) Reset()                    { *m = TransferFromOutfeedResponse{} }
func (*TransferFromOutfeedResponse) ProtoMessage()               {}
func (*TransferFromOutfeedResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{16} }

func (m *TransferFromOutfeedResponse) GetLiteral() *xla1.LiteralProto {
	if m != nil {
		return m.Literal
	}
	return nil
}

type ResetDeviceRequest struct {
	DeviceHandle *xla1.DeviceHandle `protobuf:"bytes,1,opt,name=device_handle,json=deviceHandle" json:"device_handle,omitempty"`
}

func (m *ResetDeviceRequest) Reset()                    { *m = ResetDeviceRequest{} }
func (*ResetDeviceRequest) ProtoMessage()               {}
func (*ResetDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{17} }

func (m *ResetDeviceRequest) GetDeviceHandle() *xla1.DeviceHandle {
	if m != nil {
		return m.DeviceHandle
	}
	return nil
}

type ResetDeviceResponse struct {
}

func (m *ResetDeviceResponse) Reset()                    { *m = ResetDeviceResponse{} }
func (*ResetDeviceResponse) ProtoMessage()               {}
func (*ResetDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{18} }

type ComputationStatsRequest struct {
	Computation  *xla1.ComputationHandle `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
	DebugOptions *DebugOptions           `protobuf:"bytes,2,opt,name=debug_options,json=debugOptions" json:"debug_options,omitempty"`
}

func (m *ComputationStatsRequest) Reset()                    { *m = ComputationStatsRequest{} }
func (*ComputationStatsRequest) ProtoMessage()               {}
func (*ComputationStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{19} }

func (m *ComputationStatsRequest) GetComputation() *xla1.ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

func (m *ComputationStatsRequest) GetDebugOptions() *DebugOptions {
	if m != nil {
		return m.DebugOptions
	}
	return nil
}

type ComputationStatsResponse struct {
	Stats *xla1.ComputationStats `protobuf:"bytes,1,opt,name=stats" json:"stats,omitempty"`
}

func (m *ComputationStatsResponse) Reset()                    { *m = ComputationStatsResponse{} }
func (*ComputationStatsResponse) ProtoMessage()               {}
func (*ComputationStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{20} }

func (m *ComputationStatsResponse) GetStats() *xla1.ComputationStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type ComputationRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ComputationRequest) Reset()                    { *m = ComputationRequest{} }
func (*ComputationRequest) ProtoMessage()               {}
func (*ComputationRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{21} }

func (m *ComputationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ComputationResponse struct {
	Computation *xla1.ComputationHandle `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
}

func (m *ComputationResponse) Reset()                    { *m = ComputationResponse{} }
func (*ComputationResponse) ProtoMessage()               {}
func (*ComputationResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{22} }

func (m *ComputationResponse) GetComputation() *xla1.ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

type CreateChannelHandleRequest struct {
}

func (m *CreateChannelHandleRequest) Reset()                    { *m = CreateChannelHandleRequest{} }
func (*CreateChannelHandleRequest) ProtoMessage()               {}
func (*CreateChannelHandleRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{23} }

type CreateChannelHandleResponse struct {
	Channel *xla1.ChannelHandle `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *CreateChannelHandleResponse) Reset()                    { *m = CreateChannelHandleResponse{} }
func (*CreateChannelHandleResponse) ProtoMessage()               {}
func (*CreateChannelHandleResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{24} }

func (m *CreateChannelHandleResponse) GetChannel() *xla1.ChannelHandle {
	if m != nil {
		return m.Channel
	}
	return nil
}

type UnregisterRequest struct {
	Data *xla1.GlobalDataHandle `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *UnregisterRequest) Reset()                    { *m = UnregisterRequest{} }
func (*UnregisterRequest) ProtoMessage()               {}
func (*UnregisterRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{25} }

func (m *UnregisterRequest) GetData() *xla1.GlobalDataHandle {
	if m != nil {
		return m.Data
	}
	return nil
}

type UnregisterResponse struct {
}

func (m *UnregisterResponse) Reset()                    { *m = UnregisterResponse{} }
func (*UnregisterResponse) ProtoMessage()               {}
func (*UnregisterResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{26} }

type SetReturnValueRequest struct {
	Computation *xla1.ComputationHandle     `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
	Operand     *xla1.ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
}

func (m *SetReturnValueRequest) Reset()                    { *m = SetReturnValueRequest{} }
func (*SetReturnValueRequest) ProtoMessage()               {}
func (*SetReturnValueRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{27} }

func (m *SetReturnValueRequest) GetComputation() *xla1.ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

func (m *SetReturnValueRequest) GetOperand() *xla1.ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

type SetReturnValueResponse struct {
}

func (m *SetReturnValueResponse) Reset()                    { *m = SetReturnValueResponse{} }
func (*SetReturnValueResponse) ProtoMessage()               {}
func (*SetReturnValueResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{28} }

type ExecuteRequest struct {
	Computation *xla1.ComputationHandle  `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
	Arguments   []*xla1.GlobalDataHandle `protobuf:"bytes,2,rep,name=arguments" json:"arguments,omitempty"`
	// This optional field specifies a particular device to run the computation.
	// If not provided, the default device will be chosen.
	DeviceHandle *xla1.DeviceHandle `protobuf:"bytes,5,opt,name=device_handle,json=deviceHandle" json:"device_handle,omitempty"`
	// Options that affect how XLA compiles and runs code to service this request.
	ExecutionOptions *ExecutionOptions `protobuf:"bytes,6,opt,name=execution_options,json=executionOptions" json:"execution_options,omitempty"`
}

func (m *ExecuteRequest) Reset()                    { *m = ExecuteRequest{} }
func (*ExecuteRequest) ProtoMessage()               {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{29} }

func (m *ExecuteRequest) GetComputation() *xla1.ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

func (m *ExecuteRequest) GetArguments() []*xla1.GlobalDataHandle {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *ExecuteRequest) GetDeviceHandle() *xla1.DeviceHandle {
	if m != nil {
		return m.DeviceHandle
	}
	return nil
}

func (m *ExecuteRequest) GetExecutionOptions() *ExecutionOptions {
	if m != nil {
		return m.ExecutionOptions
	}
	return nil
}

type ExecuteParallelRequest struct {
	Requests []*ExecuteRequest `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
}

func (m *ExecuteParallelRequest) Reset()                    { *m = ExecuteParallelRequest{} }
func (*ExecuteParallelRequest) ProtoMessage()               {}
func (*ExecuteParallelRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{30} }

func (m *ExecuteParallelRequest) GetRequests() []*ExecuteRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

type ExecuteResponse struct {
	Output  *xla1.GlobalDataHandle `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
	Profile *xla1.ExecutionProfile `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
}

func (m *ExecuteResponse) Reset()                    { *m = ExecuteResponse{} }
func (*ExecuteResponse) ProtoMessage()               {}
func (*ExecuteResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{31} }

func (m *ExecuteResponse) GetOutput() *xla1.GlobalDataHandle {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *ExecuteResponse) GetProfile() *xla1.ExecutionProfile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type ExecuteParallelResponse struct {
	Responses []*ExecuteResponse `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
}

func (m *ExecuteParallelResponse) Reset()                    { *m = ExecuteParallelResponse{} }
func (*ExecuteParallelResponse) ProtoMessage()               {}
func (*ExecuteParallelResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{32} }

func (m *ExecuteParallelResponse) GetResponses() []*ExecuteResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type ExecuteAsyncRequest struct {
	Computation *xla1.ComputationHandle  `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
	Arguments   []*xla1.GlobalDataHandle `protobuf:"bytes,2,rep,name=arguments" json:"arguments,omitempty"`
	// Options that affect how XLA compiles and runs code to service this request.
	ExecutionOptions *ExecutionOptions `protobuf:"bytes,6,opt,name=execution_options,json=executionOptions" json:"execution_options,omitempty"`
}

func (m *ExecuteAsyncRequest) Reset()                    { *m = ExecuteAsyncRequest{} }
func (*ExecuteAsyncRequest) ProtoMessage()               {}
func (*ExecuteAsyncRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{33} }

func (m *ExecuteAsyncRequest) GetComputation() *xla1.ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

func (m *ExecuteAsyncRequest) GetArguments() []*xla1.GlobalDataHandle {
	if m != nil {
		return m.Arguments
	}
	return nil
}

func (m *ExecuteAsyncRequest) GetExecutionOptions() *ExecutionOptions {
	if m != nil {
		return m.ExecutionOptions
	}
	return nil
}

type ExecuteAsyncResponse struct {
	// A handle to the execution launched asynchronously.
	Execution *xla1.ExecutionHandle `protobuf:"bytes,1,opt,name=execution" json:"execution,omitempty"`
}

func (m *ExecuteAsyncResponse) Reset()                    { *m = ExecuteAsyncResponse{} }
func (*ExecuteAsyncResponse) ProtoMessage()               {}
func (*ExecuteAsyncResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{34} }

func (m *ExecuteAsyncResponse) GetExecution() *xla1.ExecutionHandle {
	if m != nil {
		return m.Execution
	}
	return nil
}

type WaitForExecutionRequest struct {
	Execution *xla1.ExecutionHandle `protobuf:"bytes,1,opt,name=execution" json:"execution,omitempty"`
}

func (m *WaitForExecutionRequest) Reset()                    { *m = WaitForExecutionRequest{} }
func (*WaitForExecutionRequest) ProtoMessage()               {}
func (*WaitForExecutionRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{35} }

func (m *WaitForExecutionRequest) GetExecution() *xla1.ExecutionHandle {
	if m != nil {
		return m.Execution
	}
	return nil
}

type WaitForExecutionResponse struct {
	Output  *xla1.GlobalDataHandle `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
	Profile *xla1.ExecutionProfile `protobuf:"bytes,2,opt,name=profile" json:"profile,omitempty"`
}

func (m *WaitForExecutionResponse) Reset()                    { *m = WaitForExecutionResponse{} }
func (*WaitForExecutionResponse) ProtoMessage()               {}
func (*WaitForExecutionResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{36} }

func (m *WaitForExecutionResponse) GetOutput() *xla1.GlobalDataHandle {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *WaitForExecutionResponse) GetProfile() *xla1.ExecutionProfile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type IsConstantRequest struct {
	Computation *xla1.ComputationHandle     `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
	Operand     *xla1.ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
}

func (m *IsConstantRequest) Reset()                    { *m = IsConstantRequest{} }
func (*IsConstantRequest) ProtoMessage()               {}
func (*IsConstantRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{37} }

func (m *IsConstantRequest) GetComputation() *xla1.ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

func (m *IsConstantRequest) GetOperand() *xla1.ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

type IsConstantResponse struct {
	IsConstant bool `protobuf:"varint,1,opt,name=is_constant,json=isConstant,proto3" json:"is_constant,omitempty"`
}

func (m *IsConstantResponse) Reset()                    { *m = IsConstantResponse{} }
func (*IsConstantResponse) ProtoMessage()               {}
func (*IsConstantResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{38} }

func (m *IsConstantResponse) GetIsConstant() bool {
	if m != nil {
		return m.IsConstant
	}
	return false
}

type ComputeConstantRequest struct {
	Computation  *xla1.ComputationHandle     `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
	Operand      *xla1.ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	OutputLayout *xla1.Layout                `protobuf:"bytes,3,opt,name=output_layout,json=outputLayout" json:"output_layout,omitempty"`
}

func (m *ComputeConstantRequest) Reset()                    { *m = ComputeConstantRequest{} }
func (*ComputeConstantRequest) ProtoMessage()               {}
func (*ComputeConstantRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{39} }

func (m *ComputeConstantRequest) GetComputation() *xla1.ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

func (m *ComputeConstantRequest) GetOperand() *xla1.ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *ComputeConstantRequest) GetOutputLayout() *xla1.Layout {
	if m != nil {
		return m.OutputLayout
	}
	return nil
}

type ComputeConstantResponse struct {
	Output *xla1.GlobalDataHandle `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *ComputeConstantResponse) Reset()                    { *m = ComputeConstantResponse{} }
func (*ComputeConstantResponse) ProtoMessage()               {}
func (*ComputeConstantResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{40} }

func (m *ComputeConstantResponse) GetOutput() *xla1.GlobalDataHandle {
	if m != nil {
		return m.Output
	}
	return nil
}

type DeconstructTupleRequest struct {
	TupleHandle *xla1.GlobalDataHandle `protobuf:"bytes,2,opt,name=tuple_handle,json=tupleHandle" json:"tuple_handle,omitempty"`
}

func (m *DeconstructTupleRequest) Reset()                    { *m = DeconstructTupleRequest{} }
func (*DeconstructTupleRequest) ProtoMessage()               {}
func (*DeconstructTupleRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{41} }

func (m *DeconstructTupleRequest) GetTupleHandle() *xla1.GlobalDataHandle {
	if m != nil {
		return m.TupleHandle
	}
	return nil
}

type DeconstructTupleResponse struct {
	ElementHandles []*xla1.GlobalDataHandle `protobuf:"bytes,1,rep,name=element_handles,json=elementHandles" json:"element_handles,omitempty"`
}

func (m *DeconstructTupleResponse) Reset()                    { *m = DeconstructTupleResponse{} }
func (*DeconstructTupleResponse) ProtoMessage()               {}
func (*DeconstructTupleResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{42} }

func (m *DeconstructTupleResponse) GetElementHandles() []*xla1.GlobalDataHandle {
	if m != nil {
		return m.ElementHandles
	}
	return nil
}

type LoadDataRequest struct {
	// Describes the path of the ColumnIO tablet to load.
	ColumnioTabletPath string `protobuf:"bytes,1,opt,name=columnio_tablet_path,json=columnioTabletPath,proto3" json:"columnio_tablet_path,omitempty"`
	// Describes the field to load within the ColumnIO tablet.
	ColumnioField string `protobuf:"bytes,2,opt,name=columnio_field,json=columnioField,proto3" json:"columnio_field,omitempty"`
	// Individual element shape, excluding rows.
	ElementShape *xla1.Shape `protobuf:"bytes,3,opt,name=element_shape,json=elementShape" json:"element_shape,omitempty"`
	// Warning: ColumnIO does not support random-access, so use offset with
	// caution in performance-critical scenarios.
	Offset int64 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	// Maximum number of elements (with shape element_shape) to load.
	Limit int64 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	// If more than one item is requested (via limit > 1), then this request
	// attribute zips together the produced vectors.
	Zip bool `protobuf:"varint,6,opt,name=zip,proto3" json:"zip,omitempty"`
}

func (m *LoadDataRequest) Reset()                    { *m = LoadDataRequest{} }
func (*LoadDataRequest) ProtoMessage()               {}
func (*LoadDataRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{43} }

func (m *LoadDataRequest) GetColumnioTabletPath() string {
	if m != nil {
		return m.ColumnioTabletPath
	}
	return ""
}

func (m *LoadDataRequest) GetColumnioField() string {
	if m != nil {
		return m.ColumnioField
	}
	return ""
}

func (m *LoadDataRequest) GetElementShape() *xla1.Shape {
	if m != nil {
		return m.ElementShape
	}
	return nil
}

func (m *LoadDataRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *LoadDataRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *LoadDataRequest) GetZip() bool {
	if m != nil {
		return m.Zip
	}
	return false
}

type LoadDataResponse struct {
	Data          *xla1.GlobalDataHandle `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	DataShape     *xla1.Shape            `protobuf:"bytes,2,opt,name=data_shape,json=dataShape" json:"data_shape,omitempty"`
	AvailableRows int64                  `protobuf:"varint,3,opt,name=available_rows,json=availableRows,proto3" json:"available_rows,omitempty"`
	RowsLoaded    int64                  `protobuf:"varint,4,opt,name=rows_loaded,json=rowsLoaded,proto3" json:"rows_loaded,omitempty"`
	Nanoseconds   int64                  `protobuf:"varint,5,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
}

func (m *LoadDataResponse) Reset()                    { *m = LoadDataResponse{} }
func (*LoadDataResponse) ProtoMessage()               {}
func (*LoadDataResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{44} }

func (m *LoadDataResponse) GetData() *xla1.GlobalDataHandle {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LoadDataResponse) GetDataShape() *xla1.Shape {
	if m != nil {
		return m.DataShape
	}
	return nil
}

func (m *LoadDataResponse) GetAvailableRows() int64 {
	if m != nil {
		return m.AvailableRows
	}
	return 0
}

func (m *LoadDataResponse) GetRowsLoaded() int64 {
	if m != nil {
		return m.RowsLoaded
	}
	return 0
}

func (m *LoadDataResponse) GetNanoseconds() int64 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

type SpecializeRequest struct {
	Computation *xla1.ComputationHandle  `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
	Arguments   []*xla1.GlobalDataHandle `protobuf:"bytes,2,rep,name=arguments" json:"arguments,omitempty"`
}

func (m *SpecializeRequest) Reset()                    { *m = SpecializeRequest{} }
func (*SpecializeRequest) ProtoMessage()               {}
func (*SpecializeRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{45} }

func (m *SpecializeRequest) GetComputation() *xla1.ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

func (m *SpecializeRequest) GetArguments() []*xla1.GlobalDataHandle {
	if m != nil {
		return m.Arguments
	}
	return nil
}

type SpecializeResponse struct {
}

func (m *SpecializeResponse) Reset()                    { *m = SpecializeResponse{} }
func (*SpecializeResponse) ProtoMessage()               {}
func (*SpecializeResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{46} }

type GetShapeRequest struct {
	Data *xla1.GlobalDataHandle `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *GetShapeRequest) Reset()                    { *m = GetShapeRequest{} }
func (*GetShapeRequest) ProtoMessage()               {}
func (*GetShapeRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{47} }

func (m *GetShapeRequest) GetData() *xla1.GlobalDataHandle {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetShapeResponse struct {
	Shape *xla1.Shape `protobuf:"bytes,1,opt,name=shape" json:"shape,omitempty"`
}

func (m *GetShapeResponse) Reset()                    { *m = GetShapeResponse{} }
func (*GetShapeResponse) ProtoMessage()               {}
func (*GetShapeResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{48} }

func (m *GetShapeResponse) GetShape() *xla1.Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

type GetComputationShapeRequest struct {
	Computation *xla1.ComputationHandle `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
}

func (m *GetComputationShapeRequest) Reset()                    { *m = GetComputationShapeRequest{} }
func (*GetComputationShapeRequest) ProtoMessage()               {}
func (*GetComputationShapeRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{49} }

func (m *GetComputationShapeRequest) GetComputation() *xla1.ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

type GetComputationShapeResponse struct {
	ProgramShape *xla1.ProgramShape `protobuf:"bytes,1,opt,name=program_shape,json=programShape" json:"program_shape,omitempty"`
}

func (m *GetComputationShapeResponse) Reset()                    { *m = GetComputationShapeResponse{} }
func (*GetComputationShapeResponse) ProtoMessage()               {}
func (*GetComputationShapeResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{50} }

func (m *GetComputationShapeResponse) GetProgramShape() *xla1.ProgramShape {
	if m != nil {
		return m.ProgramShape
	}
	return nil
}

type UnpackRequest struct {
	Data *xla1.GlobalDataHandle `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *UnpackRequest) Reset()                    { *m = UnpackRequest{} }
func (*UnpackRequest) ProtoMessage()               {}
func (*UnpackRequest) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{51} }

func (m *UnpackRequest) GetData() *xla1.GlobalDataHandle {
	if m != nil {
		return m.Data
	}
	return nil
}

type UnpackResponse struct {
	TiedData []*xla1.GlobalDataHandle `protobuf:"bytes,1,rep,name=tied_data,json=tiedData" json:"tied_data,omitempty"`
}

func (m *UnpackResponse) Reset()                    { *m = UnpackResponse{} }
func (*UnpackResponse) ProtoMessage()               {}
func (*UnpackResponse) Descriptor() ([]byte, []int) { return fileDescriptorXla, []int{52} }

func (m *UnpackResponse) GetTiedData() []*xla1.GlobalDataHandle {
	if m != nil {
		return m.TiedData
	}
	return nil
}

func init() {
	proto.RegisterType((*HloReducePrecisionOptions)(nil), "xla.HloReducePrecisionOptions")
	proto.RegisterType((*DebugOptions)(nil), "xla.DebugOptions")
	proto.RegisterType((*ExecutionOptions)(nil), "xla.ExecutionOptions")
	proto.RegisterType((*SnapshotComputationRequest)(nil), "xla.SnapshotComputationRequest")
	proto.RegisterType((*SnapshotComputationResponse)(nil), "xla.SnapshotComputationResponse")
	proto.RegisterType((*LoadComputationSnapshotRequest)(nil), "xla.LoadComputationSnapshotRequest")
	proto.RegisterType((*LoadComputationSnapshotResponse)(nil), "xla.LoadComputationSnapshotResponse")
	proto.RegisterType((*GetDeviceHandlesRequest)(nil), "xla.GetDeviceHandlesRequest")
	proto.RegisterType((*GetDeviceHandlesResponse)(nil), "xla.GetDeviceHandlesResponse")
	proto.RegisterType((*TransferToClientRequest)(nil), "xla.TransferToClientRequest")
	proto.RegisterType((*TransferToClientResponse)(nil), "xla.TransferToClientResponse")
	proto.RegisterType((*TransferToServerRequest)(nil), "xla.TransferToServerRequest")
	proto.RegisterType((*TransferToServerResponse)(nil), "xla.TransferToServerResponse")
	proto.RegisterType((*TransferToInfeedRequest)(nil), "xla.TransferToInfeedRequest")
	proto.RegisterType((*TransferToInfeedResponse)(nil), "xla.TransferToInfeedResponse")
	proto.RegisterType((*TransferFromOutfeedRequest)(nil), "xla.TransferFromOutfeedRequest")
	proto.RegisterType((*TransferFromOutfeedResponse)(nil), "xla.TransferFromOutfeedResponse")
	proto.RegisterType((*ResetDeviceRequest)(nil), "xla.ResetDeviceRequest")
	proto.RegisterType((*ResetDeviceResponse)(nil), "xla.ResetDeviceResponse")
	proto.RegisterType((*ComputationStatsRequest)(nil), "xla.ComputationStatsRequest")
	proto.RegisterType((*ComputationStatsResponse)(nil), "xla.ComputationStatsResponse")
	proto.RegisterType((*ComputationRequest)(nil), "xla.ComputationRequest")
	proto.RegisterType((*ComputationResponse)(nil), "xla.ComputationResponse")
	proto.RegisterType((*CreateChannelHandleRequest)(nil), "xla.CreateChannelHandleRequest")
	proto.RegisterType((*CreateChannelHandleResponse)(nil), "xla.CreateChannelHandleResponse")
	proto.RegisterType((*UnregisterRequest)(nil), "xla.UnregisterRequest")
	proto.RegisterType((*UnregisterResponse)(nil), "xla.UnregisterResponse")
	proto.RegisterType((*SetReturnValueRequest)(nil), "xla.SetReturnValueRequest")
	proto.RegisterType((*SetReturnValueResponse)(nil), "xla.SetReturnValueResponse")
	proto.RegisterType((*ExecuteRequest)(nil), "xla.ExecuteRequest")
	proto.RegisterType((*ExecuteParallelRequest)(nil), "xla.ExecuteParallelRequest")
	proto.RegisterType((*ExecuteResponse)(nil), "xla.ExecuteResponse")
	proto.RegisterType((*ExecuteParallelResponse)(nil), "xla.ExecuteParallelResponse")
	proto.RegisterType((*ExecuteAsyncRequest)(nil), "xla.ExecuteAsyncRequest")
	proto.RegisterType((*ExecuteAsyncResponse)(nil), "xla.ExecuteAsyncResponse")
	proto.RegisterType((*WaitForExecutionRequest)(nil), "xla.WaitForExecutionRequest")
	proto.RegisterType((*WaitForExecutionResponse)(nil), "xla.WaitForExecutionResponse")
	proto.RegisterType((*IsConstantRequest)(nil), "xla.IsConstantRequest")
	proto.RegisterType((*IsConstantResponse)(nil), "xla.IsConstantResponse")
	proto.RegisterType((*ComputeConstantRequest)(nil), "xla.ComputeConstantRequest")
	proto.RegisterType((*ComputeConstantResponse)(nil), "xla.ComputeConstantResponse")
	proto.RegisterType((*DeconstructTupleRequest)(nil), "xla.DeconstructTupleRequest")
	proto.RegisterType((*DeconstructTupleResponse)(nil), "xla.DeconstructTupleResponse")
	proto.RegisterType((*LoadDataRequest)(nil), "xla.LoadDataRequest")
	proto.RegisterType((*LoadDataResponse)(nil), "xla.LoadDataResponse")
	proto.RegisterType((*SpecializeRequest)(nil), "xla.SpecializeRequest")
	proto.RegisterType((*SpecializeResponse)(nil), "xla.SpecializeResponse")
	proto.RegisterType((*GetShapeRequest)(nil), "xla.GetShapeRequest")
	proto.RegisterType((*GetShapeResponse)(nil), "xla.GetShapeResponse")
	proto.RegisterType((*GetComputationShapeRequest)(nil), "xla.GetComputationShapeRequest")
	proto.RegisterType((*GetComputationShapeResponse)(nil), "xla.GetComputationShapeResponse")
	proto.RegisterType((*UnpackRequest)(nil), "xla.UnpackRequest")
	proto.RegisterType((*UnpackResponse)(nil), "xla.UnpackResponse")
	proto.RegisterEnum("xla.HloReducePrecisionOptions_PassTiming", HloReducePrecisionOptions_PassTiming_name, HloReducePrecisionOptions_PassTiming_value)
}
func (x HloReducePrecisionOptions_PassTiming) String() string {
	s, ok := HloReducePrecisionOptions_PassTiming_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *HloReducePrecisionOptions) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HloReducePrecisionOptions)
	if !ok {
		that2, ok := that.(HloReducePrecisionOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PassTiming != that1.PassTiming {
		return false
	}
	if this.ExponentBits != that1.ExponentBits {
		return false
	}
	if this.MantissaBits != that1.MantissaBits {
		return false
	}
	if len(this.OpcodesToSuffix) != len(that1.OpcodesToSuffix) {
		return false
	}
	for i := range this.OpcodesToSuffix {
		if this.OpcodesToSuffix[i] != that1.OpcodesToSuffix[i] {
			return false
		}
	}
	return true
}
func (this *DebugOptions) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DebugOptions)
	if !ok {
		that2, ok := that.(DebugOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.XlaGenerateHloGraph != that1.XlaGenerateHloGraph {
		return false
	}
	if this.XlaHloGraphAddresses != that1.XlaHloGraphAddresses {
		return false
	}
	if this.XlaHloGraphPath != that1.XlaHloGraphPath {
		return false
	}
	if this.XlaHloDumpAsGraphdef != that1.XlaHloDumpAsGraphdef {
		return false
	}
	if this.XlaLogHloText != that1.XlaLogHloText {
		return false
	}
	if this.XlaGenerateHloTextTo != that1.XlaGenerateHloTextTo {
		return false
	}
	if this.XlaDumpDebugJsonTo != that1.XlaDumpDebugJsonTo {
		return false
	}
	if this.XlaHloProfile != that1.XlaHloProfile {
		return false
	}
	if this.XlaDumpComputationsTo != that1.XlaDumpComputationsTo {
		return false
	}
	if this.XlaDumpExecutionsTo != that1.XlaDumpExecutionsTo {
		return false
	}
	if len(this.XlaDisableHloPasses) != len(that1.XlaDisableHloPasses) {
		return false
	}
	for i := range this.XlaDisableHloPasses {
		if this.XlaDisableHloPasses[i] != that1.XlaDisableHloPasses[i] {
			return false
		}
	}
	if this.XlaBackendOptimizationLevel != that1.XlaBackendOptimizationLevel {
		return false
	}
	if this.XlaEnableFastMath != that1.XlaEnableFastMath {
		return false
	}
	if this.XlaEmbedIrInExecutable != that1.XlaEmbedIrInExecutable {
		return false
	}
	if this.XlaDumpIrTo != that1.XlaDumpIrTo {
		return false
	}
	if this.XlaEliminateHloImplicitBroadcast != that1.XlaEliminateHloImplicitBroadcast {
		return false
	}
	if this.XlaCpuMultiThreadEigen != that1.XlaCpuMultiThreadEigen {
		return false
	}
	if this.XlaGpuCudaDataDir != that1.XlaGpuCudaDataDir {
		return false
	}
	if this.XlaGpuFtz != that1.XlaGpuFtz {
		return false
	}
	if this.XlaGpuDisableMultiStreaming != that1.XlaGpuDisableMultiStreaming {
		return false
	}
	if this.XlaLlvmEnableAliasScopeMetadata != that1.XlaLlvmEnableAliasScopeMetadata {
		return false
	}
	if this.XlaLlvmEnableNoaliasMetadata != that1.XlaLlvmEnableNoaliasMetadata {
		return false
	}
	if this.XlaLlvmEnableInvariantLoadMetadata != that1.XlaLlvmEnableInvariantLoadMetadata {
		return false
	}
	if len(this.HloReducePrecisionOptions) != len(that1.HloReducePrecisionOptions) {
		return false
	}
	for i := range this.HloReducePrecisionOptions {
		if !this.HloReducePrecisionOptions[i].Equal(that1.HloReducePrecisionOptions[i]) {
			return false
		}
	}
	if this.XlaTestAllOutputLayouts != that1.XlaTestAllOutputLayouts {
		return false
	}
	if this.XlaTestAllInputLayouts != that1.XlaTestAllInputLayouts {
		return false
	}
	if len(this.XlaBackendExtraOptions) != len(that1.XlaBackendExtraOptions) {
		return false
	}
	for i := range this.XlaBackendExtraOptions {
		if this.XlaBackendExtraOptions[i] != that1.XlaBackendExtraOptions[i] {
			return false
		}
	}
	return true
}
func (this *ExecutionOptions) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExecutionOptions)
	if !ok {
		that2, ok := that.(ExecutionOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ShapeWithOutputLayout.Equal(that1.ShapeWithOutputLayout) {
		return false
	}
	if this.Seed != that1.Seed {
		return false
	}
	if !this.DebugOptions.Equal(that1.DebugOptions) {
		return false
	}
	return true
}
func (this *SnapshotComputationRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SnapshotComputationRequest)
	if !ok {
		that2, ok := that.(SnapshotComputationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Computation.Equal(that1.Computation) {
		return false
	}
	return true
}
func (this *SnapshotComputationResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SnapshotComputationResponse)
	if !ok {
		that2, ok := that.(SnapshotComputationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Module.Equal(that1.Module) {
		return false
	}
	return true
}
func (this *LoadComputationSnapshotRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LoadComputationSnapshotRequest)
	if !ok {
		that2, ok := that.(LoadComputationSnapshotRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Module.Equal(that1.Module) {
		return false
	}
	return true
}
func (this *LoadComputationSnapshotResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LoadComputationSnapshotResponse)
	if !ok {
		that2, ok := that.(LoadComputationSnapshotResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Computation.Equal(that1.Computation) {
		return false
	}
	return true
}
func (this *GetDeviceHandlesRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetDeviceHandlesRequest)
	if !ok {
		that2, ok := that.(GetDeviceHandlesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeviceCount != that1.DeviceCount {
		return false
	}
	return true
}
func (this *GetDeviceHandlesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetDeviceHandlesResponse)
	if !ok {
		that2, ok := that.(GetDeviceHandlesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.DeviceHandles) != len(that1.DeviceHandles) {
		return false
	}
	for i := range this.DeviceHandles {
		if !this.DeviceHandles[i].Equal(that1.DeviceHandles[i]) {
			return false
		}
	}
	return true
}
func (this *TransferToClientRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TransferToClientRequest)
	if !ok {
		that2, ok := that.(TransferToClientRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.ShapeWithLayout.Equal(that1.ShapeWithLayout) {
		return false
	}
	return true
}
func (this *TransferToClientResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TransferToClientResponse)
	if !ok {
		that2, ok := that.(TransferToClientResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Literal.Equal(that1.Literal) {
		return false
	}
	return true
}
func (this *TransferToServerRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TransferToServerRequest)
	if !ok {
		that2, ok := that.(TransferToServerRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Literal.Equal(that1.Literal) {
		return false
	}
	if !this.DeviceHandle.Equal(that1.DeviceHandle) {
		return false
	}
	return true
}
func (this *TransferToServerResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TransferToServerResponse)
	if !ok {
		that2, ok := that.(TransferToServerResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *TransferToInfeedRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TransferToInfeedRequest)
	if !ok {
		that2, ok := that.(TransferToInfeedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Literal.Equal(that1.Literal) {
		return false
	}
	if this.ReplicaId != that1.ReplicaId {
		return false
	}
	if !this.DeviceHandle.Equal(that1.DeviceHandle) {
		return false
	}
	return true
}
func (this *TransferToInfeedResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TransferToInfeedResponse)
	if !ok {
		that2, ok := that.(TransferToInfeedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *TransferFromOutfeedRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TransferFromOutfeedRequest)
	if !ok {
		that2, ok := that.(TransferFromOutfeedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ShapeWithLayout.Equal(that1.ShapeWithLayout) {
		return false
	}
	if this.ReplicaId != that1.ReplicaId {
		return false
	}
	if !this.DeviceHandle.Equal(that1.DeviceHandle) {
		return false
	}
	return true
}
func (this *TransferFromOutfeedResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TransferFromOutfeedResponse)
	if !ok {
		that2, ok := that.(TransferFromOutfeedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Literal.Equal(that1.Literal) {
		return false
	}
	return true
}
func (this *ResetDeviceRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResetDeviceRequest)
	if !ok {
		that2, ok := that.(ResetDeviceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DeviceHandle.Equal(that1.DeviceHandle) {
		return false
	}
	return true
}
func (this *ResetDeviceResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResetDeviceResponse)
	if !ok {
		that2, ok := that.(ResetDeviceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ComputationStatsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ComputationStatsRequest)
	if !ok {
		that2, ok := that.(ComputationStatsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Computation.Equal(that1.Computation) {
		return false
	}
	if !this.DebugOptions.Equal(that1.DebugOptions) {
		return false
	}
	return true
}
func (this *ComputationStatsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ComputationStatsResponse)
	if !ok {
		that2, ok := that.(ComputationStatsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Stats.Equal(that1.Stats) {
		return false
	}
	return true
}
func (this *ComputationRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ComputationRequest)
	if !ok {
		that2, ok := that.(ComputationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ComputationResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ComputationResponse)
	if !ok {
		that2, ok := that.(ComputationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Computation.Equal(that1.Computation) {
		return false
	}
	return true
}
func (this *CreateChannelHandleRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateChannelHandleRequest)
	if !ok {
		that2, ok := that.(CreateChannelHandleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *CreateChannelHandleResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateChannelHandleResponse)
	if !ok {
		that2, ok := that.(CreateChannelHandleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Channel.Equal(that1.Channel) {
		return false
	}
	return true
}
func (this *UnregisterRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UnregisterRequest)
	if !ok {
		that2, ok := that.(UnregisterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *UnregisterResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UnregisterResponse)
	if !ok {
		that2, ok := that.(UnregisterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *SetReturnValueRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SetReturnValueRequest)
	if !ok {
		that2, ok := that.(SetReturnValueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Computation.Equal(that1.Computation) {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	return true
}
func (this *SetReturnValueResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SetReturnValueResponse)
	if !ok {
		that2, ok := that.(SetReturnValueResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ExecuteRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExecuteRequest)
	if !ok {
		that2, ok := that.(ExecuteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Computation.Equal(that1.Computation) {
		return false
	}
	if len(this.Arguments) != len(that1.Arguments) {
		return false
	}
	for i := range this.Arguments {
		if !this.Arguments[i].Equal(that1.Arguments[i]) {
			return false
		}
	}
	if !this.DeviceHandle.Equal(that1.DeviceHandle) {
		return false
	}
	if !this.ExecutionOptions.Equal(that1.ExecutionOptions) {
		return false
	}
	return true
}
func (this *ExecuteParallelRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExecuteParallelRequest)
	if !ok {
		that2, ok := that.(ExecuteParallelRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Requests) != len(that1.Requests) {
		return false
	}
	for i := range this.Requests {
		if !this.Requests[i].Equal(that1.Requests[i]) {
			return false
		}
	}
	return true
}
func (this *ExecuteResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExecuteResponse)
	if !ok {
		that2, ok := that.(ExecuteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	if !this.Profile.Equal(that1.Profile) {
		return false
	}
	return true
}
func (this *ExecuteParallelResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExecuteParallelResponse)
	if !ok {
		that2, ok := that.(ExecuteParallelResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Responses) != len(that1.Responses) {
		return false
	}
	for i := range this.Responses {
		if !this.Responses[i].Equal(that1.Responses[i]) {
			return false
		}
	}
	return true
}
func (this *ExecuteAsyncRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExecuteAsyncRequest)
	if !ok {
		that2, ok := that.(ExecuteAsyncRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Computation.Equal(that1.Computation) {
		return false
	}
	if len(this.Arguments) != len(that1.Arguments) {
		return false
	}
	for i := range this.Arguments {
		if !this.Arguments[i].Equal(that1.Arguments[i]) {
			return false
		}
	}
	if !this.ExecutionOptions.Equal(that1.ExecutionOptions) {
		return false
	}
	return true
}
func (this *ExecuteAsyncResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExecuteAsyncResponse)
	if !ok {
		that2, ok := that.(ExecuteAsyncResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	return true
}
func (this *WaitForExecutionRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*WaitForExecutionRequest)
	if !ok {
		that2, ok := that.(WaitForExecutionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	return true
}
func (this *WaitForExecutionResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*WaitForExecutionResponse)
	if !ok {
		that2, ok := that.(WaitForExecutionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	if !this.Profile.Equal(that1.Profile) {
		return false
	}
	return true
}
func (this *IsConstantRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*IsConstantRequest)
	if !ok {
		that2, ok := that.(IsConstantRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Computation.Equal(that1.Computation) {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	return true
}
func (this *IsConstantResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*IsConstantResponse)
	if !ok {
		that2, ok := that.(IsConstantResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.IsConstant != that1.IsConstant {
		return false
	}
	return true
}
func (this *ComputeConstantRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ComputeConstantRequest)
	if !ok {
		that2, ok := that.(ComputeConstantRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Computation.Equal(that1.Computation) {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	if !this.OutputLayout.Equal(that1.OutputLayout) {
		return false
	}
	return true
}
func (this *ComputeConstantResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ComputeConstantResponse)
	if !ok {
		that2, ok := that.(ComputeConstantResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	return true
}
func (this *DeconstructTupleRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeconstructTupleRequest)
	if !ok {
		that2, ok := that.(DeconstructTupleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.TupleHandle.Equal(that1.TupleHandle) {
		return false
	}
	return true
}
func (this *DeconstructTupleResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeconstructTupleResponse)
	if !ok {
		that2, ok := that.(DeconstructTupleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.ElementHandles) != len(that1.ElementHandles) {
		return false
	}
	for i := range this.ElementHandles {
		if !this.ElementHandles[i].Equal(that1.ElementHandles[i]) {
			return false
		}
	}
	return true
}
func (this *LoadDataRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LoadDataRequest)
	if !ok {
		that2, ok := that.(LoadDataRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ColumnioTabletPath != that1.ColumnioTabletPath {
		return false
	}
	if this.ColumnioField != that1.ColumnioField {
		return false
	}
	if !this.ElementShape.Equal(that1.ElementShape) {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Zip != that1.Zip {
		return false
	}
	return true
}
func (this *LoadDataResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LoadDataResponse)
	if !ok {
		that2, ok := that.(LoadDataResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.DataShape.Equal(that1.DataShape) {
		return false
	}
	if this.AvailableRows != that1.AvailableRows {
		return false
	}
	if this.RowsLoaded != that1.RowsLoaded {
		return false
	}
	if this.Nanoseconds != that1.Nanoseconds {
		return false
	}
	return true
}
func (this *SpecializeRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SpecializeRequest)
	if !ok {
		that2, ok := that.(SpecializeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Computation.Equal(that1.Computation) {
		return false
	}
	if len(this.Arguments) != len(that1.Arguments) {
		return false
	}
	for i := range this.Arguments {
		if !this.Arguments[i].Equal(that1.Arguments[i]) {
			return false
		}
	}
	return true
}
func (this *SpecializeResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SpecializeResponse)
	if !ok {
		that2, ok := that.(SpecializeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetShapeRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetShapeRequest)
	if !ok {
		that2, ok := that.(GetShapeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *GetShapeResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetShapeResponse)
	if !ok {
		that2, ok := that.(GetShapeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Shape.Equal(that1.Shape) {
		return false
	}
	return true
}
func (this *GetComputationShapeRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetComputationShapeRequest)
	if !ok {
		that2, ok := that.(GetComputationShapeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Computation.Equal(that1.Computation) {
		return false
	}
	return true
}
func (this *GetComputationShapeResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetComputationShapeResponse)
	if !ok {
		that2, ok := that.(GetComputationShapeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ProgramShape.Equal(that1.ProgramShape) {
		return false
	}
	return true
}
func (this *UnpackRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UnpackRequest)
	if !ok {
		that2, ok := that.(UnpackRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *UnpackResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UnpackResponse)
	if !ok {
		that2, ok := that.(UnpackResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.TiedData) != len(that1.TiedData) {
		return false
	}
	for i := range this.TiedData {
		if !this.TiedData[i].Equal(that1.TiedData[i]) {
			return false
		}
	}
	return true
}
func (this *HloReducePrecisionOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&xla.HloReducePrecisionOptions{")
	s = append(s, "PassTiming: "+fmt.Sprintf("%#v", this.PassTiming)+",\n")
	s = append(s, "ExponentBits: "+fmt.Sprintf("%#v", this.ExponentBits)+",\n")
	s = append(s, "MantissaBits: "+fmt.Sprintf("%#v", this.MantissaBits)+",\n")
	s = append(s, "OpcodesToSuffix: "+fmt.Sprintf("%#v", this.OpcodesToSuffix)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DebugOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 31)
	s = append(s, "&xla.DebugOptions{")
	s = append(s, "XlaGenerateHloGraph: "+fmt.Sprintf("%#v", this.XlaGenerateHloGraph)+",\n")
	s = append(s, "XlaHloGraphAddresses: "+fmt.Sprintf("%#v", this.XlaHloGraphAddresses)+",\n")
	s = append(s, "XlaHloGraphPath: "+fmt.Sprintf("%#v", this.XlaHloGraphPath)+",\n")
	s = append(s, "XlaHloDumpAsGraphdef: "+fmt.Sprintf("%#v", this.XlaHloDumpAsGraphdef)+",\n")
	s = append(s, "XlaLogHloText: "+fmt.Sprintf("%#v", this.XlaLogHloText)+",\n")
	s = append(s, "XlaGenerateHloTextTo: "+fmt.Sprintf("%#v", this.XlaGenerateHloTextTo)+",\n")
	s = append(s, "XlaDumpDebugJsonTo: "+fmt.Sprintf("%#v", this.XlaDumpDebugJsonTo)+",\n")
	s = append(s, "XlaHloProfile: "+fmt.Sprintf("%#v", this.XlaHloProfile)+",\n")
	s = append(s, "XlaDumpComputationsTo: "+fmt.Sprintf("%#v", this.XlaDumpComputationsTo)+",\n")
	s = append(s, "XlaDumpExecutionsTo: "+fmt.Sprintf("%#v", this.XlaDumpExecutionsTo)+",\n")
	s = append(s, "XlaDisableHloPasses: "+fmt.Sprintf("%#v", this.XlaDisableHloPasses)+",\n")
	s = append(s, "XlaBackendOptimizationLevel: "+fmt.Sprintf("%#v", this.XlaBackendOptimizationLevel)+",\n")
	s = append(s, "XlaEnableFastMath: "+fmt.Sprintf("%#v", this.XlaEnableFastMath)+",\n")
	s = append(s, "XlaEmbedIrInExecutable: "+fmt.Sprintf("%#v", this.XlaEmbedIrInExecutable)+",\n")
	s = append(s, "XlaDumpIrTo: "+fmt.Sprintf("%#v", this.XlaDumpIrTo)+",\n")
	s = append(s, "XlaEliminateHloImplicitBroadcast: "+fmt.Sprintf("%#v", this.XlaEliminateHloImplicitBroadcast)+",\n")
	s = append(s, "XlaCpuMultiThreadEigen: "+fmt.Sprintf("%#v", this.XlaCpuMultiThreadEigen)+",\n")
	s = append(s, "XlaGpuCudaDataDir: "+fmt.Sprintf("%#v", this.XlaGpuCudaDataDir)+",\n")
	s = append(s, "XlaGpuFtz: "+fmt.Sprintf("%#v", this.XlaGpuFtz)+",\n")
	s = append(s, "XlaGpuDisableMultiStreaming: "+fmt.Sprintf("%#v", this.XlaGpuDisableMultiStreaming)+",\n")
	s = append(s, "XlaLlvmEnableAliasScopeMetadata: "+fmt.Sprintf("%#v", this.XlaLlvmEnableAliasScopeMetadata)+",\n")
	s = append(s, "XlaLlvmEnableNoaliasMetadata: "+fmt.Sprintf("%#v", this.XlaLlvmEnableNoaliasMetadata)+",\n")
	s = append(s, "XlaLlvmEnableInvariantLoadMetadata: "+fmt.Sprintf("%#v", this.XlaLlvmEnableInvariantLoadMetadata)+",\n")
	if this.HloReducePrecisionOptions != nil {
		s = append(s, "HloReducePrecisionOptions: "+fmt.Sprintf("%#v", this.HloReducePrecisionOptions)+",\n")
	}
	s = append(s, "XlaTestAllOutputLayouts: "+fmt.Sprintf("%#v", this.XlaTestAllOutputLayouts)+",\n")
	s = append(s, "XlaTestAllInputLayouts: "+fmt.Sprintf("%#v", this.XlaTestAllInputLayouts)+",\n")
	keysForXlaBackendExtraOptions := make([]string, 0, len(this.XlaBackendExtraOptions))
	for k, _ := range this.XlaBackendExtraOptions {
		keysForXlaBackendExtraOptions = append(keysForXlaBackendExtraOptions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForXlaBackendExtraOptions)
	mapStringForXlaBackendExtraOptions := "map[string]string{"
	for _, k := range keysForXlaBackendExtraOptions {
		mapStringForXlaBackendExtraOptions += fmt.Sprintf("%#v: %#v,", k, this.XlaBackendExtraOptions[k])
	}
	mapStringForXlaBackendExtraOptions += "}"
	if this.XlaBackendExtraOptions != nil {
		s = append(s, "XlaBackendExtraOptions: "+mapStringForXlaBackendExtraOptions+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecutionOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.ExecutionOptions{")
	if this.ShapeWithOutputLayout != nil {
		s = append(s, "ShapeWithOutputLayout: "+fmt.Sprintf("%#v", this.ShapeWithOutputLayout)+",\n")
	}
	s = append(s, "Seed: "+fmt.Sprintf("%#v", this.Seed)+",\n")
	if this.DebugOptions != nil {
		s = append(s, "DebugOptions: "+fmt.Sprintf("%#v", this.DebugOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SnapshotComputationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.SnapshotComputationRequest{")
	if this.Computation != nil {
		s = append(s, "Computation: "+fmt.Sprintf("%#v", this.Computation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SnapshotComputationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.SnapshotComputationResponse{")
	if this.Module != nil {
		s = append(s, "Module: "+fmt.Sprintf("%#v", this.Module)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoadComputationSnapshotRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.LoadComputationSnapshotRequest{")
	if this.Module != nil {
		s = append(s, "Module: "+fmt.Sprintf("%#v", this.Module)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoadComputationSnapshotResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.LoadComputationSnapshotResponse{")
	if this.Computation != nil {
		s = append(s, "Computation: "+fmt.Sprintf("%#v", this.Computation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDeviceHandlesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.GetDeviceHandlesRequest{")
	s = append(s, "DeviceCount: "+fmt.Sprintf("%#v", this.DeviceCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDeviceHandlesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.GetDeviceHandlesResponse{")
	if this.DeviceHandles != nil {
		s = append(s, "DeviceHandles: "+fmt.Sprintf("%#v", this.DeviceHandles)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferToClientRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.TransferToClientRequest{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.ShapeWithLayout != nil {
		s = append(s, "ShapeWithLayout: "+fmt.Sprintf("%#v", this.ShapeWithLayout)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferToClientResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.TransferToClientResponse{")
	if this.Literal != nil {
		s = append(s, "Literal: "+fmt.Sprintf("%#v", this.Literal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferToServerRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.TransferToServerRequest{")
	if this.Literal != nil {
		s = append(s, "Literal: "+fmt.Sprintf("%#v", this.Literal)+",\n")
	}
	if this.DeviceHandle != nil {
		s = append(s, "DeviceHandle: "+fmt.Sprintf("%#v", this.DeviceHandle)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferToServerResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.TransferToServerResponse{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferToInfeedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.TransferToInfeedRequest{")
	if this.Literal != nil {
		s = append(s, "Literal: "+fmt.Sprintf("%#v", this.Literal)+",\n")
	}
	s = append(s, "ReplicaId: "+fmt.Sprintf("%#v", this.ReplicaId)+",\n")
	if this.DeviceHandle != nil {
		s = append(s, "DeviceHandle: "+fmt.Sprintf("%#v", this.DeviceHandle)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferToInfeedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&xla.TransferToInfeedResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferFromOutfeedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.TransferFromOutfeedRequest{")
	if this.ShapeWithLayout != nil {
		s = append(s, "ShapeWithLayout: "+fmt.Sprintf("%#v", this.ShapeWithLayout)+",\n")
	}
	s = append(s, "ReplicaId: "+fmt.Sprintf("%#v", this.ReplicaId)+",\n")
	if this.DeviceHandle != nil {
		s = append(s, "DeviceHandle: "+fmt.Sprintf("%#v", this.DeviceHandle)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferFromOutfeedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.TransferFromOutfeedResponse{")
	if this.Literal != nil {
		s = append(s, "Literal: "+fmt.Sprintf("%#v", this.Literal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResetDeviceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.ResetDeviceRequest{")
	if this.DeviceHandle != nil {
		s = append(s, "DeviceHandle: "+fmt.Sprintf("%#v", this.DeviceHandle)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResetDeviceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&xla.ResetDeviceResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ComputationStatsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.ComputationStatsRequest{")
	if this.Computation != nil {
		s = append(s, "Computation: "+fmt.Sprintf("%#v", this.Computation)+",\n")
	}
	if this.DebugOptions != nil {
		s = append(s, "DebugOptions: "+fmt.Sprintf("%#v", this.DebugOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ComputationStatsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.ComputationStatsResponse{")
	if this.Stats != nil {
		s = append(s, "Stats: "+fmt.Sprintf("%#v", this.Stats)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ComputationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.ComputationRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ComputationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.ComputationResponse{")
	if this.Computation != nil {
		s = append(s, "Computation: "+fmt.Sprintf("%#v", this.Computation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateChannelHandleRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&xla.CreateChannelHandleRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateChannelHandleResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.CreateChannelHandleResponse{")
	if this.Channel != nil {
		s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnregisterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.UnregisterRequest{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnregisterResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&xla.UnregisterResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetReturnValueRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.SetReturnValueRequest{")
	if this.Computation != nil {
		s = append(s, "Computation: "+fmt.Sprintf("%#v", this.Computation)+",\n")
	}
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetReturnValueResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&xla.SetReturnValueResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&xla.ExecuteRequest{")
	if this.Computation != nil {
		s = append(s, "Computation: "+fmt.Sprintf("%#v", this.Computation)+",\n")
	}
	if this.Arguments != nil {
		s = append(s, "Arguments: "+fmt.Sprintf("%#v", this.Arguments)+",\n")
	}
	if this.DeviceHandle != nil {
		s = append(s, "DeviceHandle: "+fmt.Sprintf("%#v", this.DeviceHandle)+",\n")
	}
	if this.ExecutionOptions != nil {
		s = append(s, "ExecutionOptions: "+fmt.Sprintf("%#v", this.ExecutionOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteParallelRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.ExecuteParallelRequest{")
	if this.Requests != nil {
		s = append(s, "Requests: "+fmt.Sprintf("%#v", this.Requests)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.ExecuteResponse{")
	if this.Output != nil {
		s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	}
	if this.Profile != nil {
		s = append(s, "Profile: "+fmt.Sprintf("%#v", this.Profile)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteParallelResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.ExecuteParallelResponse{")
	if this.Responses != nil {
		s = append(s, "Responses: "+fmt.Sprintf("%#v", this.Responses)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteAsyncRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.ExecuteAsyncRequest{")
	if this.Computation != nil {
		s = append(s, "Computation: "+fmt.Sprintf("%#v", this.Computation)+",\n")
	}
	if this.Arguments != nil {
		s = append(s, "Arguments: "+fmt.Sprintf("%#v", this.Arguments)+",\n")
	}
	if this.ExecutionOptions != nil {
		s = append(s, "ExecutionOptions: "+fmt.Sprintf("%#v", this.ExecutionOptions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecuteAsyncResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.ExecuteAsyncResponse{")
	if this.Execution != nil {
		s = append(s, "Execution: "+fmt.Sprintf("%#v", this.Execution)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WaitForExecutionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.WaitForExecutionRequest{")
	if this.Execution != nil {
		s = append(s, "Execution: "+fmt.Sprintf("%#v", this.Execution)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WaitForExecutionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.WaitForExecutionResponse{")
	if this.Output != nil {
		s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	}
	if this.Profile != nil {
		s = append(s, "Profile: "+fmt.Sprintf("%#v", this.Profile)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IsConstantRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.IsConstantRequest{")
	if this.Computation != nil {
		s = append(s, "Computation: "+fmt.Sprintf("%#v", this.Computation)+",\n")
	}
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IsConstantResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.IsConstantResponse{")
	s = append(s, "IsConstant: "+fmt.Sprintf("%#v", this.IsConstant)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ComputeConstantRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.ComputeConstantRequest{")
	if this.Computation != nil {
		s = append(s, "Computation: "+fmt.Sprintf("%#v", this.Computation)+",\n")
	}
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	if this.OutputLayout != nil {
		s = append(s, "OutputLayout: "+fmt.Sprintf("%#v", this.OutputLayout)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ComputeConstantResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.ComputeConstantResponse{")
	if this.Output != nil {
		s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeconstructTupleRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.DeconstructTupleRequest{")
	if this.TupleHandle != nil {
		s = append(s, "TupleHandle: "+fmt.Sprintf("%#v", this.TupleHandle)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeconstructTupleResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.DeconstructTupleResponse{")
	if this.ElementHandles != nil {
		s = append(s, "ElementHandles: "+fmt.Sprintf("%#v", this.ElementHandles)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoadDataRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&xla.LoadDataRequest{")
	s = append(s, "ColumnioTabletPath: "+fmt.Sprintf("%#v", this.ColumnioTabletPath)+",\n")
	s = append(s, "ColumnioField: "+fmt.Sprintf("%#v", this.ColumnioField)+",\n")
	if this.ElementShape != nil {
		s = append(s, "ElementShape: "+fmt.Sprintf("%#v", this.ElementShape)+",\n")
	}
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Zip: "+fmt.Sprintf("%#v", this.Zip)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoadDataResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&xla.LoadDataResponse{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.DataShape != nil {
		s = append(s, "DataShape: "+fmt.Sprintf("%#v", this.DataShape)+",\n")
	}
	s = append(s, "AvailableRows: "+fmt.Sprintf("%#v", this.AvailableRows)+",\n")
	s = append(s, "RowsLoaded: "+fmt.Sprintf("%#v", this.RowsLoaded)+",\n")
	s = append(s, "Nanoseconds: "+fmt.Sprintf("%#v", this.Nanoseconds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpecializeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.SpecializeRequest{")
	if this.Computation != nil {
		s = append(s, "Computation: "+fmt.Sprintf("%#v", this.Computation)+",\n")
	}
	if this.Arguments != nil {
		s = append(s, "Arguments: "+fmt.Sprintf("%#v", this.Arguments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpecializeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&xla.SpecializeResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetShapeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.GetShapeRequest{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetShapeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.GetShapeResponse{")
	if this.Shape != nil {
		s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetComputationShapeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.GetComputationShapeRequest{")
	if this.Computation != nil {
		s = append(s, "Computation: "+fmt.Sprintf("%#v", this.Computation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetComputationShapeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.GetComputationShapeResponse{")
	if this.ProgramShape != nil {
		s = append(s, "ProgramShape: "+fmt.Sprintf("%#v", this.ProgramShape)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnpackRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.UnpackRequest{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnpackResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.UnpackResponse{")
	if this.TiedData != nil {
		s = append(s, "TiedData: "+fmt.Sprintf("%#v", this.TiedData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringXla(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HloReducePrecisionOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HloReducePrecisionOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PassTiming != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.PassTiming))
	}
	if m.ExponentBits != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.ExponentBits))
	}
	if m.MantissaBits != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.MantissaBits))
	}
	if len(m.OpcodesToSuffix) > 0 {
		dAtA2 := make([]byte, len(m.OpcodesToSuffix)*10)
		var j1 int
		for _, num := range m.OpcodesToSuffix {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintXla(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *DebugOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.XlaGenerateHloGraph) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(len(m.XlaGenerateHloGraph)))
		i += copy(dAtA[i:], m.XlaGenerateHloGraph)
	}
	if m.XlaHloGraphAddresses {
		dAtA[i] = 0x10
		i++
		if m.XlaHloGraphAddresses {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.XlaHloGraphPath) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintXla(dAtA, i, uint64(len(m.XlaHloGraphPath)))
		i += copy(dAtA[i:], m.XlaHloGraphPath)
	}
	if m.XlaHloDumpAsGraphdef {
		dAtA[i] = 0x28
		i++
		if m.XlaHloDumpAsGraphdef {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.XlaLogHloText) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintXla(dAtA, i, uint64(len(m.XlaLogHloText)))
		i += copy(dAtA[i:], m.XlaLogHloText)
	}
	if len(m.XlaGenerateHloTextTo) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintXla(dAtA, i, uint64(len(m.XlaGenerateHloTextTo)))
		i += copy(dAtA[i:], m.XlaGenerateHloTextTo)
	}
	if len(m.XlaDumpDebugJsonTo) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintXla(dAtA, i, uint64(len(m.XlaDumpDebugJsonTo)))
		i += copy(dAtA[i:], m.XlaDumpDebugJsonTo)
	}
	if m.XlaHloProfile {
		dAtA[i] = 0x48
		i++
		if m.XlaHloProfile {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.XlaDumpComputationsTo) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintXla(dAtA, i, uint64(len(m.XlaDumpComputationsTo)))
		i += copy(dAtA[i:], m.XlaDumpComputationsTo)
	}
	if len(m.XlaDumpExecutionsTo) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintXla(dAtA, i, uint64(len(m.XlaDumpExecutionsTo)))
		i += copy(dAtA[i:], m.XlaDumpExecutionsTo)
	}
	if len(m.XlaDisableHloPasses) > 0 {
		for _, s := range m.XlaDisableHloPasses {
			dAtA[i] = 0xf2
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XlaBackendOptimizationLevel != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.XlaBackendOptimizationLevel))
	}
	if m.XlaEnableFastMath {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		if m.XlaEnableFastMath {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XlaEmbedIrInExecutable {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		if m.XlaEmbedIrInExecutable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.XlaDumpIrTo) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintXla(dAtA, i, uint64(len(m.XlaDumpIrTo)))
		i += copy(dAtA[i:], m.XlaDumpIrTo)
	}
	if m.XlaEliminateHloImplicitBroadcast {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		if m.XlaEliminateHloImplicitBroadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XlaCpuMultiThreadEigen {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x3
		i++
		if m.XlaCpuMultiThreadEigen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.XlaGpuCudaDataDir) > 0 {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintXla(dAtA, i, uint64(len(m.XlaGpuCudaDataDir)))
		i += copy(dAtA[i:], m.XlaGpuCudaDataDir)
	}
	if m.XlaGpuFtz {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x3
		i++
		if m.XlaGpuFtz {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XlaGpuDisableMultiStreaming {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x3
		i++
		if m.XlaGpuDisableMultiStreaming {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XlaLlvmEnableAliasScopeMetadata {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x4
		i++
		if m.XlaLlvmEnableAliasScopeMetadata {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XlaLlvmEnableNoaliasMetadata {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x4
		i++
		if m.XlaLlvmEnableNoaliasMetadata {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XlaLlvmEnableInvariantLoadMetadata {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x4
		i++
		if m.XlaLlvmEnableInvariantLoadMetadata {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.HloReducePrecisionOptions) > 0 {
		for _, msg := range m.HloReducePrecisionOptions {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x5
			i++
			i = encodeVarintXla(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XlaTestAllOutputLayouts {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x5
		i++
		if m.XlaTestAllOutputLayouts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XlaTestAllInputLayouts {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x5
		i++
		if m.XlaTestAllInputLayouts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.XlaBackendExtraOptions) > 0 {
		for k, _ := range m.XlaBackendExtraOptions {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x1f
			i++
			v := m.XlaBackendExtraOptions[k]
			mapSize := 1 + len(k) + sovXla(uint64(len(k))) + 1 + len(v) + sovXla(uint64(len(v)))
			i = encodeVarintXla(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintXla(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintXla(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *ExecutionOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShapeWithOutputLayout != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.ShapeWithOutputLayout.Size()))
		n3, err := m.ShapeWithOutputLayout.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Seed != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Seed))
	}
	if m.DebugOptions != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.DebugOptions.Size()))
		n4, err := m.DebugOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *SnapshotComputationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotComputationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Computation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Computation.Size()))
		n5, err := m.Computation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *SnapshotComputationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotComputationResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Module != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Module.Size()))
		n6, err := m.Module.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *LoadComputationSnapshotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadComputationSnapshotRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Module != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Module.Size()))
		n7, err := m.Module.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *LoadComputationSnapshotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadComputationSnapshotResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Computation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Computation.Size()))
		n8, err := m.Computation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *GetDeviceHandlesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceHandlesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DeviceCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.DeviceCount))
	}
	return i, nil
}

func (m *GetDeviceHandlesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDeviceHandlesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeviceHandles) > 0 {
		for _, msg := range m.DeviceHandles {
			dAtA[i] = 0xa
			i++
			i = encodeVarintXla(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TransferToClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferToClientRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Data.Size()))
		n9, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.ShapeWithLayout != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.ShapeWithLayout.Size()))
		n10, err := m.ShapeWithLayout.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *TransferToClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferToClientResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Literal != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Literal.Size()))
		n11, err := m.Literal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *TransferToServerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferToServerRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Literal != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Literal.Size()))
		n12, err := m.Literal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.DeviceHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.DeviceHandle.Size()))
		n13, err := m.DeviceHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *TransferToServerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferToServerResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Data.Size()))
		n14, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *TransferToInfeedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferToInfeedRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Literal != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Literal.Size()))
		n15, err := m.Literal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.ReplicaId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.ReplicaId))
	}
	if m.DeviceHandle != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.DeviceHandle.Size()))
		n16, err := m.DeviceHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *TransferToInfeedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferToInfeedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TransferFromOutfeedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferFromOutfeedRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShapeWithLayout != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.ShapeWithLayout.Size()))
		n17, err := m.ShapeWithLayout.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.ReplicaId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.ReplicaId))
	}
	if m.DeviceHandle != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.DeviceHandle.Size()))
		n18, err := m.DeviceHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *TransferFromOutfeedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferFromOutfeedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Literal != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Literal.Size()))
		n19, err := m.Literal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *ResetDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DeviceHandle != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.DeviceHandle.Size()))
		n20, err := m.DeviceHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *ResetDeviceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetDeviceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ComputationStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputationStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Computation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Computation.Size()))
		n21, err := m.Computation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.DebugOptions != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.DebugOptions.Size()))
		n22, err := m.DebugOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *ComputationStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputationStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stats != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Stats.Size()))
		n23, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *ComputationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *ComputationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputationResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Computation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Computation.Size()))
		n24, err := m.Computation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *CreateChannelHandleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChannelHandleRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CreateChannelHandleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChannelHandleResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Channel.Size()))
		n25, err := m.Channel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func (m *UnregisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnregisterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Data.Size()))
		n26, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}

func (m *UnregisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnregisterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SetReturnValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetReturnValueRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Computation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Computation.Size()))
		n27, err := m.Computation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.Operand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Operand.Size()))
		n28, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *SetReturnValueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetReturnValueResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ExecuteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Computation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Computation.Size()))
		n29, err := m.Computation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if len(m.Arguments) > 0 {
		for _, msg := range m.Arguments {
			dAtA[i] = 0x12
			i++
			i = encodeVarintXla(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.DeviceHandle != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.DeviceHandle.Size()))
		n30, err := m.DeviceHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.ExecutionOptions != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.ExecutionOptions.Size()))
		n31, err := m.ExecutionOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *ExecuteParallelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteParallelRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, msg := range m.Requests {
			dAtA[i] = 0xa
			i++
			i = encodeVarintXla(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ExecuteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Output.Size()))
		n32, err := m.Output.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.Profile != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Profile.Size()))
		n33, err := m.Profile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func (m *ExecuteParallelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteParallelResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for _, msg := range m.Responses {
			dAtA[i] = 0xa
			i++
			i = encodeVarintXla(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ExecuteAsyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteAsyncRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Computation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Computation.Size()))
		n34, err := m.Computation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if len(m.Arguments) > 0 {
		for _, msg := range m.Arguments {
			dAtA[i] = 0x12
			i++
			i = encodeVarintXla(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ExecutionOptions != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.ExecutionOptions.Size()))
		n35, err := m.ExecutionOptions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func (m *ExecuteAsyncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteAsyncResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Execution != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Execution.Size()))
		n36, err := m.Execution.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}

func (m *WaitForExecutionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaitForExecutionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Execution != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Execution.Size()))
		n37, err := m.Execution.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}

func (m *WaitForExecutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaitForExecutionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Output.Size()))
		n38, err := m.Output.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if m.Profile != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Profile.Size()))
		n39, err := m.Profile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}

func (m *IsConstantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsConstantRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Computation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Computation.Size()))
		n40, err := m.Computation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if m.Operand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Operand.Size()))
		n41, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}

func (m *IsConstantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsConstantResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsConstant {
		dAtA[i] = 0x8
		i++
		if m.IsConstant {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ComputeConstantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputeConstantRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Computation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Computation.Size()))
		n42, err := m.Computation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	if m.Operand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Operand.Size()))
		n43, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.OutputLayout != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.OutputLayout.Size()))
		n44, err := m.OutputLayout.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}

func (m *ComputeConstantResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputeConstantResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Output.Size()))
		n45, err := m.Output.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}

func (m *DeconstructTupleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeconstructTupleRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TupleHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.TupleHandle.Size()))
		n46, err := m.TupleHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}

func (m *DeconstructTupleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeconstructTupleResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ElementHandles) > 0 {
		for _, msg := range m.ElementHandles {
			dAtA[i] = 0xa
			i++
			i = encodeVarintXla(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LoadDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadDataRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ColumnioTabletPath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(len(m.ColumnioTabletPath)))
		i += copy(dAtA[i:], m.ColumnioTabletPath)
	}
	if len(m.ColumnioField) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXla(dAtA, i, uint64(len(m.ColumnioField)))
		i += copy(dAtA[i:], m.ColumnioField)
	}
	if m.ElementShape != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.ElementShape.Size()))
		n47, err := m.ElementShape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	if m.Offset != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Offset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Limit))
	}
	if m.Zip {
		dAtA[i] = 0x30
		i++
		if m.Zip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *LoadDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadDataResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Data.Size()))
		n48, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	if m.DataShape != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.DataShape.Size()))
		n49, err := m.DataShape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	if m.AvailableRows != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.AvailableRows))
	}
	if m.RowsLoaded != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.RowsLoaded))
	}
	if m.Nanoseconds != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Nanoseconds))
	}
	return i, nil
}

func (m *SpecializeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecializeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Computation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Computation.Size()))
		n50, err := m.Computation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	if len(m.Arguments) > 0 {
		for _, msg := range m.Arguments {
			dAtA[i] = 0x12
			i++
			i = encodeVarintXla(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SpecializeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecializeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetShapeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShapeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Data.Size()))
		n51, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	return i, nil
}

func (m *GetShapeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetShapeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Shape != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Shape.Size()))
		n52, err := m.Shape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	return i, nil
}

func (m *GetComputationShapeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetComputationShapeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Computation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Computation.Size()))
		n53, err := m.Computation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	return i, nil
}

func (m *GetComputationShapeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetComputationShapeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProgramShape != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.ProgramShape.Size()))
		n54, err := m.ProgramShape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	return i, nil
}

func (m *UnpackRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnpackRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXla(dAtA, i, uint64(m.Data.Size()))
		n55, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	return i, nil
}

func (m *UnpackResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnpackResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TiedData) > 0 {
		for _, msg := range m.TiedData {
			dAtA[i] = 0xa
			i++
			i = encodeVarintXla(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Xla(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Xla(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintXla(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HloReducePrecisionOptions) Size() (n int) {
	var l int
	_ = l
	if m.PassTiming != 0 {
		n += 1 + sovXla(uint64(m.PassTiming))
	}
	if m.ExponentBits != 0 {
		n += 1 + sovXla(uint64(m.ExponentBits))
	}
	if m.MantissaBits != 0 {
		n += 1 + sovXla(uint64(m.MantissaBits))
	}
	if len(m.OpcodesToSuffix) > 0 {
		l = 0
		for _, e := range m.OpcodesToSuffix {
			l += sovXla(uint64(e))
		}
		n += 1 + sovXla(uint64(l)) + l
	}
	return n
}

func (m *DebugOptions) Size() (n int) {
	var l int
	_ = l
	l = len(m.XlaGenerateHloGraph)
	if l > 0 {
		n += 1 + l + sovXla(uint64(l))
	}
	if m.XlaHloGraphAddresses {
		n += 2
	}
	l = len(m.XlaHloGraphPath)
	if l > 0 {
		n += 1 + l + sovXla(uint64(l))
	}
	if m.XlaHloDumpAsGraphdef {
		n += 2
	}
	l = len(m.XlaLogHloText)
	if l > 0 {
		n += 1 + l + sovXla(uint64(l))
	}
	l = len(m.XlaGenerateHloTextTo)
	if l > 0 {
		n += 1 + l + sovXla(uint64(l))
	}
	l = len(m.XlaDumpDebugJsonTo)
	if l > 0 {
		n += 1 + l + sovXla(uint64(l))
	}
	if m.XlaHloProfile {
		n += 2
	}
	l = len(m.XlaDumpComputationsTo)
	if l > 0 {
		n += 1 + l + sovXla(uint64(l))
	}
	l = len(m.XlaDumpExecutionsTo)
	if l > 0 {
		n += 1 + l + sovXla(uint64(l))
	}
	if len(m.XlaDisableHloPasses) > 0 {
		for _, s := range m.XlaDisableHloPasses {
			l = len(s)
			n += 2 + l + sovXla(uint64(l))
		}
	}
	if m.XlaBackendOptimizationLevel != 0 {
		n += 2 + sovXla(uint64(m.XlaBackendOptimizationLevel))
	}
	if m.XlaEnableFastMath {
		n += 3
	}
	if m.XlaEmbedIrInExecutable {
		n += 3
	}
	l = len(m.XlaDumpIrTo)
	if l > 0 {
		n += 2 + l + sovXla(uint64(l))
	}
	if m.XlaEliminateHloImplicitBroadcast {
		n += 3
	}
	if m.XlaCpuMultiThreadEigen {
		n += 3
	}
	l = len(m.XlaGpuCudaDataDir)
	if l > 0 {
		n += 2 + l + sovXla(uint64(l))
	}
	if m.XlaGpuFtz {
		n += 3
	}
	if m.XlaGpuDisableMultiStreaming {
		n += 3
	}
	if m.XlaLlvmEnableAliasScopeMetadata {
		n += 3
	}
	if m.XlaLlvmEnableNoaliasMetadata {
		n += 3
	}
	if m.XlaLlvmEnableInvariantLoadMetadata {
		n += 3
	}
	if len(m.HloReducePrecisionOptions) > 0 {
		for _, e := range m.HloReducePrecisionOptions {
			l = e.Size()
			n += 2 + l + sovXla(uint64(l))
		}
	}
	if m.XlaTestAllOutputLayouts {
		n += 3
	}
	if m.XlaTestAllInputLayouts {
		n += 3
	}
	if len(m.XlaBackendExtraOptions) > 0 {
		for k, v := range m.XlaBackendExtraOptions {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovXla(uint64(len(k))) + 1 + len(v) + sovXla(uint64(len(v)))
			n += mapEntrySize + 2 + sovXla(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ExecutionOptions) Size() (n int) {
	var l int
	_ = l
	if m.ShapeWithOutputLayout != nil {
		l = m.ShapeWithOutputLayout.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	if m.Seed != 0 {
		n += 1 + sovXla(uint64(m.Seed))
	}
	if m.DebugOptions != nil {
		l = m.DebugOptions.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *SnapshotComputationRequest) Size() (n int) {
	var l int
	_ = l
	if m.Computation != nil {
		l = m.Computation.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *SnapshotComputationResponse) Size() (n int) {
	var l int
	_ = l
	if m.Module != nil {
		l = m.Module.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *LoadComputationSnapshotRequest) Size() (n int) {
	var l int
	_ = l
	if m.Module != nil {
		l = m.Module.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *LoadComputationSnapshotResponse) Size() (n int) {
	var l int
	_ = l
	if m.Computation != nil {
		l = m.Computation.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *GetDeviceHandlesRequest) Size() (n int) {
	var l int
	_ = l
	if m.DeviceCount != 0 {
		n += 1 + sovXla(uint64(m.DeviceCount))
	}
	return n
}

func (m *GetDeviceHandlesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.DeviceHandles) > 0 {
		for _, e := range m.DeviceHandles {
			l = e.Size()
			n += 1 + l + sovXla(uint64(l))
		}
	}
	return n
}

func (m *TransferToClientRequest) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	if m.ShapeWithLayout != nil {
		l = m.ShapeWithLayout.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *TransferToClientResponse) Size() (n int) {
	var l int
	_ = l
	if m.Literal != nil {
		l = m.Literal.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *TransferToServerRequest) Size() (n int) {
	var l int
	_ = l
	if m.Literal != nil {
		l = m.Literal.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	if m.DeviceHandle != nil {
		l = m.DeviceHandle.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *TransferToServerResponse) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *TransferToInfeedRequest) Size() (n int) {
	var l int
	_ = l
	if m.Literal != nil {
		l = m.Literal.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	if m.ReplicaId != 0 {
		n += 1 + sovXla(uint64(m.ReplicaId))
	}
	if m.DeviceHandle != nil {
		l = m.DeviceHandle.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *TransferToInfeedResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TransferFromOutfeedRequest) Size() (n int) {
	var l int
	_ = l
	if m.ShapeWithLayout != nil {
		l = m.ShapeWithLayout.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	if m.ReplicaId != 0 {
		n += 1 + sovXla(uint64(m.ReplicaId))
	}
	if m.DeviceHandle != nil {
		l = m.DeviceHandle.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *TransferFromOutfeedResponse) Size() (n int) {
	var l int
	_ = l
	if m.Literal != nil {
		l = m.Literal.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *ResetDeviceRequest) Size() (n int) {
	var l int
	_ = l
	if m.DeviceHandle != nil {
		l = m.DeviceHandle.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *ResetDeviceResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ComputationStatsRequest) Size() (n int) {
	var l int
	_ = l
	if m.Computation != nil {
		l = m.Computation.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	if m.DebugOptions != nil {
		l = m.DebugOptions.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *ComputationStatsResponse) Size() (n int) {
	var l int
	_ = l
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *ComputationRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *ComputationResponse) Size() (n int) {
	var l int
	_ = l
	if m.Computation != nil {
		l = m.Computation.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *CreateChannelHandleRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CreateChannelHandleResponse) Size() (n int) {
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *UnregisterRequest) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *UnregisterResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SetReturnValueRequest) Size() (n int) {
	var l int
	_ = l
	if m.Computation != nil {
		l = m.Computation.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *SetReturnValueResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ExecuteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Computation != nil {
		l = m.Computation.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	if len(m.Arguments) > 0 {
		for _, e := range m.Arguments {
			l = e.Size()
			n += 1 + l + sovXla(uint64(l))
		}
	}
	if m.DeviceHandle != nil {
		l = m.DeviceHandle.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	if m.ExecutionOptions != nil {
		l = m.ExecutionOptions.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *ExecuteParallelRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovXla(uint64(l))
		}
	}
	return n
}

func (m *ExecuteResponse) Size() (n int) {
	var l int
	_ = l
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *ExecuteParallelResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovXla(uint64(l))
		}
	}
	return n
}

func (m *ExecuteAsyncRequest) Size() (n int) {
	var l int
	_ = l
	if m.Computation != nil {
		l = m.Computation.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	if len(m.Arguments) > 0 {
		for _, e := range m.Arguments {
			l = e.Size()
			n += 1 + l + sovXla(uint64(l))
		}
	}
	if m.ExecutionOptions != nil {
		l = m.ExecutionOptions.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *ExecuteAsyncResponse) Size() (n int) {
	var l int
	_ = l
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *WaitForExecutionRequest) Size() (n int) {
	var l int
	_ = l
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *WaitForExecutionResponse) Size() (n int) {
	var l int
	_ = l
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *IsConstantRequest) Size() (n int) {
	var l int
	_ = l
	if m.Computation != nil {
		l = m.Computation.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *IsConstantResponse) Size() (n int) {
	var l int
	_ = l
	if m.IsConstant {
		n += 2
	}
	return n
}

func (m *ComputeConstantRequest) Size() (n int) {
	var l int
	_ = l
	if m.Computation != nil {
		l = m.Computation.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	if m.OutputLayout != nil {
		l = m.OutputLayout.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *ComputeConstantResponse) Size() (n int) {
	var l int
	_ = l
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *DeconstructTupleRequest) Size() (n int) {
	var l int
	_ = l
	if m.TupleHandle != nil {
		l = m.TupleHandle.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *DeconstructTupleResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.ElementHandles) > 0 {
		for _, e := range m.ElementHandles {
			l = e.Size()
			n += 1 + l + sovXla(uint64(l))
		}
	}
	return n
}

func (m *LoadDataRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.ColumnioTabletPath)
	if l > 0 {
		n += 1 + l + sovXla(uint64(l))
	}
	l = len(m.ColumnioField)
	if l > 0 {
		n += 1 + l + sovXla(uint64(l))
	}
	if m.ElementShape != nil {
		l = m.ElementShape.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovXla(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovXla(uint64(m.Limit))
	}
	if m.Zip {
		n += 2
	}
	return n
}

func (m *LoadDataResponse) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	if m.DataShape != nil {
		l = m.DataShape.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	if m.AvailableRows != 0 {
		n += 1 + sovXla(uint64(m.AvailableRows))
	}
	if m.RowsLoaded != 0 {
		n += 1 + sovXla(uint64(m.RowsLoaded))
	}
	if m.Nanoseconds != 0 {
		n += 1 + sovXla(uint64(m.Nanoseconds))
	}
	return n
}

func (m *SpecializeRequest) Size() (n int) {
	var l int
	_ = l
	if m.Computation != nil {
		l = m.Computation.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	if len(m.Arguments) > 0 {
		for _, e := range m.Arguments {
			l = e.Size()
			n += 1 + l + sovXla(uint64(l))
		}
	}
	return n
}

func (m *SpecializeResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetShapeRequest) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *GetShapeResponse) Size() (n int) {
	var l int
	_ = l
	if m.Shape != nil {
		l = m.Shape.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *GetComputationShapeRequest) Size() (n int) {
	var l int
	_ = l
	if m.Computation != nil {
		l = m.Computation.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *GetComputationShapeResponse) Size() (n int) {
	var l int
	_ = l
	if m.ProgramShape != nil {
		l = m.ProgramShape.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *UnpackRequest) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovXla(uint64(l))
	}
	return n
}

func (m *UnpackResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.TiedData) > 0 {
		for _, e := range m.TiedData {
			l = e.Size()
			n += 1 + l + sovXla(uint64(l))
		}
	}
	return n
}

func sovXla(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozXla(x uint64) (n int) {
	return sovXla(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HloReducePrecisionOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HloReducePrecisionOptions{`,
		`PassTiming:` + fmt.Sprintf("%v", this.PassTiming) + `,`,
		`ExponentBits:` + fmt.Sprintf("%v", this.ExponentBits) + `,`,
		`MantissaBits:` + fmt.Sprintf("%v", this.MantissaBits) + `,`,
		`OpcodesToSuffix:` + fmt.Sprintf("%v", this.OpcodesToSuffix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DebugOptions) String() string {
	if this == nil {
		return "nil"
	}
	keysForXlaBackendExtraOptions := make([]string, 0, len(this.XlaBackendExtraOptions))
	for k, _ := range this.XlaBackendExtraOptions {
		keysForXlaBackendExtraOptions = append(keysForXlaBackendExtraOptions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForXlaBackendExtraOptions)
	mapStringForXlaBackendExtraOptions := "map[string]string{"
	for _, k := range keysForXlaBackendExtraOptions {
		mapStringForXlaBackendExtraOptions += fmt.Sprintf("%v: %v,", k, this.XlaBackendExtraOptions[k])
	}
	mapStringForXlaBackendExtraOptions += "}"
	s := strings.Join([]string{`&DebugOptions{`,
		`XlaGenerateHloGraph:` + fmt.Sprintf("%v", this.XlaGenerateHloGraph) + `,`,
		`XlaHloGraphAddresses:` + fmt.Sprintf("%v", this.XlaHloGraphAddresses) + `,`,
		`XlaHloGraphPath:` + fmt.Sprintf("%v", this.XlaHloGraphPath) + `,`,
		`XlaHloDumpAsGraphdef:` + fmt.Sprintf("%v", this.XlaHloDumpAsGraphdef) + `,`,
		`XlaLogHloText:` + fmt.Sprintf("%v", this.XlaLogHloText) + `,`,
		`XlaGenerateHloTextTo:` + fmt.Sprintf("%v", this.XlaGenerateHloTextTo) + `,`,
		`XlaDumpDebugJsonTo:` + fmt.Sprintf("%v", this.XlaDumpDebugJsonTo) + `,`,
		`XlaHloProfile:` + fmt.Sprintf("%v", this.XlaHloProfile) + `,`,
		`XlaDumpComputationsTo:` + fmt.Sprintf("%v", this.XlaDumpComputationsTo) + `,`,
		`XlaDumpExecutionsTo:` + fmt.Sprintf("%v", this.XlaDumpExecutionsTo) + `,`,
		`XlaDisableHloPasses:` + fmt.Sprintf("%v", this.XlaDisableHloPasses) + `,`,
		`XlaBackendOptimizationLevel:` + fmt.Sprintf("%v", this.XlaBackendOptimizationLevel) + `,`,
		`XlaEnableFastMath:` + fmt.Sprintf("%v", this.XlaEnableFastMath) + `,`,
		`XlaEmbedIrInExecutable:` + fmt.Sprintf("%v", this.XlaEmbedIrInExecutable) + `,`,
		`XlaDumpIrTo:` + fmt.Sprintf("%v", this.XlaDumpIrTo) + `,`,
		`XlaEliminateHloImplicitBroadcast:` + fmt.Sprintf("%v", this.XlaEliminateHloImplicitBroadcast) + `,`,
		`XlaCpuMultiThreadEigen:` + fmt.Sprintf("%v", this.XlaCpuMultiThreadEigen) + `,`,
		`XlaGpuCudaDataDir:` + fmt.Sprintf("%v", this.XlaGpuCudaDataDir) + `,`,
		`XlaGpuFtz:` + fmt.Sprintf("%v", this.XlaGpuFtz) + `,`,
		`XlaGpuDisableMultiStreaming:` + fmt.Sprintf("%v", this.XlaGpuDisableMultiStreaming) + `,`,
		`XlaLlvmEnableAliasScopeMetadata:` + fmt.Sprintf("%v", this.XlaLlvmEnableAliasScopeMetadata) + `,`,
		`XlaLlvmEnableNoaliasMetadata:` + fmt.Sprintf("%v", this.XlaLlvmEnableNoaliasMetadata) + `,`,
		`XlaLlvmEnableInvariantLoadMetadata:` + fmt.Sprintf("%v", this.XlaLlvmEnableInvariantLoadMetadata) + `,`,
		`HloReducePrecisionOptions:` + strings.Replace(fmt.Sprintf("%v", this.HloReducePrecisionOptions), "HloReducePrecisionOptions", "HloReducePrecisionOptions", 1) + `,`,
		`XlaTestAllOutputLayouts:` + fmt.Sprintf("%v", this.XlaTestAllOutputLayouts) + `,`,
		`XlaTestAllInputLayouts:` + fmt.Sprintf("%v", this.XlaTestAllInputLayouts) + `,`,
		`XlaBackendExtraOptions:` + mapStringForXlaBackendExtraOptions + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecutionOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecutionOptions{`,
		`ShapeWithOutputLayout:` + strings.Replace(fmt.Sprintf("%v", this.ShapeWithOutputLayout), "Shape", "xla1.Shape", 1) + `,`,
		`Seed:` + fmt.Sprintf("%v", this.Seed) + `,`,
		`DebugOptions:` + strings.Replace(fmt.Sprintf("%v", this.DebugOptions), "DebugOptions", "DebugOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SnapshotComputationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SnapshotComputationRequest{`,
		`Computation:` + strings.Replace(fmt.Sprintf("%v", this.Computation), "ComputationHandle", "xla1.ComputationHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SnapshotComputationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SnapshotComputationResponse{`,
		`Module:` + strings.Replace(fmt.Sprintf("%v", this.Module), "SessionModule", "xla2.SessionModule", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadComputationSnapshotRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadComputationSnapshotRequest{`,
		`Module:` + strings.Replace(fmt.Sprintf("%v", this.Module), "SessionModule", "xla2.SessionModule", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadComputationSnapshotResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadComputationSnapshotResponse{`,
		`Computation:` + strings.Replace(fmt.Sprintf("%v", this.Computation), "ComputationHandle", "xla1.ComputationHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDeviceHandlesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDeviceHandlesRequest{`,
		`DeviceCount:` + fmt.Sprintf("%v", this.DeviceCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDeviceHandlesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDeviceHandlesResponse{`,
		`DeviceHandles:` + strings.Replace(fmt.Sprintf("%v", this.DeviceHandles), "DeviceHandle", "xla1.DeviceHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferToClientRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferToClientRequest{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "GlobalDataHandle", "xla1.GlobalDataHandle", 1) + `,`,
		`ShapeWithLayout:` + strings.Replace(fmt.Sprintf("%v", this.ShapeWithLayout), "Shape", "xla1.Shape", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferToClientResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferToClientResponse{`,
		`Literal:` + strings.Replace(fmt.Sprintf("%v", this.Literal), "LiteralProto", "xla1.LiteralProto", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferToServerRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferToServerRequest{`,
		`Literal:` + strings.Replace(fmt.Sprintf("%v", this.Literal), "LiteralProto", "xla1.LiteralProto", 1) + `,`,
		`DeviceHandle:` + strings.Replace(fmt.Sprintf("%v", this.DeviceHandle), "DeviceHandle", "xla1.DeviceHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferToServerResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferToServerResponse{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "GlobalDataHandle", "xla1.GlobalDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferToInfeedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferToInfeedRequest{`,
		`Literal:` + strings.Replace(fmt.Sprintf("%v", this.Literal), "LiteralProto", "xla1.LiteralProto", 1) + `,`,
		`ReplicaId:` + fmt.Sprintf("%v", this.ReplicaId) + `,`,
		`DeviceHandle:` + strings.Replace(fmt.Sprintf("%v", this.DeviceHandle), "DeviceHandle", "xla1.DeviceHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferToInfeedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferToInfeedResponse{`,
		`}`,
	}, "")
	return s
}
func (this *TransferFromOutfeedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferFromOutfeedRequest{`,
		`ShapeWithLayout:` + strings.Replace(fmt.Sprintf("%v", this.ShapeWithLayout), "Shape", "xla1.Shape", 1) + `,`,
		`ReplicaId:` + fmt.Sprintf("%v", this.ReplicaId) + `,`,
		`DeviceHandle:` + strings.Replace(fmt.Sprintf("%v", this.DeviceHandle), "DeviceHandle", "xla1.DeviceHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferFromOutfeedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferFromOutfeedResponse{`,
		`Literal:` + strings.Replace(fmt.Sprintf("%v", this.Literal), "LiteralProto", "xla1.LiteralProto", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResetDeviceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResetDeviceRequest{`,
		`DeviceHandle:` + strings.Replace(fmt.Sprintf("%v", this.DeviceHandle), "DeviceHandle", "xla1.DeviceHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResetDeviceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResetDeviceResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ComputationStatsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ComputationStatsRequest{`,
		`Computation:` + strings.Replace(fmt.Sprintf("%v", this.Computation), "ComputationHandle", "xla1.ComputationHandle", 1) + `,`,
		`DebugOptions:` + strings.Replace(fmt.Sprintf("%v", this.DebugOptions), "DebugOptions", "DebugOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComputationStatsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ComputationStatsResponse{`,
		`Stats:` + strings.Replace(fmt.Sprintf("%v", this.Stats), "ComputationStats", "xla1.ComputationStats", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComputationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ComputationRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComputationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ComputationResponse{`,
		`Computation:` + strings.Replace(fmt.Sprintf("%v", this.Computation), "ComputationHandle", "xla1.ComputationHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateChannelHandleRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateChannelHandleRequest{`,
		`}`,
	}, "")
	return s
}
func (this *CreateChannelHandleResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateChannelHandleResponse{`,
		`Channel:` + strings.Replace(fmt.Sprintf("%v", this.Channel), "ChannelHandle", "xla1.ChannelHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnregisterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnregisterRequest{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "GlobalDataHandle", "xla1.GlobalDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnregisterResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnregisterResponse{`,
		`}`,
	}, "")
	return s
}
func (this *SetReturnValueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetReturnValueRequest{`,
		`Computation:` + strings.Replace(fmt.Sprintf("%v", this.Computation), "ComputationHandle", "xla1.ComputationHandle", 1) + `,`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "xla1.ComputationDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetReturnValueResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetReturnValueResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteRequest{`,
		`Computation:` + strings.Replace(fmt.Sprintf("%v", this.Computation), "ComputationHandle", "xla1.ComputationHandle", 1) + `,`,
		`Arguments:` + strings.Replace(fmt.Sprintf("%v", this.Arguments), "GlobalDataHandle", "xla1.GlobalDataHandle", 1) + `,`,
		`DeviceHandle:` + strings.Replace(fmt.Sprintf("%v", this.DeviceHandle), "DeviceHandle", "xla1.DeviceHandle", 1) + `,`,
		`ExecutionOptions:` + strings.Replace(fmt.Sprintf("%v", this.ExecutionOptions), "ExecutionOptions", "ExecutionOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteParallelRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteParallelRequest{`,
		`Requests:` + strings.Replace(fmt.Sprintf("%v", this.Requests), "ExecuteRequest", "ExecuteRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteResponse{`,
		`Output:` + strings.Replace(fmt.Sprintf("%v", this.Output), "GlobalDataHandle", "xla1.GlobalDataHandle", 1) + `,`,
		`Profile:` + strings.Replace(fmt.Sprintf("%v", this.Profile), "ExecutionProfile", "xla1.ExecutionProfile", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteParallelResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteParallelResponse{`,
		`Responses:` + strings.Replace(fmt.Sprintf("%v", this.Responses), "ExecuteResponse", "ExecuteResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteAsyncRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteAsyncRequest{`,
		`Computation:` + strings.Replace(fmt.Sprintf("%v", this.Computation), "ComputationHandle", "xla1.ComputationHandle", 1) + `,`,
		`Arguments:` + strings.Replace(fmt.Sprintf("%v", this.Arguments), "GlobalDataHandle", "xla1.GlobalDataHandle", 1) + `,`,
		`ExecutionOptions:` + strings.Replace(fmt.Sprintf("%v", this.ExecutionOptions), "ExecutionOptions", "ExecutionOptions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteAsyncResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteAsyncResponse{`,
		`Execution:` + strings.Replace(fmt.Sprintf("%v", this.Execution), "ExecutionHandle", "xla1.ExecutionHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WaitForExecutionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WaitForExecutionRequest{`,
		`Execution:` + strings.Replace(fmt.Sprintf("%v", this.Execution), "ExecutionHandle", "xla1.ExecutionHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WaitForExecutionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WaitForExecutionResponse{`,
		`Output:` + strings.Replace(fmt.Sprintf("%v", this.Output), "GlobalDataHandle", "xla1.GlobalDataHandle", 1) + `,`,
		`Profile:` + strings.Replace(fmt.Sprintf("%v", this.Profile), "ExecutionProfile", "xla1.ExecutionProfile", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IsConstantRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IsConstantRequest{`,
		`Computation:` + strings.Replace(fmt.Sprintf("%v", this.Computation), "ComputationHandle", "xla1.ComputationHandle", 1) + `,`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "xla1.ComputationDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IsConstantResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IsConstantResponse{`,
		`IsConstant:` + fmt.Sprintf("%v", this.IsConstant) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComputeConstantRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ComputeConstantRequest{`,
		`Computation:` + strings.Replace(fmt.Sprintf("%v", this.Computation), "ComputationHandle", "xla1.ComputationHandle", 1) + `,`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "xla1.ComputationDataHandle", 1) + `,`,
		`OutputLayout:` + strings.Replace(fmt.Sprintf("%v", this.OutputLayout), "Layout", "xla1.Layout", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComputeConstantResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ComputeConstantResponse{`,
		`Output:` + strings.Replace(fmt.Sprintf("%v", this.Output), "GlobalDataHandle", "xla1.GlobalDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeconstructTupleRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeconstructTupleRequest{`,
		`TupleHandle:` + strings.Replace(fmt.Sprintf("%v", this.TupleHandle), "GlobalDataHandle", "xla1.GlobalDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeconstructTupleResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeconstructTupleResponse{`,
		`ElementHandles:` + strings.Replace(fmt.Sprintf("%v", this.ElementHandles), "GlobalDataHandle", "xla1.GlobalDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadDataRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadDataRequest{`,
		`ColumnioTabletPath:` + fmt.Sprintf("%v", this.ColumnioTabletPath) + `,`,
		`ColumnioField:` + fmt.Sprintf("%v", this.ColumnioField) + `,`,
		`ElementShape:` + strings.Replace(fmt.Sprintf("%v", this.ElementShape), "Shape", "xla1.Shape", 1) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Zip:` + fmt.Sprintf("%v", this.Zip) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadDataResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadDataResponse{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "GlobalDataHandle", "xla1.GlobalDataHandle", 1) + `,`,
		`DataShape:` + strings.Replace(fmt.Sprintf("%v", this.DataShape), "Shape", "xla1.Shape", 1) + `,`,
		`AvailableRows:` + fmt.Sprintf("%v", this.AvailableRows) + `,`,
		`RowsLoaded:` + fmt.Sprintf("%v", this.RowsLoaded) + `,`,
		`Nanoseconds:` + fmt.Sprintf("%v", this.Nanoseconds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpecializeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpecializeRequest{`,
		`Computation:` + strings.Replace(fmt.Sprintf("%v", this.Computation), "ComputationHandle", "xla1.ComputationHandle", 1) + `,`,
		`Arguments:` + strings.Replace(fmt.Sprintf("%v", this.Arguments), "GlobalDataHandle", "xla1.GlobalDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpecializeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpecializeResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetShapeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetShapeRequest{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "GlobalDataHandle", "xla1.GlobalDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetShapeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetShapeResponse{`,
		`Shape:` + strings.Replace(fmt.Sprintf("%v", this.Shape), "Shape", "xla1.Shape", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetComputationShapeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetComputationShapeRequest{`,
		`Computation:` + strings.Replace(fmt.Sprintf("%v", this.Computation), "ComputationHandle", "xla1.ComputationHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetComputationShapeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetComputationShapeResponse{`,
		`ProgramShape:` + strings.Replace(fmt.Sprintf("%v", this.ProgramShape), "ProgramShape", "xla1.ProgramShape", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnpackRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnpackRequest{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "GlobalDataHandle", "xla1.GlobalDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnpackResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnpackResponse{`,
		`TiedData:` + strings.Replace(fmt.Sprintf("%v", this.TiedData), "GlobalDataHandle", "xla1.GlobalDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringXla(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HloReducePrecisionOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HloReducePrecisionOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HloReducePrecisionOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassTiming", wireType)
			}
			m.PassTiming = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PassTiming |= (HloReducePrecisionOptions_PassTiming(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExponentBits", wireType)
			}
			m.ExponentBits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExponentBits |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MantissaBits", wireType)
			}
			m.MantissaBits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MantissaBits |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXla
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OpcodesToSuffix = append(m.OpcodesToSuffix, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXla
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXla
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXla
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OpcodesToSuffix = append(m.OpcodesToSuffix, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OpcodesToSuffix", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaGenerateHloGraph", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XlaGenerateHloGraph = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaHloGraphAddresses", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XlaHloGraphAddresses = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaHloGraphPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XlaHloGraphPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaHloDumpAsGraphdef", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XlaHloDumpAsGraphdef = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaLogHloText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XlaLogHloText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaGenerateHloTextTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XlaGenerateHloTextTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaDumpDebugJsonTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XlaDumpDebugJsonTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaHloProfile", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XlaHloProfile = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaDumpComputationsTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XlaDumpComputationsTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaDumpExecutionsTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XlaDumpExecutionsTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaDisableHloPasses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XlaDisableHloPasses = append(m.XlaDisableHloPasses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaBackendOptimizationLevel", wireType)
			}
			m.XlaBackendOptimizationLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XlaBackendOptimizationLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaEnableFastMath", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XlaEnableFastMath = bool(v != 0)
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaEmbedIrInExecutable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XlaEmbedIrInExecutable = bool(v != 0)
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaDumpIrTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XlaDumpIrTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaEliminateHloImplicitBroadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XlaEliminateHloImplicitBroadcast = bool(v != 0)
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaCpuMultiThreadEigen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XlaCpuMultiThreadEigen = bool(v != 0)
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaGpuCudaDataDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XlaGpuCudaDataDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaGpuFtz", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XlaGpuFtz = bool(v != 0)
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaGpuDisableMultiStreaming", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XlaGpuDisableMultiStreaming = bool(v != 0)
		case 70:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaLlvmEnableAliasScopeMetadata", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XlaLlvmEnableAliasScopeMetadata = bool(v != 0)
		case 71:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaLlvmEnableNoaliasMetadata", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XlaLlvmEnableNoaliasMetadata = bool(v != 0)
		case 72:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaLlvmEnableInvariantLoadMetadata", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XlaLlvmEnableInvariantLoadMetadata = bool(v != 0)
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HloReducePrecisionOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HloReducePrecisionOptions = append(m.HloReducePrecisionOptions, &HloReducePrecisionOptions{})
			if err := m.HloReducePrecisionOptions[len(m.HloReducePrecisionOptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 90:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaTestAllOutputLayouts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XlaTestAllOutputLayouts = bool(v != 0)
		case 91:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaTestAllInputLayouts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XlaTestAllInputLayouts = bool(v != 0)
		case 500:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XlaBackendExtraOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.XlaBackendExtraOptions == nil {
				m.XlaBackendExtraOptions = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXla
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXla
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthXla
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXla
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthXla
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipXla(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthXla
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.XlaBackendExtraOptions[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShapeWithOutputLayout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShapeWithOutputLayout == nil {
				m.ShapeWithOutputLayout = &xla1.Shape{}
			}
			if err := m.ShapeWithOutputLayout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			m.Seed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seed |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DebugOptions == nil {
				m.DebugOptions = &DebugOptions{}
			}
			if err := m.DebugOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotComputationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotComputationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotComputationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Computation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Computation == nil {
				m.Computation = &xla1.ComputationHandle{}
			}
			if err := m.Computation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotComputationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotComputationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotComputationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Module == nil {
				m.Module = &xla2.SessionModule{}
			}
			if err := m.Module.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadComputationSnapshotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadComputationSnapshotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadComputationSnapshotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Module == nil {
				m.Module = &xla2.SessionModule{}
			}
			if err := m.Module.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadComputationSnapshotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadComputationSnapshotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadComputationSnapshotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Computation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Computation == nil {
				m.Computation = &xla1.ComputationHandle{}
			}
			if err := m.Computation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceHandlesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceHandlesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceHandlesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceCount", wireType)
			}
			m.DeviceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDeviceHandlesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDeviceHandlesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDeviceHandlesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHandles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceHandles = append(m.DeviceHandles, &xla1.DeviceHandle{})
			if err := m.DeviceHandles[len(m.DeviceHandles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferToClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferToClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferToClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &xla1.GlobalDataHandle{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShapeWithLayout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShapeWithLayout == nil {
				m.ShapeWithLayout = &xla1.Shape{}
			}
			if err := m.ShapeWithLayout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferToClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferToClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferToClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Literal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Literal == nil {
				m.Literal = &xla1.LiteralProto{}
			}
			if err := m.Literal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferToServerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferToServerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferToServerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Literal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Literal == nil {
				m.Literal = &xla1.LiteralProto{}
			}
			if err := m.Literal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceHandle == nil {
				m.DeviceHandle = &xla1.DeviceHandle{}
			}
			if err := m.DeviceHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferToServerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferToServerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferToServerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &xla1.GlobalDataHandle{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferToInfeedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferToInfeedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferToInfeedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Literal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Literal == nil {
				m.Literal = &xla1.LiteralProto{}
			}
			if err := m.Literal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaId", wireType)
			}
			m.ReplicaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceHandle == nil {
				m.DeviceHandle = &xla1.DeviceHandle{}
			}
			if err := m.DeviceHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferToInfeedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferToInfeedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferToInfeedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferFromOutfeedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferFromOutfeedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferFromOutfeedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShapeWithLayout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShapeWithLayout == nil {
				m.ShapeWithLayout = &xla1.Shape{}
			}
			if err := m.ShapeWithLayout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaId", wireType)
			}
			m.ReplicaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceHandle == nil {
				m.DeviceHandle = &xla1.DeviceHandle{}
			}
			if err := m.DeviceHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferFromOutfeedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferFromOutfeedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferFromOutfeedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Literal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Literal == nil {
				m.Literal = &xla1.LiteralProto{}
			}
			if err := m.Literal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceHandle == nil {
				m.DeviceHandle = &xla1.DeviceHandle{}
			}
			if err := m.DeviceHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetDeviceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetDeviceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetDeviceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputationStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputationStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputationStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Computation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Computation == nil {
				m.Computation = &xla1.ComputationHandle{}
			}
			if err := m.Computation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DebugOptions == nil {
				m.DebugOptions = &DebugOptions{}
			}
			if err := m.DebugOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputationStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputationStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputationStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &xla1.ComputationStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Computation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Computation == nil {
				m.Computation = &xla1.ComputationHandle{}
			}
			if err := m.Computation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChannelHandleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChannelHandleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChannelHandleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChannelHandleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChannelHandleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChannelHandleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &xla1.ChannelHandle{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnregisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnregisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnregisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &xla1.GlobalDataHandle{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnregisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnregisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnregisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetReturnValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetReturnValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetReturnValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Computation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Computation == nil {
				m.Computation = &xla1.ComputationHandle{}
			}
			if err := m.Computation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &xla1.ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetReturnValueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetReturnValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetReturnValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Computation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Computation == nil {
				m.Computation = &xla1.ComputationHandle{}
			}
			if err := m.Computation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments, &xla1.GlobalDataHandle{})
			if err := m.Arguments[len(m.Arguments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceHandle == nil {
				m.DeviceHandle = &xla1.DeviceHandle{}
			}
			if err := m.DeviceHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutionOptions == nil {
				m.ExecutionOptions = &ExecutionOptions{}
			}
			if err := m.ExecutionOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteParallelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteParallelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteParallelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &ExecuteRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &xla1.GlobalDataHandle{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &xla1.ExecutionProfile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteParallelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteParallelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteParallelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &ExecuteResponse{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteAsyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteAsyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteAsyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Computation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Computation == nil {
				m.Computation = &xla1.ComputationHandle{}
			}
			if err := m.Computation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments, &xla1.GlobalDataHandle{})
			if err := m.Arguments[len(m.Arguments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutionOptions == nil {
				m.ExecutionOptions = &ExecutionOptions{}
			}
			if err := m.ExecutionOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteAsyncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteAsyncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteAsyncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &xla1.ExecutionHandle{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaitForExecutionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaitForExecutionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaitForExecutionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &xla1.ExecutionHandle{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaitForExecutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaitForExecutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaitForExecutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &xla1.GlobalDataHandle{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &xla1.ExecutionProfile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsConstantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsConstantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsConstantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Computation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Computation == nil {
				m.Computation = &xla1.ComputationHandle{}
			}
			if err := m.Computation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &xla1.ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsConstantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsConstantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsConstantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsConstant", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsConstant = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputeConstantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputeConstantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputeConstantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Computation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Computation == nil {
				m.Computation = &xla1.ComputationHandle{}
			}
			if err := m.Computation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &xla1.ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputLayout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutputLayout == nil {
				m.OutputLayout = &xla1.Layout{}
			}
			if err := m.OutputLayout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputeConstantResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputeConstantResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputeConstantResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &xla1.GlobalDataHandle{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeconstructTupleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeconstructTupleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeconstructTupleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TupleHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TupleHandle == nil {
				m.TupleHandle = &xla1.GlobalDataHandle{}
			}
			if err := m.TupleHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeconstructTupleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeconstructTupleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeconstructTupleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementHandles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElementHandles = append(m.ElementHandles, &xla1.GlobalDataHandle{})
			if err := m.ElementHandles[len(m.ElementHandles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnioTabletPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnioTabletPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnioField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColumnioField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementShape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ElementShape == nil {
				m.ElementShape = &xla1.Shape{}
			}
			if err := m.ElementShape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Zip = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &xla1.GlobalDataHandle{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataShape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataShape == nil {
				m.DataShape = &xla1.Shape{}
			}
			if err := m.DataShape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableRows", wireType)
			}
			m.AvailableRows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvailableRows |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsLoaded", wireType)
			}
			m.RowsLoaded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsLoaded |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nanoseconds", wireType)
			}
			m.Nanoseconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nanoseconds |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecializeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecializeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecializeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Computation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Computation == nil {
				m.Computation = &xla1.ComputationHandle{}
			}
			if err := m.Computation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments, &xla1.GlobalDataHandle{})
			if err := m.Arguments[len(m.Arguments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecializeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecializeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecializeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShapeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShapeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShapeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &xla1.GlobalDataHandle{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetShapeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetShapeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetShapeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shape == nil {
				m.Shape = &xla1.Shape{}
			}
			if err := m.Shape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetComputationShapeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetComputationShapeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetComputationShapeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Computation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Computation == nil {
				m.Computation = &xla1.ComputationHandle{}
			}
			if err := m.Computation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetComputationShapeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetComputationShapeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetComputationShapeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgramShape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProgramShape == nil {
				m.ProgramShape = &xla1.ProgramShape{}
			}
			if err := m.ProgramShape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnpackRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnpackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnpackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &xla1.GlobalDataHandle{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnpackResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXla
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnpackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnpackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TiedData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXla
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXla
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TiedData = append(m.TiedData, &xla1.GlobalDataHandle{})
			if err := m.TiedData[len(m.TiedData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXla(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXla
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipXla(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowXla
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXla
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXla
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthXla
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowXla
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipXla(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthXla = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowXla   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("protobuf/tensorflow/compiler/xla/xla.proto", fileDescriptorXla) }

var fileDescriptorXla = []byte{
	// 2357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xcd, 0x6f, 0xdc, 0xc6,
	0x15, 0x37, 0xb5, 0x92, 0x2c, 0xbd, 0xd5, 0xea, 0x83, 0xfa, 0x62, 0xa4, 0x74, 0xad, 0xd0, 0x4d,
	0x22, 0x3b, 0xb1, 0x65, 0xc8, 0x89, 0x13, 0x18, 0xae, 0x0b, 0x7d, 0x6b, 0x55, 0xc9, 0x12, 0xb8,
	0x6b, 0xa7, 0x48, 0x0e, 0xc4, 0x68, 0x39, 0xab, 0x65, 0x3d, 0xcb, 0x61, 0x38, 0x43, 0x79, 0x2d,
	0x14, 0x45, 0xd1, 0x1e, 0x7a, 0xe8, 0xa5, 0xa7, 0xde, 0x7a, 0xea, 0xa5, 0x40, 0xff, 0x80, 0x02,
	0xfd, 0x0b, 0x7a, 0x0c, 0x8a, 0x1e, 0x0a, 0xf4, 0x52, 0xab, 0x97, 0x1e, 0x73, 0xe8, 0x1f, 0x50,
	0xcc, 0x17, 0x97, 0xab, 0x95, 0x5c, 0x5b, 0x49, 0xe3, 0x83, 0x80, 0xe5, 0xbc, 0xdf, 0x7b, 0xf3,
	0xfb, 0xbd, 0x79, 0x9c, 0x79, 0x43, 0xc1, 0xcd, 0x38, 0xa1, 0x9c, 0x1e, 0xa6, 0x8d, 0x25, 0x8e,
	0x23, 0x46, 0x93, 0x06, 0xa1, 0xcf, 0x96, 0xea, 0xb4, 0x15, 0x87, 0x04, 0x27, 0x4b, 0x6d, 0x82,
	0xc4, 0xdf, 0x6d, 0x09, 0xb2, 0x0b, 0x6d, 0x82, 0xe6, 0xde, 0x7b, 0x09, 0xce, 0x0f, 0x10, 0xd7,
	0xe0, 0xb9, 0x5b, 0x17, 0xe1, 0x18, 0x4e, 0x8e, 0xc3, 0x3a, 0x5e, 0x62, 0x98, 0xb1, 0x90, 0x46,
	0x0a, 0xee, 0xfe, 0xb6, 0x0f, 0xde, 0xda, 0x26, 0xd4, 0xc3, 0x41, 0x5a, 0xc7, 0x07, 0x09, 0xae,
	0x87, 0xc2, 0xb8, 0x1f, 0xf3, 0x90, 0x46, 0xcc, 0xde, 0x81, 0x62, 0x8c, 0x18, 0xf3, 0x79, 0xd8,
	0x0a, 0xa3, 0x23, 0xc7, 0x5a, 0xb0, 0x16, 0x47, 0x97, 0x6f, 0xdc, 0x16, 0xd4, 0x2e, 0x74, 0xba,
	0x7d, 0x80, 0x18, 0xab, 0x49, 0x07, 0x0f, 0xe2, 0xec, 0xb7, 0x7d, 0x1d, 0x4a, 0xb8, 0x1d, 0xd3,
	0x08, 0x47, 0xdc, 0x3f, 0x0c, 0x39, 0x73, 0xfa, 0x16, 0xac, 0xc5, 0x92, 0x37, 0x62, 0x06, 0x57,
	0x43, 0xce, 0x04, 0xa8, 0x85, 0x22, 0x1e, 0x32, 0x86, 0x14, 0xa8, 0xa0, 0x40, 0x66, 0x50, 0x82,
	0x6e, 0xc2, 0x04, 0x8d, 0xeb, 0x34, 0xc0, 0xcc, 0xe7, 0xd4, 0x67, 0x69, 0xa3, 0x11, 0xb6, 0x9d,
	0xfe, 0x85, 0xc2, 0x62, 0xc9, 0x1b, 0xd3, 0x86, 0x1a, 0xad, 0xca, 0x61, 0xf7, 0x13, 0x80, 0x0e,
	0x1f, 0x7b, 0x0a, 0xc6, 0x57, 0x37, 0x36, 0xf7, 0xbd, 0x0d, 0x7f, 0xff, 0xc0, 0xdf, 0x7c, 0x5c,
	0xad, 0xec, 0x3f, 0x1a, 0xbf, 0x62, 0x4f, 0xc2, 0xd8, 0xca, 0x66, 0x6d, 0xc3, 0xcb, 0x0d, 0x5a,
	0xee, 0x9f, 0x4a, 0x30, 0xb2, 0x8e, 0x0f, 0xd3, 0x23, 0x93, 0x8b, 0xbb, 0x30, 0x23, 0x52, 0x7d,
	0x84, 0x23, 0x9c, 0x20, 0x8e, 0xfd, 0x26, 0xa1, 0xfe, 0x51, 0x82, 0xe2, 0xa6, 0x4c, 0xcb, 0xb0,
	0x37, 0xd9, 0x26, 0x68, 0x4b, 0x1b, 0xb7, 0x09, 0xdd, 0x12, 0x26, 0xfb, 0x63, 0x98, 0x15, 0x4e,
	0x19, 0xd6, 0x47, 0x41, 0x90, 0x60, 0xc6, 0xb0, 0x92, 0x3f, 0xe4, 0x4d, 0xb5, 0x09, 0x32, 0xe8,
	0x15, 0x63, 0xb3, 0x3f, 0x00, 0xbb, 0xdb, 0x2d, 0x46, 0xbc, 0xe9, 0xf4, 0xcb, 0x79, 0xc6, 0x72,
	0x1e, 0x07, 0x88, 0x37, 0xed, 0x7b, 0xe0, 0x18, 0x70, 0x90, 0xb6, 0x62, 0x1f, 0x31, 0xe5, 0x14,
	0xe0, 0x86, 0x33, 0x90, 0x9f, 0x64, 0x3d, 0x6d, 0xc5, 0x2b, 0x6c, 0x4b, 0xdb, 0xec, 0xf7, 0x61,
	0x5c, 0xf8, 0x11, 0x7a, 0x24, 0x7d, 0x39, 0x6e, 0x73, 0x67, 0x50, 0x4e, 0x51, 0x6a, 0x13, 0xb4,
	0x4b, 0x8f, 0xb6, 0x09, 0xad, 0xe1, 0x36, 0x37, 0x13, 0x74, 0x29, 0x17, 0x68, 0x9f, 0x53, 0xe7,
	0xaa, 0x74, 0x98, 0xea, 0xd6, 0x2e, 0xbc, 0x6a, 0xd4, 0x5e, 0x56, 0x19, 0x93, 0xa4, 0x02, 0x91,
	0x4a, 0xff, 0x27, 0x8c, 0x46, 0xc2, 0x6b, 0x48, 0x7a, 0x09, 0x8d, 0x82, 0x93, 0x4c, 0xf3, 0x0e,
	0xa3, 0x51, 0x8d, 0xda, 0xef, 0xc1, 0x98, 0x11, 0x13, 0x27, 0xb4, 0x11, 0x12, 0xec, 0x0c, 0x4b,
	0x0d, 0x25, 0xa5, 0xe1, 0x40, 0x0d, 0xda, 0x9f, 0x28, 0x4e, 0x32, 0xb6, 0x28, 0xf3, 0x94, 0x23,
	0xb9, 0x4c, 0x22, 0x3a, 0xc8, 0xe8, 0xd3, 0x3a, 0xfa, 0x5a, 0xce, 0x5a, 0xa3, 0x66, 0x19, 0xa5,
	0x23, 0x6e, 0xe3, 0x7a, 0x9a, 0xb9, 0x15, 0xb3, 0x65, 0x14, 0x6e, 0x1b, 0x99, 0x2d, 0xe7, 0x14,
	0x32, 0x74, 0x48, 0x54, 0x02, 0x44, 0x65, 0x63, 0xe6, 0x94, 0x17, 0x0a, 0xc6, 0x49, 0x19, 0x05,
	0x47, 0x69, 0xb2, 0xd7, 0xa0, 0x2c, 0x9c, 0x0e, 0x51, 0xfd, 0x29, 0x8e, 0x02, 0x9f, 0xc6, 0xe2,
	0x2d, 0x3a, 0x91, 0x44, 0x7c, 0x82, 0x8f, 0x31, 0x71, 0xae, 0x2d, 0x58, 0x8b, 0x03, 0xde, 0x7c,
	0x9b, 0xa0, 0x55, 0x05, 0xda, 0xcf, 0x61, 0x76, 0x05, 0xc4, 0x5e, 0x02, 0x91, 0x5b, 0x1f, 0x47,
	0x72, 0xe2, 0x06, 0x62, 0xdc, 0x6f, 0x89, 0x5a, 0x58, 0x90, 0x49, 0x99, 0x68, 0x13, 0xb4, 0x21,
	0x4d, 0x9b, 0x88, 0xf1, 0x3d, 0x51, 0x0d, 0xf7, 0x61, 0x4e, 0x3a, 0xb4, 0x0e, 0x71, 0xe0, 0x87,
	0x89, 0x1f, 0x46, 0x5a, 0xa6, 0x40, 0x39, 0xef, 0x48, 0x37, 0x21, 0x66, 0x43, 0x00, 0x2a, 0x49,
	0x25, 0xda, 0xc8, 0xac, 0xf6, 0x75, 0x18, 0xcd, 0x72, 0x13, 0x26, 0x22, 0x27, 0xae, 0xcc, 0x49,
	0x51, 0xe7, 0xa4, 0x92, 0xd4, 0xa8, 0xfd, 0x08, 0xbe, 0x2f, 0x27, 0x20, 0xe2, 0x95, 0x32, 0xe5,
	0x10, 0xb6, 0x62, 0x12, 0xd6, 0x43, 0xee, 0x1f, 0x26, 0x14, 0x05, 0x75, 0xc4, 0xb8, 0x73, 0x5d,
	0x4e, 0xb5, 0x20, 0xa6, 0x32, 0xd0, 0x6d, 0x42, 0x2b, 0x1a, 0xb8, 0x6a, 0x70, 0x86, 0x70, 0x3d,
	0x4e, 0xfd, 0x56, 0x4a, 0x78, 0xe8, 0xf3, 0x66, 0x82, 0x51, 0xe0, 0xe3, 0xf0, 0x08, 0x47, 0xce,
	0x83, 0x8c, 0xf0, 0x5a, 0x9c, 0xee, 0x09, 0x7b, 0x4d, 0x9a, 0x37, 0x84, 0xd5, 0xbe, 0x03, 0xd3,
	0xb2, 0x32, 0xe3, 0xd4, 0xaf, 0xa7, 0x81, 0xda, 0x07, 0xfd, 0x20, 0x4c, 0x9c, 0x1f, 0x48, 0xde,
	0x22, 0x3d, 0x5b, 0x71, 0xba, 0x96, 0x06, 0x68, 0x1d, 0x71, 0xb4, 0x1e, 0x26, 0x76, 0x19, 0x8a,
	0xc6, 0xa3, 0xc1, 0x4f, 0x9c, 0x87, 0x32, 0xfc, 0xb0, 0xc2, 0x6d, 0xf2, 0x13, 0x7b, 0x1d, 0xae,
	0x19, 0xbb, 0x59, 0x6d, 0xc5, 0x8a, 0xf1, 0x04, 0x23, 0xb9, 0x0b, 0xfe, 0x50, 0xfa, 0xcc, 0x2b,
	0x1f, 0xbd, 0xea, 0x92, 0x59, 0xd5, 0x40, 0xec, 0x3d, 0x95, 0x23, 0x42, 0x8e, 0x5b, 0x66, 0xe9,
	0x10, 0x09, 0x11, 0xf3, 0x59, 0x9d, 0xc6, 0xd8, 0x6f, 0x61, 0x8e, 0x04, 0x55, 0x67, 0x53, 0x86,
	0x12, 0x33, 0xee, 0x92, 0xe3, 0x96, 0x5a, 0xc9, 0x15, 0x01, 0xac, 0x0a, 0xdc, 0x9e, 0x86, 0xd9,
	0x9b, 0xb0, 0x70, 0x36, 0x5c, 0x44, 0x55, 0xc0, 0x2c, 0xd4, 0x96, 0x0c, 0xf5, 0x76, 0x57, 0xa8,
	0x47, 0x0a, 0x94, 0xc5, 0xa9, 0xc2, 0xfb, 0x67, 0xe3, 0x84, 0xd1, 0x31, 0x4a, 0x42, 0x14, 0x71,
	0x9f, 0x50, 0x14, 0x74, 0xc2, 0x6d, 0xcb, 0x70, 0x6e, 0x57, 0xb8, 0x8a, 0xc1, 0xee, 0x52, 0x14,
	0x64, 0x41, 0x7d, 0x78, 0x5b, 0x54, 0x40, 0x22, 0x0f, 0x03, 0x3f, 0x36, 0xa7, 0x81, 0xac, 0x77,
	0x1a, 0x31, 0xe7, 0x60, 0xa1, 0xb0, 0x58, 0x5c, 0x2e, 0xbf, 0xfc, 0xd0, 0xf0, 0xde, 0x6a, 0x5e,
	0x78, 0x08, 0x3d, 0x00, 0x91, 0x6b, 0x9f, 0x63, 0xc6, 0x7d, 0x44, 0x88, 0x4f, 0x53, 0x1e, 0xa7,
	0xdc, 0x27, 0xe8, 0x39, 0x4d, 0x39, 0x73, 0x3e, 0x97, 0x4c, 0xc5, 0x36, 0x5b, 0xc3, 0x8c, 0xaf,
	0x10, 0xb2, 0x2f, 0xed, 0xbb, 0xca, 0x6c, 0xca, 0x2b, 0xf3, 0x0e, 0xa3, 0xbc, 0xf3, 0x17, 0x59,
	0x79, 0x69, 0xe7, 0x4a, 0x94, 0xf3, 0x0d, 0xe1, 0xad, 0xfc, 0x1b, 0x8c, 0xdb, 0x3c, 0x41, 0x99,
	0xae, 0xff, 0x14, 0xa4, 0xb0, 0x5b, 0x52, 0x58, 0xfe, 0xa4, 0xb8, 0xfd, 0xe3, 0xec, 0x7d, 0xde,
	0x10, 0x1e, 0x7a, 0x78, 0x23, 0xe2, 0xc9, 0x73, 0x39, 0xd5, 0x39, 0xc6, 0xb9, 0x0a, 0xcc, 0xbf,
	0xc4, 0xcd, 0x1e, 0x87, 0xc2, 0x53, 0xfc, 0x5c, 0x9f, 0x34, 0xe2, 0xa7, 0x3d, 0x05, 0x03, 0xc7,
	0x88, 0xa4, 0x58, 0x9e, 0x23, 0xc3, 0x9e, 0x7a, 0xb8, 0xdf, 0xf7, 0xa9, 0xe5, 0xfe, 0xde, 0x82,
	0xf1, 0x6c, 0xf7, 0x32, 0x49, 0x5c, 0x03, 0x87, 0x35, 0x51, 0x8c, 0xfd, 0x67, 0x21, 0x6f, 0x76,
	0xa7, 0x50, 0x46, 0x28, 0x2e, 0x83, 0x14, 0x52, 0x15, 0x20, 0x6f, 0x5a, 0x62, 0x3f, 0x0b, 0x79,
	0x33, 0x9f, 0x4c, 0xdb, 0x86, 0x7e, 0x86, 0x71, 0x20, 0x0f, 0xe5, 0x7e, 0x4f, 0xfe, 0xb6, 0xef,
	0x41, 0x49, 0xed, 0xed, 0x26, 0x2f, 0xfd, 0x32, 0xda, 0x44, 0x4f, 0x5a, 0xbc, 0x91, 0x20, 0xf7,
	0xe4, 0x3e, 0x81, 0xb9, 0x6a, 0x84, 0x62, 0xd6, 0xa4, 0x3c, 0xb7, 0x43, 0x7b, 0xf8, 0xcb, 0x14,
	0x33, 0x6e, 0x7f, 0x0a, 0xc5, 0xdc, 0xae, 0x2e, 0x75, 0x17, 0x97, 0x67, 0x64, 0xcc, 0x1c, 0x7a,
	0x1b, 0x45, 0x01, 0xc1, 0x5e, 0x1e, 0xea, 0x56, 0x60, 0xfe, 0xdc, 0xb8, 0x2c, 0xa6, 0x11, 0xc3,
	0xf6, 0x4d, 0x18, 0x6c, 0xd1, 0x20, 0x25, 0x58, 0xc7, 0xb4, 0x95, 0x6a, 0xd5, 0x13, 0xed, 0x49,
	0x8b, 0xa7, 0x11, 0xee, 0x2e, 0x94, 0x45, 0xa5, 0xe7, 0xc2, 0x98, 0xc8, 0x86, 0xe6, 0xeb, 0x44,
	0xfb, 0x02, 0xae, 0x5d, 0x18, 0x4d, 0x93, 0xbb, 0xbc, 0xea, 0x07, 0x30, 0xbb, 0x85, 0xf9, 0x3a,
	0x16, 0x1d, 0x9e, 0xb2, 0x33, 0xc3, 0xf1, 0x1d, 0x18, 0x09, 0xe4, 0xb8, 0x5f, 0xa7, 0x69, 0xc4,
	0x65, 0xd4, 0x82, 0x57, 0x54, 0x63, 0x6b, 0x62, 0xc8, 0xad, 0x81, 0xd3, 0xeb, 0x9d, 0x71, 0x1a,
	0xd5, 0xee, 0x4d, 0x65, 0x71, 0x2c, 0x59, 0xf7, 0x66, 0x81, 0x3b, 0x3e, 0x5e, 0x29, 0xc8, 0x47,
	0x70, 0x7f, 0x0a, 0xb3, 0xb5, 0x04, 0x45, 0xac, 0x81, 0x93, 0x1a, 0x5d, 0x23, 0x21, 0x8e, 0xb2,
	0xbc, 0xdd, 0x80, 0x7e, 0xb9, 0xcb, 0x28, 0x85, 0xd3, 0x32, 0xd4, 0x16, 0xa1, 0x87, 0x88, 0x88,
	0x7d, 0x5a, 0x87, 0x93, 0x10, 0xfb, 0x1e, 0x4c, 0xe4, 0x0a, 0xf7, 0xc2, 0x8a, 0x1d, 0xcb, 0x2a,
	0x56, 0xd5, 0xaa, 0xbb, 0x05, 0x4e, 0xef, 0xec, 0x5a, 0xd3, 0x07, 0x70, 0x95, 0x84, 0x1c, 0x27,
	0x88, 0x68, 0x06, 0x4a, 0xcc, 0xae, 0x1a, 0x3b, 0x10, 0x8d, 0xb1, 0x67, 0x10, 0xee, 0xcf, 0xf2,
	0x32, 0xaa, 0x38, 0x39, 0xc6, 0x89, 0x91, 0xf1, 0x3a, 0x71, 0xd4, 0x8b, 0x92, 0x4b, 0xa4, 0x16,
	0x71, 0x4e, 0x1e, 0x47, 0xf2, 0x79, 0x74, 0x37, 0xf2, 0x42, 0xcc, 0xfc, 0x5a, 0xc8, 0xab, 0xe7,
	0xd1, 0xfd, 0x9d, 0x95, 0xd7, 0x51, 0x89, 0x1a, 0x18, 0x07, 0x97, 0xd2, 0xf1, 0x3d, 0x80, 0x04,
	0x8b, 0x43, 0x1c, 0xf9, 0x61, 0x20, 0x45, 0x14, 0xbc, 0x61, 0x3d, 0x52, 0x09, 0x7a, 0x65, 0x16,
	0x5e, 0x4d, 0xe6, 0x5c, 0x5e, 0xa6, 0xa1, 0xa7, 0x64, 0xba, 0x7f, 0xb4, 0x60, 0xce, 0x18, 0x37,
	0x13, 0xda, 0xda, 0x4f, 0x79, 0x9e, 0xfe, 0xb9, 0x25, 0x62, 0xfd, 0xcf, 0x12, 0xf9, 0x7f, 0x29,
	0xd9, 0x81, 0xf9, 0x73, 0xc9, 0x5e, 0xa6, 0xf8, 0x76, 0xc1, 0xf6, 0x30, 0x33, 0xef, 0x66, 0x47,
	0xf0, 0x19, 0x66, 0xd6, 0xab, 0x31, 0x9b, 0x86, 0xc9, 0xae, 0x68, 0x3a, 0xbd, 0xbf, 0xb6, 0x60,
	0x36, 0xbf, 0x2d, 0x71, 0xc4, 0xd9, 0x37, 0xde, 0x88, 0x7b, 0x0f, 0x86, 0xbe, 0x57, 0x3b, 0x18,
	0xb6, 0xc0, 0xe9, 0x25, 0x93, 0xe5, 0x6e, 0x80, 0x89, 0x81, 0xae, 0x82, 0xef, 0x41, 0x2b, 0x8c,
	0xbb, 0x08, 0xf6, 0x39, 0x27, 0x8b, 0x0d, 0xfd, 0x11, 0x6a, 0x61, 0x7d, 0x94, 0xca, 0xdf, 0xee,
	0x3e, 0x4c, 0x9e, 0x77, 0x56, 0x5c, 0x7e, 0x3b, 0x7e, 0x1b, 0xe6, 0xd6, 0x12, 0x8c, 0x38, 0x5e,
	0x6b, 0xa2, 0x28, 0xc2, 0x44, 0x63, 0x14, 0x05, 0xf7, 0x47, 0x30, 0x7f, 0xae, 0x55, 0x4f, 0xfb,
	0x21, 0x5c, 0xad, 0x2b, 0x43, 0xd7, 0xa9, 0xd2, 0x0d, 0x36, 0x10, 0xf7, 0x21, 0x4c, 0x3c, 0x8e,
	0x12, 0x7c, 0x14, 0x32, 0xde, 0xd9, 0x98, 0x5e, 0x63, 0x5f, 0x98, 0x02, 0x3b, 0xef, 0xaf, 0x4b,
	0xe2, 0x57, 0x16, 0x4c, 0x57, 0x31, 0xf7, 0x30, 0x4f, 0x93, 0xe8, 0x89, 0x68, 0x2d, 0xbe, 0x79,
	0x41, 0x7c, 0x04, 0x57, 0x69, 0x8c, 0x13, 0x14, 0x05, 0xba, 0x14, 0xe6, 0xce, 0x7a, 0xe5, 0xc8,
	0x19, 0xa8, 0xeb, 0xc0, 0xcc, 0x59, 0x22, 0x86, 0x63, 0x1f, 0x8c, 0xaa, 0x3e, 0xe7, 0x5b, 0x20,
	0x77, 0x17, 0x86, 0x51, 0x72, 0x94, 0xb6, 0x70, 0x24, 0xbf, 0x4c, 0x14, 0x2e, 0x4e, 0x5b, 0x07,
	0xd7, 0xfb, 0x1e, 0x0e, 0xbc, 0xd2, 0x7b, 0x68, 0xaf, 0xc2, 0x44, 0x76, 0xf5, 0xcc, 0x5e, 0x8f,
	0xc1, 0xdc, 0x5a, 0x9d, 0x6d, 0xdf, 0xbc, 0x71, 0x7c, 0x66, 0x64, 0xa7, 0x7f, 0xa8, 0x30, 0xde,
	0xbf, 0xd3, 0x3f, 0xd4, 0x3f, 0x3e, 0xe0, 0x56, 0x60, 0x46, 0x27, 0xe2, 0x00, 0x25, 0x88, 0x10,
	0x4c, 0x4c, 0x42, 0x96, 0x60, 0x28, 0x51, 0x3f, 0xcd, 0xb9, 0x3d, 0x99, 0x9b, 0xc0, 0xe4, 0xcd,
	0xcb, 0x40, 0xee, 0x97, 0x30, 0x96, 0xd9, 0x74, 0x3d, 0xde, 0x82, 0x41, 0xd5, 0x2f, 0xbe, 0xbc,
	0x9c, 0x34, 0xc8, 0x5e, 0x82, 0xab, 0xe6, 0xe6, 0xde, 0x77, 0x9e, 0x24, 0x7d, 0x83, 0xf7, 0x0c,
	0xca, 0xdd, 0x83, 0xd9, 0x1e, 0xf6, 0x7a, 0xea, 0x65, 0x18, 0x4e, 0xf4, 0x6f, 0xc3, 0x7f, 0xaa,
	0x9b, 0xbf, 0x32, 0x7a, 0x1d, 0x98, 0xfb, 0x37, 0x0b, 0x26, 0xb5, 0x79, 0x85, 0x3d, 0x8f, 0xea,
	0x6f, 0xa8, 0x36, 0xbe, 0xed, 0x35, 0xde, 0x81, 0xa9, 0x6e, 0x55, 0x9d, 0x14, 0x65, 0x7e, 0x5a,
	0xd4, 0x54, 0x77, 0x7c, 0xc3, 0x2d, 0x83, 0x89, 0x8c, 0x7f, 0x86, 0x42, 0xbe, 0x49, 0x93, 0x0c,
	0x64, 0xb2, 0x74, 0x99, 0x70, 0x27, 0xe0, 0xf4, 0x86, 0xfb, 0x8e, 0x8a, 0xe7, 0x97, 0x16, 0x4c,
	0x54, 0xd8, 0x1a, 0x8d, 0x18, 0x47, 0x9d, 0xfe, 0xf2, 0xbb, 0xde, 0xa4, 0x3e, 0x06, 0x3b, 0x4f,
	0x42, 0x6b, 0xbf, 0x06, 0xc5, 0x90, 0xf9, 0x75, 0x3d, 0x2c, 0x59, 0x0c, 0x79, 0x10, 0x66, 0x40,
	0xf7, 0xcf, 0x16, 0xcc, 0xa8, 0xc8, 0xf8, 0x0d, 0x2b, 0xb0, 0xef, 0x40, 0xa9, 0xfb, 0x52, 0xa8,
	0x9a, 0x9d, 0xa2, 0xea, 0x4d, 0xe4, 0x90, 0x37, 0x42, 0x73, 0x97, 0x41, 0x77, 0xdb, 0x34, 0x0d,
	0xb8, 0x47, 0xf8, 0xeb, 0x2d, 0xba, 0x5b, 0x85, 0xd9, 0x75, 0x2c, 0xd3, 0x94, 0xa4, 0x75, 0x5e,
	0x4b, 0x63, 0x92, 0xdb, 0xd0, 0x47, 0xb8, 0x78, 0xee, 0xee, 0x99, 0x2f, 0x88, 0x57, 0x94, 0x50,
	0xdd, 0xeb, 0x7c, 0x0e, 0x4e, 0x6f, 0x50, 0xcd, 0xef, 0x21, 0x8c, 0x61, 0x82, 0xc5, 0x7b, 0x7a,
	0xe6, 0x52, 0x73, 0x41, 0xe0, 0x51, 0x8d, 0x36, 0x37, 0x9b, 0x7f, 0x58, 0x30, 0x26, 0xee, 0x72,
	0x02, 0x62, 0x98, 0xde, 0x81, 0xa9, 0x3a, 0x25, 0x69, 0x2b, 0x0a, 0xa9, 0x2f, 0xbf, 0xa6, 0x71,
	0xf5, 0xd1, 0x56, 0xf5, 0x19, 0xb6, 0xb1, 0xd5, 0xa4, 0x49, 0x7e, 0xb7, 0x7d, 0x17, 0x46, 0x33,
	0x8f, 0x46, 0x88, 0x49, 0xa0, 0xaf, 0xf2, 0x25, 0x33, 0xba, 0x29, 0x06, 0xed, 0x25, 0x28, 0x19,
	0xb2, 0xb2, 0x81, 0xd5, 0x2b, 0x93, 0xef, 0x6c, 0x47, 0x34, 0x40, 0x3e, 0xd9, 0x33, 0x30, 0x48,
	0x1b, 0x0d, 0x86, 0xb9, 0xbc, 0x8a, 0x17, 0x3c, 0xfd, 0x64, 0x4f, 0xc1, 0x00, 0x09, 0x5b, 0x21,
	0x97, 0xa7, 0x54, 0xc1, 0x53, 0x0f, 0xf6, 0x38, 0x14, 0x4e, 0xc2, 0x58, 0xee, 0x4c, 0x43, 0x9e,
	0xf8, 0xe9, 0xfe, 0xd5, 0x82, 0xf1, 0x8e, 0xba, 0xd7, 0xbe, 0x69, 0xd8, 0x37, 0x00, 0xe4, 0x77,
	0x38, 0xc5, 0xb6, 0xf7, 0xaa, 0x36, 0x2c, 0xac, 0x8a, 0xea, 0xbb, 0x30, 0x8a, 0x8e, 0x51, 0x48,
	0xe4, 0xa7, 0xa8, 0x84, 0x3e, 0x53, 0xdf, 0xfb, 0x0b, 0x5e, 0x29, 0x1b, 0xf5, 0xe8, 0x33, 0x26,
	0x5e, 0x24, 0x61, 0x94, 0x9f, 0xa8, 0x70, 0xa0, 0x65, 0x81, 0x18, 0xda, 0x95, 0x23, 0xf6, 0x02,
	0x14, 0x23, 0x14, 0x51, 0x26, 0x16, 0x3c, 0x60, 0x5a, 0x60, 0x7e, 0xc8, 0xfd, 0x85, 0x05, 0x13,
	0xd5, 0x18, 0xd7, 0x43, 0x44, 0xc2, 0x93, 0x37, 0xd4, 0x2f, 0x88, 0x5e, 0x2b, 0xcf, 0x41, 0xf7,
	0x31, 0x0f, 0x60, 0x6c, 0x0b, 0xab, 0xb5, 0xbb, 0x44, 0xff, 0xf6, 0x11, 0x8c, 0x77, 0xbc, 0xf5,
	0x62, 0x2d, 0xc0, 0x80, 0x4a, 0x7e, 0xef, 0x25, 0x48, 0x19, 0xdc, 0x27, 0x30, 0xb7, 0x85, 0xf3,
	0x1f, 0x48, 0xba, 0xa6, 0xbf, 0x7c, 0xe3, 0xfb, 0x18, 0xe6, 0xcf, 0x8d, 0xab, 0x89, 0xdd, 0x83,
	0x52, 0x9c, 0xd0, 0xa3, 0x04, 0xb5, 0xfc, 0x3c, 0x41, 0xd5, 0x30, 0x1d, 0x28, 0x8b, 0x2e, 0xe9,
	0x38, 0xf7, 0xe4, 0xde, 0x87, 0xd2, 0xe3, 0x28, 0x46, 0xf5, 0xa7, 0x97, 0x48, 0xd0, 0x3a, 0x8c,
	0x1a, 0xdf, 0xce, 0x91, 0xc9, 0x43, 0x1c, 0xf8, 0x3a, 0xc2, 0x4b, 0xd6, 0x6e, 0x48, 0xe0, 0xc4,
	0xf3, 0xea, 0x87, 0x5f, 0xbd, 0x28, 0x5f, 0xf9, 0xfb, 0x8b, 0xf2, 0x95, 0xaf, 0x5f, 0x94, 0xad,
	0x9f, 0x9f, 0x96, 0xad, 0x3f, 0x9c, 0x96, 0xad, 0xbf, 0x9c, 0x96, 0xad, 0xaf, 0x4e, 0xcb, 0xd6,
	0x3f, 0x4f, 0xcb, 0xd6, 0xbf, 0x4f, 0xcb, 0x57, 0xbe, 0x3e, 0x2d, 0x5b, 0xbf, 0xf9, 0x57, 0xf9,
	0xca, 0xe1, 0xa0, 0xfc, 0xe7, 0xda, 0xdd, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x40, 0x4c, 0xa4,
	0xcf, 0xe6, 0x1b, 0x00, 0x00,
}
