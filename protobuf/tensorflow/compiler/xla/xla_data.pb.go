// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/compiler/xla/xla_data.proto

/*
	Package xla is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/compiler/xla/xla_data.proto

	It has these top-level messages:
		PaddingConfig
		Layout
		Shape
		ProgramShape
		ComputationStats
		OpMetadata
		ExecutionProfile
		ComputationHandle
		ExecutionHandle
		GlobalDataHandle
		ComputationDataHandle
		DeviceHandle
		ChannelHandle
		DeviceAssignmentProto
		LiteralProto
		WindowDimension
		Window
		ConstantRequest
		GetTupleElementRequest
		SliceRequest
		DynamicSliceRequest
		DynamicUpdateSliceRequest
		ConvolutionDimensionNumbers
		ConvolveRequest
		InfeedRequest
		OutfeedRequest
		CallRequest
		CustomCallRequest
		MapRequest
		ReduceRequest
		ReduceWindowRequest
		BatchNormTrainingRequest
		BatchNormGradRequest
		CrossReplicaSumRequest
		SelectAndScatterRequest
		ReverseRequest
		BroadcastRequest
		PadRequest
		ReshapeRequest
		TransposeRequest
		ParameterRequest
		GetLocalShapeRequest
		GetLocalShapeResponse
		TraceRequest
		ConvertRequest
		ConcatenateRequest
		WhileRequest
		UnaryOpRequest
		BinaryOpRequest
		RngRequest
		TernaryOpRequest
		VariadicOpRequest
		ReducePrecisionRequest
		SendRequest
		RecvRequest
		OpRequest
		OpResponse
*/
package xla

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import bytes "bytes"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Primitive types are the individual values that can be held in rectangular
// multidimensional arrays. A description of the rectangular multidimensional
// array dimensions / primitive type is given by Shape, below.
type PrimitiveType int32

const (
	// Invalid primitive type to serve as default.
	PRIMITIVE_TYPE_INVALID PrimitiveType = 0
	// Predicates are two-state booleans.
	PRED PrimitiveType = 1
	// Signed integral values of fixed width.
	S8  PrimitiveType = 2
	S16 PrimitiveType = 3
	S32 PrimitiveType = 4
	S64 PrimitiveType = 5
	// Unsigned integral values of fixed width.
	U8  PrimitiveType = 6
	U16 PrimitiveType = 7
	U32 PrimitiveType = 8
	U64 PrimitiveType = 9
	// Floating-point values of fixed width.
	//
	// Note: if f16s are not natively supported on the device, they will be
	// converted to f16 from f32 at arbirary points in the computation.
	F16 PrimitiveType = 10
	F32 PrimitiveType = 11
	F64 PrimitiveType = 12
	// A tuple is a polymorphic sequence; e.g. a shape that holds different
	// sub-shapes. They are used for things like returning multiple values from a
	// computation; e.g. a computation that returns weights and biases may have a
	// signature that results in a tuple like (f32[784x2000], f32[2000])
	//
	// If a shape proto has the tuple element type, it may not have any entries
	// in the dimensions field.
	TUPLE PrimitiveType = 13
	// An opaque type used for passing context specific data to a custom
	// operation.
	OPAQUE PrimitiveType = 14
)

var PrimitiveType_name = map[int32]string{
	0:  "PRIMITIVE_TYPE_INVALID",
	1:  "PRED",
	2:  "S8",
	3:  "S16",
	4:  "S32",
	5:  "S64",
	6:  "U8",
	7:  "U16",
	8:  "U32",
	9:  "U64",
	10: "F16",
	11: "F32",
	12: "F64",
	13: "TUPLE",
	14: "OPAQUE",
}
var PrimitiveType_value = map[string]int32{
	"PRIMITIVE_TYPE_INVALID": 0,
	"PRED":   1,
	"S8":     2,
	"S16":    3,
	"S32":    4,
	"S64":    5,
	"U8":     6,
	"U16":    7,
	"U32":    8,
	"U64":    9,
	"F16":    10,
	"F32":    11,
	"F64":    12,
	"TUPLE":  13,
	"OPAQUE": 14,
}

func (PrimitiveType) EnumDescriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{0} }

// Describes the value held inside padding elements.
type PaddingValue int32

const (
	INVALID_PAD PaddingValue = 0
	// Zero padding must be 0-values that correspond to the shape's element type.
	ZERO_PAD PaddingValue = 1
	// One padding must be 1-values that correspond to the shape's element type.
	ONE_PAD PaddingValue = 2
	// "Lowest" padding must be the lowest values in the shape's element type,
	// used as padding for operations like max-accumulation.
	LOWEST_PAD PaddingValue = 3
	// "Highest" padding must be the largest values in the shape's element type,
	// used as padding for operations like min-accumulation.
	HIGHEST_PAD PaddingValue = 4
	// Unknown padding could be anything; e.g. floating NaNs!
	UNKNOWN_PAD PaddingValue = 5
)

var PaddingValue_name = map[int32]string{
	0: "INVALID_PAD",
	1: "ZERO_PAD",
	2: "ONE_PAD",
	3: "LOWEST_PAD",
	4: "HIGHEST_PAD",
	5: "UNKNOWN_PAD",
}
var PaddingValue_value = map[string]int32{
	"INVALID_PAD": 0,
	"ZERO_PAD":    1,
	"ONE_PAD":     2,
	"LOWEST_PAD":  3,
	"HIGHEST_PAD": 4,
	"UNKNOWN_PAD": 5,
}

func (PaddingValue) EnumDescriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{1} }

type UnaryOperation int32

const (
	UNOP_INVALID UnaryOperation = 0
	// Elementwise, logical negation
	UNOP_LOGICAL_NOT UnaryOperation = 1
	// Elementwise, computes e^x.
	UNOP_EXP UnaryOperation = 2
	// Elementwise, computes -x.
	UNOP_NEGATE UnaryOperation = 3
	// Puts the elements in the operand into sorted order.
	UNOP_SORT UnaryOperation = 4
	// Elementwise, computes tanh(x).
	UNOP_TANH UnaryOperation = 5
	// Elementwise, computes the natural logarithm of x.
	UNOP_LOG UnaryOperation = 6
	// Elementwise, computes the floor of x.
	UNOP_FLOOR UnaryOperation = 7
	// Elementwise, computes the ceil of x.
	UNOP_CEIL UnaryOperation = 8
	// Elementwise, computes the abs of x.
	UNOP_ABS UnaryOperation = 9
	// Elementwise, computes the sign of x.
	UNOP_SIGN UnaryOperation = 10
	// Elementwise, tests if values are finite (not NaN or inf)
	UNOP_IS_FINITE UnaryOperation = 11
	// Elementwise, computes the cosine of x.
	UNOP_COS UnaryOperation = 12
	// Elementwise, computes the sine of x.
	UNOP_SIN UnaryOperation = 13
)

var UnaryOperation_name = map[int32]string{
	0:  "UNOP_INVALID",
	1:  "UNOP_LOGICAL_NOT",
	2:  "UNOP_EXP",
	3:  "UNOP_NEGATE",
	4:  "UNOP_SORT",
	5:  "UNOP_TANH",
	6:  "UNOP_LOG",
	7:  "UNOP_FLOOR",
	8:  "UNOP_CEIL",
	9:  "UNOP_ABS",
	10: "UNOP_SIGN",
	11: "UNOP_IS_FINITE",
	12: "UNOP_COS",
	13: "UNOP_SIN",
}
var UnaryOperation_value = map[string]int32{
	"UNOP_INVALID":     0,
	"UNOP_LOGICAL_NOT": 1,
	"UNOP_EXP":         2,
	"UNOP_NEGATE":      3,
	"UNOP_SORT":        4,
	"UNOP_TANH":        5,
	"UNOP_LOG":         6,
	"UNOP_FLOOR":       7,
	"UNOP_CEIL":        8,
	"UNOP_ABS":         9,
	"UNOP_SIGN":        10,
	"UNOP_IS_FINITE":   11,
	"UNOP_COS":         12,
	"UNOP_SIN":         13,
}

func (UnaryOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{2} }

type BinaryOperation int32

const (
	BINOP_INVALID BinaryOperation = 0
	// Arithmetic operations.
	BINOP_ADD BinaryOperation = 1
	BINOP_DIV BinaryOperation = 2
	BINOP_MUL BinaryOperation = 3
	BINOP_SUB BinaryOperation = 4
	// Comparison operators.
	BINOP_EQ BinaryOperation = 5
	BINOP_GE BinaryOperation = 6
	BINOP_GT BinaryOperation = 7
	BINOP_LE BinaryOperation = 8
	BINOP_LT BinaryOperation = 9
	BINOP_NE BinaryOperation = 10
	// Dot product, matrix multiply.
	BINOP_DOT BinaryOperation = 12
	// Indexes into the LHS with the RHS.
	//
	// If the RHS is higher-rank, this is a gather operation.
	//
	// Note: currently out of bounds indices may crash the underlying XLA
	// machine.
	BINOP_INDEX BinaryOperation = 13
	// Element-wise maximum.
	BINOP_MAX BinaryOperation = 14
	// Element-wise minimum.
	BINOP_MIN BinaryOperation = 15
	// Raises the left-hand-side to the right-hand-side power.
	BINOP_POW BinaryOperation = 16
	// Remainder operation.
	BINOP_REM BinaryOperation = 17
	// Logical operators
	BINOP_LOGICAL_AND BinaryOperation = 18
	BINOP_LOGICAL_OR  BinaryOperation = 19
)

var BinaryOperation_name = map[int32]string{
	0:  "BINOP_INVALID",
	1:  "BINOP_ADD",
	2:  "BINOP_DIV",
	3:  "BINOP_MUL",
	4:  "BINOP_SUB",
	5:  "BINOP_EQ",
	6:  "BINOP_GE",
	7:  "BINOP_GT",
	8:  "BINOP_LE",
	9:  "BINOP_LT",
	10: "BINOP_NE",
	12: "BINOP_DOT",
	13: "BINOP_INDEX",
	14: "BINOP_MAX",
	15: "BINOP_MIN",
	16: "BINOP_POW",
	17: "BINOP_REM",
	18: "BINOP_LOGICAL_AND",
	19: "BINOP_LOGICAL_OR",
}
var BinaryOperation_value = map[string]int32{
	"BINOP_INVALID":     0,
	"BINOP_ADD":         1,
	"BINOP_DIV":         2,
	"BINOP_MUL":         3,
	"BINOP_SUB":         4,
	"BINOP_EQ":          5,
	"BINOP_GE":          6,
	"BINOP_GT":          7,
	"BINOP_LE":          8,
	"BINOP_LT":          9,
	"BINOP_NE":          10,
	"BINOP_DOT":         12,
	"BINOP_INDEX":       13,
	"BINOP_MAX":         14,
	"BINOP_MIN":         15,
	"BINOP_POW":         16,
	"BINOP_REM":         17,
	"BINOP_LOGICAL_AND": 18,
	"BINOP_LOGICAL_OR":  19,
}

func (BinaryOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{3} }

type RandomDistribution int32

const (
	RNG_INVALID RandomDistribution = 0
	// Creates a uniform-distribution-generated random number on the semi-open
	// interval [parameter[0], parameter[1]).
	RNG_UNIFORM RandomDistribution = 1
	// Creates a normal-distribution-generated random number with mean
	// parameter[0] and standard deviation parameter[1].
	RNG_NORMAL RandomDistribution = 2
	// Creates a Bernoulli-distribution-generated random number with mean
	// parameter[0].
	RNG_BERNOULLI RandomDistribution = 3
)

var RandomDistribution_name = map[int32]string{
	0: "RNG_INVALID",
	1: "RNG_UNIFORM",
	2: "RNG_NORMAL",
	3: "RNG_BERNOULLI",
}
var RandomDistribution_value = map[string]int32{
	"RNG_INVALID":   0,
	"RNG_UNIFORM":   1,
	"RNG_NORMAL":    2,
	"RNG_BERNOULLI": 3,
}

func (RandomDistribution) EnumDescriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{4} }

type TernaryOperation int32

const (
	TRIOP_INVALID TernaryOperation = 0
	// Given a predicate and two operands, selects operand0 if the predicate is
	// true and operand1 if the predicate is false.
	TRIOP_SELECT TernaryOperation = 1
	// Updates operand0 at index operand1 with value operand2 and outputs the
	// updated value.
	TRIOP_UPDATE TernaryOperation = 2
	// Given a min, max and an operand returns the operand if between min and max,
	// else returns min if operand is less than min or max if operand is greater
	// than max.
	TRIOP_CLAMP TernaryOperation = 3
)

var TernaryOperation_name = map[int32]string{
	0: "TRIOP_INVALID",
	1: "TRIOP_SELECT",
	2: "TRIOP_UPDATE",
	3: "TRIOP_CLAMP",
}
var TernaryOperation_value = map[string]int32{
	"TRIOP_INVALID": 0,
	"TRIOP_SELECT":  1,
	"TRIOP_UPDATE":  2,
	"TRIOP_CLAMP":   3,
}

func (TernaryOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{5} }

type VariadicOperation int32

const (
	VAROP_INVALID VariadicOperation = 0
	// Creates a tuple from its operands.
	VAROP_TUPLE VariadicOperation = 1
)

var VariadicOperation_name = map[int32]string{
	0: "VAROP_INVALID",
	1: "VAROP_TUPLE",
}
var VariadicOperation_value = map[string]int32{
	"VAROP_INVALID": 0,
	"VAROP_TUPLE":   1,
}

func (VariadicOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{6} }

// Describes the padding configuration for Pad operation. The padding amount on
// both edges as well as between the elements are specified for each dimension.
type PaddingConfig struct {
	// The padding configuration for all dimensions.
	Dimensions []*PaddingConfig_PaddingConfigDimension `protobuf:"bytes,1,rep,name=dimensions" json:"dimensions,omitempty"`
}

func (m *PaddingConfig) Reset()                    { *m = PaddingConfig{} }
func (*PaddingConfig) ProtoMessage()               {}
func (*PaddingConfig) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{0} }

func (m *PaddingConfig) GetDimensions() []*PaddingConfig_PaddingConfigDimension {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

// Describes the padding configuration for a dimension.
type PaddingConfig_PaddingConfigDimension struct {
	// Padding amount on the low-end (next to the index 0).
	EdgePaddingLow int64 `protobuf:"varint,1,opt,name=edge_padding_low,json=edgePaddingLow,proto3" json:"edge_padding_low,omitempty"`
	// Padding amount on the high-end (next to the highest index).
	EdgePaddingHigh int64 `protobuf:"varint,2,opt,name=edge_padding_high,json=edgePaddingHigh,proto3" json:"edge_padding_high,omitempty"`
	// Padding amount between the elements.
	InteriorPadding int64 `protobuf:"varint,3,opt,name=interior_padding,json=interiorPadding,proto3" json:"interior_padding,omitempty"`
}

func (m *PaddingConfig_PaddingConfigDimension) Reset()      { *m = PaddingConfig_PaddingConfigDimension{} }
func (*PaddingConfig_PaddingConfigDimension) ProtoMessage() {}
func (*PaddingConfig_PaddingConfigDimension) Descriptor() ([]byte, []int) {
	return fileDescriptorXlaData, []int{0, 0}
}

func (m *PaddingConfig_PaddingConfigDimension) GetEdgePaddingLow() int64 {
	if m != nil {
		return m.EdgePaddingLow
	}
	return 0
}

func (m *PaddingConfig_PaddingConfigDimension) GetEdgePaddingHigh() int64 {
	if m != nil {
		return m.EdgePaddingHigh
	}
	return 0
}

func (m *PaddingConfig_PaddingConfigDimension) GetInteriorPadding() int64 {
	if m != nil {
		return m.InteriorPadding
	}
	return 0
}

// A layout describes how the array is placed in (1D) memory space.  This
// includes the minor-to-major ordering of dimensions within a shape, as well as
// any padding present in those dimensions.
//
// Clients must specify the layouts of input Literals to the
// computation. Layouts specified in interior operations which take Shapes (for
// example, Convert) are ignored.
//
// See the XLA documentation for more information on shapes and layouts.
type Layout struct {
	// Sequence of dimension numbers, from minor (fastest varying index) to major
	// (slowest varying index). This field is required.
	MinorToMajor []int64 `protobuf:"varint,1,rep,packed,name=minor_to_major,json=minorToMajor" json:"minor_to_major,omitempty"`
	// The width to which the layout of each dimension is padded up
	// to. If present, the size of the padded_dimensions must equal the
	// rank of the shape. The padding appears at the end of a dimension,
	// not at the beginning. This kind of padding, unlike padding in
	// e.g. convolution, is not part of the shape.
	PaddedDimensions []int64 `protobuf:"varint,2,rep,packed,name=padded_dimensions,json=paddedDimensions" json:"padded_dimensions,omitempty"`
	// Describes the values in the padding specified by
	// padded_dimensions.
	PaddingValue PaddingValue `protobuf:"varint,3,opt,name=padding_value,json=paddingValue,proto3,enum=xla.PaddingValue" json:"padding_value,omitempty"`
}

func (m *Layout) Reset()                    { *m = Layout{} }
func (*Layout) ProtoMessage()               {}
func (*Layout) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{1} }

func (m *Layout) GetMinorToMajor() []int64 {
	if m != nil {
		return m.MinorToMajor
	}
	return nil
}

func (m *Layout) GetPaddedDimensions() []int64 {
	if m != nil {
		return m.PaddedDimensions
	}
	return nil
}

func (m *Layout) GetPaddingValue() PaddingValue {
	if m != nil {
		return m.PaddingValue
	}
	return INVALID_PAD
}

// A shape describes the number of dimensions in the array, the size of each
// dimension, and the primitive component type.
//
// Tuples are a special case in that they have rank zero and have tuple_shapes
// defined.
//
// See the XLA documentation for more information on shapes and layouts.
type Shape struct {
	// The element type for this shape.
	ElementType PrimitiveType `protobuf:"varint,2,opt,name=element_type,json=elementType,proto3,enum=xla.PrimitiveType" json:"element_type,omitempty"`
	// The size (number of elements) for each dimension.
	// In XLA, dimensions are numbered from 0 to N-1 for an
	// N-dimensional array. The first element of 'dimensions' is the size of
	// dimension 0, the second element is the size of dimension 1, and so forth.
	// Empty list indicates a scalar.
	Dimensions []int64 `protobuf:"varint,3,rep,packed,name=dimensions" json:"dimensions,omitempty"`
	// For tuples only, the shapes of constitutent shapes in the tuple sequence.
	TupleShapes []*Shape `protobuf:"bytes,4,rep,name=tuple_shapes,json=tupleShapes" json:"tuple_shapes,omitempty"`
	// The layout used to back this shape.
	Layout *Layout `protobuf:"bytes,5,opt,name=layout" json:"layout,omitempty"`
}

func (m *Shape) Reset()                    { *m = Shape{} }
func (*Shape) ProtoMessage()               {}
func (*Shape) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{2} }

func (m *Shape) GetElementType() PrimitiveType {
	if m != nil {
		return m.ElementType
	}
	return PRIMITIVE_TYPE_INVALID
}

func (m *Shape) GetDimensions() []int64 {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *Shape) GetTupleShapes() []*Shape {
	if m != nil {
		return m.TupleShapes
	}
	return nil
}

func (m *Shape) GetLayout() *Layout {
	if m != nil {
		return m.Layout
	}
	return nil
}

// Shape of the parameters and output of a computation (like a traditional
// function signature).
type ProgramShape struct {
	Parameters     []*Shape `protobuf:"bytes,1,rep,name=parameters" json:"parameters,omitempty"`
	Result         *Shape   `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
	ParameterNames []string `protobuf:"bytes,3,rep,name=parameter_names,json=parameterNames" json:"parameter_names,omitempty"`
}

func (m *ProgramShape) Reset()                    { *m = ProgramShape{} }
func (*ProgramShape) ProtoMessage()               {}
func (*ProgramShape) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{3} }

func (m *ProgramShape) GetParameters() []*Shape {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *ProgramShape) GetResult() *Shape {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ProgramShape) GetParameterNames() []string {
	if m != nil {
		return m.ParameterNames
	}
	return nil
}

// Statistics of a computation.
type ComputationStats struct {
	// The number of floating point operations in the computation.
	FlopCount float64 `protobuf:"fixed64,1,opt,name=flop_count,json=flopCount,proto3" json:"flop_count,omitempty"`
	// The number of transcendental operations (e.g., exp) in the computation.
	TranscendentalCount float64 `protobuf:"fixed64,2,opt,name=transcendental_count,json=transcendentalCount,proto3" json:"transcendental_count,omitempty"`
}

func (m *ComputationStats) Reset()                    { *m = ComputationStats{} }
func (*ComputationStats) ProtoMessage()               {}
func (*ComputationStats) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{4} }

func (m *ComputationStats) GetFlopCount() float64 {
	if m != nil {
		return m.FlopCount
	}
	return 0
}

func (m *ComputationStats) GetTranscendentalCount() float64 {
	if m != nil {
		return m.TranscendentalCount
	}
	return 0
}

// Symbolization metadata for HLO Instructions.
//
// This metadata is used for debugging XLA code generation, as well as
// performance profiling of XLA-generated executables.
type OpMetadata struct {
	// The framework op name that generated this XLA op.
	//
	// Frameworks that build on top of XLA should mirror the names of their ops
	// back to users by specifying the op_type. In this way, even if the
	// framework's "ops" are implemented as multiple XLA HLO Ops, they can be
	// grouped appropriately. (e.g. if a SoftMax layer is emitted into XLA as
	// multiple ops, then each op should have the op_type be "SoftMax".)
	OpType string `protobuf:"bytes,1,opt,name=op_type,json=opType,proto3" json:"op_type,omitempty"`
	// The user-specified name of the op.
	//
	// This name is often unique within a computation. Note: some frameworks
	// add auto-generated names if the user does not provide one.
	OpName string `protobuf:"bytes,2,opt,name=op_name,json=opName,proto3" json:"op_name,omitempty"`
	// Indicate a file and line that this op is associated to in a user's program.
	//
	// e.g. it could be the file and line of user code that generated the op.
	SourceFile string `protobuf:"bytes,3,opt,name=source_file,json=sourceFile,proto3" json:"source_file,omitempty"`
	SourceLine int32  `protobuf:"varint,4,opt,name=source_line,json=sourceLine,proto3" json:"source_line,omitempty"`
}

func (m *OpMetadata) Reset()                    { *m = OpMetadata{} }
func (*OpMetadata) ProtoMessage()               {}
func (*OpMetadata) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{5} }

func (m *OpMetadata) GetOpType() string {
	if m != nil {
		return m.OpType
	}
	return ""
}

func (m *OpMetadata) GetOpName() string {
	if m != nil {
		return m.OpName
	}
	return ""
}

func (m *OpMetadata) GetSourceFile() string {
	if m != nil {
		return m.SourceFile
	}
	return ""
}

func (m *OpMetadata) GetSourceLine() int32 {
	if m != nil {
		return m.SourceLine
	}
	return 0
}

// Profile data from the execution of a computation.
type ExecutionProfile struct {
	// Whether the executable was read from the compilation cache.
	CompilationCacheHit bool `protobuf:"varint,1,opt,name=compilation_cache_hit,json=compilationCacheHit,proto3" json:"compilation_cache_hit,omitempty"`
	// The time in milliseconds spent to compile the computation. This only set if
	// the executable was not read from the compilation cache
	// (compilation_cache_hit == false).
	CompileTimeMs int64 `protobuf:"varint,2,opt,name=compile_time_ms,json=compileTimeMs,proto3" json:"compile_time_ms,omitempty"`
	// The number of cycles spent for the computation. This does not include the
	// time taken for the data transfers between the host and the device. This is
	// a target-dependent field and only used for debugging purposes.
	ComputeCycleCount int64 `protobuf:"varint,3,opt,name=compute_cycle_count,json=computeCycleCount,proto3" json:"compute_cycle_count,omitempty"`
	// The time in nanoseconds spent for the computation, without data transfer.
	ComputeTimeNs int64 `protobuf:"varint,4,opt,name=compute_time_ns,json=computeTimeNs,proto3" json:"compute_time_ns,omitempty"`
	// The time in nanoseconds spent for the entire computation, including the
	// result data transfer time. Current implementation does not spend any cycles
	// for the input data transfer since the memory is initialized with the proper
	// values before the execution.
	ComputeAndTransferTimeNs int64 `protobuf:"varint,5,opt,name=compute_and_transfer_time_ns,json=computeAndTransferTimeNs,proto3" json:"compute_and_transfer_time_ns,omitempty"`
}

func (m *ExecutionProfile) Reset()                    { *m = ExecutionProfile{} }
func (*ExecutionProfile) ProtoMessage()               {}
func (*ExecutionProfile) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{6} }

func (m *ExecutionProfile) GetCompilationCacheHit() bool {
	if m != nil {
		return m.CompilationCacheHit
	}
	return false
}

func (m *ExecutionProfile) GetCompileTimeMs() int64 {
	if m != nil {
		return m.CompileTimeMs
	}
	return 0
}

func (m *ExecutionProfile) GetComputeCycleCount() int64 {
	if m != nil {
		return m.ComputeCycleCount
	}
	return 0
}

func (m *ExecutionProfile) GetComputeTimeNs() int64 {
	if m != nil {
		return m.ComputeTimeNs
	}
	return 0
}

func (m *ExecutionProfile) GetComputeAndTransferTimeNs() int64 {
	if m != nil {
		return m.ComputeAndTransferTimeNs
	}
	return 0
}

// Handle given to a user that represents a computation that the user builds up
// before execution.
type ComputationHandle struct {
	Handle int64 `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *ComputationHandle) Reset()                    { *m = ComputationHandle{} }
func (*ComputationHandle) ProtoMessage()               {}
func (*ComputationHandle) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{7} }

func (m *ComputationHandle) GetHandle() int64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// Handle given to a user that represents an execution that the user launched
// asynchronously on the device.
type ExecutionHandle struct {
	Handle int64 `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *ExecutionHandle) Reset()                    { *m = ExecutionHandle{} }
func (*ExecutionHandle) ProtoMessage()               {}
func (*ExecutionHandle) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{8} }

func (m *ExecutionHandle) GetHandle() int64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// Handle given to a user that represents a globally accessible allocation.
// Contrast this against a ComputationDataHandle, which is not globally
// accessible, since it only exists within a specific computation.
type GlobalDataHandle struct {
	Handle int64 `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *GlobalDataHandle) Reset()                    { *m = GlobalDataHandle{} }
func (*GlobalDataHandle) ProtoMessage()               {}
func (*GlobalDataHandle) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{9} }

func (m *GlobalDataHandle) GetHandle() int64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// Handle given to a user that represents a data result in a computation.
// This is used to pass to subsequent computations that depends upon the data as
// an operand.
type ComputationDataHandle struct {
	Handle int64 `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *ComputationDataHandle) Reset()                    { *m = ComputationDataHandle{} }
func (*ComputationDataHandle) ProtoMessage()               {}
func (*ComputationDataHandle) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{10} }

func (m *ComputationDataHandle) GetHandle() int64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// Handle given to a user that represents a replicated virtual device. Each
// replicated device represents N physical devices for execution where N is the
// number of replicas.
type DeviceHandle struct {
	Handle int64 `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
	// The number of model-parallel virtual devices that communicate via XLA
	// Send/Recv instructions.
	DeviceCount int64 `protobuf:"varint,2,opt,name=device_count,json=deviceCount,proto3" json:"device_count,omitempty"`
}

func (m *DeviceHandle) Reset()                    { *m = DeviceHandle{} }
func (*DeviceHandle) ProtoMessage()               {}
func (*DeviceHandle) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{11} }

func (m *DeviceHandle) GetHandle() int64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

func (m *DeviceHandle) GetDeviceCount() int64 {
	if m != nil {
		return m.DeviceCount
	}
	return 0
}

// Handle given to a user to represent a channel between two computations
// via a Send and Recv instruction pair. Channels are unbuffered, so Send
// Send instructions will be blocked until the data is transferred.
type ChannelHandle struct {
	Handle int64 `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (m *ChannelHandle) Reset()                    { *m = ChannelHandle{} }
func (*ChannelHandle) ProtoMessage()               {}
func (*ChannelHandle) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{12} }

func (m *ChannelHandle) GetHandle() int64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

// DeviceAssignmentProto is a serialized form of DeviceAssignment class, which
// represents the device ids assigned to a set of replicated computations.
// See xla::DeviceAssignment class comment for more details.
type DeviceAssignmentProto struct {
	ReplicaCount       int32                                      `protobuf:"varint,1,opt,name=replica_count,json=replicaCount,proto3" json:"replica_count,omitempty"`
	ComputationCount   int32                                      `protobuf:"varint,2,opt,name=computation_count,json=computationCount,proto3" json:"computation_count,omitempty"`
	ComputationDevices []*DeviceAssignmentProto_ComputationDevice `protobuf:"bytes,3,rep,name=computation_devices,json=computationDevices" json:"computation_devices,omitempty"`
}

func (m *DeviceAssignmentProto) Reset()                    { *m = DeviceAssignmentProto{} }
func (*DeviceAssignmentProto) ProtoMessage()               {}
func (*DeviceAssignmentProto) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{13} }

func (m *DeviceAssignmentProto) GetReplicaCount() int32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *DeviceAssignmentProto) GetComputationCount() int32 {
	if m != nil {
		return m.ComputationCount
	}
	return 0
}

func (m *DeviceAssignmentProto) GetComputationDevices() []*DeviceAssignmentProto_ComputationDevice {
	if m != nil {
		return m.ComputationDevices
	}
	return nil
}

// Each logical computation runs on replica_count physical devices.
// ComputationDevice represents the device ids assinged to the replicas.
type DeviceAssignmentProto_ComputationDevice struct {
	ReplicaDeviceIds []int32 `protobuf:"varint,1,rep,packed,name=replica_device_ids,json=replicaDeviceIds" json:"replica_device_ids,omitempty"`
}

func (m *DeviceAssignmentProto_ComputationDevice) Reset() {
	*m = DeviceAssignmentProto_ComputationDevice{}
}
func (*DeviceAssignmentProto_ComputationDevice) ProtoMessage() {}
func (*DeviceAssignmentProto_ComputationDevice) Descriptor() ([]byte, []int) {
	return fileDescriptorXlaData, []int{13, 0}
}

func (m *DeviceAssignmentProto_ComputationDevice) GetReplicaDeviceIds() []int32 {
	if m != nil {
		return m.ReplicaDeviceIds
	}
	return nil
}

// Literals are used when the server and client need to exchange materialized
// data / results. Literals are also used to describe constants used in
// computations.
//
// Transfers to/from the client are encoded in literal form, and the structure
// of the repeated fields is implied by the shape.
type LiteralProto struct {
	Shape         *Shape          `protobuf:"bytes,1,opt,name=shape" json:"shape,omitempty"`
	Preds         []bool          `protobuf:"varint,2,rep,packed,name=preds" json:"preds,omitempty"`
	U8S           []byte          `protobuf:"bytes,3,opt,name=u8s,proto3" json:"u8s,omitempty"`
	S32S          []int32         `protobuf:"varint,4,rep,packed,name=s32s" json:"s32s,omitempty"`
	S64S          []int64         `protobuf:"varint,5,rep,packed,name=s64s" json:"s64s,omitempty"`
	U32S          []uint32        `protobuf:"varint,6,rep,packed,name=u32s" json:"u32s,omitempty"`
	U64S          []uint64        `protobuf:"varint,7,rep,packed,name=u64s" json:"u64s,omitempty"`
	F32S          []float32       `protobuf:"fixed32,8,rep,packed,name=f32s" json:"f32s,omitempty"`
	F64S          []float64       `protobuf:"fixed64,9,rep,packed,name=f64s" json:"f64s,omitempty"`
	TupleLiterals []*LiteralProto `protobuf:"bytes,10,rep,name=tuple_literals,json=tupleLiterals" json:"tuple_literals,omitempty"`
	F16S          []byte          `protobuf:"bytes,11,opt,name=f16s,proto3" json:"f16s,omitempty"`
}

func (m *LiteralProto) Reset()                    { *m = LiteralProto{} }
func (*LiteralProto) ProtoMessage()               {}
func (*LiteralProto) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{14} }

func (m *LiteralProto) GetShape() *Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *LiteralProto) GetPreds() []bool {
	if m != nil {
		return m.Preds
	}
	return nil
}

func (m *LiteralProto) GetU8S() []byte {
	if m != nil {
		return m.U8S
	}
	return nil
}

func (m *LiteralProto) GetS32S() []int32 {
	if m != nil {
		return m.S32S
	}
	return nil
}

func (m *LiteralProto) GetS64S() []int64 {
	if m != nil {
		return m.S64S
	}
	return nil
}

func (m *LiteralProto) GetU32S() []uint32 {
	if m != nil {
		return m.U32S
	}
	return nil
}

func (m *LiteralProto) GetU64S() []uint64 {
	if m != nil {
		return m.U64S
	}
	return nil
}

func (m *LiteralProto) GetF32S() []float32 {
	if m != nil {
		return m.F32S
	}
	return nil
}

func (m *LiteralProto) GetF64S() []float64 {
	if m != nil {
		return m.F64S
	}
	return nil
}

func (m *LiteralProto) GetTupleLiterals() []*LiteralProto {
	if m != nil {
		return m.TupleLiterals
	}
	return nil
}

func (m *LiteralProto) GetF16S() []byte {
	if m != nil {
		return m.F16S
	}
	return nil
}

type WindowDimension struct {
	// The size of the window in this dimension. For a rectangle, this would be
	// the width or height.
	Size_ int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// The stride at which the window moves across the base area in this
	// dimension. In other words, this is the spacing between different
	// positions of the window in this dimension.
	Stride int64 `protobuf:"varint,2,opt,name=stride,proto3" json:"stride,omitempty"`
	// If positive, means the amount of padding with zeroes to add to the base
	// area at the low end of this dimension; if negative, its negative means the
	// number of elements removed from the low end of this dimension. For example,
	// in the horizontal dimension of a rectangle, this would be the number of
	// zeroes to pad on the left, given that indices increase when going right.
	PaddingLow int64 `protobuf:"varint,3,opt,name=padding_low,json=paddingLow,proto3" json:"padding_low,omitempty"`
	// As padding_low, but on the high end of this dimension. For
	// example, in the horizontal dimension of a rectangle, this would
	// be the number of zeroes to pad on the right, given that indices
	// increase when going right.
	PaddingHigh int64 `protobuf:"varint,4,opt,name=padding_high,json=paddingHigh,proto3" json:"padding_high,omitempty"`
	// Dilation factor of the sliding window in this dimension. A dilation factor
	// of 1 means no dilation. window_dilation - 1 no-op entries ("holes") are
	// implicitly placed between each kernel element. See documentation for
	// convolution.
	WindowDilation int64 `protobuf:"varint,5,opt,name=window_dilation,json=windowDilation,proto3" json:"window_dilation,omitempty"`
	// Dilation factor of the base area in this dimension. A dilation factor of 1
	// means no dilation. base_dilation - 1 no-op entries ("holes") are implicitly
	// placed between each base area element. See documentation for convolution.
	BaseDilation int64 `protobuf:"varint,6,opt,name=base_dilation,json=baseDilation,proto3" json:"base_dilation,omitempty"`
}

func (m *WindowDimension) Reset()                    { *m = WindowDimension{} }
func (*WindowDimension) ProtoMessage()               {}
func (*WindowDimension) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{15} }

func (m *WindowDimension) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *WindowDimension) GetStride() int64 {
	if m != nil {
		return m.Stride
	}
	return 0
}

func (m *WindowDimension) GetPaddingLow() int64 {
	if m != nil {
		return m.PaddingLow
	}
	return 0
}

func (m *WindowDimension) GetPaddingHigh() int64 {
	if m != nil {
		return m.PaddingHigh
	}
	return 0
}

func (m *WindowDimension) GetWindowDilation() int64 {
	if m != nil {
		return m.WindowDilation
	}
	return 0
}

func (m *WindowDimension) GetBaseDilation() int64 {
	if m != nil {
		return m.BaseDilation
	}
	return 0
}

// Describes the windowing in an operation such as convolution.
//
// The window is moved across a base area and for each position of the
// window a computation is performed. The field below describes the
// window and the movement of the window across a base area.
type Window struct {
	Dimensions []*WindowDimension `protobuf:"bytes,1,rep,name=dimensions" json:"dimensions,omitempty"`
}

func (m *Window) Reset()                    { *m = Window{} }
func (*Window) ProtoMessage()               {}
func (*Window) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{16} }

func (m *Window) GetDimensions() []*WindowDimension {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

type ConstantRequest struct {
	Literal *LiteralProto `protobuf:"bytes,2,opt,name=literal" json:"literal,omitempty"`
}

func (m *ConstantRequest) Reset()                    { *m = ConstantRequest{} }
func (*ConstantRequest) ProtoMessage()               {}
func (*ConstantRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{17} }

func (m *ConstantRequest) GetLiteral() *LiteralProto {
	if m != nil {
		return m.Literal
	}
	return nil
}

type GetTupleElementRequest struct {
	Operand *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	Index   int64                  `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *GetTupleElementRequest) Reset()                    { *m = GetTupleElementRequest{} }
func (*GetTupleElementRequest) ProtoMessage()               {}
func (*GetTupleElementRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{18} }

func (m *GetTupleElementRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *GetTupleElementRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type SliceRequest struct {
	Operand      *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	StartIndices []int64                `protobuf:"varint,3,rep,packed,name=start_indices,json=startIndices" json:"start_indices,omitempty"`
	LimitIndices []int64                `protobuf:"varint,4,rep,packed,name=limit_indices,json=limitIndices" json:"limit_indices,omitempty"`
	Strides      []int64                `protobuf:"varint,5,rep,packed,name=strides" json:"strides,omitempty"`
}

func (m *SliceRequest) Reset()                    { *m = SliceRequest{} }
func (*SliceRequest) ProtoMessage()               {}
func (*SliceRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{19} }

func (m *SliceRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *SliceRequest) GetStartIndices() []int64 {
	if m != nil {
		return m.StartIndices
	}
	return nil
}

func (m *SliceRequest) GetLimitIndices() []int64 {
	if m != nil {
		return m.LimitIndices
	}
	return nil
}

func (m *SliceRequest) GetStrides() []int64 {
	if m != nil {
		return m.Strides
	}
	return nil
}

type DynamicSliceRequest struct {
	// Operand from which to slice at dynamic 'start_indices'.
	Operand *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	// Dynamically computed 'start_indices' for slice operation.
	StartIndices *ComputationDataHandle `protobuf:"bytes,3,opt,name=start_indices,json=startIndices" json:"start_indices,omitempty"`
	// Slice sizes for each dimension (note that indices calculations are computed
	// modulo dimension sizes to avoid out-of-bound array accesses).
	SliceSizes []int64 `protobuf:"varint,4,rep,packed,name=slice_sizes,json=sliceSizes" json:"slice_sizes,omitempty"`
}

func (m *DynamicSliceRequest) Reset()                    { *m = DynamicSliceRequest{} }
func (*DynamicSliceRequest) ProtoMessage()               {}
func (*DynamicSliceRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{20} }

func (m *DynamicSliceRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *DynamicSliceRequest) GetStartIndices() *ComputationDataHandle {
	if m != nil {
		return m.StartIndices
	}
	return nil
}

func (m *DynamicSliceRequest) GetSliceSizes() []int64 {
	if m != nil {
		return m.SliceSizes
	}
	return nil
}

type DynamicUpdateSliceRequest struct {
	// Operand on which slice 'update' is to be applied.
	Operand *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	// The slice update to apply to 'operand'.
	Update *ComputationDataHandle `protobuf:"bytes,3,opt,name=update" json:"update,omitempty"`
	// Dynamically computed start indices for the update slice operation.
	StartIndices *ComputationDataHandle `protobuf:"bytes,4,opt,name=start_indices,json=startIndices" json:"start_indices,omitempty"`
}

func (m *DynamicUpdateSliceRequest) Reset()      { *m = DynamicUpdateSliceRequest{} }
func (*DynamicUpdateSliceRequest) ProtoMessage() {}
func (*DynamicUpdateSliceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorXlaData, []int{21}
}

func (m *DynamicUpdateSliceRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *DynamicUpdateSliceRequest) GetUpdate() *ComputationDataHandle {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *DynamicUpdateSliceRequest) GetStartIndices() *ComputationDataHandle {
	if m != nil {
		return m.StartIndices
	}
	return nil
}

type ConvolutionDimensionNumbers struct {
	// The number of the dimension that represents batch in the input
	// (lhs) and output.
	BatchDimension int64 `protobuf:"varint,1,opt,name=batch_dimension,json=batchDimension,proto3" json:"batch_dimension,omitempty"`
	// The number of the dimension that represents features in the input
	// (lhs) and output.
	FeatureDimension int64 `protobuf:"varint,2,opt,name=feature_dimension,json=featureDimension,proto3" json:"feature_dimension,omitempty"`
	// The dimension numbers for the spatial dimensions that the window
	// moves through in the input (lhs) and output.
	SpatialDimensions []int64 `protobuf:"varint,5,rep,packed,name=spatial_dimensions,json=spatialDimensions" json:"spatial_dimensions,omitempty"`
	// The number of the dimension that represents input features in the
	// convolutional kernel (rhs).
	KernelInputFeatureDimension int64 `protobuf:"varint,3,opt,name=kernel_input_feature_dimension,json=kernelInputFeatureDimension,proto3" json:"kernel_input_feature_dimension,omitempty"`
	// The number of the dimension that represents output features in
	// the convolutional kernel (rhs).
	KernelOutputFeatureDimension int64 `protobuf:"varint,4,opt,name=kernel_output_feature_dimension,json=kernelOutputFeatureDimension,proto3" json:"kernel_output_feature_dimension,omitempty"`
	// The dimension numbers for the spatial dimensions that the window
	// moves through in the kernel (rhs). window.strides(0) is the
	// stride in the kernel_spatial_dimensions(0) dimension.
	KernelSpatialDimensions []int64 `protobuf:"varint,6,rep,packed,name=kernel_spatial_dimensions,json=kernelSpatialDimensions" json:"kernel_spatial_dimensions,omitempty"`
}

func (m *ConvolutionDimensionNumbers) Reset()      { *m = ConvolutionDimensionNumbers{} }
func (*ConvolutionDimensionNumbers) ProtoMessage() {}
func (*ConvolutionDimensionNumbers) Descriptor() ([]byte, []int) {
	return fileDescriptorXlaData, []int{22}
}

func (m *ConvolutionDimensionNumbers) GetBatchDimension() int64 {
	if m != nil {
		return m.BatchDimension
	}
	return 0
}

func (m *ConvolutionDimensionNumbers) GetFeatureDimension() int64 {
	if m != nil {
		return m.FeatureDimension
	}
	return 0
}

func (m *ConvolutionDimensionNumbers) GetSpatialDimensions() []int64 {
	if m != nil {
		return m.SpatialDimensions
	}
	return nil
}

func (m *ConvolutionDimensionNumbers) GetKernelInputFeatureDimension() int64 {
	if m != nil {
		return m.KernelInputFeatureDimension
	}
	return 0
}

func (m *ConvolutionDimensionNumbers) GetKernelOutputFeatureDimension() int64 {
	if m != nil {
		return m.KernelOutputFeatureDimension
	}
	return 0
}

func (m *ConvolutionDimensionNumbers) GetKernelSpatialDimensions() []int64 {
	if m != nil {
		return m.KernelSpatialDimensions
	}
	return nil
}

type ConvolveRequest struct {
	Lhs              *ComputationDataHandle       `protobuf:"bytes,2,opt,name=lhs" json:"lhs,omitempty"`
	Rhs              *ComputationDataHandle       `protobuf:"bytes,3,opt,name=rhs" json:"rhs,omitempty"`
	Window           *Window                      `protobuf:"bytes,4,opt,name=window" json:"window,omitempty"`
	DimensionNumbers *ConvolutionDimensionNumbers `protobuf:"bytes,5,opt,name=dimension_numbers,json=dimensionNumbers" json:"dimension_numbers,omitempty"`
}

func (m *ConvolveRequest) Reset()                    { *m = ConvolveRequest{} }
func (*ConvolveRequest) ProtoMessage()               {}
func (*ConvolveRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{23} }

func (m *ConvolveRequest) GetLhs() *ComputationDataHandle {
	if m != nil {
		return m.Lhs
	}
	return nil
}

func (m *ConvolveRequest) GetRhs() *ComputationDataHandle {
	if m != nil {
		return m.Rhs
	}
	return nil
}

func (m *ConvolveRequest) GetWindow() *Window {
	if m != nil {
		return m.Window
	}
	return nil
}

func (m *ConvolveRequest) GetDimensionNumbers() *ConvolutionDimensionNumbers {
	if m != nil {
		return m.DimensionNumbers
	}
	return nil
}

type InfeedRequest struct {
	// The shape of the data returned by reading the device's infeed buffer.
	Shape *Shape `protobuf:"bytes,2,opt,name=shape" json:"shape,omitempty"`
	// Additional infeed configuration for the backend.
	Config []byte `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *InfeedRequest) Reset()                    { *m = InfeedRequest{} }
func (*InfeedRequest) ProtoMessage()               {}
func (*InfeedRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{24} }

func (m *InfeedRequest) GetShape() *Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *InfeedRequest) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

type OutfeedRequest struct {
	// The shape of the data returned by reading the device's outfeed buffer.
	Shape *Shape `protobuf:"bytes,1,opt,name=shape" json:"shape,omitempty"`
	// Operand to the Outfeed. Supports tuple.
	Operand *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	// Backend-specific information for how to perform the outfeed.
	OutfeedConfig []byte `protobuf:"bytes,3,opt,name=outfeed_config,json=outfeedConfig,proto3" json:"outfeed_config,omitempty"`
}

func (m *OutfeedRequest) Reset()                    { *m = OutfeedRequest{} }
func (*OutfeedRequest) ProtoMessage()               {}
func (*OutfeedRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{25} }

func (m *OutfeedRequest) GetShape() *Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *OutfeedRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *OutfeedRequest) GetOutfeedConfig() []byte {
	if m != nil {
		return m.OutfeedConfig
	}
	return nil
}

type CallRequest struct {
	ToApply  *ComputationHandle       `protobuf:"bytes,2,opt,name=to_apply,json=toApply" json:"to_apply,omitempty"`
	Operands []*ComputationDataHandle `protobuf:"bytes,3,rep,name=operands" json:"operands,omitempty"`
}

func (m *CallRequest) Reset()                    { *m = CallRequest{} }
func (*CallRequest) ProtoMessage()               {}
func (*CallRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{26} }

func (m *CallRequest) GetToApply() *ComputationHandle {
	if m != nil {
		return m.ToApply
	}
	return nil
}

func (m *CallRequest) GetOperands() []*ComputationDataHandle {
	if m != nil {
		return m.Operands
	}
	return nil
}

type CustomCallRequest struct {
	CallTargetName string                   `protobuf:"bytes,2,opt,name=call_target_name,json=callTargetName,proto3" json:"call_target_name,omitempty"`
	Operands       []*ComputationDataHandle `protobuf:"bytes,3,rep,name=operands" json:"operands,omitempty"`
	Shape          *Shape                   `protobuf:"bytes,4,opt,name=shape" json:"shape,omitempty"`
}

func (m *CustomCallRequest) Reset()                    { *m = CustomCallRequest{} }
func (*CustomCallRequest) ProtoMessage()               {}
func (*CustomCallRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{27} }

func (m *CustomCallRequest) GetCallTargetName() string {
	if m != nil {
		return m.CallTargetName
	}
	return ""
}

func (m *CustomCallRequest) GetOperands() []*ComputationDataHandle {
	if m != nil {
		return m.Operands
	}
	return nil
}

func (m *CustomCallRequest) GetShape() *Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

type MapRequest struct {
	Operands       []*ComputationDataHandle `protobuf:"bytes,2,rep,name=operands" json:"operands,omitempty"`
	ToApply        *ComputationHandle       `protobuf:"bytes,3,opt,name=to_apply,json=toApply" json:"to_apply,omitempty"`
	StaticOperands []*ComputationDataHandle `protobuf:"bytes,4,rep,name=static_operands,json=staticOperands" json:"static_operands,omitempty"`
}

func (m *MapRequest) Reset()                    { *m = MapRequest{} }
func (*MapRequest) ProtoMessage()               {}
func (*MapRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{28} }

func (m *MapRequest) GetOperands() []*ComputationDataHandle {
	if m != nil {
		return m.Operands
	}
	return nil
}

func (m *MapRequest) GetToApply() *ComputationHandle {
	if m != nil {
		return m.ToApply
	}
	return nil
}

func (m *MapRequest) GetStaticOperands() []*ComputationDataHandle {
	if m != nil {
		return m.StaticOperands
	}
	return nil
}

type ReduceRequest struct {
	// Operand to the reduction.
	Operand *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	// Initial value for the reduction. This must be consistent with the result
	// shape of to_apply.
	InitValue *ComputationDataHandle `protobuf:"bytes,3,opt,name=init_value,json=initValue" json:"init_value,omitempty"`
	// The dimensions to reduce over.
	Dimensions []int64 `protobuf:"varint,4,rep,packed,name=dimensions" json:"dimensions,omitempty"`
	// The computation to apply in the reduction.
	ToApply *ComputationHandle `protobuf:"bytes,5,opt,name=to_apply,json=toApply" json:"to_apply,omitempty"`
}

func (m *ReduceRequest) Reset()                    { *m = ReduceRequest{} }
func (*ReduceRequest) ProtoMessage()               {}
func (*ReduceRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{29} }

func (m *ReduceRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *ReduceRequest) GetInitValue() *ComputationDataHandle {
	if m != nil {
		return m.InitValue
	}
	return nil
}

func (m *ReduceRequest) GetDimensions() []int64 {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *ReduceRequest) GetToApply() *ComputationHandle {
	if m != nil {
		return m.ToApply
	}
	return nil
}

type ReduceWindowRequest struct {
	Operand   *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	InitValue *ComputationDataHandle `protobuf:"bytes,3,opt,name=init_value,json=initValue" json:"init_value,omitempty"`
	Window    *Window                `protobuf:"bytes,4,opt,name=window" json:"window,omitempty"`
	ToApply   *ComputationHandle     `protobuf:"bytes,5,opt,name=to_apply,json=toApply" json:"to_apply,omitempty"`
}

func (m *ReduceWindowRequest) Reset()                    { *m = ReduceWindowRequest{} }
func (*ReduceWindowRequest) ProtoMessage()               {}
func (*ReduceWindowRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{30} }

func (m *ReduceWindowRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *ReduceWindowRequest) GetInitValue() *ComputationDataHandle {
	if m != nil {
		return m.InitValue
	}
	return nil
}

func (m *ReduceWindowRequest) GetWindow() *Window {
	if m != nil {
		return m.Window
	}
	return nil
}

func (m *ReduceWindowRequest) GetToApply() *ComputationHandle {
	if m != nil {
		return m.ToApply
	}
	return nil
}

type BatchNormTrainingRequest struct {
	Operand      *ComputationDataHandle `protobuf:"bytes,1,opt,name=operand" json:"operand,omitempty"`
	Scale        *ComputationDataHandle `protobuf:"bytes,2,opt,name=scale" json:"scale,omitempty"`
	Offset       *ComputationDataHandle `protobuf:"bytes,3,opt,name=offset" json:"offset,omitempty"`
	Epsilon      float32                `protobuf:"fixed32,4,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	FeatureIndex int64                  `protobuf:"varint,5,opt,name=feature_index,json=featureIndex,proto3" json:"feature_index,omitempty"`
}

func (m *BatchNormTrainingRequest) Reset()                    { *m = BatchNormTrainingRequest{} }
func (*BatchNormTrainingRequest) ProtoMessage()               {}
func (*BatchNormTrainingRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{31} }

func (m *BatchNormTrainingRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *BatchNormTrainingRequest) GetScale() *ComputationDataHandle {
	if m != nil {
		return m.Scale
	}
	return nil
}

func (m *BatchNormTrainingRequest) GetOffset() *ComputationDataHandle {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *BatchNormTrainingRequest) GetEpsilon() float32 {
	if m != nil {
		return m.Epsilon
	}
	return 0
}

func (m *BatchNormTrainingRequest) GetFeatureIndex() int64 {
	if m != nil {
		return m.FeatureIndex
	}
	return 0
}

type BatchNormGradRequest struct {
	Operand      *ComputationDataHandle `protobuf:"bytes,1,opt,name=operand" json:"operand,omitempty"`
	Scale        *ComputationDataHandle `protobuf:"bytes,2,opt,name=scale" json:"scale,omitempty"`
	Mean         *ComputationDataHandle `protobuf:"bytes,3,opt,name=mean" json:"mean,omitempty"`
	Variance     *ComputationDataHandle `protobuf:"bytes,4,opt,name=variance" json:"variance,omitempty"`
	GradOutput   *ComputationDataHandle `protobuf:"bytes,5,opt,name=grad_output,json=gradOutput" json:"grad_output,omitempty"`
	Epsilon      float32                `protobuf:"fixed32,6,opt,name=epsilon,proto3" json:"epsilon,omitempty"`
	FeatureIndex int64                  `protobuf:"varint,7,opt,name=feature_index,json=featureIndex,proto3" json:"feature_index,omitempty"`
}

func (m *BatchNormGradRequest) Reset()                    { *m = BatchNormGradRequest{} }
func (*BatchNormGradRequest) ProtoMessage()               {}
func (*BatchNormGradRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{32} }

func (m *BatchNormGradRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *BatchNormGradRequest) GetScale() *ComputationDataHandle {
	if m != nil {
		return m.Scale
	}
	return nil
}

func (m *BatchNormGradRequest) GetMean() *ComputationDataHandle {
	if m != nil {
		return m.Mean
	}
	return nil
}

func (m *BatchNormGradRequest) GetVariance() *ComputationDataHandle {
	if m != nil {
		return m.Variance
	}
	return nil
}

func (m *BatchNormGradRequest) GetGradOutput() *ComputationDataHandle {
	if m != nil {
		return m.GradOutput
	}
	return nil
}

func (m *BatchNormGradRequest) GetEpsilon() float32 {
	if m != nil {
		return m.Epsilon
	}
	return 0
}

func (m *BatchNormGradRequest) GetFeatureIndex() int64 {
	if m != nil {
		return m.FeatureIndex
	}
	return 0
}

type CrossReplicaSumRequest struct {
	Operand *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
}

func (m *CrossReplicaSumRequest) Reset()                    { *m = CrossReplicaSumRequest{} }
func (*CrossReplicaSumRequest) ProtoMessage()               {}
func (*CrossReplicaSumRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{33} }

func (m *CrossReplicaSumRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

type SelectAndScatterRequest struct {
	// Operand array on which the windows slide.
	Operand *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	// Source array for the data to scatter.
	Source *ComputationDataHandle `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	// Initial scalar value for each element in the output.
	InitValue *ComputationDataHandle `protobuf:"bytes,4,opt,name=init_value,json=initValue" json:"init_value,omitempty"`
	// Window configuration.
	Window *Window `protobuf:"bytes,5,opt,name=window" json:"window,omitempty"`
	// Binary function used to select an element from each window.
	Select *ComputationHandle `protobuf:"bytes,6,opt,name=select" json:"select,omitempty"`
	// Binary function used to combine each scattered value from source with the
	// current output value at the selected location.
	Scatter *ComputationHandle `protobuf:"bytes,7,opt,name=scatter" json:"scatter,omitempty"`
}

func (m *SelectAndScatterRequest) Reset()                    { *m = SelectAndScatterRequest{} }
func (*SelectAndScatterRequest) ProtoMessage()               {}
func (*SelectAndScatterRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{34} }

func (m *SelectAndScatterRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *SelectAndScatterRequest) GetSource() *ComputationDataHandle {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *SelectAndScatterRequest) GetInitValue() *ComputationDataHandle {
	if m != nil {
		return m.InitValue
	}
	return nil
}

func (m *SelectAndScatterRequest) GetWindow() *Window {
	if m != nil {
		return m.Window
	}
	return nil
}

func (m *SelectAndScatterRequest) GetSelect() *ComputationHandle {
	if m != nil {
		return m.Select
	}
	return nil
}

func (m *SelectAndScatterRequest) GetScatter() *ComputationHandle {
	if m != nil {
		return m.Scatter
	}
	return nil
}

type ReverseRequest struct {
	Operand    *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	Dimensions []int64                `protobuf:"varint,3,rep,packed,name=dimensions" json:"dimensions,omitempty"`
}

func (m *ReverseRequest) Reset()                    { *m = ReverseRequest{} }
func (*ReverseRequest) ProtoMessage()               {}
func (*ReverseRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{35} }

func (m *ReverseRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *ReverseRequest) GetDimensions() []int64 {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

type BroadcastRequest struct {
	Operand        *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	BroadcastSizes []int64                `protobuf:"varint,3,rep,packed,name=broadcast_sizes,json=broadcastSizes" json:"broadcast_sizes,omitempty"`
}

func (m *BroadcastRequest) Reset()                    { *m = BroadcastRequest{} }
func (*BroadcastRequest) ProtoMessage()               {}
func (*BroadcastRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{36} }

func (m *BroadcastRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *BroadcastRequest) GetBroadcastSizes() []int64 {
	if m != nil {
		return m.BroadcastSizes
	}
	return nil
}

type PadRequest struct {
	Operand       *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	PaddingValue  *ComputationDataHandle `protobuf:"bytes,3,opt,name=padding_value,json=paddingValue" json:"padding_value,omitempty"`
	PaddingConfig *PaddingConfig         `protobuf:"bytes,4,opt,name=padding_config,json=paddingConfig" json:"padding_config,omitempty"`
}

func (m *PadRequest) Reset()                    { *m = PadRequest{} }
func (*PadRequest) ProtoMessage()               {}
func (*PadRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{37} }

func (m *PadRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *PadRequest) GetPaddingValue() *ComputationDataHandle {
	if m != nil {
		return m.PaddingValue
	}
	return nil
}

func (m *PadRequest) GetPaddingConfig() *PaddingConfig {
	if m != nil {
		return m.PaddingConfig
	}
	return nil
}

type ReshapeRequest struct {
	Operand *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	// The dimension order for collapse (from fastest-changing to slowest).
	Dimensions []int64 `protobuf:"varint,3,rep,packed,name=dimensions" json:"dimensions,omitempty"`
	// The new dimension sizes (from dimension 0 to n-1).
	NewSizes []int64 `protobuf:"varint,4,rep,packed,name=new_sizes,json=newSizes" json:"new_sizes,omitempty"`
}

func (m *ReshapeRequest) Reset()                    { *m = ReshapeRequest{} }
func (*ReshapeRequest) ProtoMessage()               {}
func (*ReshapeRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{38} }

func (m *ReshapeRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *ReshapeRequest) GetDimensions() []int64 {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

func (m *ReshapeRequest) GetNewSizes() []int64 {
	if m != nil {
		return m.NewSizes
	}
	return nil
}

type TransposeRequest struct {
	Operand *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	// The permutation of the operand's dimensions (in the range 0 to n-1).
	Dimensions []int64 `protobuf:"varint,3,rep,packed,name=dimensions" json:"dimensions,omitempty"`
}

func (m *TransposeRequest) Reset()                    { *m = TransposeRequest{} }
func (*TransposeRequest) ProtoMessage()               {}
func (*TransposeRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{39} }

func (m *TransposeRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *TransposeRequest) GetDimensions() []int64 {
	if m != nil {
		return m.Dimensions
	}
	return nil
}

type ParameterRequest struct {
	Shape     *Shape `protobuf:"bytes,2,opt,name=shape" json:"shape,omitempty"`
	Parameter int64  `protobuf:"varint,3,opt,name=parameter,proto3" json:"parameter,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ParameterRequest) Reset()                    { *m = ParameterRequest{} }
func (*ParameterRequest) ProtoMessage()               {}
func (*ParameterRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{40} }

func (m *ParameterRequest) GetShape() *Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *ParameterRequest) GetParameter() int64 {
	if m != nil {
		return m.Parameter
	}
	return 0
}

func (m *ParameterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetLocalShapeRequest struct {
	Computation *ComputationHandle     `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
	Operand     *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
}

func (m *GetLocalShapeRequest) Reset()                    { *m = GetLocalShapeRequest{} }
func (*GetLocalShapeRequest) ProtoMessage()               {}
func (*GetLocalShapeRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{41} }

func (m *GetLocalShapeRequest) GetComputation() *ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

func (m *GetLocalShapeRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

type GetLocalShapeResponse struct {
	Shape *Shape `protobuf:"bytes,1,opt,name=shape" json:"shape,omitempty"`
}

func (m *GetLocalShapeResponse) Reset()                    { *m = GetLocalShapeResponse{} }
func (*GetLocalShapeResponse) ProtoMessage()               {}
func (*GetLocalShapeResponse) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{42} }

func (m *GetLocalShapeResponse) GetShape() *Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

type TraceRequest struct {
	Tag     string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Operand *ComputationDataHandle `protobuf:"bytes,3,opt,name=operand" json:"operand,omitempty"`
}

func (m *TraceRequest) Reset()                    { *m = TraceRequest{} }
func (*TraceRequest) ProtoMessage()               {}
func (*TraceRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{43} }

func (m *TraceRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *TraceRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

type ConvertRequest struct {
	Operand        *ComputationDataHandle `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	NewElementType PrimitiveType          `protobuf:"varint,3,opt,name=new_element_type,json=newElementType,proto3,enum=xla.PrimitiveType" json:"new_element_type,omitempty"`
}

func (m *ConvertRequest) Reset()                    { *m = ConvertRequest{} }
func (*ConvertRequest) ProtoMessage()               {}
func (*ConvertRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{44} }

func (m *ConvertRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *ConvertRequest) GetNewElementType() PrimitiveType {
	if m != nil {
		return m.NewElementType
	}
	return PRIMITIVE_TYPE_INVALID
}

type ConcatenateRequest struct {
	Operands []*ComputationDataHandle `protobuf:"bytes,2,rep,name=operands" json:"operands,omitempty"`
	// The dimension in which we concatenate; e.g. if you had dimension arrays of
	// [4, 1] and [5, 1], you'd concatenate in dimension 0 to produce a [9, 1].
	// Attempting to concatenate those in dimension 1 would produce an error, as
	// 4 != 5 (and there is no ragged array support).
	Dimension int64 `protobuf:"varint,3,opt,name=dimension,proto3" json:"dimension,omitempty"`
}

func (m *ConcatenateRequest) Reset()                    { *m = ConcatenateRequest{} }
func (*ConcatenateRequest) ProtoMessage()               {}
func (*ConcatenateRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{45} }

func (m *ConcatenateRequest) GetOperands() []*ComputationDataHandle {
	if m != nil {
		return m.Operands
	}
	return nil
}

func (m *ConcatenateRequest) GetDimension() int64 {
	if m != nil {
		return m.Dimension
	}
	return 0
}

type WhileRequest struct {
	Condition *ComputationHandle     `protobuf:"bytes,2,opt,name=condition" json:"condition,omitempty"`
	Body      *ComputationHandle     `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
	Init      *ComputationDataHandle `protobuf:"bytes,4,opt,name=init" json:"init,omitempty"`
}

func (m *WhileRequest) Reset()                    { *m = WhileRequest{} }
func (*WhileRequest) ProtoMessage()               {}
func (*WhileRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{46} }

func (m *WhileRequest) GetCondition() *ComputationHandle {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *WhileRequest) GetBody() *ComputationHandle {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *WhileRequest) GetInit() *ComputationDataHandle {
	if m != nil {
		return m.Init
	}
	return nil
}

type UnaryOpRequest struct {
	Unop    UnaryOperation         `protobuf:"varint,2,opt,name=unop,proto3,enum=xla.UnaryOperation" json:"unop,omitempty"`
	Operand *ComputationDataHandle `protobuf:"bytes,3,opt,name=operand" json:"operand,omitempty"`
}

func (m *UnaryOpRequest) Reset()                    { *m = UnaryOpRequest{} }
func (*UnaryOpRequest) ProtoMessage()               {}
func (*UnaryOpRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{47} }

func (m *UnaryOpRequest) GetUnop() UnaryOperation {
	if m != nil {
		return m.Unop
	}
	return UNOP_INVALID
}

func (m *UnaryOpRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

type BinaryOpRequest struct {
	Binop               BinaryOperation        `protobuf:"varint,2,opt,name=binop,proto3,enum=xla.BinaryOperation" json:"binop,omitempty"`
	Lhs                 *ComputationDataHandle `protobuf:"bytes,3,opt,name=lhs" json:"lhs,omitempty"`
	Rhs                 *ComputationDataHandle `protobuf:"bytes,4,opt,name=rhs" json:"rhs,omitempty"`
	BroadcastDimensions []int64                `protobuf:"varint,5,rep,packed,name=broadcast_dimensions,json=broadcastDimensions" json:"broadcast_dimensions,omitempty"`
}

func (m *BinaryOpRequest) Reset()                    { *m = BinaryOpRequest{} }
func (*BinaryOpRequest) ProtoMessage()               {}
func (*BinaryOpRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{48} }

func (m *BinaryOpRequest) GetBinop() BinaryOperation {
	if m != nil {
		return m.Binop
	}
	return BINOP_INVALID
}

func (m *BinaryOpRequest) GetLhs() *ComputationDataHandle {
	if m != nil {
		return m.Lhs
	}
	return nil
}

func (m *BinaryOpRequest) GetRhs() *ComputationDataHandle {
	if m != nil {
		return m.Rhs
	}
	return nil
}

func (m *BinaryOpRequest) GetBroadcastDimensions() []int64 {
	if m != nil {
		return m.BroadcastDimensions
	}
	return nil
}

type RngRequest struct {
	Distribution RandomDistribution       `protobuf:"varint,2,opt,name=distribution,proto3,enum=xla.RandomDistribution" json:"distribution,omitempty"`
	Parameter    []*ComputationDataHandle `protobuf:"bytes,3,rep,name=parameter" json:"parameter,omitempty"`
	Shape        *Shape                   `protobuf:"bytes,4,opt,name=shape" json:"shape,omitempty"`
}

func (m *RngRequest) Reset()                    { *m = RngRequest{} }
func (*RngRequest) ProtoMessage()               {}
func (*RngRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{49} }

func (m *RngRequest) GetDistribution() RandomDistribution {
	if m != nil {
		return m.Distribution
	}
	return RNG_INVALID
}

func (m *RngRequest) GetParameter() []*ComputationDataHandle {
	if m != nil {
		return m.Parameter
	}
	return nil
}

func (m *RngRequest) GetShape() *Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

type TernaryOpRequest struct {
	Triop TernaryOperation       `protobuf:"varint,2,opt,name=triop,proto3,enum=xla.TernaryOperation" json:"triop,omitempty"`
	Lhs   *ComputationDataHandle `protobuf:"bytes,3,opt,name=lhs" json:"lhs,omitempty"`
	Rhs   *ComputationDataHandle `protobuf:"bytes,4,opt,name=rhs" json:"rhs,omitempty"`
	Ehs   *ComputationDataHandle `protobuf:"bytes,5,opt,name=ehs" json:"ehs,omitempty"`
}

func (m *TernaryOpRequest) Reset()                    { *m = TernaryOpRequest{} }
func (*TernaryOpRequest) ProtoMessage()               {}
func (*TernaryOpRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{50} }

func (m *TernaryOpRequest) GetTriop() TernaryOperation {
	if m != nil {
		return m.Triop
	}
	return TRIOP_INVALID
}

func (m *TernaryOpRequest) GetLhs() *ComputationDataHandle {
	if m != nil {
		return m.Lhs
	}
	return nil
}

func (m *TernaryOpRequest) GetRhs() *ComputationDataHandle {
	if m != nil {
		return m.Rhs
	}
	return nil
}

func (m *TernaryOpRequest) GetEhs() *ComputationDataHandle {
	if m != nil {
		return m.Ehs
	}
	return nil
}

type VariadicOpRequest struct {
	Varop    VariadicOperation        `protobuf:"varint,2,opt,name=varop,proto3,enum=xla.VariadicOperation" json:"varop,omitempty"`
	Operands []*ComputationDataHandle `protobuf:"bytes,3,rep,name=operands" json:"operands,omitempty"`
}

func (m *VariadicOpRequest) Reset()                    { *m = VariadicOpRequest{} }
func (*VariadicOpRequest) ProtoMessage()               {}
func (*VariadicOpRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{51} }

func (m *VariadicOpRequest) GetVarop() VariadicOperation {
	if m != nil {
		return m.Varop
	}
	return VAROP_INVALID
}

func (m *VariadicOpRequest) GetOperands() []*ComputationDataHandle {
	if m != nil {
		return m.Operands
	}
	return nil
}

type ReducePrecisionRequest struct {
	Operand      *ComputationDataHandle `protobuf:"bytes,1,opt,name=operand" json:"operand,omitempty"`
	ExponentBits int32                  `protobuf:"varint,2,opt,name=exponent_bits,json=exponentBits,proto3" json:"exponent_bits,omitempty"`
	MantissaBits int32                  `protobuf:"varint,3,opt,name=mantissa_bits,json=mantissaBits,proto3" json:"mantissa_bits,omitempty"`
}

func (m *ReducePrecisionRequest) Reset()                    { *m = ReducePrecisionRequest{} }
func (*ReducePrecisionRequest) ProtoMessage()               {}
func (*ReducePrecisionRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{52} }

func (m *ReducePrecisionRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *ReducePrecisionRequest) GetExponentBits() int32 {
	if m != nil {
		return m.ExponentBits
	}
	return 0
}

func (m *ReducePrecisionRequest) GetMantissaBits() int32 {
	if m != nil {
		return m.MantissaBits
	}
	return 0
}

type SendRequest struct {
	Operand       *ComputationDataHandle `protobuf:"bytes,1,opt,name=operand" json:"operand,omitempty"`
	ChannelHandle *ChannelHandle         `protobuf:"bytes,2,opt,name=channel_handle,json=channelHandle" json:"channel_handle,omitempty"`
}

func (m *SendRequest) Reset()                    { *m = SendRequest{} }
func (*SendRequest) ProtoMessage()               {}
func (*SendRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{53} }

func (m *SendRequest) GetOperand() *ComputationDataHandle {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *SendRequest) GetChannelHandle() *ChannelHandle {
	if m != nil {
		return m.ChannelHandle
	}
	return nil
}

type RecvRequest struct {
	Shape         *Shape         `protobuf:"bytes,1,opt,name=shape" json:"shape,omitempty"`
	ChannelHandle *ChannelHandle `protobuf:"bytes,2,opt,name=channel_handle,json=channelHandle" json:"channel_handle,omitempty"`
}

func (m *RecvRequest) Reset()                    { *m = RecvRequest{} }
func (*RecvRequest) ProtoMessage()               {}
func (*RecvRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{54} }

func (m *RecvRequest) GetShape() *Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *RecvRequest) GetChannelHandle() *ChannelHandle {
	if m != nil {
		return m.ChannelHandle
	}
	return nil
}

type OpRequest struct {
	Computation *ComputationHandle `protobuf:"bytes,1,opt,name=computation" json:"computation,omitempty"`
	Metadata    *OpMetadata        `protobuf:"bytes,33,opt,name=metadata" json:"metadata,omitempty"`
	// Types that are valid to be assigned to Op:
	//	*OpRequest_BinaryOpRequest
	//	*OpRequest_BroadcastRequest
	//	*OpRequest_CallRequest
	//	*OpRequest_ConcatenateRequest
	//	*OpRequest_ConstantRequest
	//	*OpRequest_ConvertRequest
	//	*OpRequest_ConvolveRequest
	//	*OpRequest_CrossReplicaSumRequest
	//	*OpRequest_CustomCallRequest
	//	*OpRequest_DynamicSliceRequest
	//	*OpRequest_DynamicUpdateSliceRequest
	//	*OpRequest_GetTupleElementRequest
	//	*OpRequest_InfeedRequest
	//	*OpRequest_MapRequest
	//	*OpRequest_PadRequest
	//	*OpRequest_ParameterRequest
	//	*OpRequest_ReducePrecisionRequest
	//	*OpRequest_ReduceRequest
	//	*OpRequest_ReduceWindowRequest
	//	*OpRequest_ReshapeRequest
	//	*OpRequest_ReverseRequest
	//	*OpRequest_RngRequest
	//	*OpRequest_SelectAndScatterRequest
	//	*OpRequest_SliceRequest
	//	*OpRequest_TernaryOpRequest
	//	*OpRequest_TraceRequest
	//	*OpRequest_TransposeRequest
	//	*OpRequest_UnaryOpRequest
	//	*OpRequest_VariadicOpRequest
	//	*OpRequest_WhileRequest
	//	*OpRequest_SendRequest
	//	*OpRequest_RecvRequest
	//	*OpRequest_OutfeedRequest
	//	*OpRequest_BatchNormTrainingRequest
	//	*OpRequest_BatchNormGradRequest
	Op isOpRequest_Op `protobuf_oneof:"op"`
}

func (m *OpRequest) Reset()                    { *m = OpRequest{} }
func (*OpRequest) ProtoMessage()               {}
func (*OpRequest) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{55} }

type isOpRequest_Op interface {
	isOpRequest_Op()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OpRequest_BinaryOpRequest struct {
	BinaryOpRequest *BinaryOpRequest `protobuf:"bytes,2,opt,name=binary_op_request,json=binaryOpRequest,oneof"`
}
type OpRequest_BroadcastRequest struct {
	BroadcastRequest *BroadcastRequest `protobuf:"bytes,3,opt,name=broadcast_request,json=broadcastRequest,oneof"`
}
type OpRequest_CallRequest struct {
	CallRequest *CallRequest `protobuf:"bytes,4,opt,name=call_request,json=callRequest,oneof"`
}
type OpRequest_ConcatenateRequest struct {
	ConcatenateRequest *ConcatenateRequest `protobuf:"bytes,5,opt,name=concatenate_request,json=concatenateRequest,oneof"`
}
type OpRequest_ConstantRequest struct {
	ConstantRequest *ConstantRequest `protobuf:"bytes,6,opt,name=constant_request,json=constantRequest,oneof"`
}
type OpRequest_ConvertRequest struct {
	ConvertRequest *ConvertRequest `protobuf:"bytes,7,opt,name=convert_request,json=convertRequest,oneof"`
}
type OpRequest_ConvolveRequest struct {
	ConvolveRequest *ConvolveRequest `protobuf:"bytes,8,opt,name=convolve_request,json=convolveRequest,oneof"`
}
type OpRequest_CrossReplicaSumRequest struct {
	CrossReplicaSumRequest *CrossReplicaSumRequest `protobuf:"bytes,9,opt,name=cross_replica_sum_request,json=crossReplicaSumRequest,oneof"`
}
type OpRequest_CustomCallRequest struct {
	CustomCallRequest *CustomCallRequest `protobuf:"bytes,10,opt,name=custom_call_request,json=customCallRequest,oneof"`
}
type OpRequest_DynamicSliceRequest struct {
	DynamicSliceRequest *DynamicSliceRequest `protobuf:"bytes,11,opt,name=dynamic_slice_request,json=dynamicSliceRequest,oneof"`
}
type OpRequest_DynamicUpdateSliceRequest struct {
	DynamicUpdateSliceRequest *DynamicUpdateSliceRequest `protobuf:"bytes,12,opt,name=dynamic_update_slice_request,json=dynamicUpdateSliceRequest,oneof"`
}
type OpRequest_GetTupleElementRequest struct {
	GetTupleElementRequest *GetTupleElementRequest `protobuf:"bytes,13,opt,name=get_tuple_element_request,json=getTupleElementRequest,oneof"`
}
type OpRequest_InfeedRequest struct {
	InfeedRequest *InfeedRequest `protobuf:"bytes,14,opt,name=infeed_request,json=infeedRequest,oneof"`
}
type OpRequest_MapRequest struct {
	MapRequest *MapRequest `protobuf:"bytes,15,opt,name=map_request,json=mapRequest,oneof"`
}
type OpRequest_PadRequest struct {
	PadRequest *PadRequest `protobuf:"bytes,16,opt,name=pad_request,json=padRequest,oneof"`
}
type OpRequest_ParameterRequest struct {
	ParameterRequest *ParameterRequest `protobuf:"bytes,17,opt,name=parameter_request,json=parameterRequest,oneof"`
}
type OpRequest_ReducePrecisionRequest struct {
	ReducePrecisionRequest *ReducePrecisionRequest `protobuf:"bytes,36,opt,name=reduce_precision_request,json=reducePrecisionRequest,oneof"`
}
type OpRequest_ReduceRequest struct {
	ReduceRequest *ReduceRequest `protobuf:"bytes,18,opt,name=reduce_request,json=reduceRequest,oneof"`
}
type OpRequest_ReduceWindowRequest struct {
	ReduceWindowRequest *ReduceWindowRequest `protobuf:"bytes,19,opt,name=reduce_window_request,json=reduceWindowRequest,oneof"`
}
type OpRequest_ReshapeRequest struct {
	ReshapeRequest *ReshapeRequest `protobuf:"bytes,20,opt,name=reshape_request,json=reshapeRequest,oneof"`
}
type OpRequest_ReverseRequest struct {
	ReverseRequest *ReverseRequest `protobuf:"bytes,21,opt,name=reverse_request,json=reverseRequest,oneof"`
}
type OpRequest_RngRequest struct {
	RngRequest *RngRequest `protobuf:"bytes,22,opt,name=rng_request,json=rngRequest,oneof"`
}
type OpRequest_SelectAndScatterRequest struct {
	SelectAndScatterRequest *SelectAndScatterRequest `protobuf:"bytes,23,opt,name=select_and_scatter_request,json=selectAndScatterRequest,oneof"`
}
type OpRequest_SliceRequest struct {
	SliceRequest *SliceRequest `protobuf:"bytes,24,opt,name=slice_request,json=sliceRequest,oneof"`
}
type OpRequest_TernaryOpRequest struct {
	TernaryOpRequest *TernaryOpRequest `protobuf:"bytes,25,opt,name=ternary_op_request,json=ternaryOpRequest,oneof"`
}
type OpRequest_TraceRequest struct {
	TraceRequest *TraceRequest `protobuf:"bytes,26,opt,name=trace_request,json=traceRequest,oneof"`
}
type OpRequest_TransposeRequest struct {
	TransposeRequest *TransposeRequest `protobuf:"bytes,34,opt,name=transpose_request,json=transposeRequest,oneof"`
}
type OpRequest_UnaryOpRequest struct {
	UnaryOpRequest *UnaryOpRequest `protobuf:"bytes,27,opt,name=unary_op_request,json=unaryOpRequest,oneof"`
}
type OpRequest_VariadicOpRequest struct {
	VariadicOpRequest *VariadicOpRequest `protobuf:"bytes,28,opt,name=variadic_op_request,json=variadicOpRequest,oneof"`
}
type OpRequest_WhileRequest struct {
	WhileRequest *WhileRequest `protobuf:"bytes,29,opt,name=while_request,json=whileRequest,oneof"`
}
type OpRequest_SendRequest struct {
	SendRequest *SendRequest `protobuf:"bytes,30,opt,name=send_request,json=sendRequest,oneof"`
}
type OpRequest_RecvRequest struct {
	RecvRequest *RecvRequest `protobuf:"bytes,31,opt,name=recv_request,json=recvRequest,oneof"`
}
type OpRequest_OutfeedRequest struct {
	OutfeedRequest *OutfeedRequest `protobuf:"bytes,32,opt,name=outfeed_request,json=outfeedRequest,oneof"`
}
type OpRequest_BatchNormTrainingRequest struct {
	BatchNormTrainingRequest *BatchNormTrainingRequest `protobuf:"bytes,35,opt,name=batch_norm_training_request,json=batchNormTrainingRequest,oneof"`
}
type OpRequest_BatchNormGradRequest struct {
	BatchNormGradRequest *BatchNormGradRequest `protobuf:"bytes,37,opt,name=batch_norm_grad_request,json=batchNormGradRequest,oneof"`
}

func (*OpRequest_BinaryOpRequest) isOpRequest_Op()           {}
func (*OpRequest_BroadcastRequest) isOpRequest_Op()          {}
func (*OpRequest_CallRequest) isOpRequest_Op()               {}
func (*OpRequest_ConcatenateRequest) isOpRequest_Op()        {}
func (*OpRequest_ConstantRequest) isOpRequest_Op()           {}
func (*OpRequest_ConvertRequest) isOpRequest_Op()            {}
func (*OpRequest_ConvolveRequest) isOpRequest_Op()           {}
func (*OpRequest_CrossReplicaSumRequest) isOpRequest_Op()    {}
func (*OpRequest_CustomCallRequest) isOpRequest_Op()         {}
func (*OpRequest_DynamicSliceRequest) isOpRequest_Op()       {}
func (*OpRequest_DynamicUpdateSliceRequest) isOpRequest_Op() {}
func (*OpRequest_GetTupleElementRequest) isOpRequest_Op()    {}
func (*OpRequest_InfeedRequest) isOpRequest_Op()             {}
func (*OpRequest_MapRequest) isOpRequest_Op()                {}
func (*OpRequest_PadRequest) isOpRequest_Op()                {}
func (*OpRequest_ParameterRequest) isOpRequest_Op()          {}
func (*OpRequest_ReducePrecisionRequest) isOpRequest_Op()    {}
func (*OpRequest_ReduceRequest) isOpRequest_Op()             {}
func (*OpRequest_ReduceWindowRequest) isOpRequest_Op()       {}
func (*OpRequest_ReshapeRequest) isOpRequest_Op()            {}
func (*OpRequest_ReverseRequest) isOpRequest_Op()            {}
func (*OpRequest_RngRequest) isOpRequest_Op()                {}
func (*OpRequest_SelectAndScatterRequest) isOpRequest_Op()   {}
func (*OpRequest_SliceRequest) isOpRequest_Op()              {}
func (*OpRequest_TernaryOpRequest) isOpRequest_Op()          {}
func (*OpRequest_TraceRequest) isOpRequest_Op()              {}
func (*OpRequest_TransposeRequest) isOpRequest_Op()          {}
func (*OpRequest_UnaryOpRequest) isOpRequest_Op()            {}
func (*OpRequest_VariadicOpRequest) isOpRequest_Op()         {}
func (*OpRequest_WhileRequest) isOpRequest_Op()              {}
func (*OpRequest_SendRequest) isOpRequest_Op()               {}
func (*OpRequest_RecvRequest) isOpRequest_Op()               {}
func (*OpRequest_OutfeedRequest) isOpRequest_Op()            {}
func (*OpRequest_BatchNormTrainingRequest) isOpRequest_Op()  {}
func (*OpRequest_BatchNormGradRequest) isOpRequest_Op()      {}

func (m *OpRequest) GetOp() isOpRequest_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *OpRequest) GetComputation() *ComputationHandle {
	if m != nil {
		return m.Computation
	}
	return nil
}

func (m *OpRequest) GetMetadata() *OpMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *OpRequest) GetBinaryOpRequest() *BinaryOpRequest {
	if x, ok := m.GetOp().(*OpRequest_BinaryOpRequest); ok {
		return x.BinaryOpRequest
	}
	return nil
}

func (m *OpRequest) GetBroadcastRequest() *BroadcastRequest {
	if x, ok := m.GetOp().(*OpRequest_BroadcastRequest); ok {
		return x.BroadcastRequest
	}
	return nil
}

func (m *OpRequest) GetCallRequest() *CallRequest {
	if x, ok := m.GetOp().(*OpRequest_CallRequest); ok {
		return x.CallRequest
	}
	return nil
}

func (m *OpRequest) GetConcatenateRequest() *ConcatenateRequest {
	if x, ok := m.GetOp().(*OpRequest_ConcatenateRequest); ok {
		return x.ConcatenateRequest
	}
	return nil
}

func (m *OpRequest) GetConstantRequest() *ConstantRequest {
	if x, ok := m.GetOp().(*OpRequest_ConstantRequest); ok {
		return x.ConstantRequest
	}
	return nil
}

func (m *OpRequest) GetConvertRequest() *ConvertRequest {
	if x, ok := m.GetOp().(*OpRequest_ConvertRequest); ok {
		return x.ConvertRequest
	}
	return nil
}

func (m *OpRequest) GetConvolveRequest() *ConvolveRequest {
	if x, ok := m.GetOp().(*OpRequest_ConvolveRequest); ok {
		return x.ConvolveRequest
	}
	return nil
}

func (m *OpRequest) GetCrossReplicaSumRequest() *CrossReplicaSumRequest {
	if x, ok := m.GetOp().(*OpRequest_CrossReplicaSumRequest); ok {
		return x.CrossReplicaSumRequest
	}
	return nil
}

func (m *OpRequest) GetCustomCallRequest() *CustomCallRequest {
	if x, ok := m.GetOp().(*OpRequest_CustomCallRequest); ok {
		return x.CustomCallRequest
	}
	return nil
}

func (m *OpRequest) GetDynamicSliceRequest() *DynamicSliceRequest {
	if x, ok := m.GetOp().(*OpRequest_DynamicSliceRequest); ok {
		return x.DynamicSliceRequest
	}
	return nil
}

func (m *OpRequest) GetDynamicUpdateSliceRequest() *DynamicUpdateSliceRequest {
	if x, ok := m.GetOp().(*OpRequest_DynamicUpdateSliceRequest); ok {
		return x.DynamicUpdateSliceRequest
	}
	return nil
}

func (m *OpRequest) GetGetTupleElementRequest() *GetTupleElementRequest {
	if x, ok := m.GetOp().(*OpRequest_GetTupleElementRequest); ok {
		return x.GetTupleElementRequest
	}
	return nil
}

func (m *OpRequest) GetInfeedRequest() *InfeedRequest {
	if x, ok := m.GetOp().(*OpRequest_InfeedRequest); ok {
		return x.InfeedRequest
	}
	return nil
}

func (m *OpRequest) GetMapRequest() *MapRequest {
	if x, ok := m.GetOp().(*OpRequest_MapRequest); ok {
		return x.MapRequest
	}
	return nil
}

func (m *OpRequest) GetPadRequest() *PadRequest {
	if x, ok := m.GetOp().(*OpRequest_PadRequest); ok {
		return x.PadRequest
	}
	return nil
}

func (m *OpRequest) GetParameterRequest() *ParameterRequest {
	if x, ok := m.GetOp().(*OpRequest_ParameterRequest); ok {
		return x.ParameterRequest
	}
	return nil
}

func (m *OpRequest) GetReducePrecisionRequest() *ReducePrecisionRequest {
	if x, ok := m.GetOp().(*OpRequest_ReducePrecisionRequest); ok {
		return x.ReducePrecisionRequest
	}
	return nil
}

func (m *OpRequest) GetReduceRequest() *ReduceRequest {
	if x, ok := m.GetOp().(*OpRequest_ReduceRequest); ok {
		return x.ReduceRequest
	}
	return nil
}

func (m *OpRequest) GetReduceWindowRequest() *ReduceWindowRequest {
	if x, ok := m.GetOp().(*OpRequest_ReduceWindowRequest); ok {
		return x.ReduceWindowRequest
	}
	return nil
}

func (m *OpRequest) GetReshapeRequest() *ReshapeRequest {
	if x, ok := m.GetOp().(*OpRequest_ReshapeRequest); ok {
		return x.ReshapeRequest
	}
	return nil
}

func (m *OpRequest) GetReverseRequest() *ReverseRequest {
	if x, ok := m.GetOp().(*OpRequest_ReverseRequest); ok {
		return x.ReverseRequest
	}
	return nil
}

func (m *OpRequest) GetRngRequest() *RngRequest {
	if x, ok := m.GetOp().(*OpRequest_RngRequest); ok {
		return x.RngRequest
	}
	return nil
}

func (m *OpRequest) GetSelectAndScatterRequest() *SelectAndScatterRequest {
	if x, ok := m.GetOp().(*OpRequest_SelectAndScatterRequest); ok {
		return x.SelectAndScatterRequest
	}
	return nil
}

func (m *OpRequest) GetSliceRequest() *SliceRequest {
	if x, ok := m.GetOp().(*OpRequest_SliceRequest); ok {
		return x.SliceRequest
	}
	return nil
}

func (m *OpRequest) GetTernaryOpRequest() *TernaryOpRequest {
	if x, ok := m.GetOp().(*OpRequest_TernaryOpRequest); ok {
		return x.TernaryOpRequest
	}
	return nil
}

func (m *OpRequest) GetTraceRequest() *TraceRequest {
	if x, ok := m.GetOp().(*OpRequest_TraceRequest); ok {
		return x.TraceRequest
	}
	return nil
}

func (m *OpRequest) GetTransposeRequest() *TransposeRequest {
	if x, ok := m.GetOp().(*OpRequest_TransposeRequest); ok {
		return x.TransposeRequest
	}
	return nil
}

func (m *OpRequest) GetUnaryOpRequest() *UnaryOpRequest {
	if x, ok := m.GetOp().(*OpRequest_UnaryOpRequest); ok {
		return x.UnaryOpRequest
	}
	return nil
}

func (m *OpRequest) GetVariadicOpRequest() *VariadicOpRequest {
	if x, ok := m.GetOp().(*OpRequest_VariadicOpRequest); ok {
		return x.VariadicOpRequest
	}
	return nil
}

func (m *OpRequest) GetWhileRequest() *WhileRequest {
	if x, ok := m.GetOp().(*OpRequest_WhileRequest); ok {
		return x.WhileRequest
	}
	return nil
}

func (m *OpRequest) GetSendRequest() *SendRequest {
	if x, ok := m.GetOp().(*OpRequest_SendRequest); ok {
		return x.SendRequest
	}
	return nil
}

func (m *OpRequest) GetRecvRequest() *RecvRequest {
	if x, ok := m.GetOp().(*OpRequest_RecvRequest); ok {
		return x.RecvRequest
	}
	return nil
}

func (m *OpRequest) GetOutfeedRequest() *OutfeedRequest {
	if x, ok := m.GetOp().(*OpRequest_OutfeedRequest); ok {
		return x.OutfeedRequest
	}
	return nil
}

func (m *OpRequest) GetBatchNormTrainingRequest() *BatchNormTrainingRequest {
	if x, ok := m.GetOp().(*OpRequest_BatchNormTrainingRequest); ok {
		return x.BatchNormTrainingRequest
	}
	return nil
}

func (m *OpRequest) GetBatchNormGradRequest() *BatchNormGradRequest {
	if x, ok := m.GetOp().(*OpRequest_BatchNormGradRequest); ok {
		return x.BatchNormGradRequest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OpRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OpRequest_OneofMarshaler, _OpRequest_OneofUnmarshaler, _OpRequest_OneofSizer, []interface{}{
		(*OpRequest_BinaryOpRequest)(nil),
		(*OpRequest_BroadcastRequest)(nil),
		(*OpRequest_CallRequest)(nil),
		(*OpRequest_ConcatenateRequest)(nil),
		(*OpRequest_ConstantRequest)(nil),
		(*OpRequest_ConvertRequest)(nil),
		(*OpRequest_ConvolveRequest)(nil),
		(*OpRequest_CrossReplicaSumRequest)(nil),
		(*OpRequest_CustomCallRequest)(nil),
		(*OpRequest_DynamicSliceRequest)(nil),
		(*OpRequest_DynamicUpdateSliceRequest)(nil),
		(*OpRequest_GetTupleElementRequest)(nil),
		(*OpRequest_InfeedRequest)(nil),
		(*OpRequest_MapRequest)(nil),
		(*OpRequest_PadRequest)(nil),
		(*OpRequest_ParameterRequest)(nil),
		(*OpRequest_ReducePrecisionRequest)(nil),
		(*OpRequest_ReduceRequest)(nil),
		(*OpRequest_ReduceWindowRequest)(nil),
		(*OpRequest_ReshapeRequest)(nil),
		(*OpRequest_ReverseRequest)(nil),
		(*OpRequest_RngRequest)(nil),
		(*OpRequest_SelectAndScatterRequest)(nil),
		(*OpRequest_SliceRequest)(nil),
		(*OpRequest_TernaryOpRequest)(nil),
		(*OpRequest_TraceRequest)(nil),
		(*OpRequest_TransposeRequest)(nil),
		(*OpRequest_UnaryOpRequest)(nil),
		(*OpRequest_VariadicOpRequest)(nil),
		(*OpRequest_WhileRequest)(nil),
		(*OpRequest_SendRequest)(nil),
		(*OpRequest_RecvRequest)(nil),
		(*OpRequest_OutfeedRequest)(nil),
		(*OpRequest_BatchNormTrainingRequest)(nil),
		(*OpRequest_BatchNormGradRequest)(nil),
	}
}

func _OpRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OpRequest)
	// op
	switch x := m.Op.(type) {
	case *OpRequest_BinaryOpRequest:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BinaryOpRequest); err != nil {
			return err
		}
	case *OpRequest_BroadcastRequest:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BroadcastRequest); err != nil {
			return err
		}
	case *OpRequest_CallRequest:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CallRequest); err != nil {
			return err
		}
	case *OpRequest_ConcatenateRequest:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConcatenateRequest); err != nil {
			return err
		}
	case *OpRequest_ConstantRequest:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConstantRequest); err != nil {
			return err
		}
	case *OpRequest_ConvertRequest:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConvertRequest); err != nil {
			return err
		}
	case *OpRequest_ConvolveRequest:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConvolveRequest); err != nil {
			return err
		}
	case *OpRequest_CrossReplicaSumRequest:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CrossReplicaSumRequest); err != nil {
			return err
		}
	case *OpRequest_CustomCallRequest:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomCallRequest); err != nil {
			return err
		}
	case *OpRequest_DynamicSliceRequest:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DynamicSliceRequest); err != nil {
			return err
		}
	case *OpRequest_DynamicUpdateSliceRequest:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DynamicUpdateSliceRequest); err != nil {
			return err
		}
	case *OpRequest_GetTupleElementRequest:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GetTupleElementRequest); err != nil {
			return err
		}
	case *OpRequest_InfeedRequest:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InfeedRequest); err != nil {
			return err
		}
	case *OpRequest_MapRequest:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MapRequest); err != nil {
			return err
		}
	case *OpRequest_PadRequest:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PadRequest); err != nil {
			return err
		}
	case *OpRequest_ParameterRequest:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ParameterRequest); err != nil {
			return err
		}
	case *OpRequest_ReducePrecisionRequest:
		_ = b.EncodeVarint(36<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReducePrecisionRequest); err != nil {
			return err
		}
	case *OpRequest_ReduceRequest:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReduceRequest); err != nil {
			return err
		}
	case *OpRequest_ReduceWindowRequest:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReduceWindowRequest); err != nil {
			return err
		}
	case *OpRequest_ReshapeRequest:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReshapeRequest); err != nil {
			return err
		}
	case *OpRequest_ReverseRequest:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReverseRequest); err != nil {
			return err
		}
	case *OpRequest_RngRequest:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RngRequest); err != nil {
			return err
		}
	case *OpRequest_SelectAndScatterRequest:
		_ = b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SelectAndScatterRequest); err != nil {
			return err
		}
	case *OpRequest_SliceRequest:
		_ = b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SliceRequest); err != nil {
			return err
		}
	case *OpRequest_TernaryOpRequest:
		_ = b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TernaryOpRequest); err != nil {
			return err
		}
	case *OpRequest_TraceRequest:
		_ = b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TraceRequest); err != nil {
			return err
		}
	case *OpRequest_TransposeRequest:
		_ = b.EncodeVarint(34<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TransposeRequest); err != nil {
			return err
		}
	case *OpRequest_UnaryOpRequest:
		_ = b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnaryOpRequest); err != nil {
			return err
		}
	case *OpRequest_VariadicOpRequest:
		_ = b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.VariadicOpRequest); err != nil {
			return err
		}
	case *OpRequest_WhileRequest:
		_ = b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WhileRequest); err != nil {
			return err
		}
	case *OpRequest_SendRequest:
		_ = b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SendRequest); err != nil {
			return err
		}
	case *OpRequest_RecvRequest:
		_ = b.EncodeVarint(31<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RecvRequest); err != nil {
			return err
		}
	case *OpRequest_OutfeedRequest:
		_ = b.EncodeVarint(32<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OutfeedRequest); err != nil {
			return err
		}
	case *OpRequest_BatchNormTrainingRequest:
		_ = b.EncodeVarint(35<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchNormTrainingRequest); err != nil {
			return err
		}
	case *OpRequest_BatchNormGradRequest:
		_ = b.EncodeVarint(37<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BatchNormGradRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OpRequest.Op has unexpected type %T", x)
	}
	return nil
}

func _OpRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OpRequest)
	switch tag {
	case 2: // op.binary_op_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BinaryOpRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_BinaryOpRequest{msg}
		return true, err
	case 3: // op.broadcast_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BroadcastRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_BroadcastRequest{msg}
		return true, err
	case 4: // op.call_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CallRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_CallRequest{msg}
		return true, err
	case 5: // op.concatenate_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConcatenateRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ConcatenateRequest{msg}
		return true, err
	case 6: // op.constant_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConstantRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ConstantRequest{msg}
		return true, err
	case 7: // op.convert_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConvertRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ConvertRequest{msg}
		return true, err
	case 8: // op.convolve_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConvolveRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ConvolveRequest{msg}
		return true, err
	case 9: // op.cross_replica_sum_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CrossReplicaSumRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_CrossReplicaSumRequest{msg}
		return true, err
	case 10: // op.custom_call_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CustomCallRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_CustomCallRequest{msg}
		return true, err
	case 11: // op.dynamic_slice_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DynamicSliceRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_DynamicSliceRequest{msg}
		return true, err
	case 12: // op.dynamic_update_slice_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DynamicUpdateSliceRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_DynamicUpdateSliceRequest{msg}
		return true, err
	case 13: // op.get_tuple_element_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GetTupleElementRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_GetTupleElementRequest{msg}
		return true, err
	case 14: // op.infeed_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InfeedRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_InfeedRequest{msg}
		return true, err
	case 15: // op.map_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MapRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_MapRequest{msg}
		return true, err
	case 16: // op.pad_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PadRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_PadRequest{msg}
		return true, err
	case 17: // op.parameter_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ParameterRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ParameterRequest{msg}
		return true, err
	case 36: // op.reduce_precision_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReducePrecisionRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ReducePrecisionRequest{msg}
		return true, err
	case 18: // op.reduce_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReduceRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ReduceRequest{msg}
		return true, err
	case 19: // op.reduce_window_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReduceWindowRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ReduceWindowRequest{msg}
		return true, err
	case 20: // op.reshape_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReshapeRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ReshapeRequest{msg}
		return true, err
	case 21: // op.reverse_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReverseRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_ReverseRequest{msg}
		return true, err
	case 22: // op.rng_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RngRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_RngRequest{msg}
		return true, err
	case 23: // op.select_and_scatter_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SelectAndScatterRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_SelectAndScatterRequest{msg}
		return true, err
	case 24: // op.slice_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SliceRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_SliceRequest{msg}
		return true, err
	case 25: // op.ternary_op_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TernaryOpRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_TernaryOpRequest{msg}
		return true, err
	case 26: // op.trace_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TraceRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_TraceRequest{msg}
		return true, err
	case 34: // op.transpose_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransposeRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_TransposeRequest{msg}
		return true, err
	case 27: // op.unary_op_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UnaryOpRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_UnaryOpRequest{msg}
		return true, err
	case 28: // op.variadic_op_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VariadicOpRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_VariadicOpRequest{msg}
		return true, err
	case 29: // op.while_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WhileRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_WhileRequest{msg}
		return true, err
	case 30: // op.send_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SendRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_SendRequest{msg}
		return true, err
	case 31: // op.recv_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RecvRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_RecvRequest{msg}
		return true, err
	case 32: // op.outfeed_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OutfeedRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_OutfeedRequest{msg}
		return true, err
	case 35: // op.batch_norm_training_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchNormTrainingRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_BatchNormTrainingRequest{msg}
		return true, err
	case 37: // op.batch_norm_grad_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BatchNormGradRequest)
		err := b.DecodeMessage(msg)
		m.Op = &OpRequest_BatchNormGradRequest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OpRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OpRequest)
	// op
	switch x := m.Op.(type) {
	case *OpRequest_BinaryOpRequest:
		s := proto.Size(x.BinaryOpRequest)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_BroadcastRequest:
		s := proto.Size(x.BroadcastRequest)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_CallRequest:
		s := proto.Size(x.CallRequest)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ConcatenateRequest:
		s := proto.Size(x.ConcatenateRequest)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ConstantRequest:
		s := proto.Size(x.ConstantRequest)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ConvertRequest:
		s := proto.Size(x.ConvertRequest)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ConvolveRequest:
		s := proto.Size(x.ConvolveRequest)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_CrossReplicaSumRequest:
		s := proto.Size(x.CrossReplicaSumRequest)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_CustomCallRequest:
		s := proto.Size(x.CustomCallRequest)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_DynamicSliceRequest:
		s := proto.Size(x.DynamicSliceRequest)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_DynamicUpdateSliceRequest:
		s := proto.Size(x.DynamicUpdateSliceRequest)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_GetTupleElementRequest:
		s := proto.Size(x.GetTupleElementRequest)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_InfeedRequest:
		s := proto.Size(x.InfeedRequest)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_MapRequest:
		s := proto.Size(x.MapRequest)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_PadRequest:
		s := proto.Size(x.PadRequest)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ParameterRequest:
		s := proto.Size(x.ParameterRequest)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ReducePrecisionRequest:
		s := proto.Size(x.ReducePrecisionRequest)
		n += proto.SizeVarint(36<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ReduceRequest:
		s := proto.Size(x.ReduceRequest)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ReduceWindowRequest:
		s := proto.Size(x.ReduceWindowRequest)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ReshapeRequest:
		s := proto.Size(x.ReshapeRequest)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_ReverseRequest:
		s := proto.Size(x.ReverseRequest)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_RngRequest:
		s := proto.Size(x.RngRequest)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_SelectAndScatterRequest:
		s := proto.Size(x.SelectAndScatterRequest)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_SliceRequest:
		s := proto.Size(x.SliceRequest)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_TernaryOpRequest:
		s := proto.Size(x.TernaryOpRequest)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_TraceRequest:
		s := proto.Size(x.TraceRequest)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_TransposeRequest:
		s := proto.Size(x.TransposeRequest)
		n += proto.SizeVarint(34<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_UnaryOpRequest:
		s := proto.Size(x.UnaryOpRequest)
		n += proto.SizeVarint(27<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_VariadicOpRequest:
		s := proto.Size(x.VariadicOpRequest)
		n += proto.SizeVarint(28<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_WhileRequest:
		s := proto.Size(x.WhileRequest)
		n += proto.SizeVarint(29<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_SendRequest:
		s := proto.Size(x.SendRequest)
		n += proto.SizeVarint(30<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_RecvRequest:
		s := proto.Size(x.RecvRequest)
		n += proto.SizeVarint(31<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_OutfeedRequest:
		s := proto.Size(x.OutfeedRequest)
		n += proto.SizeVarint(32<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_BatchNormTrainingRequest:
		s := proto.Size(x.BatchNormTrainingRequest)
		n += proto.SizeVarint(35<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OpRequest_BatchNormGradRequest:
		s := proto.Size(x.BatchNormGradRequest)
		n += proto.SizeVarint(37<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type OpResponse struct {
	Output *ComputationDataHandle `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *OpResponse) Reset()                    { *m = OpResponse{} }
func (*OpResponse) ProtoMessage()               {}
func (*OpResponse) Descriptor() ([]byte, []int) { return fileDescriptorXlaData, []int{56} }

func (m *OpResponse) GetOutput() *ComputationDataHandle {
	if m != nil {
		return m.Output
	}
	return nil
}

func init() {
	proto.RegisterType((*PaddingConfig)(nil), "xla.PaddingConfig")
	proto.RegisterType((*PaddingConfig_PaddingConfigDimension)(nil), "xla.PaddingConfig.PaddingConfigDimension")
	proto.RegisterType((*Layout)(nil), "xla.Layout")
	proto.RegisterType((*Shape)(nil), "xla.Shape")
	proto.RegisterType((*ProgramShape)(nil), "xla.ProgramShape")
	proto.RegisterType((*ComputationStats)(nil), "xla.ComputationStats")
	proto.RegisterType((*OpMetadata)(nil), "xla.OpMetadata")
	proto.RegisterType((*ExecutionProfile)(nil), "xla.ExecutionProfile")
	proto.RegisterType((*ComputationHandle)(nil), "xla.ComputationHandle")
	proto.RegisterType((*ExecutionHandle)(nil), "xla.ExecutionHandle")
	proto.RegisterType((*GlobalDataHandle)(nil), "xla.GlobalDataHandle")
	proto.RegisterType((*ComputationDataHandle)(nil), "xla.ComputationDataHandle")
	proto.RegisterType((*DeviceHandle)(nil), "xla.DeviceHandle")
	proto.RegisterType((*ChannelHandle)(nil), "xla.ChannelHandle")
	proto.RegisterType((*DeviceAssignmentProto)(nil), "xla.DeviceAssignmentProto")
	proto.RegisterType((*DeviceAssignmentProto_ComputationDevice)(nil), "xla.DeviceAssignmentProto.ComputationDevice")
	proto.RegisterType((*LiteralProto)(nil), "xla.LiteralProto")
	proto.RegisterType((*WindowDimension)(nil), "xla.WindowDimension")
	proto.RegisterType((*Window)(nil), "xla.Window")
	proto.RegisterType((*ConstantRequest)(nil), "xla.ConstantRequest")
	proto.RegisterType((*GetTupleElementRequest)(nil), "xla.GetTupleElementRequest")
	proto.RegisterType((*SliceRequest)(nil), "xla.SliceRequest")
	proto.RegisterType((*DynamicSliceRequest)(nil), "xla.DynamicSliceRequest")
	proto.RegisterType((*DynamicUpdateSliceRequest)(nil), "xla.DynamicUpdateSliceRequest")
	proto.RegisterType((*ConvolutionDimensionNumbers)(nil), "xla.ConvolutionDimensionNumbers")
	proto.RegisterType((*ConvolveRequest)(nil), "xla.ConvolveRequest")
	proto.RegisterType((*InfeedRequest)(nil), "xla.InfeedRequest")
	proto.RegisterType((*OutfeedRequest)(nil), "xla.OutfeedRequest")
	proto.RegisterType((*CallRequest)(nil), "xla.CallRequest")
	proto.RegisterType((*CustomCallRequest)(nil), "xla.CustomCallRequest")
	proto.RegisterType((*MapRequest)(nil), "xla.MapRequest")
	proto.RegisterType((*ReduceRequest)(nil), "xla.ReduceRequest")
	proto.RegisterType((*ReduceWindowRequest)(nil), "xla.ReduceWindowRequest")
	proto.RegisterType((*BatchNormTrainingRequest)(nil), "xla.BatchNormTrainingRequest")
	proto.RegisterType((*BatchNormGradRequest)(nil), "xla.BatchNormGradRequest")
	proto.RegisterType((*CrossReplicaSumRequest)(nil), "xla.CrossReplicaSumRequest")
	proto.RegisterType((*SelectAndScatterRequest)(nil), "xla.SelectAndScatterRequest")
	proto.RegisterType((*ReverseRequest)(nil), "xla.ReverseRequest")
	proto.RegisterType((*BroadcastRequest)(nil), "xla.BroadcastRequest")
	proto.RegisterType((*PadRequest)(nil), "xla.PadRequest")
	proto.RegisterType((*ReshapeRequest)(nil), "xla.ReshapeRequest")
	proto.RegisterType((*TransposeRequest)(nil), "xla.TransposeRequest")
	proto.RegisterType((*ParameterRequest)(nil), "xla.ParameterRequest")
	proto.RegisterType((*GetLocalShapeRequest)(nil), "xla.GetLocalShapeRequest")
	proto.RegisterType((*GetLocalShapeResponse)(nil), "xla.GetLocalShapeResponse")
	proto.RegisterType((*TraceRequest)(nil), "xla.TraceRequest")
	proto.RegisterType((*ConvertRequest)(nil), "xla.ConvertRequest")
	proto.RegisterType((*ConcatenateRequest)(nil), "xla.ConcatenateRequest")
	proto.RegisterType((*WhileRequest)(nil), "xla.WhileRequest")
	proto.RegisterType((*UnaryOpRequest)(nil), "xla.UnaryOpRequest")
	proto.RegisterType((*BinaryOpRequest)(nil), "xla.BinaryOpRequest")
	proto.RegisterType((*RngRequest)(nil), "xla.RngRequest")
	proto.RegisterType((*TernaryOpRequest)(nil), "xla.TernaryOpRequest")
	proto.RegisterType((*VariadicOpRequest)(nil), "xla.VariadicOpRequest")
	proto.RegisterType((*ReducePrecisionRequest)(nil), "xla.ReducePrecisionRequest")
	proto.RegisterType((*SendRequest)(nil), "xla.SendRequest")
	proto.RegisterType((*RecvRequest)(nil), "xla.RecvRequest")
	proto.RegisterType((*OpRequest)(nil), "xla.OpRequest")
	proto.RegisterType((*OpResponse)(nil), "xla.OpResponse")
	proto.RegisterEnum("xla.PrimitiveType", PrimitiveType_name, PrimitiveType_value)
	proto.RegisterEnum("xla.PaddingValue", PaddingValue_name, PaddingValue_value)
	proto.RegisterEnum("xla.UnaryOperation", UnaryOperation_name, UnaryOperation_value)
	proto.RegisterEnum("xla.BinaryOperation", BinaryOperation_name, BinaryOperation_value)
	proto.RegisterEnum("xla.RandomDistribution", RandomDistribution_name, RandomDistribution_value)
	proto.RegisterEnum("xla.TernaryOperation", TernaryOperation_name, TernaryOperation_value)
	proto.RegisterEnum("xla.VariadicOperation", VariadicOperation_name, VariadicOperation_value)
}
func (x PrimitiveType) String() string {
	s, ok := PrimitiveType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PaddingValue) String() string {
	s, ok := PaddingValue_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UnaryOperation) String() string {
	s, ok := UnaryOperation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x BinaryOperation) String() string {
	s, ok := BinaryOperation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RandomDistribution) String() string {
	s, ok := RandomDistribution_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TernaryOperation) String() string {
	s, ok := TernaryOperation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x VariadicOperation) String() string {
	s, ok := VariadicOperation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *PaddingConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PaddingConfig)
	if !ok {
		that2, ok := that.(PaddingConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Dimensions) != len(that1.Dimensions) {
		return false
	}
	for i := range this.Dimensions {
		if !this.Dimensions[i].Equal(that1.Dimensions[i]) {
			return false
		}
	}
	return true
}
func (this *PaddingConfig_PaddingConfigDimension) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PaddingConfig_PaddingConfigDimension)
	if !ok {
		that2, ok := that.(PaddingConfig_PaddingConfigDimension)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.EdgePaddingLow != that1.EdgePaddingLow {
		return false
	}
	if this.EdgePaddingHigh != that1.EdgePaddingHigh {
		return false
	}
	if this.InteriorPadding != that1.InteriorPadding {
		return false
	}
	return true
}
func (this *Layout) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Layout)
	if !ok {
		that2, ok := that.(Layout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.MinorToMajor) != len(that1.MinorToMajor) {
		return false
	}
	for i := range this.MinorToMajor {
		if this.MinorToMajor[i] != that1.MinorToMajor[i] {
			return false
		}
	}
	if len(this.PaddedDimensions) != len(that1.PaddedDimensions) {
		return false
	}
	for i := range this.PaddedDimensions {
		if this.PaddedDimensions[i] != that1.PaddedDimensions[i] {
			return false
		}
	}
	if this.PaddingValue != that1.PaddingValue {
		return false
	}
	return true
}
func (this *Shape) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Shape)
	if !ok {
		that2, ok := that.(Shape)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ElementType != that1.ElementType {
		return false
	}
	if len(this.Dimensions) != len(that1.Dimensions) {
		return false
	}
	for i := range this.Dimensions {
		if this.Dimensions[i] != that1.Dimensions[i] {
			return false
		}
	}
	if len(this.TupleShapes) != len(that1.TupleShapes) {
		return false
	}
	for i := range this.TupleShapes {
		if !this.TupleShapes[i].Equal(that1.TupleShapes[i]) {
			return false
		}
	}
	if !this.Layout.Equal(that1.Layout) {
		return false
	}
	return true
}
func (this *ProgramShape) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProgramShape)
	if !ok {
		that2, ok := that.(ProgramShape)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return false
	}
	for i := range this.Parameters {
		if !this.Parameters[i].Equal(that1.Parameters[i]) {
			return false
		}
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	if len(this.ParameterNames) != len(that1.ParameterNames) {
		return false
	}
	for i := range this.ParameterNames {
		if this.ParameterNames[i] != that1.ParameterNames[i] {
			return false
		}
	}
	return true
}
func (this *ComputationStats) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ComputationStats)
	if !ok {
		that2, ok := that.(ComputationStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FlopCount != that1.FlopCount {
		return false
	}
	if this.TranscendentalCount != that1.TranscendentalCount {
		return false
	}
	return true
}
func (this *OpMetadata) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpMetadata)
	if !ok {
		that2, ok := that.(OpMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OpType != that1.OpType {
		return false
	}
	if this.OpName != that1.OpName {
		return false
	}
	if this.SourceFile != that1.SourceFile {
		return false
	}
	if this.SourceLine != that1.SourceLine {
		return false
	}
	return true
}
func (this *ExecutionProfile) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExecutionProfile)
	if !ok {
		that2, ok := that.(ExecutionProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CompilationCacheHit != that1.CompilationCacheHit {
		return false
	}
	if this.CompileTimeMs != that1.CompileTimeMs {
		return false
	}
	if this.ComputeCycleCount != that1.ComputeCycleCount {
		return false
	}
	if this.ComputeTimeNs != that1.ComputeTimeNs {
		return false
	}
	if this.ComputeAndTransferTimeNs != that1.ComputeAndTransferTimeNs {
		return false
	}
	return true
}
func (this *ComputationHandle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ComputationHandle)
	if !ok {
		that2, ok := that.(ComputationHandle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Handle != that1.Handle {
		return false
	}
	return true
}
func (this *ExecutionHandle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExecutionHandle)
	if !ok {
		that2, ok := that.(ExecutionHandle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Handle != that1.Handle {
		return false
	}
	return true
}
func (this *GlobalDataHandle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GlobalDataHandle)
	if !ok {
		that2, ok := that.(GlobalDataHandle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Handle != that1.Handle {
		return false
	}
	return true
}
func (this *ComputationDataHandle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ComputationDataHandle)
	if !ok {
		that2, ok := that.(ComputationDataHandle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Handle != that1.Handle {
		return false
	}
	return true
}
func (this *DeviceHandle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeviceHandle)
	if !ok {
		that2, ok := that.(DeviceHandle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Handle != that1.Handle {
		return false
	}
	if this.DeviceCount != that1.DeviceCount {
		return false
	}
	return true
}
func (this *ChannelHandle) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ChannelHandle)
	if !ok {
		that2, ok := that.(ChannelHandle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Handle != that1.Handle {
		return false
	}
	return true
}
func (this *DeviceAssignmentProto) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeviceAssignmentProto)
	if !ok {
		that2, ok := that.(DeviceAssignmentProto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ReplicaCount != that1.ReplicaCount {
		return false
	}
	if this.ComputationCount != that1.ComputationCount {
		return false
	}
	if len(this.ComputationDevices) != len(that1.ComputationDevices) {
		return false
	}
	for i := range this.ComputationDevices {
		if !this.ComputationDevices[i].Equal(that1.ComputationDevices[i]) {
			return false
		}
	}
	return true
}
func (this *DeviceAssignmentProto_ComputationDevice) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeviceAssignmentProto_ComputationDevice)
	if !ok {
		that2, ok := that.(DeviceAssignmentProto_ComputationDevice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.ReplicaDeviceIds) != len(that1.ReplicaDeviceIds) {
		return false
	}
	for i := range this.ReplicaDeviceIds {
		if this.ReplicaDeviceIds[i] != that1.ReplicaDeviceIds[i] {
			return false
		}
	}
	return true
}
func (this *LiteralProto) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LiteralProto)
	if !ok {
		that2, ok := that.(LiteralProto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Shape.Equal(that1.Shape) {
		return false
	}
	if len(this.Preds) != len(that1.Preds) {
		return false
	}
	for i := range this.Preds {
		if this.Preds[i] != that1.Preds[i] {
			return false
		}
	}
	if !bytes.Equal(this.U8S, that1.U8S) {
		return false
	}
	if len(this.S32S) != len(that1.S32S) {
		return false
	}
	for i := range this.S32S {
		if this.S32S[i] != that1.S32S[i] {
			return false
		}
	}
	if len(this.S64S) != len(that1.S64S) {
		return false
	}
	for i := range this.S64S {
		if this.S64S[i] != that1.S64S[i] {
			return false
		}
	}
	if len(this.U32S) != len(that1.U32S) {
		return false
	}
	for i := range this.U32S {
		if this.U32S[i] != that1.U32S[i] {
			return false
		}
	}
	if len(this.U64S) != len(that1.U64S) {
		return false
	}
	for i := range this.U64S {
		if this.U64S[i] != that1.U64S[i] {
			return false
		}
	}
	if len(this.F32S) != len(that1.F32S) {
		return false
	}
	for i := range this.F32S {
		if this.F32S[i] != that1.F32S[i] {
			return false
		}
	}
	if len(this.F64S) != len(that1.F64S) {
		return false
	}
	for i := range this.F64S {
		if this.F64S[i] != that1.F64S[i] {
			return false
		}
	}
	if len(this.TupleLiterals) != len(that1.TupleLiterals) {
		return false
	}
	for i := range this.TupleLiterals {
		if !this.TupleLiterals[i].Equal(that1.TupleLiterals[i]) {
			return false
		}
	}
	if !bytes.Equal(this.F16S, that1.F16S) {
		return false
	}
	return true
}
func (this *WindowDimension) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*WindowDimension)
	if !ok {
		that2, ok := that.(WindowDimension)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Size_ != that1.Size_ {
		return false
	}
	if this.Stride != that1.Stride {
		return false
	}
	if this.PaddingLow != that1.PaddingLow {
		return false
	}
	if this.PaddingHigh != that1.PaddingHigh {
		return false
	}
	if this.WindowDilation != that1.WindowDilation {
		return false
	}
	if this.BaseDilation != that1.BaseDilation {
		return false
	}
	return true
}
func (this *Window) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Window)
	if !ok {
		that2, ok := that.(Window)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Dimensions) != len(that1.Dimensions) {
		return false
	}
	for i := range this.Dimensions {
		if !this.Dimensions[i].Equal(that1.Dimensions[i]) {
			return false
		}
	}
	return true
}
func (this *ConstantRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ConstantRequest)
	if !ok {
		that2, ok := that.(ConstantRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Literal.Equal(that1.Literal) {
		return false
	}
	return true
}
func (this *GetTupleElementRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetTupleElementRequest)
	if !ok {
		that2, ok := that.(GetTupleElementRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	return true
}
func (this *SliceRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SliceRequest)
	if !ok {
		that2, ok := that.(SliceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	if len(this.StartIndices) != len(that1.StartIndices) {
		return false
	}
	for i := range this.StartIndices {
		if this.StartIndices[i] != that1.StartIndices[i] {
			return false
		}
	}
	if len(this.LimitIndices) != len(that1.LimitIndices) {
		return false
	}
	for i := range this.LimitIndices {
		if this.LimitIndices[i] != that1.LimitIndices[i] {
			return false
		}
	}
	if len(this.Strides) != len(that1.Strides) {
		return false
	}
	for i := range this.Strides {
		if this.Strides[i] != that1.Strides[i] {
			return false
		}
	}
	return true
}
func (this *DynamicSliceRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DynamicSliceRequest)
	if !ok {
		that2, ok := that.(DynamicSliceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	if !this.StartIndices.Equal(that1.StartIndices) {
		return false
	}
	if len(this.SliceSizes) != len(that1.SliceSizes) {
		return false
	}
	for i := range this.SliceSizes {
		if this.SliceSizes[i] != that1.SliceSizes[i] {
			return false
		}
	}
	return true
}
func (this *DynamicUpdateSliceRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DynamicUpdateSliceRequest)
	if !ok {
		that2, ok := that.(DynamicUpdateSliceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	if !this.Update.Equal(that1.Update) {
		return false
	}
	if !this.StartIndices.Equal(that1.StartIndices) {
		return false
	}
	return true
}
func (this *ConvolutionDimensionNumbers) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ConvolutionDimensionNumbers)
	if !ok {
		that2, ok := that.(ConvolutionDimensionNumbers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.BatchDimension != that1.BatchDimension {
		return false
	}
	if this.FeatureDimension != that1.FeatureDimension {
		return false
	}
	if len(this.SpatialDimensions) != len(that1.SpatialDimensions) {
		return false
	}
	for i := range this.SpatialDimensions {
		if this.SpatialDimensions[i] != that1.SpatialDimensions[i] {
			return false
		}
	}
	if this.KernelInputFeatureDimension != that1.KernelInputFeatureDimension {
		return false
	}
	if this.KernelOutputFeatureDimension != that1.KernelOutputFeatureDimension {
		return false
	}
	if len(this.KernelSpatialDimensions) != len(that1.KernelSpatialDimensions) {
		return false
	}
	for i := range this.KernelSpatialDimensions {
		if this.KernelSpatialDimensions[i] != that1.KernelSpatialDimensions[i] {
			return false
		}
	}
	return true
}
func (this *ConvolveRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ConvolveRequest)
	if !ok {
		that2, ok := that.(ConvolveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Lhs.Equal(that1.Lhs) {
		return false
	}
	if !this.Rhs.Equal(that1.Rhs) {
		return false
	}
	if !this.Window.Equal(that1.Window) {
		return false
	}
	if !this.DimensionNumbers.Equal(that1.DimensionNumbers) {
		return false
	}
	return true
}
func (this *InfeedRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InfeedRequest)
	if !ok {
		that2, ok := that.(InfeedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Shape.Equal(that1.Shape) {
		return false
	}
	if !bytes.Equal(this.Config, that1.Config) {
		return false
	}
	return true
}
func (this *OutfeedRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OutfeedRequest)
	if !ok {
		that2, ok := that.(OutfeedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Shape.Equal(that1.Shape) {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	if !bytes.Equal(this.OutfeedConfig, that1.OutfeedConfig) {
		return false
	}
	return true
}
func (this *CallRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CallRequest)
	if !ok {
		that2, ok := that.(CallRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ToApply.Equal(that1.ToApply) {
		return false
	}
	if len(this.Operands) != len(that1.Operands) {
		return false
	}
	for i := range this.Operands {
		if !this.Operands[i].Equal(that1.Operands[i]) {
			return false
		}
	}
	return true
}
func (this *CustomCallRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CustomCallRequest)
	if !ok {
		that2, ok := that.(CustomCallRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CallTargetName != that1.CallTargetName {
		return false
	}
	if len(this.Operands) != len(that1.Operands) {
		return false
	}
	for i := range this.Operands {
		if !this.Operands[i].Equal(that1.Operands[i]) {
			return false
		}
	}
	if !this.Shape.Equal(that1.Shape) {
		return false
	}
	return true
}
func (this *MapRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MapRequest)
	if !ok {
		that2, ok := that.(MapRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Operands) != len(that1.Operands) {
		return false
	}
	for i := range this.Operands {
		if !this.Operands[i].Equal(that1.Operands[i]) {
			return false
		}
	}
	if !this.ToApply.Equal(that1.ToApply) {
		return false
	}
	if len(this.StaticOperands) != len(that1.StaticOperands) {
		return false
	}
	for i := range this.StaticOperands {
		if !this.StaticOperands[i].Equal(that1.StaticOperands[i]) {
			return false
		}
	}
	return true
}
func (this *ReduceRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReduceRequest)
	if !ok {
		that2, ok := that.(ReduceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	if !this.InitValue.Equal(that1.InitValue) {
		return false
	}
	if len(this.Dimensions) != len(that1.Dimensions) {
		return false
	}
	for i := range this.Dimensions {
		if this.Dimensions[i] != that1.Dimensions[i] {
			return false
		}
	}
	if !this.ToApply.Equal(that1.ToApply) {
		return false
	}
	return true
}
func (this *ReduceWindowRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReduceWindowRequest)
	if !ok {
		that2, ok := that.(ReduceWindowRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	if !this.InitValue.Equal(that1.InitValue) {
		return false
	}
	if !this.Window.Equal(that1.Window) {
		return false
	}
	if !this.ToApply.Equal(that1.ToApply) {
		return false
	}
	return true
}
func (this *BatchNormTrainingRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BatchNormTrainingRequest)
	if !ok {
		that2, ok := that.(BatchNormTrainingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	if !this.Scale.Equal(that1.Scale) {
		return false
	}
	if !this.Offset.Equal(that1.Offset) {
		return false
	}
	if this.Epsilon != that1.Epsilon {
		return false
	}
	if this.FeatureIndex != that1.FeatureIndex {
		return false
	}
	return true
}
func (this *BatchNormGradRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BatchNormGradRequest)
	if !ok {
		that2, ok := that.(BatchNormGradRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	if !this.Scale.Equal(that1.Scale) {
		return false
	}
	if !this.Mean.Equal(that1.Mean) {
		return false
	}
	if !this.Variance.Equal(that1.Variance) {
		return false
	}
	if !this.GradOutput.Equal(that1.GradOutput) {
		return false
	}
	if this.Epsilon != that1.Epsilon {
		return false
	}
	if this.FeatureIndex != that1.FeatureIndex {
		return false
	}
	return true
}
func (this *CrossReplicaSumRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CrossReplicaSumRequest)
	if !ok {
		that2, ok := that.(CrossReplicaSumRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	return true
}
func (this *SelectAndScatterRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SelectAndScatterRequest)
	if !ok {
		that2, ok := that.(SelectAndScatterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	if !this.Source.Equal(that1.Source) {
		return false
	}
	if !this.InitValue.Equal(that1.InitValue) {
		return false
	}
	if !this.Window.Equal(that1.Window) {
		return false
	}
	if !this.Select.Equal(that1.Select) {
		return false
	}
	if !this.Scatter.Equal(that1.Scatter) {
		return false
	}
	return true
}
func (this *ReverseRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReverseRequest)
	if !ok {
		that2, ok := that.(ReverseRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	if len(this.Dimensions) != len(that1.Dimensions) {
		return false
	}
	for i := range this.Dimensions {
		if this.Dimensions[i] != that1.Dimensions[i] {
			return false
		}
	}
	return true
}
func (this *BroadcastRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BroadcastRequest)
	if !ok {
		that2, ok := that.(BroadcastRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	if len(this.BroadcastSizes) != len(that1.BroadcastSizes) {
		return false
	}
	for i := range this.BroadcastSizes {
		if this.BroadcastSizes[i] != that1.BroadcastSizes[i] {
			return false
		}
	}
	return true
}
func (this *PadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PadRequest)
	if !ok {
		that2, ok := that.(PadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	if !this.PaddingValue.Equal(that1.PaddingValue) {
		return false
	}
	if !this.PaddingConfig.Equal(that1.PaddingConfig) {
		return false
	}
	return true
}
func (this *ReshapeRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReshapeRequest)
	if !ok {
		that2, ok := that.(ReshapeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	if len(this.Dimensions) != len(that1.Dimensions) {
		return false
	}
	for i := range this.Dimensions {
		if this.Dimensions[i] != that1.Dimensions[i] {
			return false
		}
	}
	if len(this.NewSizes) != len(that1.NewSizes) {
		return false
	}
	for i := range this.NewSizes {
		if this.NewSizes[i] != that1.NewSizes[i] {
			return false
		}
	}
	return true
}
func (this *TransposeRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TransposeRequest)
	if !ok {
		that2, ok := that.(TransposeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	if len(this.Dimensions) != len(that1.Dimensions) {
		return false
	}
	for i := range this.Dimensions {
		if this.Dimensions[i] != that1.Dimensions[i] {
			return false
		}
	}
	return true
}
func (this *ParameterRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ParameterRequest)
	if !ok {
		that2, ok := that.(ParameterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Shape.Equal(that1.Shape) {
		return false
	}
	if this.Parameter != that1.Parameter {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetLocalShapeRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetLocalShapeRequest)
	if !ok {
		that2, ok := that.(GetLocalShapeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Computation.Equal(that1.Computation) {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	return true
}
func (this *GetLocalShapeResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetLocalShapeResponse)
	if !ok {
		that2, ok := that.(GetLocalShapeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Shape.Equal(that1.Shape) {
		return false
	}
	return true
}
func (this *TraceRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TraceRequest)
	if !ok {
		that2, ok := that.(TraceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Tag != that1.Tag {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	return true
}
func (this *ConvertRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ConvertRequest)
	if !ok {
		that2, ok := that.(ConvertRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	if this.NewElementType != that1.NewElementType {
		return false
	}
	return true
}
func (this *ConcatenateRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ConcatenateRequest)
	if !ok {
		that2, ok := that.(ConcatenateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Operands) != len(that1.Operands) {
		return false
	}
	for i := range this.Operands {
		if !this.Operands[i].Equal(that1.Operands[i]) {
			return false
		}
	}
	if this.Dimension != that1.Dimension {
		return false
	}
	return true
}
func (this *WhileRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*WhileRequest)
	if !ok {
		that2, ok := that.(WhileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Condition.Equal(that1.Condition) {
		return false
	}
	if !this.Body.Equal(that1.Body) {
		return false
	}
	if !this.Init.Equal(that1.Init) {
		return false
	}
	return true
}
func (this *UnaryOpRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UnaryOpRequest)
	if !ok {
		that2, ok := that.(UnaryOpRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Unop != that1.Unop {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	return true
}
func (this *BinaryOpRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BinaryOpRequest)
	if !ok {
		that2, ok := that.(BinaryOpRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Binop != that1.Binop {
		return false
	}
	if !this.Lhs.Equal(that1.Lhs) {
		return false
	}
	if !this.Rhs.Equal(that1.Rhs) {
		return false
	}
	if len(this.BroadcastDimensions) != len(that1.BroadcastDimensions) {
		return false
	}
	for i := range this.BroadcastDimensions {
		if this.BroadcastDimensions[i] != that1.BroadcastDimensions[i] {
			return false
		}
	}
	return true
}
func (this *RngRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RngRequest)
	if !ok {
		that2, ok := that.(RngRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Distribution != that1.Distribution {
		return false
	}
	if len(this.Parameter) != len(that1.Parameter) {
		return false
	}
	for i := range this.Parameter {
		if !this.Parameter[i].Equal(that1.Parameter[i]) {
			return false
		}
	}
	if !this.Shape.Equal(that1.Shape) {
		return false
	}
	return true
}
func (this *TernaryOpRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TernaryOpRequest)
	if !ok {
		that2, ok := that.(TernaryOpRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Triop != that1.Triop {
		return false
	}
	if !this.Lhs.Equal(that1.Lhs) {
		return false
	}
	if !this.Rhs.Equal(that1.Rhs) {
		return false
	}
	if !this.Ehs.Equal(that1.Ehs) {
		return false
	}
	return true
}
func (this *VariadicOpRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VariadicOpRequest)
	if !ok {
		that2, ok := that.(VariadicOpRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Varop != that1.Varop {
		return false
	}
	if len(this.Operands) != len(that1.Operands) {
		return false
	}
	for i := range this.Operands {
		if !this.Operands[i].Equal(that1.Operands[i]) {
			return false
		}
	}
	return true
}
func (this *ReducePrecisionRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReducePrecisionRequest)
	if !ok {
		that2, ok := that.(ReducePrecisionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	if this.ExponentBits != that1.ExponentBits {
		return false
	}
	if this.MantissaBits != that1.MantissaBits {
		return false
	}
	return true
}
func (this *SendRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SendRequest)
	if !ok {
		that2, ok := that.(SendRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Operand.Equal(that1.Operand) {
		return false
	}
	if !this.ChannelHandle.Equal(that1.ChannelHandle) {
		return false
	}
	return true
}
func (this *RecvRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RecvRequest)
	if !ok {
		that2, ok := that.(RecvRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Shape.Equal(that1.Shape) {
		return false
	}
	if !this.ChannelHandle.Equal(that1.ChannelHandle) {
		return false
	}
	return true
}
func (this *OpRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest)
	if !ok {
		that2, ok := that.(OpRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Computation.Equal(that1.Computation) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if that1.Op == nil {
		if this.Op != nil {
			return false
		}
	} else if this.Op == nil {
		return false
	} else if !this.Op.Equal(that1.Op) {
		return false
	}
	return true
}
func (this *OpRequest_BinaryOpRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_BinaryOpRequest)
	if !ok {
		that2, ok := that.(OpRequest_BinaryOpRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.BinaryOpRequest.Equal(that1.BinaryOpRequest) {
		return false
	}
	return true
}
func (this *OpRequest_BroadcastRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_BroadcastRequest)
	if !ok {
		that2, ok := that.(OpRequest_BroadcastRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.BroadcastRequest.Equal(that1.BroadcastRequest) {
		return false
	}
	return true
}
func (this *OpRequest_CallRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_CallRequest)
	if !ok {
		that2, ok := that.(OpRequest_CallRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CallRequest.Equal(that1.CallRequest) {
		return false
	}
	return true
}
func (this *OpRequest_ConcatenateRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_ConcatenateRequest)
	if !ok {
		that2, ok := that.(OpRequest_ConcatenateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ConcatenateRequest.Equal(that1.ConcatenateRequest) {
		return false
	}
	return true
}
func (this *OpRequest_ConstantRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_ConstantRequest)
	if !ok {
		that2, ok := that.(OpRequest_ConstantRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ConstantRequest.Equal(that1.ConstantRequest) {
		return false
	}
	return true
}
func (this *OpRequest_ConvertRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_ConvertRequest)
	if !ok {
		that2, ok := that.(OpRequest_ConvertRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ConvertRequest.Equal(that1.ConvertRequest) {
		return false
	}
	return true
}
func (this *OpRequest_ConvolveRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_ConvolveRequest)
	if !ok {
		that2, ok := that.(OpRequest_ConvolveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ConvolveRequest.Equal(that1.ConvolveRequest) {
		return false
	}
	return true
}
func (this *OpRequest_CrossReplicaSumRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_CrossReplicaSumRequest)
	if !ok {
		that2, ok := that.(OpRequest_CrossReplicaSumRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CrossReplicaSumRequest.Equal(that1.CrossReplicaSumRequest) {
		return false
	}
	return true
}
func (this *OpRequest_CustomCallRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_CustomCallRequest)
	if !ok {
		that2, ok := that.(OpRequest_CustomCallRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CustomCallRequest.Equal(that1.CustomCallRequest) {
		return false
	}
	return true
}
func (this *OpRequest_DynamicSliceRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_DynamicSliceRequest)
	if !ok {
		that2, ok := that.(OpRequest_DynamicSliceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DynamicSliceRequest.Equal(that1.DynamicSliceRequest) {
		return false
	}
	return true
}
func (this *OpRequest_DynamicUpdateSliceRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_DynamicUpdateSliceRequest)
	if !ok {
		that2, ok := that.(OpRequest_DynamicUpdateSliceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DynamicUpdateSliceRequest.Equal(that1.DynamicUpdateSliceRequest) {
		return false
	}
	return true
}
func (this *OpRequest_GetTupleElementRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_GetTupleElementRequest)
	if !ok {
		that2, ok := that.(OpRequest_GetTupleElementRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GetTupleElementRequest.Equal(that1.GetTupleElementRequest) {
		return false
	}
	return true
}
func (this *OpRequest_InfeedRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_InfeedRequest)
	if !ok {
		that2, ok := that.(OpRequest_InfeedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.InfeedRequest.Equal(that1.InfeedRequest) {
		return false
	}
	return true
}
func (this *OpRequest_MapRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_MapRequest)
	if !ok {
		that2, ok := that.(OpRequest_MapRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.MapRequest.Equal(that1.MapRequest) {
		return false
	}
	return true
}
func (this *OpRequest_PadRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_PadRequest)
	if !ok {
		that2, ok := that.(OpRequest_PadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.PadRequest.Equal(that1.PadRequest) {
		return false
	}
	return true
}
func (this *OpRequest_ParameterRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_ParameterRequest)
	if !ok {
		that2, ok := that.(OpRequest_ParameterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ParameterRequest.Equal(that1.ParameterRequest) {
		return false
	}
	return true
}
func (this *OpRequest_ReducePrecisionRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_ReducePrecisionRequest)
	if !ok {
		that2, ok := that.(OpRequest_ReducePrecisionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ReducePrecisionRequest.Equal(that1.ReducePrecisionRequest) {
		return false
	}
	return true
}
func (this *OpRequest_ReduceRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_ReduceRequest)
	if !ok {
		that2, ok := that.(OpRequest_ReduceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ReduceRequest.Equal(that1.ReduceRequest) {
		return false
	}
	return true
}
func (this *OpRequest_ReduceWindowRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_ReduceWindowRequest)
	if !ok {
		that2, ok := that.(OpRequest_ReduceWindowRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ReduceWindowRequest.Equal(that1.ReduceWindowRequest) {
		return false
	}
	return true
}
func (this *OpRequest_ReshapeRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_ReshapeRequest)
	if !ok {
		that2, ok := that.(OpRequest_ReshapeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ReshapeRequest.Equal(that1.ReshapeRequest) {
		return false
	}
	return true
}
func (this *OpRequest_ReverseRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_ReverseRequest)
	if !ok {
		that2, ok := that.(OpRequest_ReverseRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ReverseRequest.Equal(that1.ReverseRequest) {
		return false
	}
	return true
}
func (this *OpRequest_RngRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_RngRequest)
	if !ok {
		that2, ok := that.(OpRequest_RngRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.RngRequest.Equal(that1.RngRequest) {
		return false
	}
	return true
}
func (this *OpRequest_SelectAndScatterRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_SelectAndScatterRequest)
	if !ok {
		that2, ok := that.(OpRequest_SelectAndScatterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SelectAndScatterRequest.Equal(that1.SelectAndScatterRequest) {
		return false
	}
	return true
}
func (this *OpRequest_SliceRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_SliceRequest)
	if !ok {
		that2, ok := that.(OpRequest_SliceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SliceRequest.Equal(that1.SliceRequest) {
		return false
	}
	return true
}
func (this *OpRequest_TernaryOpRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_TernaryOpRequest)
	if !ok {
		that2, ok := that.(OpRequest_TernaryOpRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.TernaryOpRequest.Equal(that1.TernaryOpRequest) {
		return false
	}
	return true
}
func (this *OpRequest_TraceRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_TraceRequest)
	if !ok {
		that2, ok := that.(OpRequest_TraceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.TraceRequest.Equal(that1.TraceRequest) {
		return false
	}
	return true
}
func (this *OpRequest_TransposeRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_TransposeRequest)
	if !ok {
		that2, ok := that.(OpRequest_TransposeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.TransposeRequest.Equal(that1.TransposeRequest) {
		return false
	}
	return true
}
func (this *OpRequest_UnaryOpRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_UnaryOpRequest)
	if !ok {
		that2, ok := that.(OpRequest_UnaryOpRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.UnaryOpRequest.Equal(that1.UnaryOpRequest) {
		return false
	}
	return true
}
func (this *OpRequest_VariadicOpRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_VariadicOpRequest)
	if !ok {
		that2, ok := that.(OpRequest_VariadicOpRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.VariadicOpRequest.Equal(that1.VariadicOpRequest) {
		return false
	}
	return true
}
func (this *OpRequest_WhileRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_WhileRequest)
	if !ok {
		that2, ok := that.(OpRequest_WhileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.WhileRequest.Equal(that1.WhileRequest) {
		return false
	}
	return true
}
func (this *OpRequest_SendRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_SendRequest)
	if !ok {
		that2, ok := that.(OpRequest_SendRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SendRequest.Equal(that1.SendRequest) {
		return false
	}
	return true
}
func (this *OpRequest_RecvRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_RecvRequest)
	if !ok {
		that2, ok := that.(OpRequest_RecvRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.RecvRequest.Equal(that1.RecvRequest) {
		return false
	}
	return true
}
func (this *OpRequest_OutfeedRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_OutfeedRequest)
	if !ok {
		that2, ok := that.(OpRequest_OutfeedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.OutfeedRequest.Equal(that1.OutfeedRequest) {
		return false
	}
	return true
}
func (this *OpRequest_BatchNormTrainingRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_BatchNormTrainingRequest)
	if !ok {
		that2, ok := that.(OpRequest_BatchNormTrainingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.BatchNormTrainingRequest.Equal(that1.BatchNormTrainingRequest) {
		return false
	}
	return true
}
func (this *OpRequest_BatchNormGradRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpRequest_BatchNormGradRequest)
	if !ok {
		that2, ok := that.(OpRequest_BatchNormGradRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.BatchNormGradRequest.Equal(that1.BatchNormGradRequest) {
		return false
	}
	return true
}
func (this *OpResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpResponse)
	if !ok {
		that2, ok := that.(OpResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	return true
}
func (this *PaddingConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.PaddingConfig{")
	if this.Dimensions != nil {
		s = append(s, "Dimensions: "+fmt.Sprintf("%#v", this.Dimensions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PaddingConfig_PaddingConfigDimension) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.PaddingConfig_PaddingConfigDimension{")
	s = append(s, "EdgePaddingLow: "+fmt.Sprintf("%#v", this.EdgePaddingLow)+",\n")
	s = append(s, "EdgePaddingHigh: "+fmt.Sprintf("%#v", this.EdgePaddingHigh)+",\n")
	s = append(s, "InteriorPadding: "+fmt.Sprintf("%#v", this.InteriorPadding)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Layout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.Layout{")
	s = append(s, "MinorToMajor: "+fmt.Sprintf("%#v", this.MinorToMajor)+",\n")
	s = append(s, "PaddedDimensions: "+fmt.Sprintf("%#v", this.PaddedDimensions)+",\n")
	s = append(s, "PaddingValue: "+fmt.Sprintf("%#v", this.PaddingValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Shape) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&xla.Shape{")
	s = append(s, "ElementType: "+fmt.Sprintf("%#v", this.ElementType)+",\n")
	s = append(s, "Dimensions: "+fmt.Sprintf("%#v", this.Dimensions)+",\n")
	if this.TupleShapes != nil {
		s = append(s, "TupleShapes: "+fmt.Sprintf("%#v", this.TupleShapes)+",\n")
	}
	if this.Layout != nil {
		s = append(s, "Layout: "+fmt.Sprintf("%#v", this.Layout)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProgramShape) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.ProgramShape{")
	if this.Parameters != nil {
		s = append(s, "Parameters: "+fmt.Sprintf("%#v", this.Parameters)+",\n")
	}
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "ParameterNames: "+fmt.Sprintf("%#v", this.ParameterNames)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ComputationStats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.ComputationStats{")
	s = append(s, "FlopCount: "+fmt.Sprintf("%#v", this.FlopCount)+",\n")
	s = append(s, "TranscendentalCount: "+fmt.Sprintf("%#v", this.TranscendentalCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&xla.OpMetadata{")
	s = append(s, "OpType: "+fmt.Sprintf("%#v", this.OpType)+",\n")
	s = append(s, "OpName: "+fmt.Sprintf("%#v", this.OpName)+",\n")
	s = append(s, "SourceFile: "+fmt.Sprintf("%#v", this.SourceFile)+",\n")
	s = append(s, "SourceLine: "+fmt.Sprintf("%#v", this.SourceLine)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecutionProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&xla.ExecutionProfile{")
	s = append(s, "CompilationCacheHit: "+fmt.Sprintf("%#v", this.CompilationCacheHit)+",\n")
	s = append(s, "CompileTimeMs: "+fmt.Sprintf("%#v", this.CompileTimeMs)+",\n")
	s = append(s, "ComputeCycleCount: "+fmt.Sprintf("%#v", this.ComputeCycleCount)+",\n")
	s = append(s, "ComputeTimeNs: "+fmt.Sprintf("%#v", this.ComputeTimeNs)+",\n")
	s = append(s, "ComputeAndTransferTimeNs: "+fmt.Sprintf("%#v", this.ComputeAndTransferTimeNs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ComputationHandle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.ComputationHandle{")
	s = append(s, "Handle: "+fmt.Sprintf("%#v", this.Handle)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExecutionHandle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.ExecutionHandle{")
	s = append(s, "Handle: "+fmt.Sprintf("%#v", this.Handle)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GlobalDataHandle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.GlobalDataHandle{")
	s = append(s, "Handle: "+fmt.Sprintf("%#v", this.Handle)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ComputationDataHandle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.ComputationDataHandle{")
	s = append(s, "Handle: "+fmt.Sprintf("%#v", this.Handle)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceHandle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.DeviceHandle{")
	s = append(s, "Handle: "+fmt.Sprintf("%#v", this.Handle)+",\n")
	s = append(s, "DeviceCount: "+fmt.Sprintf("%#v", this.DeviceCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChannelHandle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.ChannelHandle{")
	s = append(s, "Handle: "+fmt.Sprintf("%#v", this.Handle)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceAssignmentProto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.DeviceAssignmentProto{")
	s = append(s, "ReplicaCount: "+fmt.Sprintf("%#v", this.ReplicaCount)+",\n")
	s = append(s, "ComputationCount: "+fmt.Sprintf("%#v", this.ComputationCount)+",\n")
	if this.ComputationDevices != nil {
		s = append(s, "ComputationDevices: "+fmt.Sprintf("%#v", this.ComputationDevices)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeviceAssignmentProto_ComputationDevice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.DeviceAssignmentProto_ComputationDevice{")
	s = append(s, "ReplicaDeviceIds: "+fmt.Sprintf("%#v", this.ReplicaDeviceIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LiteralProto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&xla.LiteralProto{")
	if this.Shape != nil {
		s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	}
	s = append(s, "Preds: "+fmt.Sprintf("%#v", this.Preds)+",\n")
	s = append(s, "U8S: "+fmt.Sprintf("%#v", this.U8S)+",\n")
	s = append(s, "S32S: "+fmt.Sprintf("%#v", this.S32S)+",\n")
	s = append(s, "S64S: "+fmt.Sprintf("%#v", this.S64S)+",\n")
	s = append(s, "U32S: "+fmt.Sprintf("%#v", this.U32S)+",\n")
	s = append(s, "U64S: "+fmt.Sprintf("%#v", this.U64S)+",\n")
	s = append(s, "F32S: "+fmt.Sprintf("%#v", this.F32S)+",\n")
	s = append(s, "F64S: "+fmt.Sprintf("%#v", this.F64S)+",\n")
	if this.TupleLiterals != nil {
		s = append(s, "TupleLiterals: "+fmt.Sprintf("%#v", this.TupleLiterals)+",\n")
	}
	s = append(s, "F16S: "+fmt.Sprintf("%#v", this.F16S)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WindowDimension) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&xla.WindowDimension{")
	s = append(s, "Size_: "+fmt.Sprintf("%#v", this.Size_)+",\n")
	s = append(s, "Stride: "+fmt.Sprintf("%#v", this.Stride)+",\n")
	s = append(s, "PaddingLow: "+fmt.Sprintf("%#v", this.PaddingLow)+",\n")
	s = append(s, "PaddingHigh: "+fmt.Sprintf("%#v", this.PaddingHigh)+",\n")
	s = append(s, "WindowDilation: "+fmt.Sprintf("%#v", this.WindowDilation)+",\n")
	s = append(s, "BaseDilation: "+fmt.Sprintf("%#v", this.BaseDilation)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Window) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.Window{")
	if this.Dimensions != nil {
		s = append(s, "Dimensions: "+fmt.Sprintf("%#v", this.Dimensions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConstantRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.ConstantRequest{")
	if this.Literal != nil {
		s = append(s, "Literal: "+fmt.Sprintf("%#v", this.Literal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTupleElementRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.GetTupleElementRequest{")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SliceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&xla.SliceRequest{")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	s = append(s, "StartIndices: "+fmt.Sprintf("%#v", this.StartIndices)+",\n")
	s = append(s, "LimitIndices: "+fmt.Sprintf("%#v", this.LimitIndices)+",\n")
	s = append(s, "Strides: "+fmt.Sprintf("%#v", this.Strides)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DynamicSliceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.DynamicSliceRequest{")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	if this.StartIndices != nil {
		s = append(s, "StartIndices: "+fmt.Sprintf("%#v", this.StartIndices)+",\n")
	}
	s = append(s, "SliceSizes: "+fmt.Sprintf("%#v", this.SliceSizes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DynamicUpdateSliceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.DynamicUpdateSliceRequest{")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	if this.Update != nil {
		s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	}
	if this.StartIndices != nil {
		s = append(s, "StartIndices: "+fmt.Sprintf("%#v", this.StartIndices)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConvolutionDimensionNumbers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&xla.ConvolutionDimensionNumbers{")
	s = append(s, "BatchDimension: "+fmt.Sprintf("%#v", this.BatchDimension)+",\n")
	s = append(s, "FeatureDimension: "+fmt.Sprintf("%#v", this.FeatureDimension)+",\n")
	s = append(s, "SpatialDimensions: "+fmt.Sprintf("%#v", this.SpatialDimensions)+",\n")
	s = append(s, "KernelInputFeatureDimension: "+fmt.Sprintf("%#v", this.KernelInputFeatureDimension)+",\n")
	s = append(s, "KernelOutputFeatureDimension: "+fmt.Sprintf("%#v", this.KernelOutputFeatureDimension)+",\n")
	s = append(s, "KernelSpatialDimensions: "+fmt.Sprintf("%#v", this.KernelSpatialDimensions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConvolveRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&xla.ConvolveRequest{")
	if this.Lhs != nil {
		s = append(s, "Lhs: "+fmt.Sprintf("%#v", this.Lhs)+",\n")
	}
	if this.Rhs != nil {
		s = append(s, "Rhs: "+fmt.Sprintf("%#v", this.Rhs)+",\n")
	}
	if this.Window != nil {
		s = append(s, "Window: "+fmt.Sprintf("%#v", this.Window)+",\n")
	}
	if this.DimensionNumbers != nil {
		s = append(s, "DimensionNumbers: "+fmt.Sprintf("%#v", this.DimensionNumbers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InfeedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.InfeedRequest{")
	if this.Shape != nil {
		s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	}
	s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OutfeedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.OutfeedRequest{")
	if this.Shape != nil {
		s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	}
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	s = append(s, "OutfeedConfig: "+fmt.Sprintf("%#v", this.OutfeedConfig)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CallRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.CallRequest{")
	if this.ToApply != nil {
		s = append(s, "ToApply: "+fmt.Sprintf("%#v", this.ToApply)+",\n")
	}
	if this.Operands != nil {
		s = append(s, "Operands: "+fmt.Sprintf("%#v", this.Operands)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CustomCallRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.CustomCallRequest{")
	s = append(s, "CallTargetName: "+fmt.Sprintf("%#v", this.CallTargetName)+",\n")
	if this.Operands != nil {
		s = append(s, "Operands: "+fmt.Sprintf("%#v", this.Operands)+",\n")
	}
	if this.Shape != nil {
		s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MapRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.MapRequest{")
	if this.Operands != nil {
		s = append(s, "Operands: "+fmt.Sprintf("%#v", this.Operands)+",\n")
	}
	if this.ToApply != nil {
		s = append(s, "ToApply: "+fmt.Sprintf("%#v", this.ToApply)+",\n")
	}
	if this.StaticOperands != nil {
		s = append(s, "StaticOperands: "+fmt.Sprintf("%#v", this.StaticOperands)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReduceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&xla.ReduceRequest{")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	if this.InitValue != nil {
		s = append(s, "InitValue: "+fmt.Sprintf("%#v", this.InitValue)+",\n")
	}
	s = append(s, "Dimensions: "+fmt.Sprintf("%#v", this.Dimensions)+",\n")
	if this.ToApply != nil {
		s = append(s, "ToApply: "+fmt.Sprintf("%#v", this.ToApply)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReduceWindowRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&xla.ReduceWindowRequest{")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	if this.InitValue != nil {
		s = append(s, "InitValue: "+fmt.Sprintf("%#v", this.InitValue)+",\n")
	}
	if this.Window != nil {
		s = append(s, "Window: "+fmt.Sprintf("%#v", this.Window)+",\n")
	}
	if this.ToApply != nil {
		s = append(s, "ToApply: "+fmt.Sprintf("%#v", this.ToApply)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BatchNormTrainingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&xla.BatchNormTrainingRequest{")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	if this.Scale != nil {
		s = append(s, "Scale: "+fmt.Sprintf("%#v", this.Scale)+",\n")
	}
	if this.Offset != nil {
		s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	}
	s = append(s, "Epsilon: "+fmt.Sprintf("%#v", this.Epsilon)+",\n")
	s = append(s, "FeatureIndex: "+fmt.Sprintf("%#v", this.FeatureIndex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BatchNormGradRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&xla.BatchNormGradRequest{")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	if this.Scale != nil {
		s = append(s, "Scale: "+fmt.Sprintf("%#v", this.Scale)+",\n")
	}
	if this.Mean != nil {
		s = append(s, "Mean: "+fmt.Sprintf("%#v", this.Mean)+",\n")
	}
	if this.Variance != nil {
		s = append(s, "Variance: "+fmt.Sprintf("%#v", this.Variance)+",\n")
	}
	if this.GradOutput != nil {
		s = append(s, "GradOutput: "+fmt.Sprintf("%#v", this.GradOutput)+",\n")
	}
	s = append(s, "Epsilon: "+fmt.Sprintf("%#v", this.Epsilon)+",\n")
	s = append(s, "FeatureIndex: "+fmt.Sprintf("%#v", this.FeatureIndex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CrossReplicaSumRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.CrossReplicaSumRequest{")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAndScatterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&xla.SelectAndScatterRequest{")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	if this.Source != nil {
		s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	}
	if this.InitValue != nil {
		s = append(s, "InitValue: "+fmt.Sprintf("%#v", this.InitValue)+",\n")
	}
	if this.Window != nil {
		s = append(s, "Window: "+fmt.Sprintf("%#v", this.Window)+",\n")
	}
	if this.Select != nil {
		s = append(s, "Select: "+fmt.Sprintf("%#v", this.Select)+",\n")
	}
	if this.Scatter != nil {
		s = append(s, "Scatter: "+fmt.Sprintf("%#v", this.Scatter)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReverseRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.ReverseRequest{")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	s = append(s, "Dimensions: "+fmt.Sprintf("%#v", this.Dimensions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BroadcastRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.BroadcastRequest{")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	s = append(s, "BroadcastSizes: "+fmt.Sprintf("%#v", this.BroadcastSizes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.PadRequest{")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	if this.PaddingValue != nil {
		s = append(s, "PaddingValue: "+fmt.Sprintf("%#v", this.PaddingValue)+",\n")
	}
	if this.PaddingConfig != nil {
		s = append(s, "PaddingConfig: "+fmt.Sprintf("%#v", this.PaddingConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReshapeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.ReshapeRequest{")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	s = append(s, "Dimensions: "+fmt.Sprintf("%#v", this.Dimensions)+",\n")
	s = append(s, "NewSizes: "+fmt.Sprintf("%#v", this.NewSizes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransposeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.TransposeRequest{")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	s = append(s, "Dimensions: "+fmt.Sprintf("%#v", this.Dimensions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ParameterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.ParameterRequest{")
	if this.Shape != nil {
		s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	}
	s = append(s, "Parameter: "+fmt.Sprintf("%#v", this.Parameter)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLocalShapeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.GetLocalShapeRequest{")
	if this.Computation != nil {
		s = append(s, "Computation: "+fmt.Sprintf("%#v", this.Computation)+",\n")
	}
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetLocalShapeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.GetLocalShapeResponse{")
	if this.Shape != nil {
		s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TraceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.TraceRequest{")
	s = append(s, "Tag: "+fmt.Sprintf("%#v", this.Tag)+",\n")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConvertRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.ConvertRequest{")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	s = append(s, "NewElementType: "+fmt.Sprintf("%#v", this.NewElementType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConcatenateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.ConcatenateRequest{")
	if this.Operands != nil {
		s = append(s, "Operands: "+fmt.Sprintf("%#v", this.Operands)+",\n")
	}
	s = append(s, "Dimension: "+fmt.Sprintf("%#v", this.Dimension)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WhileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.WhileRequest{")
	if this.Condition != nil {
		s = append(s, "Condition: "+fmt.Sprintf("%#v", this.Condition)+",\n")
	}
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	if this.Init != nil {
		s = append(s, "Init: "+fmt.Sprintf("%#v", this.Init)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnaryOpRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.UnaryOpRequest{")
	s = append(s, "Unop: "+fmt.Sprintf("%#v", this.Unop)+",\n")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BinaryOpRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&xla.BinaryOpRequest{")
	s = append(s, "Binop: "+fmt.Sprintf("%#v", this.Binop)+",\n")
	if this.Lhs != nil {
		s = append(s, "Lhs: "+fmt.Sprintf("%#v", this.Lhs)+",\n")
	}
	if this.Rhs != nil {
		s = append(s, "Rhs: "+fmt.Sprintf("%#v", this.Rhs)+",\n")
	}
	s = append(s, "BroadcastDimensions: "+fmt.Sprintf("%#v", this.BroadcastDimensions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RngRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.RngRequest{")
	s = append(s, "Distribution: "+fmt.Sprintf("%#v", this.Distribution)+",\n")
	if this.Parameter != nil {
		s = append(s, "Parameter: "+fmt.Sprintf("%#v", this.Parameter)+",\n")
	}
	if this.Shape != nil {
		s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TernaryOpRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&xla.TernaryOpRequest{")
	s = append(s, "Triop: "+fmt.Sprintf("%#v", this.Triop)+",\n")
	if this.Lhs != nil {
		s = append(s, "Lhs: "+fmt.Sprintf("%#v", this.Lhs)+",\n")
	}
	if this.Rhs != nil {
		s = append(s, "Rhs: "+fmt.Sprintf("%#v", this.Rhs)+",\n")
	}
	if this.Ehs != nil {
		s = append(s, "Ehs: "+fmt.Sprintf("%#v", this.Ehs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VariadicOpRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.VariadicOpRequest{")
	s = append(s, "Varop: "+fmt.Sprintf("%#v", this.Varop)+",\n")
	if this.Operands != nil {
		s = append(s, "Operands: "+fmt.Sprintf("%#v", this.Operands)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReducePrecisionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&xla.ReducePrecisionRequest{")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	s = append(s, "ExponentBits: "+fmt.Sprintf("%#v", this.ExponentBits)+",\n")
	s = append(s, "MantissaBits: "+fmt.Sprintf("%#v", this.MantissaBits)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.SendRequest{")
	if this.Operand != nil {
		s = append(s, "Operand: "+fmt.Sprintf("%#v", this.Operand)+",\n")
	}
	if this.ChannelHandle != nil {
		s = append(s, "ChannelHandle: "+fmt.Sprintf("%#v", this.ChannelHandle)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecvRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&xla.RecvRequest{")
	if this.Shape != nil {
		s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	}
	if this.ChannelHandle != nil {
		s = append(s, "ChannelHandle: "+fmt.Sprintf("%#v", this.ChannelHandle)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 41)
	s = append(s, "&xla.OpRequest{")
	if this.Computation != nil {
		s = append(s, "Computation: "+fmt.Sprintf("%#v", this.Computation)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	if this.Op != nil {
		s = append(s, "Op: "+fmt.Sprintf("%#v", this.Op)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpRequest_BinaryOpRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_BinaryOpRequest{` +
		`BinaryOpRequest:` + fmt.Sprintf("%#v", this.BinaryOpRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_BroadcastRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_BroadcastRequest{` +
		`BroadcastRequest:` + fmt.Sprintf("%#v", this.BroadcastRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_CallRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_CallRequest{` +
		`CallRequest:` + fmt.Sprintf("%#v", this.CallRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_ConcatenateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_ConcatenateRequest{` +
		`ConcatenateRequest:` + fmt.Sprintf("%#v", this.ConcatenateRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_ConstantRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_ConstantRequest{` +
		`ConstantRequest:` + fmt.Sprintf("%#v", this.ConstantRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_ConvertRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_ConvertRequest{` +
		`ConvertRequest:` + fmt.Sprintf("%#v", this.ConvertRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_ConvolveRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_ConvolveRequest{` +
		`ConvolveRequest:` + fmt.Sprintf("%#v", this.ConvolveRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_CrossReplicaSumRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_CrossReplicaSumRequest{` +
		`CrossReplicaSumRequest:` + fmt.Sprintf("%#v", this.CrossReplicaSumRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_CustomCallRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_CustomCallRequest{` +
		`CustomCallRequest:` + fmt.Sprintf("%#v", this.CustomCallRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_DynamicSliceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_DynamicSliceRequest{` +
		`DynamicSliceRequest:` + fmt.Sprintf("%#v", this.DynamicSliceRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_DynamicUpdateSliceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_DynamicUpdateSliceRequest{` +
		`DynamicUpdateSliceRequest:` + fmt.Sprintf("%#v", this.DynamicUpdateSliceRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_GetTupleElementRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_GetTupleElementRequest{` +
		`GetTupleElementRequest:` + fmt.Sprintf("%#v", this.GetTupleElementRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_InfeedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_InfeedRequest{` +
		`InfeedRequest:` + fmt.Sprintf("%#v", this.InfeedRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_MapRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_MapRequest{` +
		`MapRequest:` + fmt.Sprintf("%#v", this.MapRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_PadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_PadRequest{` +
		`PadRequest:` + fmt.Sprintf("%#v", this.PadRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_ParameterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_ParameterRequest{` +
		`ParameterRequest:` + fmt.Sprintf("%#v", this.ParameterRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_ReducePrecisionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_ReducePrecisionRequest{` +
		`ReducePrecisionRequest:` + fmt.Sprintf("%#v", this.ReducePrecisionRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_ReduceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_ReduceRequest{` +
		`ReduceRequest:` + fmt.Sprintf("%#v", this.ReduceRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_ReduceWindowRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_ReduceWindowRequest{` +
		`ReduceWindowRequest:` + fmt.Sprintf("%#v", this.ReduceWindowRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_ReshapeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_ReshapeRequest{` +
		`ReshapeRequest:` + fmt.Sprintf("%#v", this.ReshapeRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_ReverseRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_ReverseRequest{` +
		`ReverseRequest:` + fmt.Sprintf("%#v", this.ReverseRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_RngRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_RngRequest{` +
		`RngRequest:` + fmt.Sprintf("%#v", this.RngRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_SelectAndScatterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_SelectAndScatterRequest{` +
		`SelectAndScatterRequest:` + fmt.Sprintf("%#v", this.SelectAndScatterRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_SliceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_SliceRequest{` +
		`SliceRequest:` + fmt.Sprintf("%#v", this.SliceRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_TernaryOpRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_TernaryOpRequest{` +
		`TernaryOpRequest:` + fmt.Sprintf("%#v", this.TernaryOpRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_TraceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_TraceRequest{` +
		`TraceRequest:` + fmt.Sprintf("%#v", this.TraceRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_TransposeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_TransposeRequest{` +
		`TransposeRequest:` + fmt.Sprintf("%#v", this.TransposeRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_UnaryOpRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_UnaryOpRequest{` +
		`UnaryOpRequest:` + fmt.Sprintf("%#v", this.UnaryOpRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_VariadicOpRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_VariadicOpRequest{` +
		`VariadicOpRequest:` + fmt.Sprintf("%#v", this.VariadicOpRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_WhileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_WhileRequest{` +
		`WhileRequest:` + fmt.Sprintf("%#v", this.WhileRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_SendRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_SendRequest{` +
		`SendRequest:` + fmt.Sprintf("%#v", this.SendRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_RecvRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_RecvRequest{` +
		`RecvRequest:` + fmt.Sprintf("%#v", this.RecvRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_OutfeedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_OutfeedRequest{` +
		`OutfeedRequest:` + fmt.Sprintf("%#v", this.OutfeedRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_BatchNormTrainingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_BatchNormTrainingRequest{` +
		`BatchNormTrainingRequest:` + fmt.Sprintf("%#v", this.BatchNormTrainingRequest) + `}`}, ", ")
	return s
}
func (this *OpRequest_BatchNormGradRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&xla.OpRequest_BatchNormGradRequest{` +
		`BatchNormGradRequest:` + fmt.Sprintf("%#v", this.BatchNormGradRequest) + `}`}, ", ")
	return s
}
func (this *OpResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&xla.OpResponse{")
	if this.Output != nil {
		s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringXlaData(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PaddingConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaddingConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Dimensions) > 0 {
		for _, msg := range m.Dimensions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintXlaData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PaddingConfig_PaddingConfigDimension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaddingConfig_PaddingConfigDimension) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EdgePaddingLow != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.EdgePaddingLow))
	}
	if m.EdgePaddingHigh != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.EdgePaddingHigh))
	}
	if m.InteriorPadding != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.InteriorPadding))
	}
	return i, nil
}

func (m *Layout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Layout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MinorToMajor) > 0 {
		dAtA2 := make([]byte, len(m.MinorToMajor)*10)
		var j1 int
		for _, num1 := range m.MinorToMajor {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.PaddedDimensions) > 0 {
		dAtA4 := make([]byte, len(m.PaddedDimensions)*10)
		var j3 int
		for _, num1 := range m.PaddedDimensions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.PaddingValue != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.PaddingValue))
	}
	return i, nil
}

func (m *Shape) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shape) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ElementType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ElementType))
	}
	if len(m.Dimensions) > 0 {
		dAtA6 := make([]byte, len(m.Dimensions)*10)
		var j5 int
		for _, num1 := range m.Dimensions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if len(m.TupleShapes) > 0 {
		for _, msg := range m.TupleShapes {
			dAtA[i] = 0x22
			i++
			i = encodeVarintXlaData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Layout != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Layout.Size()))
		n7, err := m.Layout.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *ProgramShape) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProgramShape) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Parameters) > 0 {
		for _, msg := range m.Parameters {
			dAtA[i] = 0xa
			i++
			i = encodeVarintXlaData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Result != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Result.Size()))
		n8, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.ParameterNames) > 0 {
		for _, s := range m.ParameterNames {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ComputationStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputationStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlopCount != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64XlaData(dAtA, i, uint64(math.Float64bits(float64(m.FlopCount))))
	}
	if m.TranscendentalCount != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64XlaData(dAtA, i, uint64(math.Float64bits(float64(m.TranscendentalCount))))
	}
	return i, nil
}

func (m *OpMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OpType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(len(m.OpType)))
		i += copy(dAtA[i:], m.OpType)
	}
	if len(m.OpName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(len(m.OpName)))
		i += copy(dAtA[i:], m.OpName)
	}
	if len(m.SourceFile) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(len(m.SourceFile)))
		i += copy(dAtA[i:], m.SourceFile)
	}
	if m.SourceLine != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.SourceLine))
	}
	return i, nil
}

func (m *ExecutionProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CompilationCacheHit {
		dAtA[i] = 0x8
		i++
		if m.CompilationCacheHit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CompileTimeMs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.CompileTimeMs))
	}
	if m.ComputeCycleCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ComputeCycleCount))
	}
	if m.ComputeTimeNs != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ComputeTimeNs))
	}
	if m.ComputeAndTransferTimeNs != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ComputeAndTransferTimeNs))
	}
	return i, nil
}

func (m *ComputationHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputationHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Handle != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Handle))
	}
	return i, nil
}

func (m *ExecutionHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Handle != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Handle))
	}
	return i, nil
}

func (m *GlobalDataHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalDataHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Handle != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Handle))
	}
	return i, nil
}

func (m *ComputationDataHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputationDataHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Handle != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Handle))
	}
	return i, nil
}

func (m *DeviceHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Handle != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Handle))
	}
	if m.DeviceCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.DeviceCount))
	}
	return i, nil
}

func (m *ChannelHandle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelHandle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Handle != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Handle))
	}
	return i, nil
}

func (m *DeviceAssignmentProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceAssignmentProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplicaCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ReplicaCount))
	}
	if m.ComputationCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ComputationCount))
	}
	if len(m.ComputationDevices) > 0 {
		for _, msg := range m.ComputationDevices {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintXlaData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DeviceAssignmentProto_ComputationDevice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceAssignmentProto_ComputationDevice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ReplicaDeviceIds) > 0 {
		dAtA10 := make([]byte, len(m.ReplicaDeviceIds)*10)
		var j9 int
		for _, num1 := range m.ReplicaDeviceIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	return i, nil
}

func (m *LiteralProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiteralProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Shape != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Shape.Size()))
		n11, err := m.Shape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.Preds) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(len(m.Preds)))
		for _, b := range m.Preds {
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if len(m.U8S) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(len(m.U8S)))
		i += copy(dAtA[i:], m.U8S)
	}
	if len(m.S32S) > 0 {
		dAtA13 := make([]byte, len(m.S32S)*10)
		var j12 int
		for _, num1 := range m.S32S {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j12))
		i += copy(dAtA[i:], dAtA13[:j12])
	}
	if len(m.S64S) > 0 {
		dAtA15 := make([]byte, len(m.S64S)*10)
		var j14 int
		for _, num1 := range m.S64S {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j14))
		i += copy(dAtA[i:], dAtA15[:j14])
	}
	if len(m.U32S) > 0 {
		dAtA17 := make([]byte, len(m.U32S)*10)
		var j16 int
		for _, num := range m.U32S {
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j16))
		i += copy(dAtA[i:], dAtA17[:j16])
	}
	if len(m.U64S) > 0 {
		dAtA19 := make([]byte, len(m.U64S)*10)
		var j18 int
		for _, num := range m.U64S {
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j18))
		i += copy(dAtA[i:], dAtA19[:j18])
	}
	if len(m.F32S) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(len(m.F32S)*4))
		for _, num := range m.F32S {
			f20 := math.Float32bits(float32(num))
			dAtA[i] = uint8(f20)
			i++
			dAtA[i] = uint8(f20 >> 8)
			i++
			dAtA[i] = uint8(f20 >> 16)
			i++
			dAtA[i] = uint8(f20 >> 24)
			i++
		}
	}
	if len(m.F64S) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(len(m.F64S)*8))
		for _, num := range m.F64S {
			f21 := math.Float64bits(float64(num))
			dAtA[i] = uint8(f21)
			i++
			dAtA[i] = uint8(f21 >> 8)
			i++
			dAtA[i] = uint8(f21 >> 16)
			i++
			dAtA[i] = uint8(f21 >> 24)
			i++
			dAtA[i] = uint8(f21 >> 32)
			i++
			dAtA[i] = uint8(f21 >> 40)
			i++
			dAtA[i] = uint8(f21 >> 48)
			i++
			dAtA[i] = uint8(f21 >> 56)
			i++
		}
	}
	if len(m.TupleLiterals) > 0 {
		for _, msg := range m.TupleLiterals {
			dAtA[i] = 0x52
			i++
			i = encodeVarintXlaData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.F16S) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(len(m.F16S)))
		i += copy(dAtA[i:], m.F16S)
	}
	return i, nil
}

func (m *WindowDimension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WindowDimension) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Size_))
	}
	if m.Stride != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Stride))
	}
	if m.PaddingLow != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.PaddingLow))
	}
	if m.PaddingHigh != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.PaddingHigh))
	}
	if m.WindowDilation != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.WindowDilation))
	}
	if m.BaseDilation != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.BaseDilation))
	}
	return i, nil
}

func (m *Window) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Window) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Dimensions) > 0 {
		for _, msg := range m.Dimensions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintXlaData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ConstantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConstantRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Literal != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Literal.Size()))
		n22, err := m.Literal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *GetTupleElementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTupleElementRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n23, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.Index != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *SliceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SliceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n24, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if len(m.StartIndices) > 0 {
		dAtA26 := make([]byte, len(m.StartIndices)*10)
		var j25 int
		for _, num1 := range m.StartIndices {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA26[j25] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j25++
			}
			dAtA26[j25] = uint8(num)
			j25++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j25))
		i += copy(dAtA[i:], dAtA26[:j25])
	}
	if len(m.LimitIndices) > 0 {
		dAtA28 := make([]byte, len(m.LimitIndices)*10)
		var j27 int
		for _, num1 := range m.LimitIndices {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA28[j27] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j27++
			}
			dAtA28[j27] = uint8(num)
			j27++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j27))
		i += copy(dAtA[i:], dAtA28[:j27])
	}
	if len(m.Strides) > 0 {
		dAtA30 := make([]byte, len(m.Strides)*10)
		var j29 int
		for _, num1 := range m.Strides {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA30[j29] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j29++
			}
			dAtA30[j29] = uint8(num)
			j29++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j29))
		i += copy(dAtA[i:], dAtA30[:j29])
	}
	return i, nil
}

func (m *DynamicSliceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicSliceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n31, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.StartIndices != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.StartIndices.Size()))
		n32, err := m.StartIndices.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if len(m.SliceSizes) > 0 {
		dAtA34 := make([]byte, len(m.SliceSizes)*10)
		var j33 int
		for _, num1 := range m.SliceSizes {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA34[j33] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j33++
			}
			dAtA34[j33] = uint8(num)
			j33++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j33))
		i += copy(dAtA[i:], dAtA34[:j33])
	}
	return i, nil
}

func (m *DynamicUpdateSliceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicUpdateSliceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n35, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.Update != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Update.Size()))
		n36, err := m.Update.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if m.StartIndices != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.StartIndices.Size()))
		n37, err := m.StartIndices.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}

func (m *ConvolutionDimensionNumbers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConvolutionDimensionNumbers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BatchDimension != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.BatchDimension))
	}
	if m.FeatureDimension != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.FeatureDimension))
	}
	if m.KernelInputFeatureDimension != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.KernelInputFeatureDimension))
	}
	if m.KernelOutputFeatureDimension != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.KernelOutputFeatureDimension))
	}
	if len(m.SpatialDimensions) > 0 {
		dAtA39 := make([]byte, len(m.SpatialDimensions)*10)
		var j38 int
		for _, num1 := range m.SpatialDimensions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA39[j38] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j38++
			}
			dAtA39[j38] = uint8(num)
			j38++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j38))
		i += copy(dAtA[i:], dAtA39[:j38])
	}
	if len(m.KernelSpatialDimensions) > 0 {
		dAtA41 := make([]byte, len(m.KernelSpatialDimensions)*10)
		var j40 int
		for _, num1 := range m.KernelSpatialDimensions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA41[j40] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j40++
			}
			dAtA41[j40] = uint8(num)
			j40++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j40))
		i += copy(dAtA[i:], dAtA41[:j40])
	}
	return i, nil
}

func (m *ConvolveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConvolveRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lhs != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Lhs.Size()))
		n42, err := m.Lhs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	if m.Rhs != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Rhs.Size()))
		n43, err := m.Rhs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.Window != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Window.Size()))
		n44, err := m.Window.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	if m.DimensionNumbers != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.DimensionNumbers.Size()))
		n45, err := m.DimensionNumbers.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}

func (m *InfeedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfeedRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Shape != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Shape.Size()))
		n46, err := m.Shape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if len(m.Config) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(len(m.Config)))
		i += copy(dAtA[i:], m.Config)
	}
	return i, nil
}

func (m *OutfeedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutfeedRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Shape != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Shape.Size()))
		n47, err := m.Shape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	if m.Operand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n48, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	if len(m.OutfeedConfig) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(len(m.OutfeedConfig)))
		i += copy(dAtA[i:], m.OutfeedConfig)
	}
	return i, nil
}

func (m *CallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ToApply != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ToApply.Size()))
		n49, err := m.ToApply.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	if len(m.Operands) > 0 {
		for _, msg := range m.Operands {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintXlaData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CustomCallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomCallRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CallTargetName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(len(m.CallTargetName)))
		i += copy(dAtA[i:], m.CallTargetName)
	}
	if len(m.Operands) > 0 {
		for _, msg := range m.Operands {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintXlaData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Shape != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Shape.Size()))
		n50, err := m.Shape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	return i, nil
}

func (m *MapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Operands) > 0 {
		for _, msg := range m.Operands {
			dAtA[i] = 0x12
			i++
			i = encodeVarintXlaData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ToApply != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ToApply.Size()))
		n51, err := m.ToApply.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	if len(m.StaticOperands) > 0 {
		for _, msg := range m.StaticOperands {
			dAtA[i] = 0x22
			i++
			i = encodeVarintXlaData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReduceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReduceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n52, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	if m.InitValue != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.InitValue.Size()))
		n53, err := m.InitValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	if len(m.Dimensions) > 0 {
		dAtA55 := make([]byte, len(m.Dimensions)*10)
		var j54 int
		for _, num1 := range m.Dimensions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA55[j54] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j54++
			}
			dAtA55[j54] = uint8(num)
			j54++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j54))
		i += copy(dAtA[i:], dAtA55[:j54])
	}
	if m.ToApply != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ToApply.Size()))
		n56, err := m.ToApply.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	return i, nil
}

func (m *ReduceWindowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReduceWindowRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n57, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	if m.InitValue != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.InitValue.Size()))
		n58, err := m.InitValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n58
	}
	if m.Window != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Window.Size()))
		n59, err := m.Window.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n59
	}
	if m.ToApply != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ToApply.Size()))
		n60, err := m.ToApply.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	return i, nil
}

func (m *BatchNormTrainingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchNormTrainingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operand != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n61, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	if m.Scale != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Scale.Size()))
		n62, err := m.Scale.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	if m.Offset != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Offset.Size()))
		n63, err := m.Offset.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	if m.Epsilon != 0 {
		dAtA[i] = 0x25
		i++
		i = encodeFixed32XlaData(dAtA, i, uint32(math.Float32bits(float32(m.Epsilon))))
	}
	if m.FeatureIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.FeatureIndex))
	}
	return i, nil
}

func (m *BatchNormGradRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchNormGradRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operand != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n64, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	if m.Scale != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Scale.Size()))
		n65, err := m.Scale.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	if m.Mean != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Mean.Size()))
		n66, err := m.Mean.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	if m.Variance != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Variance.Size()))
		n67, err := m.Variance.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	if m.GradOutput != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.GradOutput.Size()))
		n68, err := m.GradOutput.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	if m.Epsilon != 0 {
		dAtA[i] = 0x35
		i++
		i = encodeFixed32XlaData(dAtA, i, uint32(math.Float32bits(float32(m.Epsilon))))
	}
	if m.FeatureIndex != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.FeatureIndex))
	}
	return i, nil
}

func (m *CrossReplicaSumRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossReplicaSumRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n69, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	return i, nil
}

func (m *SelectAndScatterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAndScatterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n70, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	if m.Source != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Source.Size()))
		n71, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	if m.InitValue != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.InitValue.Size()))
		n72, err := m.InitValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n72
	}
	if m.Window != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Window.Size()))
		n73, err := m.Window.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n73
	}
	if m.Select != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Select.Size()))
		n74, err := m.Select.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	if m.Scatter != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Scatter.Size()))
		n75, err := m.Scatter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	return i, nil
}

func (m *ReverseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReverseRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n76, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	if len(m.Dimensions) > 0 {
		dAtA78 := make([]byte, len(m.Dimensions)*10)
		var j77 int
		for _, num1 := range m.Dimensions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA78[j77] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j77++
			}
			dAtA78[j77] = uint8(num)
			j77++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j77))
		i += copy(dAtA[i:], dAtA78[:j77])
	}
	return i, nil
}

func (m *BroadcastRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n79, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n79
	}
	if len(m.BroadcastSizes) > 0 {
		dAtA81 := make([]byte, len(m.BroadcastSizes)*10)
		var j80 int
		for _, num1 := range m.BroadcastSizes {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA81[j80] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j80++
			}
			dAtA81[j80] = uint8(num)
			j80++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j80))
		i += copy(dAtA[i:], dAtA81[:j80])
	}
	return i, nil
}

func (m *PadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n82, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	if m.PaddingValue != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.PaddingValue.Size()))
		n83, err := m.PaddingValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	if m.PaddingConfig != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.PaddingConfig.Size()))
		n84, err := m.PaddingConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	return i, nil
}

func (m *ReshapeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReshapeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n85, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n85
	}
	if len(m.Dimensions) > 0 {
		dAtA87 := make([]byte, len(m.Dimensions)*10)
		var j86 int
		for _, num1 := range m.Dimensions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA87[j86] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j86++
			}
			dAtA87[j86] = uint8(num)
			j86++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j86))
		i += copy(dAtA[i:], dAtA87[:j86])
	}
	if len(m.NewSizes) > 0 {
		dAtA89 := make([]byte, len(m.NewSizes)*10)
		var j88 int
		for _, num1 := range m.NewSizes {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA89[j88] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j88++
			}
			dAtA89[j88] = uint8(num)
			j88++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j88))
		i += copy(dAtA[i:], dAtA89[:j88])
	}
	return i, nil
}

func (m *TransposeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransposeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n90, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n90
	}
	if len(m.Dimensions) > 0 {
		dAtA92 := make([]byte, len(m.Dimensions)*10)
		var j91 int
		for _, num1 := range m.Dimensions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA92[j91] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j91++
			}
			dAtA92[j91] = uint8(num)
			j91++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j91))
		i += copy(dAtA[i:], dAtA92[:j91])
	}
	return i, nil
}

func (m *ParameterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParameterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Shape != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Shape.Size()))
		n93, err := m.Shape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n93
	}
	if m.Parameter != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Parameter))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GetLocalShapeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLocalShapeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Computation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Computation.Size()))
		n94, err := m.Computation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n94
	}
	if m.Operand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n95, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n95
	}
	return i, nil
}

func (m *GetLocalShapeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLocalShapeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Shape != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Shape.Size()))
		n96, err := m.Shape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n96
	}
	return i, nil
}

func (m *TraceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tag) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(len(m.Tag)))
		i += copy(dAtA[i:], m.Tag)
	}
	if m.Operand != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n97, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n97
	}
	return i, nil
}

func (m *ConvertRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConvertRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operand != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n98, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n98
	}
	if m.NewElementType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.NewElementType))
	}
	return i, nil
}

func (m *ConcatenateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConcatenateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Operands) > 0 {
		for _, msg := range m.Operands {
			dAtA[i] = 0x12
			i++
			i = encodeVarintXlaData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Dimension != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Dimension))
	}
	return i, nil
}

func (m *WhileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Condition != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Condition.Size()))
		n99, err := m.Condition.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n99
	}
	if m.Body != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Body.Size()))
		n100, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n100
	}
	if m.Init != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Init.Size()))
		n101, err := m.Init.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n101
	}
	return i, nil
}

func (m *UnaryOpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnaryOpRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Unop != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Unop))
	}
	if m.Operand != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n102, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n102
	}
	return i, nil
}

func (m *BinaryOpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BinaryOpRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Binop != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Binop))
	}
	if m.Lhs != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Lhs.Size()))
		n103, err := m.Lhs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n103
	}
	if m.Rhs != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Rhs.Size()))
		n104, err := m.Rhs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n104
	}
	if len(m.BroadcastDimensions) > 0 {
		dAtA106 := make([]byte, len(m.BroadcastDimensions)*10)
		var j105 int
		for _, num1 := range m.BroadcastDimensions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA106[j105] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j105++
			}
			dAtA106[j105] = uint8(num)
			j105++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(j105))
		i += copy(dAtA[i:], dAtA106[:j105])
	}
	return i, nil
}

func (m *RngRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RngRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Distribution != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Distribution))
	}
	if len(m.Parameter) > 0 {
		for _, msg := range m.Parameter {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintXlaData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Shape != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Shape.Size()))
		n107, err := m.Shape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n107
	}
	return i, nil
}

func (m *TernaryOpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TernaryOpRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Triop != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Triop))
	}
	if m.Lhs != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Lhs.Size()))
		n108, err := m.Lhs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n108
	}
	if m.Rhs != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Rhs.Size()))
		n109, err := m.Rhs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n109
	}
	if m.Ehs != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Ehs.Size()))
		n110, err := m.Ehs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n110
	}
	return i, nil
}

func (m *VariadicOpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VariadicOpRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Varop != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Varop))
	}
	if len(m.Operands) > 0 {
		for _, msg := range m.Operands {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintXlaData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReducePrecisionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReducePrecisionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operand != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n111, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n111
	}
	if m.ExponentBits != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ExponentBits))
	}
	if m.MantissaBits != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.MantissaBits))
	}
	return i, nil
}

func (m *SendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Operand != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Operand.Size()))
		n112, err := m.Operand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n112
	}
	if m.ChannelHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ChannelHandle.Size()))
		n113, err := m.ChannelHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n113
	}
	return i, nil
}

func (m *RecvRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecvRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Shape != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Shape.Size()))
		n114, err := m.Shape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n114
	}
	if m.ChannelHandle != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ChannelHandle.Size()))
		n115, err := m.ChannelHandle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n115
	}
	return i, nil
}

func (m *OpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Computation != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Computation.Size()))
		n116, err := m.Computation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n116
	}
	if m.Op != nil {
		nn117, err := m.Op.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn117
	}
	if m.Metadata != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Metadata.Size()))
		n118, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n118
	}
	return i, nil
}

func (m *OpRequest_BinaryOpRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BinaryOpRequest != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.BinaryOpRequest.Size()))
		n119, err := m.BinaryOpRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n119
	}
	return i, nil
}
func (m *OpRequest_BroadcastRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BroadcastRequest != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.BroadcastRequest.Size()))
		n120, err := m.BroadcastRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n120
	}
	return i, nil
}
func (m *OpRequest_CallRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CallRequest != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.CallRequest.Size()))
		n121, err := m.CallRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n121
	}
	return i, nil
}
func (m *OpRequest_ConcatenateRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ConcatenateRequest != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ConcatenateRequest.Size()))
		n122, err := m.ConcatenateRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n122
	}
	return i, nil
}
func (m *OpRequest_ConstantRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ConstantRequest != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ConstantRequest.Size()))
		n123, err := m.ConstantRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n123
	}
	return i, nil
}
func (m *OpRequest_ConvertRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ConvertRequest != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ConvertRequest.Size()))
		n124, err := m.ConvertRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n124
	}
	return i, nil
}
func (m *OpRequest_ConvolveRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ConvolveRequest != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ConvolveRequest.Size()))
		n125, err := m.ConvolveRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n125
	}
	return i, nil
}
func (m *OpRequest_CrossReplicaSumRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CrossReplicaSumRequest != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.CrossReplicaSumRequest.Size()))
		n126, err := m.CrossReplicaSumRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n126
	}
	return i, nil
}
func (m *OpRequest_CustomCallRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomCallRequest != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.CustomCallRequest.Size()))
		n127, err := m.CustomCallRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n127
	}
	return i, nil
}
func (m *OpRequest_DynamicSliceRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DynamicSliceRequest != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.DynamicSliceRequest.Size()))
		n128, err := m.DynamicSliceRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n128
	}
	return i, nil
}
func (m *OpRequest_DynamicUpdateSliceRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DynamicUpdateSliceRequest != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.DynamicUpdateSliceRequest.Size()))
		n129, err := m.DynamicUpdateSliceRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n129
	}
	return i, nil
}
func (m *OpRequest_GetTupleElementRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GetTupleElementRequest != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.GetTupleElementRequest.Size()))
		n130, err := m.GetTupleElementRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n130
	}
	return i, nil
}
func (m *OpRequest_InfeedRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InfeedRequest != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.InfeedRequest.Size()))
		n131, err := m.InfeedRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n131
	}
	return i, nil
}
func (m *OpRequest_MapRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MapRequest != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.MapRequest.Size()))
		n132, err := m.MapRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n132
	}
	return i, nil
}
func (m *OpRequest_PadRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PadRequest != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.PadRequest.Size()))
		n133, err := m.PadRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n133
	}
	return i, nil
}
func (m *OpRequest_ParameterRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ParameterRequest != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ParameterRequest.Size()))
		n134, err := m.ParameterRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n134
	}
	return i, nil
}
func (m *OpRequest_ReduceRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReduceRequest != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ReduceRequest.Size()))
		n135, err := m.ReduceRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n135
	}
	return i, nil
}
func (m *OpRequest_ReduceWindowRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReduceWindowRequest != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ReduceWindowRequest.Size()))
		n136, err := m.ReduceWindowRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n136
	}
	return i, nil
}
func (m *OpRequest_ReshapeRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReshapeRequest != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ReshapeRequest.Size()))
		n137, err := m.ReshapeRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n137
	}
	return i, nil
}
func (m *OpRequest_ReverseRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReverseRequest != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ReverseRequest.Size()))
		n138, err := m.ReverseRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n138
	}
	return i, nil
}
func (m *OpRequest_RngRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RngRequest != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.RngRequest.Size()))
		n139, err := m.RngRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n139
	}
	return i, nil
}
func (m *OpRequest_SelectAndScatterRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SelectAndScatterRequest != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.SelectAndScatterRequest.Size()))
		n140, err := m.SelectAndScatterRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n140
	}
	return i, nil
}
func (m *OpRequest_SliceRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SliceRequest != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.SliceRequest.Size()))
		n141, err := m.SliceRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n141
	}
	return i, nil
}
func (m *OpRequest_TernaryOpRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TernaryOpRequest != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.TernaryOpRequest.Size()))
		n142, err := m.TernaryOpRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n142
	}
	return i, nil
}
func (m *OpRequest_TraceRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TraceRequest != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.TraceRequest.Size()))
		n143, err := m.TraceRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n143
	}
	return i, nil
}
func (m *OpRequest_UnaryOpRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UnaryOpRequest != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.UnaryOpRequest.Size()))
		n144, err := m.UnaryOpRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n144
	}
	return i, nil
}
func (m *OpRequest_VariadicOpRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.VariadicOpRequest != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.VariadicOpRequest.Size()))
		n145, err := m.VariadicOpRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n145
	}
	return i, nil
}
func (m *OpRequest_WhileRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.WhileRequest != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.WhileRequest.Size()))
		n146, err := m.WhileRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n146
	}
	return i, nil
}
func (m *OpRequest_SendRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SendRequest != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.SendRequest.Size()))
		n147, err := m.SendRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n147
	}
	return i, nil
}
func (m *OpRequest_RecvRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RecvRequest != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.RecvRequest.Size()))
		n148, err := m.RecvRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n148
	}
	return i, nil
}
func (m *OpRequest_OutfeedRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OutfeedRequest != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.OutfeedRequest.Size()))
		n149, err := m.OutfeedRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n149
	}
	return i, nil
}
func (m *OpRequest_TransposeRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TransposeRequest != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.TransposeRequest.Size()))
		n150, err := m.TransposeRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n150
	}
	return i, nil
}
func (m *OpRequest_BatchNormTrainingRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchNormTrainingRequest != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.BatchNormTrainingRequest.Size()))
		n151, err := m.BatchNormTrainingRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n151
	}
	return i, nil
}
func (m *OpRequest_ReducePrecisionRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReducePrecisionRequest != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.ReducePrecisionRequest.Size()))
		n152, err := m.ReducePrecisionRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n152
	}
	return i, nil
}
func (m *OpRequest_BatchNormGradRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BatchNormGradRequest != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.BatchNormGradRequest.Size()))
		n153, err := m.BatchNormGradRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n153
	}
	return i, nil
}
func (m *OpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Output != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXlaData(dAtA, i, uint64(m.Output.Size()))
		n154, err := m.Output.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n154
	}
	return i, nil
}

func encodeFixed64XlaData(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32XlaData(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintXlaData(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PaddingConfig) Size() (n int) {
	var l int
	_ = l
	if len(m.Dimensions) > 0 {
		for _, e := range m.Dimensions {
			l = e.Size()
			n += 1 + l + sovXlaData(uint64(l))
		}
	}
	return n
}

func (m *PaddingConfig_PaddingConfigDimension) Size() (n int) {
	var l int
	_ = l
	if m.EdgePaddingLow != 0 {
		n += 1 + sovXlaData(uint64(m.EdgePaddingLow))
	}
	if m.EdgePaddingHigh != 0 {
		n += 1 + sovXlaData(uint64(m.EdgePaddingHigh))
	}
	if m.InteriorPadding != 0 {
		n += 1 + sovXlaData(uint64(m.InteriorPadding))
	}
	return n
}

func (m *Layout) Size() (n int) {
	var l int
	_ = l
	if len(m.MinorToMajor) > 0 {
		l = 0
		for _, e := range m.MinorToMajor {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	if len(m.PaddedDimensions) > 0 {
		l = 0
		for _, e := range m.PaddedDimensions {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	if m.PaddingValue != 0 {
		n += 1 + sovXlaData(uint64(m.PaddingValue))
	}
	return n
}

func (m *Shape) Size() (n int) {
	var l int
	_ = l
	if m.ElementType != 0 {
		n += 1 + sovXlaData(uint64(m.ElementType))
	}
	if len(m.Dimensions) > 0 {
		l = 0
		for _, e := range m.Dimensions {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	if len(m.TupleShapes) > 0 {
		for _, e := range m.TupleShapes {
			l = e.Size()
			n += 1 + l + sovXlaData(uint64(l))
		}
	}
	if m.Layout != nil {
		l = m.Layout.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *ProgramShape) Size() (n int) {
	var l int
	_ = l
	if len(m.Parameters) > 0 {
		for _, e := range m.Parameters {
			l = e.Size()
			n += 1 + l + sovXlaData(uint64(l))
		}
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if len(m.ParameterNames) > 0 {
		for _, s := range m.ParameterNames {
			l = len(s)
			n += 1 + l + sovXlaData(uint64(l))
		}
	}
	return n
}

func (m *ComputationStats) Size() (n int) {
	var l int
	_ = l
	if m.FlopCount != 0 {
		n += 9
	}
	if m.TranscendentalCount != 0 {
		n += 9
	}
	return n
}

func (m *OpMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.OpType)
	if l > 0 {
		n += 1 + l + sovXlaData(uint64(l))
	}
	l = len(m.OpName)
	if l > 0 {
		n += 1 + l + sovXlaData(uint64(l))
	}
	l = len(m.SourceFile)
	if l > 0 {
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.SourceLine != 0 {
		n += 1 + sovXlaData(uint64(m.SourceLine))
	}
	return n
}

func (m *ExecutionProfile) Size() (n int) {
	var l int
	_ = l
	if m.CompilationCacheHit {
		n += 2
	}
	if m.CompileTimeMs != 0 {
		n += 1 + sovXlaData(uint64(m.CompileTimeMs))
	}
	if m.ComputeCycleCount != 0 {
		n += 1 + sovXlaData(uint64(m.ComputeCycleCount))
	}
	if m.ComputeTimeNs != 0 {
		n += 1 + sovXlaData(uint64(m.ComputeTimeNs))
	}
	if m.ComputeAndTransferTimeNs != 0 {
		n += 1 + sovXlaData(uint64(m.ComputeAndTransferTimeNs))
	}
	return n
}

func (m *ComputationHandle) Size() (n int) {
	var l int
	_ = l
	if m.Handle != 0 {
		n += 1 + sovXlaData(uint64(m.Handle))
	}
	return n
}

func (m *ExecutionHandle) Size() (n int) {
	var l int
	_ = l
	if m.Handle != 0 {
		n += 1 + sovXlaData(uint64(m.Handle))
	}
	return n
}

func (m *GlobalDataHandle) Size() (n int) {
	var l int
	_ = l
	if m.Handle != 0 {
		n += 1 + sovXlaData(uint64(m.Handle))
	}
	return n
}

func (m *ComputationDataHandle) Size() (n int) {
	var l int
	_ = l
	if m.Handle != 0 {
		n += 1 + sovXlaData(uint64(m.Handle))
	}
	return n
}

func (m *DeviceHandle) Size() (n int) {
	var l int
	_ = l
	if m.Handle != 0 {
		n += 1 + sovXlaData(uint64(m.Handle))
	}
	if m.DeviceCount != 0 {
		n += 1 + sovXlaData(uint64(m.DeviceCount))
	}
	return n
}

func (m *ChannelHandle) Size() (n int) {
	var l int
	_ = l
	if m.Handle != 0 {
		n += 1 + sovXlaData(uint64(m.Handle))
	}
	return n
}

func (m *DeviceAssignmentProto) Size() (n int) {
	var l int
	_ = l
	if m.ReplicaCount != 0 {
		n += 1 + sovXlaData(uint64(m.ReplicaCount))
	}
	if m.ComputationCount != 0 {
		n += 1 + sovXlaData(uint64(m.ComputationCount))
	}
	if len(m.ComputationDevices) > 0 {
		for _, e := range m.ComputationDevices {
			l = e.Size()
			n += 1 + l + sovXlaData(uint64(l))
		}
	}
	return n
}

func (m *DeviceAssignmentProto_ComputationDevice) Size() (n int) {
	var l int
	_ = l
	if len(m.ReplicaDeviceIds) > 0 {
		l = 0
		for _, e := range m.ReplicaDeviceIds {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	return n
}

func (m *LiteralProto) Size() (n int) {
	var l int
	_ = l
	if m.Shape != nil {
		l = m.Shape.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if len(m.Preds) > 0 {
		n += 1 + sovXlaData(uint64(len(m.Preds))) + len(m.Preds)*1
	}
	l = len(m.U8S)
	if l > 0 {
		n += 1 + l + sovXlaData(uint64(l))
	}
	if len(m.S32S) > 0 {
		l = 0
		for _, e := range m.S32S {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	if len(m.S64S) > 0 {
		l = 0
		for _, e := range m.S64S {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	if len(m.U32S) > 0 {
		l = 0
		for _, e := range m.U32S {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	if len(m.U64S) > 0 {
		l = 0
		for _, e := range m.U64S {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	if len(m.F32S) > 0 {
		n += 1 + sovXlaData(uint64(len(m.F32S)*4)) + len(m.F32S)*4
	}
	if len(m.F64S) > 0 {
		n += 1 + sovXlaData(uint64(len(m.F64S)*8)) + len(m.F64S)*8
	}
	if len(m.TupleLiterals) > 0 {
		for _, e := range m.TupleLiterals {
			l = e.Size()
			n += 1 + l + sovXlaData(uint64(l))
		}
	}
	l = len(m.F16S)
	if l > 0 {
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *WindowDimension) Size() (n int) {
	var l int
	_ = l
	if m.Size_ != 0 {
		n += 1 + sovXlaData(uint64(m.Size_))
	}
	if m.Stride != 0 {
		n += 1 + sovXlaData(uint64(m.Stride))
	}
	if m.PaddingLow != 0 {
		n += 1 + sovXlaData(uint64(m.PaddingLow))
	}
	if m.PaddingHigh != 0 {
		n += 1 + sovXlaData(uint64(m.PaddingHigh))
	}
	if m.WindowDilation != 0 {
		n += 1 + sovXlaData(uint64(m.WindowDilation))
	}
	if m.BaseDilation != 0 {
		n += 1 + sovXlaData(uint64(m.BaseDilation))
	}
	return n
}

func (m *Window) Size() (n int) {
	var l int
	_ = l
	if len(m.Dimensions) > 0 {
		for _, e := range m.Dimensions {
			l = e.Size()
			n += 1 + l + sovXlaData(uint64(l))
		}
	}
	return n
}

func (m *ConstantRequest) Size() (n int) {
	var l int
	_ = l
	if m.Literal != nil {
		l = m.Literal.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *GetTupleElementRequest) Size() (n int) {
	var l int
	_ = l
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovXlaData(uint64(m.Index))
	}
	return n
}

func (m *SliceRequest) Size() (n int) {
	var l int
	_ = l
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if len(m.StartIndices) > 0 {
		l = 0
		for _, e := range m.StartIndices {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	if len(m.LimitIndices) > 0 {
		l = 0
		for _, e := range m.LimitIndices {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	if len(m.Strides) > 0 {
		l = 0
		for _, e := range m.Strides {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	return n
}

func (m *DynamicSliceRequest) Size() (n int) {
	var l int
	_ = l
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.StartIndices != nil {
		l = m.StartIndices.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if len(m.SliceSizes) > 0 {
		l = 0
		for _, e := range m.SliceSizes {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	return n
}

func (m *DynamicUpdateSliceRequest) Size() (n int) {
	var l int
	_ = l
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Update != nil {
		l = m.Update.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.StartIndices != nil {
		l = m.StartIndices.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *ConvolutionDimensionNumbers) Size() (n int) {
	var l int
	_ = l
	if m.BatchDimension != 0 {
		n += 1 + sovXlaData(uint64(m.BatchDimension))
	}
	if m.FeatureDimension != 0 {
		n += 1 + sovXlaData(uint64(m.FeatureDimension))
	}
	if m.KernelInputFeatureDimension != 0 {
		n += 1 + sovXlaData(uint64(m.KernelInputFeatureDimension))
	}
	if m.KernelOutputFeatureDimension != 0 {
		n += 1 + sovXlaData(uint64(m.KernelOutputFeatureDimension))
	}
	if len(m.SpatialDimensions) > 0 {
		l = 0
		for _, e := range m.SpatialDimensions {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	if len(m.KernelSpatialDimensions) > 0 {
		l = 0
		for _, e := range m.KernelSpatialDimensions {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	return n
}

func (m *ConvolveRequest) Size() (n int) {
	var l int
	_ = l
	if m.Lhs != nil {
		l = m.Lhs.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Rhs != nil {
		l = m.Rhs.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Window != nil {
		l = m.Window.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.DimensionNumbers != nil {
		l = m.DimensionNumbers.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *InfeedRequest) Size() (n int) {
	var l int
	_ = l
	if m.Shape != nil {
		l = m.Shape.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *OutfeedRequest) Size() (n int) {
	var l int
	_ = l
	if m.Shape != nil {
		l = m.Shape.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	l = len(m.OutfeedConfig)
	if l > 0 {
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *CallRequest) Size() (n int) {
	var l int
	_ = l
	if m.ToApply != nil {
		l = m.ToApply.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if len(m.Operands) > 0 {
		for _, e := range m.Operands {
			l = e.Size()
			n += 1 + l + sovXlaData(uint64(l))
		}
	}
	return n
}

func (m *CustomCallRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.CallTargetName)
	if l > 0 {
		n += 1 + l + sovXlaData(uint64(l))
	}
	if len(m.Operands) > 0 {
		for _, e := range m.Operands {
			l = e.Size()
			n += 1 + l + sovXlaData(uint64(l))
		}
	}
	if m.Shape != nil {
		l = m.Shape.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *MapRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Operands) > 0 {
		for _, e := range m.Operands {
			l = e.Size()
			n += 1 + l + sovXlaData(uint64(l))
		}
	}
	if m.ToApply != nil {
		l = m.ToApply.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if len(m.StaticOperands) > 0 {
		for _, e := range m.StaticOperands {
			l = e.Size()
			n += 1 + l + sovXlaData(uint64(l))
		}
	}
	return n
}

func (m *ReduceRequest) Size() (n int) {
	var l int
	_ = l
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.InitValue != nil {
		l = m.InitValue.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if len(m.Dimensions) > 0 {
		l = 0
		for _, e := range m.Dimensions {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	if m.ToApply != nil {
		l = m.ToApply.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *ReduceWindowRequest) Size() (n int) {
	var l int
	_ = l
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.InitValue != nil {
		l = m.InitValue.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Window != nil {
		l = m.Window.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.ToApply != nil {
		l = m.ToApply.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *BatchNormTrainingRequest) Size() (n int) {
	var l int
	_ = l
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Scale != nil {
		l = m.Scale.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Offset != nil {
		l = m.Offset.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Epsilon != 0 {
		n += 5
	}
	if m.FeatureIndex != 0 {
		n += 1 + sovXlaData(uint64(m.FeatureIndex))
	}
	return n
}

func (m *BatchNormGradRequest) Size() (n int) {
	var l int
	_ = l
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Scale != nil {
		l = m.Scale.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Mean != nil {
		l = m.Mean.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Variance != nil {
		l = m.Variance.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.GradOutput != nil {
		l = m.GradOutput.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Epsilon != 0 {
		n += 5
	}
	if m.FeatureIndex != 0 {
		n += 1 + sovXlaData(uint64(m.FeatureIndex))
	}
	return n
}

func (m *CrossReplicaSumRequest) Size() (n int) {
	var l int
	_ = l
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *SelectAndScatterRequest) Size() (n int) {
	var l int
	_ = l
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.InitValue != nil {
		l = m.InitValue.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Window != nil {
		l = m.Window.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Select != nil {
		l = m.Select.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Scatter != nil {
		l = m.Scatter.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *ReverseRequest) Size() (n int) {
	var l int
	_ = l
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if len(m.Dimensions) > 0 {
		l = 0
		for _, e := range m.Dimensions {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	return n
}

func (m *BroadcastRequest) Size() (n int) {
	var l int
	_ = l
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if len(m.BroadcastSizes) > 0 {
		l = 0
		for _, e := range m.BroadcastSizes {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	return n
}

func (m *PadRequest) Size() (n int) {
	var l int
	_ = l
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.PaddingValue != nil {
		l = m.PaddingValue.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.PaddingConfig != nil {
		l = m.PaddingConfig.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *ReshapeRequest) Size() (n int) {
	var l int
	_ = l
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if len(m.Dimensions) > 0 {
		l = 0
		for _, e := range m.Dimensions {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	if len(m.NewSizes) > 0 {
		l = 0
		for _, e := range m.NewSizes {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	return n
}

func (m *TransposeRequest) Size() (n int) {
	var l int
	_ = l
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if len(m.Dimensions) > 0 {
		l = 0
		for _, e := range m.Dimensions {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	return n
}

func (m *ParameterRequest) Size() (n int) {
	var l int
	_ = l
	if m.Shape != nil {
		l = m.Shape.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Parameter != 0 {
		n += 1 + sovXlaData(uint64(m.Parameter))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *GetLocalShapeRequest) Size() (n int) {
	var l int
	_ = l
	if m.Computation != nil {
		l = m.Computation.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *GetLocalShapeResponse) Size() (n int) {
	var l int
	_ = l
	if m.Shape != nil {
		l = m.Shape.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *TraceRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *ConvertRequest) Size() (n int) {
	var l int
	_ = l
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.NewElementType != 0 {
		n += 1 + sovXlaData(uint64(m.NewElementType))
	}
	return n
}

func (m *ConcatenateRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Operands) > 0 {
		for _, e := range m.Operands {
			l = e.Size()
			n += 1 + l + sovXlaData(uint64(l))
		}
	}
	if m.Dimension != 0 {
		n += 1 + sovXlaData(uint64(m.Dimension))
	}
	return n
}

func (m *WhileRequest) Size() (n int) {
	var l int
	_ = l
	if m.Condition != nil {
		l = m.Condition.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Init != nil {
		l = m.Init.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *UnaryOpRequest) Size() (n int) {
	var l int
	_ = l
	if m.Unop != 0 {
		n += 1 + sovXlaData(uint64(m.Unop))
	}
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *BinaryOpRequest) Size() (n int) {
	var l int
	_ = l
	if m.Binop != 0 {
		n += 1 + sovXlaData(uint64(m.Binop))
	}
	if m.Lhs != nil {
		l = m.Lhs.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Rhs != nil {
		l = m.Rhs.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if len(m.BroadcastDimensions) > 0 {
		l = 0
		for _, e := range m.BroadcastDimensions {
			l += sovXlaData(uint64(e))
		}
		n += 1 + sovXlaData(uint64(l)) + l
	}
	return n
}

func (m *RngRequest) Size() (n int) {
	var l int
	_ = l
	if m.Distribution != 0 {
		n += 1 + sovXlaData(uint64(m.Distribution))
	}
	if len(m.Parameter) > 0 {
		for _, e := range m.Parameter {
			l = e.Size()
			n += 1 + l + sovXlaData(uint64(l))
		}
	}
	if m.Shape != nil {
		l = m.Shape.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *TernaryOpRequest) Size() (n int) {
	var l int
	_ = l
	if m.Triop != 0 {
		n += 1 + sovXlaData(uint64(m.Triop))
	}
	if m.Lhs != nil {
		l = m.Lhs.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Rhs != nil {
		l = m.Rhs.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Ehs != nil {
		l = m.Ehs.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *VariadicOpRequest) Size() (n int) {
	var l int
	_ = l
	if m.Varop != 0 {
		n += 1 + sovXlaData(uint64(m.Varop))
	}
	if len(m.Operands) > 0 {
		for _, e := range m.Operands {
			l = e.Size()
			n += 1 + l + sovXlaData(uint64(l))
		}
	}
	return n
}

func (m *ReducePrecisionRequest) Size() (n int) {
	var l int
	_ = l
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.ExponentBits != 0 {
		n += 1 + sovXlaData(uint64(m.ExponentBits))
	}
	if m.MantissaBits != 0 {
		n += 1 + sovXlaData(uint64(m.MantissaBits))
	}
	return n
}

func (m *SendRequest) Size() (n int) {
	var l int
	_ = l
	if m.Operand != nil {
		l = m.Operand.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.ChannelHandle != nil {
		l = m.ChannelHandle.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *RecvRequest) Size() (n int) {
	var l int
	_ = l
	if m.Shape != nil {
		l = m.Shape.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.ChannelHandle != nil {
		l = m.ChannelHandle.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *OpRequest) Size() (n int) {
	var l int
	_ = l
	if m.Computation != nil {
		l = m.Computation.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	if m.Op != nil {
		n += m.Op.Size()
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}

func (m *OpRequest_BinaryOpRequest) Size() (n int) {
	var l int
	_ = l
	if m.BinaryOpRequest != nil {
		l = m.BinaryOpRequest.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_BroadcastRequest) Size() (n int) {
	var l int
	_ = l
	if m.BroadcastRequest != nil {
		l = m.BroadcastRequest.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_CallRequest) Size() (n int) {
	var l int
	_ = l
	if m.CallRequest != nil {
		l = m.CallRequest.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_ConcatenateRequest) Size() (n int) {
	var l int
	_ = l
	if m.ConcatenateRequest != nil {
		l = m.ConcatenateRequest.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_ConstantRequest) Size() (n int) {
	var l int
	_ = l
	if m.ConstantRequest != nil {
		l = m.ConstantRequest.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_ConvertRequest) Size() (n int) {
	var l int
	_ = l
	if m.ConvertRequest != nil {
		l = m.ConvertRequest.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_ConvolveRequest) Size() (n int) {
	var l int
	_ = l
	if m.ConvolveRequest != nil {
		l = m.ConvolveRequest.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_CrossReplicaSumRequest) Size() (n int) {
	var l int
	_ = l
	if m.CrossReplicaSumRequest != nil {
		l = m.CrossReplicaSumRequest.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_CustomCallRequest) Size() (n int) {
	var l int
	_ = l
	if m.CustomCallRequest != nil {
		l = m.CustomCallRequest.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_DynamicSliceRequest) Size() (n int) {
	var l int
	_ = l
	if m.DynamicSliceRequest != nil {
		l = m.DynamicSliceRequest.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_DynamicUpdateSliceRequest) Size() (n int) {
	var l int
	_ = l
	if m.DynamicUpdateSliceRequest != nil {
		l = m.DynamicUpdateSliceRequest.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_GetTupleElementRequest) Size() (n int) {
	var l int
	_ = l
	if m.GetTupleElementRequest != nil {
		l = m.GetTupleElementRequest.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_InfeedRequest) Size() (n int) {
	var l int
	_ = l
	if m.InfeedRequest != nil {
		l = m.InfeedRequest.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_MapRequest) Size() (n int) {
	var l int
	_ = l
	if m.MapRequest != nil {
		l = m.MapRequest.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_PadRequest) Size() (n int) {
	var l int
	_ = l
	if m.PadRequest != nil {
		l = m.PadRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_ParameterRequest) Size() (n int) {
	var l int
	_ = l
	if m.ParameterRequest != nil {
		l = m.ParameterRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_ReduceRequest) Size() (n int) {
	var l int
	_ = l
	if m.ReduceRequest != nil {
		l = m.ReduceRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_ReduceWindowRequest) Size() (n int) {
	var l int
	_ = l
	if m.ReduceWindowRequest != nil {
		l = m.ReduceWindowRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_ReshapeRequest) Size() (n int) {
	var l int
	_ = l
	if m.ReshapeRequest != nil {
		l = m.ReshapeRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_ReverseRequest) Size() (n int) {
	var l int
	_ = l
	if m.ReverseRequest != nil {
		l = m.ReverseRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_RngRequest) Size() (n int) {
	var l int
	_ = l
	if m.RngRequest != nil {
		l = m.RngRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_SelectAndScatterRequest) Size() (n int) {
	var l int
	_ = l
	if m.SelectAndScatterRequest != nil {
		l = m.SelectAndScatterRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_SliceRequest) Size() (n int) {
	var l int
	_ = l
	if m.SliceRequest != nil {
		l = m.SliceRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_TernaryOpRequest) Size() (n int) {
	var l int
	_ = l
	if m.TernaryOpRequest != nil {
		l = m.TernaryOpRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_TraceRequest) Size() (n int) {
	var l int
	_ = l
	if m.TraceRequest != nil {
		l = m.TraceRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_UnaryOpRequest) Size() (n int) {
	var l int
	_ = l
	if m.UnaryOpRequest != nil {
		l = m.UnaryOpRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_VariadicOpRequest) Size() (n int) {
	var l int
	_ = l
	if m.VariadicOpRequest != nil {
		l = m.VariadicOpRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_WhileRequest) Size() (n int) {
	var l int
	_ = l
	if m.WhileRequest != nil {
		l = m.WhileRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_SendRequest) Size() (n int) {
	var l int
	_ = l
	if m.SendRequest != nil {
		l = m.SendRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_RecvRequest) Size() (n int) {
	var l int
	_ = l
	if m.RecvRequest != nil {
		l = m.RecvRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_OutfeedRequest) Size() (n int) {
	var l int
	_ = l
	if m.OutfeedRequest != nil {
		l = m.OutfeedRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_TransposeRequest) Size() (n int) {
	var l int
	_ = l
	if m.TransposeRequest != nil {
		l = m.TransposeRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_BatchNormTrainingRequest) Size() (n int) {
	var l int
	_ = l
	if m.BatchNormTrainingRequest != nil {
		l = m.BatchNormTrainingRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_ReducePrecisionRequest) Size() (n int) {
	var l int
	_ = l
	if m.ReducePrecisionRequest != nil {
		l = m.ReducePrecisionRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpRequest_BatchNormGradRequest) Size() (n int) {
	var l int
	_ = l
	if m.BatchNormGradRequest != nil {
		l = m.BatchNormGradRequest.Size()
		n += 2 + l + sovXlaData(uint64(l))
	}
	return n
}
func (m *OpResponse) Size() (n int) {
	var l int
	_ = l
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovXlaData(uint64(l))
	}
	return n
}

func sovXlaData(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozXlaData(x uint64) (n int) {
	return sovXlaData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PaddingConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PaddingConfig{`,
		`Dimensions:` + strings.Replace(fmt.Sprintf("%v", this.Dimensions), "PaddingConfig_PaddingConfigDimension", "PaddingConfig_PaddingConfigDimension", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PaddingConfig_PaddingConfigDimension) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PaddingConfig_PaddingConfigDimension{`,
		`EdgePaddingLow:` + fmt.Sprintf("%v", this.EdgePaddingLow) + `,`,
		`EdgePaddingHigh:` + fmt.Sprintf("%v", this.EdgePaddingHigh) + `,`,
		`InteriorPadding:` + fmt.Sprintf("%v", this.InteriorPadding) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Layout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Layout{`,
		`MinorToMajor:` + fmt.Sprintf("%v", this.MinorToMajor) + `,`,
		`PaddedDimensions:` + fmt.Sprintf("%v", this.PaddedDimensions) + `,`,
		`PaddingValue:` + fmt.Sprintf("%v", this.PaddingValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Shape) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Shape{`,
		`ElementType:` + fmt.Sprintf("%v", this.ElementType) + `,`,
		`Dimensions:` + fmt.Sprintf("%v", this.Dimensions) + `,`,
		`TupleShapes:` + strings.Replace(fmt.Sprintf("%v", this.TupleShapes), "Shape", "Shape", 1) + `,`,
		`Layout:` + strings.Replace(fmt.Sprintf("%v", this.Layout), "Layout", "Layout", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProgramShape) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProgramShape{`,
		`Parameters:` + strings.Replace(fmt.Sprintf("%v", this.Parameters), "Shape", "Shape", 1) + `,`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "Shape", "Shape", 1) + `,`,
		`ParameterNames:` + fmt.Sprintf("%v", this.ParameterNames) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComputationStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ComputationStats{`,
		`FlopCount:` + fmt.Sprintf("%v", this.FlopCount) + `,`,
		`TranscendentalCount:` + fmt.Sprintf("%v", this.TranscendentalCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpMetadata{`,
		`OpType:` + fmt.Sprintf("%v", this.OpType) + `,`,
		`OpName:` + fmt.Sprintf("%v", this.OpName) + `,`,
		`SourceFile:` + fmt.Sprintf("%v", this.SourceFile) + `,`,
		`SourceLine:` + fmt.Sprintf("%v", this.SourceLine) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecutionProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecutionProfile{`,
		`CompilationCacheHit:` + fmt.Sprintf("%v", this.CompilationCacheHit) + `,`,
		`CompileTimeMs:` + fmt.Sprintf("%v", this.CompileTimeMs) + `,`,
		`ComputeCycleCount:` + fmt.Sprintf("%v", this.ComputeCycleCount) + `,`,
		`ComputeTimeNs:` + fmt.Sprintf("%v", this.ComputeTimeNs) + `,`,
		`ComputeAndTransferTimeNs:` + fmt.Sprintf("%v", this.ComputeAndTransferTimeNs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComputationHandle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ComputationHandle{`,
		`Handle:` + fmt.Sprintf("%v", this.Handle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecutionHandle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecutionHandle{`,
		`Handle:` + fmt.Sprintf("%v", this.Handle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalDataHandle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalDataHandle{`,
		`Handle:` + fmt.Sprintf("%v", this.Handle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ComputationDataHandle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ComputationDataHandle{`,
		`Handle:` + fmt.Sprintf("%v", this.Handle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceHandle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceHandle{`,
		`Handle:` + fmt.Sprintf("%v", this.Handle) + `,`,
		`DeviceCount:` + fmt.Sprintf("%v", this.DeviceCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChannelHandle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChannelHandle{`,
		`Handle:` + fmt.Sprintf("%v", this.Handle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceAssignmentProto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceAssignmentProto{`,
		`ReplicaCount:` + fmt.Sprintf("%v", this.ReplicaCount) + `,`,
		`ComputationCount:` + fmt.Sprintf("%v", this.ComputationCount) + `,`,
		`ComputationDevices:` + strings.Replace(fmt.Sprintf("%v", this.ComputationDevices), "DeviceAssignmentProto_ComputationDevice", "DeviceAssignmentProto_ComputationDevice", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceAssignmentProto_ComputationDevice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceAssignmentProto_ComputationDevice{`,
		`ReplicaDeviceIds:` + fmt.Sprintf("%v", this.ReplicaDeviceIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LiteralProto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LiteralProto{`,
		`Shape:` + strings.Replace(fmt.Sprintf("%v", this.Shape), "Shape", "Shape", 1) + `,`,
		`Preds:` + fmt.Sprintf("%v", this.Preds) + `,`,
		`U8S:` + fmt.Sprintf("%v", this.U8S) + `,`,
		`S32S:` + fmt.Sprintf("%v", this.S32S) + `,`,
		`S64S:` + fmt.Sprintf("%v", this.S64S) + `,`,
		`U32S:` + fmt.Sprintf("%v", this.U32S) + `,`,
		`U64S:` + fmt.Sprintf("%v", this.U64S) + `,`,
		`F32S:` + fmt.Sprintf("%v", this.F32S) + `,`,
		`F64S:` + fmt.Sprintf("%v", this.F64S) + `,`,
		`TupleLiterals:` + strings.Replace(fmt.Sprintf("%v", this.TupleLiterals), "LiteralProto", "LiteralProto", 1) + `,`,
		`F16S:` + fmt.Sprintf("%v", this.F16S) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WindowDimension) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WindowDimension{`,
		`Size_:` + fmt.Sprintf("%v", this.Size_) + `,`,
		`Stride:` + fmt.Sprintf("%v", this.Stride) + `,`,
		`PaddingLow:` + fmt.Sprintf("%v", this.PaddingLow) + `,`,
		`PaddingHigh:` + fmt.Sprintf("%v", this.PaddingHigh) + `,`,
		`WindowDilation:` + fmt.Sprintf("%v", this.WindowDilation) + `,`,
		`BaseDilation:` + fmt.Sprintf("%v", this.BaseDilation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Window) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Window{`,
		`Dimensions:` + strings.Replace(fmt.Sprintf("%v", this.Dimensions), "WindowDimension", "WindowDimension", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConstantRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConstantRequest{`,
		`Literal:` + strings.Replace(fmt.Sprintf("%v", this.Literal), "LiteralProto", "LiteralProto", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTupleElementRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTupleElementRequest{`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SliceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SliceRequest{`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`StartIndices:` + fmt.Sprintf("%v", this.StartIndices) + `,`,
		`LimitIndices:` + fmt.Sprintf("%v", this.LimitIndices) + `,`,
		`Strides:` + fmt.Sprintf("%v", this.Strides) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DynamicSliceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DynamicSliceRequest{`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`StartIndices:` + strings.Replace(fmt.Sprintf("%v", this.StartIndices), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`SliceSizes:` + fmt.Sprintf("%v", this.SliceSizes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DynamicUpdateSliceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DynamicUpdateSliceRequest{`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Update:` + strings.Replace(fmt.Sprintf("%v", this.Update), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`StartIndices:` + strings.Replace(fmt.Sprintf("%v", this.StartIndices), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConvolutionDimensionNumbers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConvolutionDimensionNumbers{`,
		`BatchDimension:` + fmt.Sprintf("%v", this.BatchDimension) + `,`,
		`FeatureDimension:` + fmt.Sprintf("%v", this.FeatureDimension) + `,`,
		`KernelInputFeatureDimension:` + fmt.Sprintf("%v", this.KernelInputFeatureDimension) + `,`,
		`KernelOutputFeatureDimension:` + fmt.Sprintf("%v", this.KernelOutputFeatureDimension) + `,`,
		`SpatialDimensions:` + fmt.Sprintf("%v", this.SpatialDimensions) + `,`,
		`KernelSpatialDimensions:` + fmt.Sprintf("%v", this.KernelSpatialDimensions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConvolveRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConvolveRequest{`,
		`Lhs:` + strings.Replace(fmt.Sprintf("%v", this.Lhs), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Rhs:` + strings.Replace(fmt.Sprintf("%v", this.Rhs), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Window:` + strings.Replace(fmt.Sprintf("%v", this.Window), "Window", "Window", 1) + `,`,
		`DimensionNumbers:` + strings.Replace(fmt.Sprintf("%v", this.DimensionNumbers), "ConvolutionDimensionNumbers", "ConvolutionDimensionNumbers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InfeedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InfeedRequest{`,
		`Shape:` + strings.Replace(fmt.Sprintf("%v", this.Shape), "Shape", "Shape", 1) + `,`,
		`Config:` + fmt.Sprintf("%v", this.Config) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OutfeedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OutfeedRequest{`,
		`Shape:` + strings.Replace(fmt.Sprintf("%v", this.Shape), "Shape", "Shape", 1) + `,`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`OutfeedConfig:` + fmt.Sprintf("%v", this.OutfeedConfig) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CallRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CallRequest{`,
		`ToApply:` + strings.Replace(fmt.Sprintf("%v", this.ToApply), "ComputationHandle", "ComputationHandle", 1) + `,`,
		`Operands:` + strings.Replace(fmt.Sprintf("%v", this.Operands), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomCallRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomCallRequest{`,
		`CallTargetName:` + fmt.Sprintf("%v", this.CallTargetName) + `,`,
		`Operands:` + strings.Replace(fmt.Sprintf("%v", this.Operands), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Shape:` + strings.Replace(fmt.Sprintf("%v", this.Shape), "Shape", "Shape", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MapRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MapRequest{`,
		`Operands:` + strings.Replace(fmt.Sprintf("%v", this.Operands), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`ToApply:` + strings.Replace(fmt.Sprintf("%v", this.ToApply), "ComputationHandle", "ComputationHandle", 1) + `,`,
		`StaticOperands:` + strings.Replace(fmt.Sprintf("%v", this.StaticOperands), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReduceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReduceRequest{`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`InitValue:` + strings.Replace(fmt.Sprintf("%v", this.InitValue), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Dimensions:` + fmt.Sprintf("%v", this.Dimensions) + `,`,
		`ToApply:` + strings.Replace(fmt.Sprintf("%v", this.ToApply), "ComputationHandle", "ComputationHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReduceWindowRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReduceWindowRequest{`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`InitValue:` + strings.Replace(fmt.Sprintf("%v", this.InitValue), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Window:` + strings.Replace(fmt.Sprintf("%v", this.Window), "Window", "Window", 1) + `,`,
		`ToApply:` + strings.Replace(fmt.Sprintf("%v", this.ToApply), "ComputationHandle", "ComputationHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BatchNormTrainingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BatchNormTrainingRequest{`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Scale:` + strings.Replace(fmt.Sprintf("%v", this.Scale), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Offset:` + strings.Replace(fmt.Sprintf("%v", this.Offset), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Epsilon:` + fmt.Sprintf("%v", this.Epsilon) + `,`,
		`FeatureIndex:` + fmt.Sprintf("%v", this.FeatureIndex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BatchNormGradRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BatchNormGradRequest{`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Scale:` + strings.Replace(fmt.Sprintf("%v", this.Scale), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Mean:` + strings.Replace(fmt.Sprintf("%v", this.Mean), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Variance:` + strings.Replace(fmt.Sprintf("%v", this.Variance), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`GradOutput:` + strings.Replace(fmt.Sprintf("%v", this.GradOutput), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Epsilon:` + fmt.Sprintf("%v", this.Epsilon) + `,`,
		`FeatureIndex:` + fmt.Sprintf("%v", this.FeatureIndex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CrossReplicaSumRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CrossReplicaSumRequest{`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SelectAndScatterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SelectAndScatterRequest{`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Source:` + strings.Replace(fmt.Sprintf("%v", this.Source), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`InitValue:` + strings.Replace(fmt.Sprintf("%v", this.InitValue), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Window:` + strings.Replace(fmt.Sprintf("%v", this.Window), "Window", "Window", 1) + `,`,
		`Select:` + strings.Replace(fmt.Sprintf("%v", this.Select), "ComputationHandle", "ComputationHandle", 1) + `,`,
		`Scatter:` + strings.Replace(fmt.Sprintf("%v", this.Scatter), "ComputationHandle", "ComputationHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReverseRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReverseRequest{`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Dimensions:` + fmt.Sprintf("%v", this.Dimensions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BroadcastRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BroadcastRequest{`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`BroadcastSizes:` + fmt.Sprintf("%v", this.BroadcastSizes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PadRequest{`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`PaddingValue:` + strings.Replace(fmt.Sprintf("%v", this.PaddingValue), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`PaddingConfig:` + strings.Replace(fmt.Sprintf("%v", this.PaddingConfig), "PaddingConfig", "PaddingConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReshapeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReshapeRequest{`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Dimensions:` + fmt.Sprintf("%v", this.Dimensions) + `,`,
		`NewSizes:` + fmt.Sprintf("%v", this.NewSizes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransposeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransposeRequest{`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Dimensions:` + fmt.Sprintf("%v", this.Dimensions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ParameterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ParameterRequest{`,
		`Shape:` + strings.Replace(fmt.Sprintf("%v", this.Shape), "Shape", "Shape", 1) + `,`,
		`Parameter:` + fmt.Sprintf("%v", this.Parameter) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetLocalShapeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLocalShapeRequest{`,
		`Computation:` + strings.Replace(fmt.Sprintf("%v", this.Computation), "ComputationHandle", "ComputationHandle", 1) + `,`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetLocalShapeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetLocalShapeResponse{`,
		`Shape:` + strings.Replace(fmt.Sprintf("%v", this.Shape), "Shape", "Shape", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TraceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TraceRequest{`,
		`Tag:` + fmt.Sprintf("%v", this.Tag) + `,`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConvertRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConvertRequest{`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`NewElementType:` + fmt.Sprintf("%v", this.NewElementType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConcatenateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConcatenateRequest{`,
		`Operands:` + strings.Replace(fmt.Sprintf("%v", this.Operands), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Dimension:` + fmt.Sprintf("%v", this.Dimension) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WhileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WhileRequest{`,
		`Condition:` + strings.Replace(fmt.Sprintf("%v", this.Condition), "ComputationHandle", "ComputationHandle", 1) + `,`,
		`Body:` + strings.Replace(fmt.Sprintf("%v", this.Body), "ComputationHandle", "ComputationHandle", 1) + `,`,
		`Init:` + strings.Replace(fmt.Sprintf("%v", this.Init), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnaryOpRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnaryOpRequest{`,
		`Unop:` + fmt.Sprintf("%v", this.Unop) + `,`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BinaryOpRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BinaryOpRequest{`,
		`Binop:` + fmt.Sprintf("%v", this.Binop) + `,`,
		`Lhs:` + strings.Replace(fmt.Sprintf("%v", this.Lhs), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Rhs:` + strings.Replace(fmt.Sprintf("%v", this.Rhs), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`BroadcastDimensions:` + fmt.Sprintf("%v", this.BroadcastDimensions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RngRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RngRequest{`,
		`Distribution:` + fmt.Sprintf("%v", this.Distribution) + `,`,
		`Parameter:` + strings.Replace(fmt.Sprintf("%v", this.Parameter), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Shape:` + strings.Replace(fmt.Sprintf("%v", this.Shape), "Shape", "Shape", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TernaryOpRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TernaryOpRequest{`,
		`Triop:` + fmt.Sprintf("%v", this.Triop) + `,`,
		`Lhs:` + strings.Replace(fmt.Sprintf("%v", this.Lhs), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Rhs:` + strings.Replace(fmt.Sprintf("%v", this.Rhs), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`Ehs:` + strings.Replace(fmt.Sprintf("%v", this.Ehs), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VariadicOpRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VariadicOpRequest{`,
		`Varop:` + fmt.Sprintf("%v", this.Varop) + `,`,
		`Operands:` + strings.Replace(fmt.Sprintf("%v", this.Operands), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReducePrecisionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReducePrecisionRequest{`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`ExponentBits:` + fmt.Sprintf("%v", this.ExponentBits) + `,`,
		`MantissaBits:` + fmt.Sprintf("%v", this.MantissaBits) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendRequest{`,
		`Operand:` + strings.Replace(fmt.Sprintf("%v", this.Operand), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`ChannelHandle:` + strings.Replace(fmt.Sprintf("%v", this.ChannelHandle), "ChannelHandle", "ChannelHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecvRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecvRequest{`,
		`Shape:` + strings.Replace(fmt.Sprintf("%v", this.Shape), "Shape", "Shape", 1) + `,`,
		`ChannelHandle:` + strings.Replace(fmt.Sprintf("%v", this.ChannelHandle), "ChannelHandle", "ChannelHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest{`,
		`Computation:` + strings.Replace(fmt.Sprintf("%v", this.Computation), "ComputationHandle", "ComputationHandle", 1) + `,`,
		`Op:` + fmt.Sprintf("%v", this.Op) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "OpMetadata", "OpMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_BinaryOpRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_BinaryOpRequest{`,
		`BinaryOpRequest:` + strings.Replace(fmt.Sprintf("%v", this.BinaryOpRequest), "BinaryOpRequest", "BinaryOpRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_BroadcastRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_BroadcastRequest{`,
		`BroadcastRequest:` + strings.Replace(fmt.Sprintf("%v", this.BroadcastRequest), "BroadcastRequest", "BroadcastRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_CallRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_CallRequest{`,
		`CallRequest:` + strings.Replace(fmt.Sprintf("%v", this.CallRequest), "CallRequest", "CallRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_ConcatenateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_ConcatenateRequest{`,
		`ConcatenateRequest:` + strings.Replace(fmt.Sprintf("%v", this.ConcatenateRequest), "ConcatenateRequest", "ConcatenateRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_ConstantRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_ConstantRequest{`,
		`ConstantRequest:` + strings.Replace(fmt.Sprintf("%v", this.ConstantRequest), "ConstantRequest", "ConstantRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_ConvertRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_ConvertRequest{`,
		`ConvertRequest:` + strings.Replace(fmt.Sprintf("%v", this.ConvertRequest), "ConvertRequest", "ConvertRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_ConvolveRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_ConvolveRequest{`,
		`ConvolveRequest:` + strings.Replace(fmt.Sprintf("%v", this.ConvolveRequest), "ConvolveRequest", "ConvolveRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_CrossReplicaSumRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_CrossReplicaSumRequest{`,
		`CrossReplicaSumRequest:` + strings.Replace(fmt.Sprintf("%v", this.CrossReplicaSumRequest), "CrossReplicaSumRequest", "CrossReplicaSumRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_CustomCallRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_CustomCallRequest{`,
		`CustomCallRequest:` + strings.Replace(fmt.Sprintf("%v", this.CustomCallRequest), "CustomCallRequest", "CustomCallRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_DynamicSliceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_DynamicSliceRequest{`,
		`DynamicSliceRequest:` + strings.Replace(fmt.Sprintf("%v", this.DynamicSliceRequest), "DynamicSliceRequest", "DynamicSliceRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_DynamicUpdateSliceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_DynamicUpdateSliceRequest{`,
		`DynamicUpdateSliceRequest:` + strings.Replace(fmt.Sprintf("%v", this.DynamicUpdateSliceRequest), "DynamicUpdateSliceRequest", "DynamicUpdateSliceRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_GetTupleElementRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_GetTupleElementRequest{`,
		`GetTupleElementRequest:` + strings.Replace(fmt.Sprintf("%v", this.GetTupleElementRequest), "GetTupleElementRequest", "GetTupleElementRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_InfeedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_InfeedRequest{`,
		`InfeedRequest:` + strings.Replace(fmt.Sprintf("%v", this.InfeedRequest), "InfeedRequest", "InfeedRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_MapRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_MapRequest{`,
		`MapRequest:` + strings.Replace(fmt.Sprintf("%v", this.MapRequest), "MapRequest", "MapRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_PadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_PadRequest{`,
		`PadRequest:` + strings.Replace(fmt.Sprintf("%v", this.PadRequest), "PadRequest", "PadRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_ParameterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_ParameterRequest{`,
		`ParameterRequest:` + strings.Replace(fmt.Sprintf("%v", this.ParameterRequest), "ParameterRequest", "ParameterRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_ReduceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_ReduceRequest{`,
		`ReduceRequest:` + strings.Replace(fmt.Sprintf("%v", this.ReduceRequest), "ReduceRequest", "ReduceRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_ReduceWindowRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_ReduceWindowRequest{`,
		`ReduceWindowRequest:` + strings.Replace(fmt.Sprintf("%v", this.ReduceWindowRequest), "ReduceWindowRequest", "ReduceWindowRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_ReshapeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_ReshapeRequest{`,
		`ReshapeRequest:` + strings.Replace(fmt.Sprintf("%v", this.ReshapeRequest), "ReshapeRequest", "ReshapeRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_ReverseRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_ReverseRequest{`,
		`ReverseRequest:` + strings.Replace(fmt.Sprintf("%v", this.ReverseRequest), "ReverseRequest", "ReverseRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_RngRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_RngRequest{`,
		`RngRequest:` + strings.Replace(fmt.Sprintf("%v", this.RngRequest), "RngRequest", "RngRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_SelectAndScatterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_SelectAndScatterRequest{`,
		`SelectAndScatterRequest:` + strings.Replace(fmt.Sprintf("%v", this.SelectAndScatterRequest), "SelectAndScatterRequest", "SelectAndScatterRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_SliceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_SliceRequest{`,
		`SliceRequest:` + strings.Replace(fmt.Sprintf("%v", this.SliceRequest), "SliceRequest", "SliceRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_TernaryOpRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_TernaryOpRequest{`,
		`TernaryOpRequest:` + strings.Replace(fmt.Sprintf("%v", this.TernaryOpRequest), "TernaryOpRequest", "TernaryOpRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_TraceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_TraceRequest{`,
		`TraceRequest:` + strings.Replace(fmt.Sprintf("%v", this.TraceRequest), "TraceRequest", "TraceRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_UnaryOpRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_UnaryOpRequest{`,
		`UnaryOpRequest:` + strings.Replace(fmt.Sprintf("%v", this.UnaryOpRequest), "UnaryOpRequest", "UnaryOpRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_VariadicOpRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_VariadicOpRequest{`,
		`VariadicOpRequest:` + strings.Replace(fmt.Sprintf("%v", this.VariadicOpRequest), "VariadicOpRequest", "VariadicOpRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_WhileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_WhileRequest{`,
		`WhileRequest:` + strings.Replace(fmt.Sprintf("%v", this.WhileRequest), "WhileRequest", "WhileRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_SendRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_SendRequest{`,
		`SendRequest:` + strings.Replace(fmt.Sprintf("%v", this.SendRequest), "SendRequest", "SendRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_RecvRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_RecvRequest{`,
		`RecvRequest:` + strings.Replace(fmt.Sprintf("%v", this.RecvRequest), "RecvRequest", "RecvRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_OutfeedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_OutfeedRequest{`,
		`OutfeedRequest:` + strings.Replace(fmt.Sprintf("%v", this.OutfeedRequest), "OutfeedRequest", "OutfeedRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_TransposeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_TransposeRequest{`,
		`TransposeRequest:` + strings.Replace(fmt.Sprintf("%v", this.TransposeRequest), "TransposeRequest", "TransposeRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_BatchNormTrainingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_BatchNormTrainingRequest{`,
		`BatchNormTrainingRequest:` + strings.Replace(fmt.Sprintf("%v", this.BatchNormTrainingRequest), "BatchNormTrainingRequest", "BatchNormTrainingRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_ReducePrecisionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_ReducePrecisionRequest{`,
		`ReducePrecisionRequest:` + strings.Replace(fmt.Sprintf("%v", this.ReducePrecisionRequest), "ReducePrecisionRequest", "ReducePrecisionRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpRequest_BatchNormGradRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpRequest_BatchNormGradRequest{`,
		`BatchNormGradRequest:` + strings.Replace(fmt.Sprintf("%v", this.BatchNormGradRequest), "BatchNormGradRequest", "BatchNormGradRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpResponse{`,
		`Output:` + strings.Replace(fmt.Sprintf("%v", this.Output), "ComputationDataHandle", "ComputationDataHandle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringXlaData(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PaddingConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaddingConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaddingConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dimensions = append(m.Dimensions, &PaddingConfig_PaddingConfigDimension{})
			if err := m.Dimensions[len(m.Dimensions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaddingConfig_PaddingConfigDimension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaddingConfigDimension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaddingConfigDimension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdgePaddingLow", wireType)
			}
			m.EdgePaddingLow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EdgePaddingLow |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdgePaddingHigh", wireType)
			}
			m.EdgePaddingHigh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EdgePaddingHigh |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InteriorPadding", wireType)
			}
			m.InteriorPadding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InteriorPadding |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Layout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Layout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Layout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MinorToMajor = append(m.MinorToMajor, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MinorToMajor = append(m.MinorToMajor, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MinorToMajor", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PaddedDimensions = append(m.PaddedDimensions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PaddedDimensions = append(m.PaddedDimensions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PaddedDimensions", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaddingValue", wireType)
			}
			m.PaddingValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaddingValue |= (PaddingValue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Shape) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shape: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shape: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementType", wireType)
			}
			m.ElementType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElementType |= (PrimitiveType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Dimensions = append(m.Dimensions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Dimensions = append(m.Dimensions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimensions", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TupleShapes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TupleShapes = append(m.TupleShapes, &Shape{})
			if err := m.TupleShapes[len(m.TupleShapes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Layout == nil {
				m.Layout = &Layout{}
			}
			if err := m.Layout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProgramShape) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProgramShape: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProgramShape: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters, &Shape{})
			if err := m.Parameters[len(m.Parameters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &Shape{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParameterNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParameterNames = append(m.ParameterNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputationStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputationStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputationStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlopCount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.FlopCount = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranscendentalCount", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.TranscendentalCount = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceLine", wireType)
			}
			m.SourceLine = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceLine |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompilationCacheHit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompilationCacheHit = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompileTimeMs", wireType)
			}
			m.CompileTimeMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompileTimeMs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputeCycleCount", wireType)
			}
			m.ComputeCycleCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComputeCycleCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputeTimeNs", wireType)
			}
			m.ComputeTimeNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComputeTimeNs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputeAndTransferTimeNs", wireType)
			}
			m.ComputeAndTransferTimeNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComputeAndTransferTimeNs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputationHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputationHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputationHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Handle |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Handle |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalDataHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalDataHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalDataHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Handle |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputationDataHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputationDataHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputationDataHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Handle |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Handle |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceCount", wireType)
			}
			m.DeviceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelHandle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelHandle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelHandle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handle", wireType)
			}
			m.Handle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Handle |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceAssignmentProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceAssignmentProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceAssignmentProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaCount", wireType)
			}
			m.ReplicaCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputationCount", wireType)
			}
			m.ComputationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComputationCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputationDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComputationDevices = append(m.ComputationDevices, &DeviceAssignmentProto_ComputationDevice{})
			if err := m.ComputationDevices[len(m.ComputationDevices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceAssignmentProto_ComputationDevice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputationDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputationDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ReplicaDeviceIds = append(m.ReplicaDeviceIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ReplicaDeviceIds = append(m.ReplicaDeviceIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaDeviceIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiteralProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiteralProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiteralProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shape == nil {
				m.Shape = &Shape{}
			}
			if err := m.Shape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Preds = append(m.Preds, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Preds = append(m.Preds, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Preds", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field U8S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.U8S = append(m.U8S[:0], dAtA[iNdEx:postIndex]...)
			if m.U8S == nil {
				m.U8S = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.S32S = append(m.S32S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.S32S = append(m.S32S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field S32S", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.S64S = append(m.S64S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.S64S = append(m.S64S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field S64S", wireType)
			}
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.U32S = append(m.U32S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.U32S = append(m.U32S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field U32S", wireType)
			}
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.U64S = append(m.U64S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.U64S = append(m.U64S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field U64S", wireType)
			}
		case 8:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				v = uint32(dAtA[iNdEx-4])
				v |= uint32(dAtA[iNdEx-3]) << 8
				v |= uint32(dAtA[iNdEx-2]) << 16
				v |= uint32(dAtA[iNdEx-1]) << 24
				v2 := float32(math.Float32frombits(v))
				m.F32S = append(m.F32S, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 4
					v = uint32(dAtA[iNdEx-4])
					v |= uint32(dAtA[iNdEx-3]) << 8
					v |= uint32(dAtA[iNdEx-2]) << 16
					v |= uint32(dAtA[iNdEx-1]) << 24
					v2 := float32(math.Float32frombits(v))
					m.F32S = append(m.F32S, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field F32S", wireType)
			}
		case 9:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				v = uint64(dAtA[iNdEx-8])
				v |= uint64(dAtA[iNdEx-7]) << 8
				v |= uint64(dAtA[iNdEx-6]) << 16
				v |= uint64(dAtA[iNdEx-5]) << 24
				v |= uint64(dAtA[iNdEx-4]) << 32
				v |= uint64(dAtA[iNdEx-3]) << 40
				v |= uint64(dAtA[iNdEx-2]) << 48
				v |= uint64(dAtA[iNdEx-1]) << 56
				v2 := float64(math.Float64frombits(v))
				m.F64S = append(m.F64S, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 8
					v = uint64(dAtA[iNdEx-8])
					v |= uint64(dAtA[iNdEx-7]) << 8
					v |= uint64(dAtA[iNdEx-6]) << 16
					v |= uint64(dAtA[iNdEx-5]) << 24
					v |= uint64(dAtA[iNdEx-4]) << 32
					v |= uint64(dAtA[iNdEx-3]) << 40
					v |= uint64(dAtA[iNdEx-2]) << 48
					v |= uint64(dAtA[iNdEx-1]) << 56
					v2 := float64(math.Float64frombits(v))
					m.F64S = append(m.F64S, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field F64S", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TupleLiterals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TupleLiterals = append(m.TupleLiterals, &LiteralProto{})
			if err := m.TupleLiterals[len(m.TupleLiterals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field F16S", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.F16S = append(m.F16S[:0], dAtA[iNdEx:postIndex]...)
			if m.F16S == nil {
				m.F16S = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WindowDimension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WindowDimension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WindowDimension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stride", wireType)
			}
			m.Stride = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stride |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaddingLow", wireType)
			}
			m.PaddingLow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaddingLow |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaddingHigh", wireType)
			}
			m.PaddingHigh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaddingHigh |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowDilation", wireType)
			}
			m.WindowDilation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WindowDilation |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDilation", wireType)
			}
			m.BaseDilation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseDilation |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Window) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Window: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Window: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dimensions = append(m.Dimensions, &WindowDimension{})
			if err := m.Dimensions[len(m.Dimensions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConstantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConstantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConstantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Literal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Literal == nil {
				m.Literal = &LiteralProto{}
			}
			if err := m.Literal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTupleElementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTupleElementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTupleElementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SliceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SliceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SliceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StartIndices = append(m.StartIndices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StartIndices = append(m.StartIndices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIndices", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LimitIndices = append(m.LimitIndices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LimitIndices = append(m.LimitIndices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitIndices", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Strides = append(m.Strides, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Strides = append(m.Strides, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Strides", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicSliceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicSliceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicSliceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIndices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartIndices == nil {
				m.StartIndices = &ComputationDataHandle{}
			}
			if err := m.StartIndices.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SliceSizes = append(m.SliceSizes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SliceSizes = append(m.SliceSizes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceSizes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicUpdateSliceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicUpdateSliceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicUpdateSliceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Update == nil {
				m.Update = &ComputationDataHandle{}
			}
			if err := m.Update.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIndices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartIndices == nil {
				m.StartIndices = &ComputationDataHandle{}
			}
			if err := m.StartIndices.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConvolutionDimensionNumbers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConvolutionDimensionNumbers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConvolutionDimensionNumbers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchDimension", wireType)
			}
			m.BatchDimension = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchDimension |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureDimension", wireType)
			}
			m.FeatureDimension = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeatureDimension |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelInputFeatureDimension", wireType)
			}
			m.KernelInputFeatureDimension = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KernelInputFeatureDimension |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelOutputFeatureDimension", wireType)
			}
			m.KernelOutputFeatureDimension = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KernelOutputFeatureDimension |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SpatialDimensions = append(m.SpatialDimensions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SpatialDimensions = append(m.SpatialDimensions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SpatialDimensions", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KernelSpatialDimensions = append(m.KernelSpatialDimensions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KernelSpatialDimensions = append(m.KernelSpatialDimensions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KernelSpatialDimensions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConvolveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConvolveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConvolveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lhs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lhs == nil {
				m.Lhs = &ComputationDataHandle{}
			}
			if err := m.Lhs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rhs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rhs == nil {
				m.Rhs = &ComputationDataHandle{}
			}
			if err := m.Rhs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Window", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Window == nil {
				m.Window = &Window{}
			}
			if err := m.Window.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DimensionNumbers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DimensionNumbers == nil {
				m.DimensionNumbers = &ConvolutionDimensionNumbers{}
			}
			if err := m.DimensionNumbers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfeedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfeedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfeedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shape == nil {
				m.Shape = &Shape{}
			}
			if err := m.Shape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = append(m.Config[:0], dAtA[iNdEx:postIndex]...)
			if m.Config == nil {
				m.Config = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutfeedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutfeedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutfeedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shape == nil {
				m.Shape = &Shape{}
			}
			if err := m.Shape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutfeedConfig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutfeedConfig = append(m.OutfeedConfig[:0], dAtA[iNdEx:postIndex]...)
			if m.OutfeedConfig == nil {
				m.OutfeedConfig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToApply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToApply == nil {
				m.ToApply = &ComputationHandle{}
			}
			if err := m.ToApply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operands = append(m.Operands, &ComputationDataHandle{})
			if err := m.Operands[len(m.Operands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomCallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomCallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomCallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallTargetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallTargetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operands = append(m.Operands, &ComputationDataHandle{})
			if err := m.Operands[len(m.Operands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shape == nil {
				m.Shape = &Shape{}
			}
			if err := m.Shape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operands = append(m.Operands, &ComputationDataHandle{})
			if err := m.Operands[len(m.Operands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToApply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToApply == nil {
				m.ToApply = &ComputationHandle{}
			}
			if err := m.ToApply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticOperands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticOperands = append(m.StaticOperands, &ComputationDataHandle{})
			if err := m.StaticOperands[len(m.StaticOperands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReduceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReduceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReduceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InitValue == nil {
				m.InitValue = &ComputationDataHandle{}
			}
			if err := m.InitValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Dimensions = append(m.Dimensions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Dimensions = append(m.Dimensions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimensions", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToApply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToApply == nil {
				m.ToApply = &ComputationHandle{}
			}
			if err := m.ToApply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReduceWindowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReduceWindowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReduceWindowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InitValue == nil {
				m.InitValue = &ComputationDataHandle{}
			}
			if err := m.InitValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Window", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Window == nil {
				m.Window = &Window{}
			}
			if err := m.Window.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToApply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToApply == nil {
				m.ToApply = &ComputationHandle{}
			}
			if err := m.ToApply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchNormTrainingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchNormTrainingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchNormTrainingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scale == nil {
				m.Scale = &ComputationDataHandle{}
			}
			if err := m.Scale.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Offset == nil {
				m.Offset = &ComputationDataHandle{}
			}
			if err := m.Offset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epsilon", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Epsilon = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureIndex", wireType)
			}
			m.FeatureIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeatureIndex |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchNormGradRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchNormGradRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchNormGradRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scale == nil {
				m.Scale = &ComputationDataHandle{}
			}
			if err := m.Scale.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mean", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mean == nil {
				m.Mean = &ComputationDataHandle{}
			}
			if err := m.Mean.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Variance == nil {
				m.Variance = &ComputationDataHandle{}
			}
			if err := m.Variance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GradOutput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GradOutput == nil {
				m.GradOutput = &ComputationDataHandle{}
			}
			if err := m.GradOutput.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epsilon", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Epsilon = float32(math.Float32frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureIndex", wireType)
			}
			m.FeatureIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeatureIndex |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossReplicaSumRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossReplicaSumRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossReplicaSumRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAndScatterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAndScatterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAndScatterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &ComputationDataHandle{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InitValue == nil {
				m.InitValue = &ComputationDataHandle{}
			}
			if err := m.InitValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Window", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Window == nil {
				m.Window = &Window{}
			}
			if err := m.Window.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Select", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Select == nil {
				m.Select = &ComputationHandle{}
			}
			if err := m.Select.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scatter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scatter == nil {
				m.Scatter = &ComputationHandle{}
			}
			if err := m.Scatter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReverseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReverseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReverseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Dimensions = append(m.Dimensions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Dimensions = append(m.Dimensions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimensions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BroadcastSizes = append(m.BroadcastSizes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BroadcastSizes = append(m.BroadcastSizes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastSizes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaddingValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaddingValue == nil {
				m.PaddingValue = &ComputationDataHandle{}
			}
			if err := m.PaddingValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaddingConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaddingConfig == nil {
				m.PaddingConfig = &PaddingConfig{}
			}
			if err := m.PaddingConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReshapeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReshapeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReshapeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Dimensions = append(m.Dimensions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Dimensions = append(m.Dimensions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimensions", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NewSizes = append(m.NewSizes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NewSizes = append(m.NewSizes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSizes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransposeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransposeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransposeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Dimensions = append(m.Dimensions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Dimensions = append(m.Dimensions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimensions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParameterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParameterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParameterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shape == nil {
				m.Shape = &Shape{}
			}
			if err := m.Shape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			m.Parameter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parameter |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLocalShapeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLocalShapeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLocalShapeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Computation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Computation == nil {
				m.Computation = &ComputationHandle{}
			}
			if err := m.Computation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLocalShapeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLocalShapeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLocalShapeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shape == nil {
				m.Shape = &Shape{}
			}
			if err := m.Shape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConvertRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConvertRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConvertRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewElementType", wireType)
			}
			m.NewElementType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewElementType |= (PrimitiveType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConcatenateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConcatenateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConcatenateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operands = append(m.Operands, &ComputationDataHandle{})
			if err := m.Operands[len(m.Operands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dimension", wireType)
			}
			m.Dimension = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dimension |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Condition == nil {
				m.Condition = &ComputationHandle{}
			}
			if err := m.Condition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &ComputationHandle{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Init", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Init == nil {
				m.Init = &ComputationDataHandle{}
			}
			if err := m.Init.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnaryOpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnaryOpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnaryOpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unop", wireType)
			}
			m.Unop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unop |= (UnaryOperation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BinaryOpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BinaryOpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BinaryOpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binop", wireType)
			}
			m.Binop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Binop |= (BinaryOperation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lhs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lhs == nil {
				m.Lhs = &ComputationDataHandle{}
			}
			if err := m.Lhs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rhs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rhs == nil {
				m.Rhs = &ComputationDataHandle{}
			}
			if err := m.Rhs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BroadcastDimensions = append(m.BroadcastDimensions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXlaData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXlaData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BroadcastDimensions = append(m.BroadcastDimensions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastDimensions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RngRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RngRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RngRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distribution", wireType)
			}
			m.Distribution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Distribution |= (RandomDistribution(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameter = append(m.Parameter, &ComputationDataHandle{})
			if err := m.Parameter[len(m.Parameter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shape == nil {
				m.Shape = &Shape{}
			}
			if err := m.Shape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TernaryOpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TernaryOpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TernaryOpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Triop", wireType)
			}
			m.Triop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Triop |= (TernaryOperation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lhs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lhs == nil {
				m.Lhs = &ComputationDataHandle{}
			}
			if err := m.Lhs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rhs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rhs == nil {
				m.Rhs = &ComputationDataHandle{}
			}
			if err := m.Rhs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ehs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ehs == nil {
				m.Ehs = &ComputationDataHandle{}
			}
			if err := m.Ehs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VariadicOpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VariadicOpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VariadicOpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Varop", wireType)
			}
			m.Varop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Varop |= (VariadicOperation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operands = append(m.Operands, &ComputationDataHandle{})
			if err := m.Operands[len(m.Operands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReducePrecisionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReducePrecisionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReducePrecisionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExponentBits", wireType)
			}
			m.ExponentBits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExponentBits |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MantissaBits", wireType)
			}
			m.MantissaBits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MantissaBits |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Operand == nil {
				m.Operand = &ComputationDataHandle{}
			}
			if err := m.Operand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelHandle == nil {
				m.ChannelHandle = &ChannelHandle{}
			}
			if err := m.ChannelHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecvRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecvRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecvRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shape == nil {
				m.Shape = &Shape{}
			}
			if err := m.Shape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelHandle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelHandle == nil {
				m.ChannelHandle = &ChannelHandle{}
			}
			if err := m.ChannelHandle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Computation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Computation == nil {
				m.Computation = &ComputationHandle{}
			}
			if err := m.Computation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryOpRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BinaryOpRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_BinaryOpRequest{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BroadcastRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_BroadcastRequest{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CallRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_CallRequest{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConcatenateRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConcatenateRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_ConcatenateRequest{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstantRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConstantRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_ConstantRequest{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConvertRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_ConvertRequest{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvolveRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConvolveRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_ConvolveRequest{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossReplicaSumRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CrossReplicaSumRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_CrossReplicaSumRequest{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomCallRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CustomCallRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_CustomCallRequest{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicSliceRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DynamicSliceRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_DynamicSliceRequest{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicUpdateSliceRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DynamicUpdateSliceRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_DynamicUpdateSliceRequest{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetTupleElementRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetTupleElementRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_GetTupleElementRequest{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfeedRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InfeedRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_InfeedRequest{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MapRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_MapRequest{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PadRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PadRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_PadRequest{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParameterRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ParameterRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_ParameterRequest{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReduceRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReduceRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_ReduceRequest{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReduceWindowRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReduceWindowRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_ReduceWindowRequest{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReshapeRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReshapeRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_ReshapeRequest{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReverseRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReverseRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_ReverseRequest{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RngRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RngRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_RngRequest{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectAndScatterRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SelectAndScatterRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_SelectAndScatterRequest{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SliceRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_SliceRequest{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TernaryOpRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TernaryOpRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_TernaryOpRequest{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TraceRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_TraceRequest{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnaryOpRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UnaryOpRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_UnaryOpRequest{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VariadicOpRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VariadicOpRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_VariadicOpRequest{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhileRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WhileRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_WhileRequest{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SendRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_SendRequest{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RecvRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_RecvRequest{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutfeedRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OutfeedRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_OutfeedRequest{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &OpMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransposeRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TransposeRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_TransposeRequest{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNormTrainingRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchNormTrainingRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_BatchNormTrainingRequest{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReducePrecisionRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReducePrecisionRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_ReducePrecisionRequest{v}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNormGradRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BatchNormGradRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &OpRequest_BatchNormGradRequest{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXlaData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &ComputationDataHandle{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXlaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXlaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipXlaData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowXlaData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXlaData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthXlaData
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowXlaData
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipXlaData(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthXlaData = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowXlaData   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/compiler/xla/xla_data.proto", fileDescriptorXlaData)
}

var fileDescriptorXlaData = []byte{
	// 3964 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0xcd, 0x6f, 0x24, 0x49,
	0x56, 0xaf, 0xac, 0x2f, 0xbb, 0x5e, 0x7d, 0x45, 0xa5, 0xdd, 0x6e, 0xf7, 0xc7, 0x78, 0x3c, 0xd9,
	0xbb, 0xb4, 0xc7, 0x3d, 0xdb, 0xbd, 0xed, 0xee, 0x31, 0x3d, 0x0c, 0xea, 0xa5, 0x5c, 0xae, 0x76,
	0xd5, 0x52, 0xae, 0xaa, 0xcd, 0x2a, 0x77, 0xf7, 0x2e, 0x82, 0x54, 0x3a, 0x33, 0x6c, 0xe7, 0x6c,
	0x56, 0x66, 0x6d, 0x66, 0x96, 0xdd, 0xcd, 0x01, 0xad, 0x04, 0x1a, 0x0e, 0x1c, 0x40, 0xe2, 0x00,
	0x5c, 0x10, 0x17, 0xa4, 0xbd, 0xec, 0x7f, 0x00, 0x7b, 0x03, 0x81, 0x84, 0xc4, 0x4a, 0x5c, 0x38,
	0x21, 0xa6, 0xb9, 0x20, 0x2e, 0xec, 0x05, 0xc4, 0x11, 0xc5, 0x47, 0x66, 0x46, 0x96, 0xcb, 0xed,
	0x9a, 0xf6, 0x0c, 0x1c, 0x4a, 0xca, 0x78, 0xf1, 0x8b, 0x17, 0xf1, 0x5e, 0xbc, 0x78, 0xf1, 0xde,
	0x8b, 0x82, 0x07, 0x63, 0xcf, 0x0d, 0xdc, 0xc3, 0xc9, 0xd1, 0x83, 0x00, 0x3b, 0xbe, 0xeb, 0x1d,
	0xd9, 0xee, 0xd9, 0x03, 0xc3, 0x1d, 0x8d, 0x2d, 0x1b, 0x7b, 0x0f, 0x5e, 0xd9, 0x3a, 0xf9, 0x69,
	0xa6, 0x1e, 0xe8, 0xf7, 0x29, 0x52, 0xce, 0xbc, 0xb2, 0x75, 0xe5, 0xbf, 0x25, 0x28, 0xf7, 0x75,
	0xd3, 0xb4, 0x9c, 0xe3, 0x86, 0xeb, 0x1c, 0x59, 0xc7, 0x72, 0x1b, 0xc0, 0xb4, 0x46, 0xd8, 0xf1,
	0x2d, 0xd7, 0xf1, 0x57, 0xa5, 0xf5, 0xcc, 0x46, 0x71, 0xeb, 0xc3, 0xfb, 0xaf, 0x6c, 0xfd, 0x7e,
	0x02, 0x97, 0x6c, 0xed, 0x86, 0x23, 0x54, 0x61, 0xf0, 0xcd, 0x3f, 0x93, 0x60, 0x65, 0x36, 0x4c,
	0xde, 0x00, 0x84, 0xcd, 0x63, 0xac, 0x8d, 0x59, 0xb7, 0x66, 0xbb, 0x67, 0xab, 0xd2, 0xba, 0xb4,
	0x91, 0x51, 0x2b, 0x84, 0xce, 0x47, 0x75, 0xdc, 0x33, 0x79, 0x13, 0x6a, 0x09, 0xe4, 0x89, 0x75,
	0x7c, 0xb2, 0x9a, 0xa6, 0xd0, 0xaa, 0x00, 0x6d, 0x59, 0xc7, 0x27, 0xf2, 0x87, 0x80, 0x2c, 0x27,
	0xc0, 0x9e, 0xe5, 0x7a, 0x21, 0x7e, 0x35, 0xc3, 0xa0, 0x21, 0x9d, 0xc3, 0x95, 0x3f, 0x96, 0x20,
	0xdf, 0xd1, 0x5f, 0xbb, 0x93, 0x40, 0xfe, 0x06, 0x54, 0x46, 0x96, 0xe3, 0x7a, 0x5a, 0xe0, 0x6a,
	0x23, 0xfd, 0x33, 0xd7, 0xa3, 0x52, 0x67, 0xd4, 0x12, 0xa5, 0x0e, 0xdd, 0x7d, 0x42, 0x93, 0xef,
	0x41, 0x8d, 0xb0, 0xc4, 0xa6, 0x26, 0xa8, 0x27, 0x4d, 0x81, 0x88, 0x75, 0x44, 0xd2, 0xf9, 0xf2,
	0x36, 0x94, 0xc3, 0xf5, 0x9e, 0xea, 0xf6, 0x04, 0xd3, 0x55, 0x54, 0xb6, 0x6a, 0xa2, 0x1e, 0x9f,
	0x93, 0x0e, 0xb5, 0x34, 0x16, 0x5a, 0xca, 0xcf, 0x24, 0xc8, 0x0d, 0x4e, 0xf4, 0x31, 0x96, 0x3f,
	0x86, 0x12, 0xb6, 0xf1, 0x08, 0x3b, 0x81, 0x16, 0xbc, 0x1e, 0x63, 0x2a, 0x71, 0x65, 0x4b, 0x66,
	0x0c, 0x3c, 0x6b, 0x64, 0x05, 0xd6, 0x29, 0x1e, 0xbe, 0x1e, 0x63, 0xb5, 0xc8, 0x71, 0xa4, 0x21,
	0xaf, 0x25, 0x76, 0x2f, 0x43, 0x97, 0x27, 0x50, 0xe4, 0x6f, 0x41, 0x29, 0x98, 0x8c, 0x6d, 0xac,
	0xf9, 0x64, 0x16, 0x7f, 0x35, 0x4b, 0xf7, 0x17, 0x28, 0x5b, 0x3a, 0xb1, 0x5a, 0xa4, 0xfd, 0xf4,
	0xdb, 0x97, 0xef, 0x40, 0xde, 0xa6, 0x4a, 0x5a, 0xcd, 0xad, 0x4b, 0x1b, 0xc5, 0xad, 0x22, 0x05,
	0x32, 0xbd, 0xa9, 0xbc, 0xeb, 0xbb, 0xd9, 0x45, 0x09, 0xa5, 0xd5, 0xac, 0xa7, 0x3b, 0x3f, 0x54,
	0x7e, 0x5f, 0x82, 0x52, 0xdf, 0x73, 0x8f, 0x3d, 0x7d, 0xc4, 0xe4, 0xd8, 0x04, 0x18, 0xeb, 0x9e,
	0x3e, 0xc2, 0x01, 0xf6, 0x42, 0x73, 0x12, 0xa7, 0x13, 0x7a, 0x65, 0x05, 0xf2, 0x1e, 0xf6, 0x27,
	0x76, 0x40, 0xa5, 0x4d, 0xe2, 0x78, 0x8f, 0x7c, 0x17, 0xaa, 0xd1, 0x08, 0xcd, 0xd1, 0x47, 0x98,
	0x49, 0x59, 0x50, 0x2b, 0x11, 0xb9, 0x4b, 0xa8, 0x8a, 0x09, 0xa8, 0xe1, 0x8e, 0xc6, 0x93, 0x40,
	0x0f, 0x2c, 0xd7, 0x19, 0x04, 0x7a, 0xe0, 0xcb, 0xef, 0x01, 0x1c, 0xd9, 0xee, 0x58, 0x33, 0xdc,
	0x89, 0x13, 0x50, 0x7b, 0x93, 0xd4, 0x02, 0xa1, 0x34, 0x08, 0x41, 0x7e, 0x08, 0xcb, 0x81, 0xa7,
	0x3b, 0xbe, 0x81, 0x1d, 0x13, 0x3b, 0x81, 0x6e, 0x73, 0x60, 0x9a, 0x02, 0x97, 0x92, 0x7d, 0x74,
	0x88, 0xf2, 0x63, 0x09, 0xa0, 0x37, 0xde, 0xc7, 0x81, 0x4e, 0x4e, 0x96, 0x7c, 0x1d, 0x16, 0xdc,
	0x31, 0xdb, 0x30, 0xc2, 0xbd, 0xa0, 0xe6, 0xdd, 0x31, 0xdd, 0x17, 0xd6, 0x41, 0xd6, 0x4b, 0xb9,
	0xd1, 0x0e, 0xb2, 0x4e, 0xf9, 0x7d, 0x28, 0xfa, 0xee, 0xc4, 0x33, 0xb0, 0x76, 0x64, 0xd9, 0xcc,
	0x4e, 0x0a, 0x2a, 0x30, 0xd2, 0x33, 0xcb, 0x16, 0x01, 0xb6, 0xe5, 0xe0, 0xd5, 0xec, 0xba, 0xb4,
	0x91, 0x0b, 0x01, 0x1d, 0xcb, 0xc1, 0xca, 0xe7, 0x69, 0x40, 0xcd, 0x57, 0xd8, 0x98, 0x10, 0x39,
	0xfb, 0x9e, 0x4b, 0xf8, 0xc8, 0x5b, 0x70, 0x8d, 0x9d, 0x7d, 0x2a, 0xbd, 0x66, 0xe8, 0xc6, 0x09,
	0xd6, 0x4e, 0x2c, 0x26, 0xf4, 0xa2, 0xba, 0x24, 0x74, 0x36, 0x48, 0x5f, 0xcb, 0x0a, 0xe4, 0x5f,
	0x82, 0x2a, 0xf7, 0x17, 0x5a, 0x60, 0x8d, 0xb0, 0x36, 0xf2, 0xf9, 0x39, 0x2b, 0x73, 0xf2, 0xd0,
	0x1a, 0xe1, 0x7d, 0x5f, 0xbe, 0x0f, 0x74, 0xf8, 0x24, 0xc0, 0x9a, 0xf1, 0xda, 0xb0, 0x31, 0xd7,
	0x12, 0x3b, 0x68, 0x35, 0xde, 0xd5, 0x20, 0x3d, 0x4c, 0xad, 0x9c, 0x2f, 0xc1, 0x53, 0xbe, 0x8e,
	0x4f, 0xa5, 0xe0, 0x7c, 0x27, 0x01, 0xe5, 0xdb, 0xf5, 0xe5, 0xa7, 0x70, 0x3b, 0xc4, 0xe9, 0x8e,
	0xa9, 0x51, 0x75, 0x1f, 0x61, 0x2f, 0x1a, 0x94, 0xa3, 0x83, 0x56, 0x39, 0xa6, 0xee, 0x98, 0x43,
	0x8e, 0x60, 0xe3, 0x95, 0x7b, 0x50, 0x13, 0x76, 0xbc, 0xa5, 0x3b, 0xa6, 0x8d, 0xe5, 0x15, 0xc8,
	0x9f, 0xd0, 0x2f, 0xee, 0x5e, 0x78, 0x4b, 0xf9, 0x10, 0xaa, 0x91, 0xd2, 0x2e, 0x81, 0x6e, 0x02,
	0xda, 0xb3, 0xdd, 0x43, 0xdd, 0xde, 0xd5, 0x03, 0xfd, 0x12, 0xec, 0x03, 0xb8, 0x26, 0xac, 0x61,
	0x8e, 0x01, 0x6d, 0x28, 0xed, 0xe2, 0x53, 0xcb, 0xc0, 0x6f, 0xc7, 0xc9, 0x1f, 0x40, 0xc9, 0xa4,
	0x38, 0xc1, 0x26, 0x33, 0x6a, 0x91, 0xd1, 0x98, 0x2d, 0xde, 0x85, 0x72, 0xe3, 0x44, 0x77, 0x1c,
	0x6c, 0x5f, 0x32, 0xe7, 0x1f, 0xa4, 0xe1, 0x1a, 0x9b, 0xb4, 0xee, 0xfb, 0xd6, 0xb1, 0x43, 0xbc,
	0x47, 0x9f, 0xde, 0x09, 0x77, 0xa0, 0xec, 0xe1, 0xb1, 0x6d, 0x19, 0xba, 0x70, 0x46, 0x72, 0x6a,
	0x89, 0x13, 0xd9, 0x7e, 0xde, 0x03, 0xbe, 0xc9, 0xdc, 0xb6, 0xa2, 0xf5, 0xe4, 0x54, 0x24, 0x74,
	0x30, 0xf0, 0x6f, 0x86, 0xc6, 0xc2, 0xc0, 0x6c, 0xbd, 0xec, 0xcc, 0x16, 0xb7, 0x3e, 0xa2, 0x07,
	0x7c, 0xe6, 0x52, 0xee, 0x8b, 0x6a, 0xa4, 0x00, 0x55, 0x36, 0xa6, 0x49, 0xfe, 0xcd, 0x7a, 0x62,
	0xcf, 0x19, 0x55, 0xfe, 0x08, 0xe4, 0x50, 0x0a, 0xae, 0x33, 0xcb, 0x64, 0xbe, 0x27, 0xa7, 0x22,
	0xde, 0xc3, 0xa0, 0x6d, 0xd3, 0x57, 0xfe, 0x3c, 0x0d, 0xa5, 0x8e, 0x15, 0x60, 0x4f, 0xb7, 0x99,
	0x12, 0xd6, 0x21, 0x47, 0xbd, 0x23, 0x15, 0x3e, 0xe9, 0x85, 0x58, 0x87, 0xbc, 0x0c, 0xb9, 0xb1,
	0x87, 0x4d, 0xe6, 0xff, 0x17, 0x55, 0xd6, 0x90, 0x11, 0x64, 0x26, 0x4f, 0x7c, 0x7a, 0x0e, 0x4a,
	0x2a, 0xf9, 0x94, 0x65, 0xc8, 0xfa, 0x8f, 0xb6, 0x98, 0x97, 0xcd, 0xa9, 0xf4, 0x9b, 0xd2, 0xb6,
	0x1f, 0x13, 0x6b, 0x26, 0xbe, 0x99, 0x7e, 0x13, 0xda, 0x84, 0xe0, 0xf2, 0xeb, 0x99, 0x8d, 0xb2,
	0x4a, 0xbf, 0x29, 0x8d, 0xe0, 0x16, 0xd6, 0x33, 0x1b, 0x59, 0x95, 0x7e, 0x13, 0xda, 0x11, 0xc1,
	0x2d, 0xae, 0x67, 0x36, 0xd2, 0x2a, 0xfd, 0xa6, 0x34, 0x82, 0x2b, 0xac, 0x67, 0x36, 0x24, 0x95,
	0x7e, 0xcb, 0x4f, 0xa0, 0xc2, 0xbc, 0xbc, 0xcd, 0xe4, 0xf2, 0x57, 0x81, 0xea, 0x9b, 0xdd, 0x3f,
	0xa2, 0xb0, 0x6a, 0x99, 0x02, 0x39, 0x89, 0x71, 0x7b, 0xb8, 0xed, 0xaf, 0x16, 0xa9, 0x10, 0xf4,
	0x5b, 0xf9, 0x47, 0x09, 0xaa, 0x2f, 0x2c, 0xc7, 0x74, 0xcf, 0xe2, 0xfb, 0x9b, 0x48, 0x61, 0xfd,
	0x76, 0x68, 0x58, 0xf4, 0x9b, 0x98, 0x9b, 0x1f, 0x78, 0x96, 0x89, 0xb9, 0x71, 0xf2, 0x16, 0xf1,
	0x60, 0xe2, 0x35, 0xcf, 0xfc, 0x04, 0x8c, 0xe3, 0x2b, 0xfe, 0x03, 0x28, 0x25, 0x6e, 0x77, 0xe6,
	0x1d, 0xc2, 0x41, 0xf4, 0x66, 0xbf, 0x0b, 0xd5, 0x33, 0xba, 0x04, 0xcd, 0xe4, 0x6e, 0x8b, 0xbb,
	0x83, 0xca, 0x19, 0x5f, 0x19, 0xa3, 0x12, 0x0b, 0x3e, 0xd4, 0x7d, 0x1c, 0xc3, 0xf2, 0x14, 0x56,
	0x22, 0xc4, 0x10, 0xa4, 0x3c, 0x85, 0x3c, 0x13, 0x48, 0x7e, 0x3c, 0x23, 0xda, 0x59, 0xa6, 0x5a,
	0x9a, 0x92, 0x58, 0xbc, 0x45, 0x95, 0xa7, 0x50, 0x6d, 0xb8, 0x8e, 0x1f, 0xe8, 0x4e, 0xa0, 0xe2,
	0x1f, 0x4d, 0xb0, 0x4f, 0x0e, 0xc5, 0x02, 0x57, 0x36, 0xbf, 0xbc, 0x66, 0xe8, 0x3a, 0x44, 0x28,
	0x26, 0xac, 0xec, 0xe1, 0x60, 0x48, 0x34, 0xdf, 0x64, 0x97, 0x77, 0xc8, 0xe6, 0x31, 0xb9, 0x27,
	0xb0, 0xa7, 0x3b, 0x26, 0x67, 0x73, 0x93, 0xb2, 0x99, 0xe9, 0x53, 0xd4, 0x10, 0x4a, 0xec, 0xd1,
	0x72, 0x4c, 0xfc, 0x8a, 0xeb, 0x96, 0x35, 0x94, 0x9f, 0x48, 0x50, 0x1a, 0xd8, 0xe4, 0xe4, 0x5c,
	0x89, 0xf9, 0x1d, 0x28, 0xfb, 0x81, 0xee, 0x05, 0x9a, 0xe5, 0x98, 0xd1, 0xd9, 0xcd, 0xa8, 0x25,
	0x4a, 0x6c, 0x33, 0x1a, 0x01, 0xd9, 0x24, 0x28, 0x89, 0x40, 0x59, 0x06, 0xa2, 0xc4, 0x10, 0xb4,
	0x0a, 0x0b, 0xcc, 0x24, 0x42, 0xeb, 0x0f, 0x9b, 0xca, 0x4f, 0x25, 0x58, 0xda, 0x7d, 0xed, 0xe8,
	0x23, 0xcb, 0xf8, 0x0a, 0x56, 0xfc, 0x9d, 0xf3, 0x2b, 0xbe, 0x6c, 0x6c, 0x52, 0x1a, 0x72, 0xe7,
	0x92, 0x65, 0x68, 0xc4, 0xae, 0x43, 0x59, 0x80, 0x92, 0x06, 0x84, 0xa2, 0xfc, 0xad, 0x04, 0x37,
	0xf8, 0x7a, 0x0f, 0xc6, 0xa6, 0x1e, 0xe0, 0xaf, 0x60, 0xd5, 0x5b, 0x90, 0x9f, 0x50, 0x5e, 0x73,
	0x2c, 0x97, 0x23, 0xcf, 0x4b, 0x9a, 0xfd, 0x72, 0x92, 0x2a, 0xff, 0x91, 0x86, 0x5b, 0x0d, 0xd7,
	0x39, 0x75, 0x6d, 0x7a, 0x13, 0x46, 0xe6, 0xde, 0x9d, 0x8c, 0x0e, 0x49, 0x48, 0x76, 0x17, 0xaa,
	0x87, 0x7a, 0x60, 0x9c, 0xc4, 0x41, 0x6f, 0x18, 0xa6, 0x53, 0x72, 0xec, 0x10, 0xee, 0x41, 0xed,
	0x08, 0xeb, 0xc1, 0xc4, 0xc3, 0x02, 0x94, 0xf9, 0x01, 0xc4, 0x3b, 0x62, 0x70, 0x03, 0xd6, 0x7e,
	0x88, 0x3d, 0x07, 0xdb, 0x9a, 0xe5, 0x8c, 0x27, 0x81, 0x76, 0x7e, 0x24, 0x33, 0xe4, 0x5b, 0x0c,
	0xd5, 0x26, 0xa0, 0x67, 0xd3, 0x4c, 0x9a, 0xf0, 0x3e, 0x67, 0xe2, 0x4e, 0x82, 0xd9, 0x5c, 0x98,
	0x23, 0xb9, 0xcd, 0x60, 0x3d, 0x8a, 0x3a, 0xc7, 0xe6, 0x5b, 0x20, 0xfb, 0x63, 0x3d, 0xb0, 0x74,
	0x5b, 0x0c, 0xec, 0x99, 0x7d, 0xd6, 0x78, 0x8f, 0x10, 0xd9, 0xff, 0x0a, 0xdc, 0xe0, 0xb3, 0xce,
	0x18, 0x95, 0xa7, 0xa3, 0xae, 0x33, 0xc0, 0x60, 0x7a, 0xac, 0xf2, 0x85, 0x44, 0xfd, 0xc6, 0xa9,
	0x6b, 0x9f, 0x46, 0xb6, 0xf2, 0x11, 0x64, 0xec, 0x13, 0x7f, 0x0e, 0x3b, 0x21, 0x30, 0x82, 0xf6,
	0x4e, 0xe6, 0xb1, 0x67, 0x02, 0x23, 0xd1, 0x3b, 0xf3, 0x8e, 0xdc, 0x2c, 0x8a, 0x82, 0x63, 0x53,
	0x79, 0x97, 0xbc, 0x0f, 0xb5, 0x48, 0x02, 0xcd, 0x61, 0xdb, 0xce, 0xa3, 0xfd, 0x75, 0x3e, 0xc1,
	0x85, 0xe6, 0xa1, 0x22, 0x73, 0x8a, 0xa2, 0xb4, 0xa1, 0xdc, 0x76, 0x8e, 0x30, 0x36, 0x43, 0x01,
	0xa3, 0xdb, 0x34, 0x7d, 0xd1, 0x6d, 0xba, 0x02, 0x79, 0x83, 0xa6, 0x87, 0xfc, 0xea, 0xe4, 0x2d,
	0xe5, 0x0f, 0x25, 0xa8, 0xf4, 0x26, 0xc1, 0x4c, 0x66, 0x17, 0x5e, 0xcd, 0xef, 0x76, 0xf6, 0xbe,
	0x09, 0x15, 0x97, 0xcd, 0xa4, 0x25, 0x96, 0x52, 0xe6, 0x54, 0x96, 0xbe, 0x2a, 0xaf, 0xa0, 0xd8,
	0xd0, 0x6d, 0x3b, 0x5c, 0xcd, 0x43, 0x58, 0x0c, 0x5c, 0x4d, 0x1f, 0x8f, 0xed, 0xd7, 0x7c, 0xb2,
	0x95, 0xe9, 0xc9, 0xc2, 0x89, 0x02, 0xb7, 0x4e, 0x60, 0xf2, 0x36, 0x2c, 0xf2, 0x39, 0xc3, 0x18,
	0xe8, 0x6d, 0xeb, 0x8b, 0xb0, 0xca, 0x9f, 0x48, 0x50, 0x6b, 0x4c, 0xfc, 0xc0, 0x1d, 0x89, 0x0b,
	0xd8, 0x00, 0x64, 0xe8, 0xb6, 0xad, 0x05, 0xba, 0x77, 0x8c, 0x03, 0x31, 0xbd, 0xa8, 0x10, 0xfa,
	0x90, 0x92, 0x69, 0x9a, 0xf1, 0x8e, 0xf3, 0xc6, 0x0a, 0xcf, 0x5e, 0xa0, 0x70, 0xe5, 0xaf, 0x24,
	0x80, 0x7d, 0x7d, 0x1c, 0x2e, 0x49, 0x9c, 0x28, 0xfd, 0x25, 0x26, 0x12, 0x75, 0x99, 0x99, 0x4f,
	0x97, 0x0d, 0xa8, 0xfa, 0xa4, 0xc7, 0xd0, 0xa2, 0x19, 0xb3, 0x97, 0xce, 0x58, 0x61, 0x43, 0x7a,
	0xa1, 0x62, 0xff, 0x49, 0x82, 0xb2, 0x8a, 0xcd, 0xc9, 0x55, 0xbd, 0xf7, 0x27, 0x00, 0x96, 0x63,
	0x05, 0x42, 0xba, 0xff, 0xf6, 0x81, 0x05, 0x82, 0xa6, 0x49, 0xff, 0x54, 0xce, 0x9e, 0x3d, 0x97,
	0xb3, 0x8b, 0xaa, 0xc9, 0xcd, 0xa5, 0x1a, 0xe5, 0x5f, 0x24, 0x58, 0x62, 0x52, 0xf1, 0xd3, 0xfe,
	0xff, 0x25, 0xdb, 0x5c, 0x2e, 0xe8, 0x1d, 0x04, 0xfc, 0x2f, 0x09, 0x56, 0x77, 0xc8, 0x0d, 0xd4,
	0x75, 0xbd, 0xd1, 0xd0, 0xd3, 0x2d, 0xc7, 0x72, 0x8e, 0x67, 0x48, 0x29, 0xcd, 0x2f, 0xe5, 0xb7,
	0x21, 0xe7, 0x1b, 0xba, 0x8d, 0xe7, 0xd0, 0x0c, 0x03, 0x92, 0x1b, 0xdb, 0x3d, 0x3a, 0xf2, 0x71,
	0x30, 0xcf, 0x8d, 0xcd, 0x90, 0x24, 0x06, 0xc2, 0x63, 0xdf, 0xb2, 0xf9, 0xed, 0x94, 0x56, 0xc3,
	0x26, 0x09, 0xa1, 0xc2, 0x1b, 0x8c, 0x05, 0x73, 0x2c, 0xc0, 0x2d, 0x71, 0x62, 0x9b, 0xc6, 0x74,
	0x6f, 0xd2, 0xb0, 0x1c, 0xc9, 0xbd, 0xe7, 0xe9, 0xe6, 0xff, 0xb5, 0xcc, 0xf7, 0x21, 0x3b, 0xc2,
	0xba, 0x33, 0x87, 0xc4, 0x14, 0x47, 0xfc, 0xc1, 0xa9, 0xee, 0x59, 0xba, 0x63, 0xe0, 0x39, 0x82,
	0x93, 0x08, 0x2b, 0x7f, 0x0a, 0xc5, 0x63, 0x4f, 0x37, 0xf9, 0xdd, 0xce, 0xcd, 0xe2, 0x6d, 0x43,
	0x81, 0xc0, 0xd9, 0x1d, 0x2f, 0x2a, 0x39, 0x7f, 0x89, 0x92, 0x17, 0x66, 0x28, 0xb9, 0x0b, 0x2b,
	0x0d, 0xcf, 0xf5, 0x7d, 0x95, 0xa5, 0x8a, 0x83, 0xc9, 0xe8, 0x4a, 0xe7, 0x47, 0xf9, 0x9b, 0x34,
	0x5c, 0x1f, 0x60, 0x1b, 0x1b, 0x41, 0xdd, 0x31, 0x07, 0x86, 0x1e, 0x04, 0xd8, 0xbb, 0x72, 0xac,
	0xc8, 0x2a, 0x40, 0xf3, 0x58, 0x1e, 0x43, 0x4e, 0x9d, 0xe2, 0xec, 0xbb, 0x9d, 0xe2, 0xdc, 0xc5,
	0xa7, 0xf8, 0x3e, 0xe4, 0x7d, 0x2a, 0x24, 0xd5, 0xf9, 0xc5, 0x67, 0x98, 0xa3, 0xe4, 0x6f, 0xc3,
	0x82, 0xcf, 0x74, 0x41, 0x37, 0xe1, 0x2d, 0x87, 0x9e, 0xc3, 0x94, 0x23, 0xa8, 0xa8, 0xf8, 0x14,
	0x7b, 0xfe, 0x15, 0x7d, 0xf5, 0x25, 0x45, 0x52, 0xe5, 0x47, 0x80, 0x76, 0x3c, 0x57, 0x37, 0x0d,
	0xdd, 0xbf, 0x62, 0x62, 0x46, 0xc2, 0xe7, 0x90, 0x13, 0x4f, 0x26, 0xd8, 0x74, 0x95, 0x88, 0xcc,
	0x12, 0x8a, 0x9f, 0x49, 0x00, 0xfd, 0x99, 0xa7, 0xf9, 0xcb, 0xe5, 0x3d, 0xe7, 0xab, 0xce, 0x97,
	0x64, 0x03, 0x62, 0xf9, 0x59, 0xfe, 0x04, 0x2a, 0x21, 0x03, 0x1e, 0x06, 0x31, 0x33, 0x91, 0xcf,
	0xd7, 0xff, 0xd5, 0x70, 0x2a, 0x1e, 0x1a, 0xfd, 0xae, 0x44, 0x36, 0x87, 0x86, 0x04, 0x5f, 0xeb,
	0xe6, 0xc8, 0xb7, 0xa0, 0xe0, 0xe0, 0xb3, 0x44, 0x66, 0xb6, 0xe8, 0xe0, 0x33, 0xa6, 0xc6, 0x13,
	0x40, 0xb4, 0x28, 0x38, 0x76, 0xbf, 0x6e, 0x1b, 0x39, 0x02, 0xd4, 0x0f, 0x0b, 0xce, 0xf3, 0x87,
	0xba, 0xb7, 0xa1, 0x10, 0x95, 0xa9, 0x79, 0x8e, 0x13, 0x13, 0x64, 0x19, 0xb2, 0x34, 0x84, 0xcb,
	0xd2, 0x10, 0x8e, 0x7e, 0x2b, 0x9f, 0x4b, 0xb0, 0xbc, 0x87, 0x83, 0x8e, 0x6b, 0xe8, 0xf6, 0x40,
	0xd4, 0xee, 0x13, 0x28, 0x0a, 0xf5, 0x30, 0xee, 0xf4, 0x2f, 0x3a, 0x42, 0x22, 0xf4, 0x1d, 0x9d,
	0xd8, 0x27, 0x70, 0x6d, 0x6a, 0x1d, 0xfe, 0xd8, 0x75, 0x7c, 0x7c, 0x79, 0x4c, 0xae, 0x3c, 0x87,
	0xd2, 0xd0, 0xd3, 0xe3, 0x08, 0x0b, 0x41, 0x26, 0xd0, 0x8f, 0x79, 0xa4, 0x4a, 0x3e, 0xc5, 0x25,
	0x65, 0xe6, 0x5f, 0xd2, 0xef, 0x49, 0x50, 0x21, 0xd9, 0x09, 0xf6, 0xae, 0x78, 0x4c, 0x7f, 0x15,
	0x10, 0xb1, 0xa9, 0xc4, 0x83, 0x4b, 0xe6, 0xc2, 0x07, 0x97, 0x8a, 0x83, 0xcf, 0x9a, 0xf1, 0x9b,
	0x8b, 0xf2, 0x19, 0xc8, 0x0d, 0xd7, 0x31, 0xf4, 0x00, 0x3b, 0x7a, 0x80, 0xaf, 0x1a, 0x08, 0xdf,
	0x86, 0xc2, 0x74, 0x1a, 0x1c, 0x13, 0x94, 0xbf, 0x90, 0xa0, 0xf4, 0xe2, 0xc4, 0xb2, 0x05, 0xeb,
	0x2e, 0x18, 0xae, 0x63, 0x5a, 0x41, 0x98, 0x6f, 0x5f, 0x6c, 0x04, 0x31, 0x50, 0xde, 0x84, 0xec,
	0xa1, 0x6b, 0x5e, 0x16, 0x69, 0x53, 0x0c, 0xb9, 0xf1, 0xc9, 0x4d, 0x30, 0xc7, 0x8d, 0x41, 0x71,
	0x8a, 0x0b, 0x95, 0x03, 0x47, 0xf7, 0x5e, 0xf7, 0xa2, 0x9c, 0xe0, 0x2e, 0x64, 0x27, 0x8e, 0x3b,
	0xe6, 0x6f, 0x58, 0x4b, 0x94, 0x03, 0x87, 0x60, 0x8f, 0x32, 0x51, 0x29, 0xe0, 0x1d, 0xcd, 0xe0,
	0x1f, 0x24, 0xa8, 0xee, 0x58, 0xc9, 0x29, 0x37, 0x21, 0x77, 0x68, 0xc5, 0x73, 0xb2, 0x92, 0x5e,
	0x08, 0x0a, 0x27, 0x65, 0x90, 0x30, 0x05, 0xcf, 0x7c, 0xa9, 0x14, 0x3c, 0x3b, 0x5f, 0x0a, 0xfe,
	0x10, 0x96, 0xe3, 0x0b, 0xe0, 0x5c, 0x7d, 0x61, 0x29, 0xea, 0x13, 0xaa, 0x04, 0x7f, 0x29, 0x01,
	0xa8, 0x71, 0x30, 0xfb, 0x29, 0x94, 0x4c, 0xcb, 0x0f, 0x3c, 0xeb, 0x70, 0x12, 0xed, 0x71, 0x65,
	0xeb, 0x3a, 0x9d, 0x58, 0xd5, 0x1d, 0xd3, 0x1d, 0xed, 0x0a, 0xdd, 0x6a, 0x02, 0x2c, 0x3f, 0x49,
	0xfa, 0x9b, 0xcb, 0xac, 0x50, 0xf0, 0x45, 0x97, 0x27, 0x7e, 0x7f, 0x2f, 0x01, 0x1a, 0x62, 0x2f,
	0xa9, 0xf7, 0x7b, 0x90, 0x0b, 0x3c, 0x2b, 0xd2, 0xfb, 0x35, 0x3a, 0x2c, 0x42, 0x45, 0x8a, 0xa7,
	0x98, 0xaf, 0x55, 0xf1, 0x1f, 0x41, 0x06, 0x9f, 0xf8, 0x73, 0xc4, 0x8d, 0x04, 0xa6, 0xbc, 0x86,
	0xda, 0x73, 0x12, 0x79, 0x9a, 0x24, 0x33, 0x8c, 0x4b, 0x33, 0xb9, 0x53, 0xdd, 0x8b, 0x64, 0x61,
	0xa7, 0x24, 0x86, 0x45, 0xc2, 0x50, 0xd0, 0x3b, 0x67, 0xf6, 0x7f, 0x2a, 0xc1, 0x0a, 0x4b, 0xd5,
	0xfa, 0x1e, 0x36, 0x2c, 0x5a, 0x6b, 0xbe, 0x52, 0x4c, 0x7f, 0x07, 0xca, 0xf8, 0xd5, 0xd8, 0x75,
	0x88, 0x27, 0x3b, 0xb4, 0x02, 0x9f, 0x3f, 0xcd, 0x94, 0x42, 0xe2, 0x8e, 0x15, 0xd0, 0x7a, 0xed,
	0x48, 0x77, 0x02, 0xcb, 0xf7, 0x75, 0x06, 0xca, 0x30, 0x50, 0x48, 0x24, 0x20, 0xe5, 0x77, 0xa0,
	0x38, 0xc0, 0xce, 0x15, 0x53, 0x8c, 0x4f, 0xa0, 0x62, 0xb0, 0x57, 0x29, 0x8d, 0x3f, 0x46, 0xa5,
	0x85, 0x98, 0x22, 0xf1, 0x60, 0xa5, 0x96, 0x0d, 0xb1, 0xa9, 0x7c, 0x06, 0x45, 0x15, 0x1b, 0xa7,
	0xf3, 0x17, 0x7f, 0xae, 0x30, 0xd7, 0xe7, 0xcb, 0x50, 0x88, 0xb7, 0xfe, 0xdd, 0x2f, 0xd7, 0x1d,
	0xa8, 0x1d, 0x52, 0x37, 0xa3, 0xb9, 0x63, 0xcd, 0x63, 0xec, 0xf8, 0x2a, 0x92, 0x4e, 0x88, 0x4f,
	0xd5, 0x4a, 0xa9, 0xd5, 0xc3, 0x29, 0xe7, 0xb5, 0x0b, 0xb5, 0xd8, 0x69, 0x84, 0x3c, 0xd8, 0x29,
	0x61, 0x07, 0x6a, 0x3a, 0x3a, 0x6d, 0xa5, 0x54, 0x74, 0x38, 0x1d, 0xb1, 0x7e, 0x0c, 0x25, 0x5a,
	0x1c, 0x0a, 0x19, 0xb0, 0x83, 0x83, 0x98, 0x10, 0x71, 0x11, 0xa9, 0x95, 0x52, 0x8b, 0x86, 0x50,
	0x53, 0xfa, 0x2e, 0x2c, 0x19, 0xf1, 0x6d, 0x16, 0x8d, 0x66, 0x07, 0xe9, 0x7a, 0x58, 0x11, 0x9c,
	0xba, 0xed, 0x5a, 0x29, 0x55, 0x36, 0xce, 0xdf, 0x81, 0x75, 0x40, 0x06, 0x7f, 0x27, 0x89, 0x18,
	0xe5, 0x05, 0x5d, 0x4c, 0x3d, 0xa2, 0x10, 0x5d, 0x18, 0x53, 0xef, 0x2a, 0x4f, 0x81, 0x90, 0xc8,
	0x15, 0x1f, 0x71, 0x60, 0xd9, 0xc2, 0x52, 0x54, 0x9c, 0x8c, 0xaf, 0xff, 0x56, 0x4a, 0xad, 0x18,
	0xc9, 0x80, 0x80, 0x2d, 0x81, 0x96, 0x5c, 0x23, 0x06, 0x8b, 0xc9, 0x25, 0x88, 0xf5, 0x58, 0xbe,
	0x84, 0x44, 0x89, 0xf6, 0x25, 0xdc, 0x30, 0x48, 0x3a, 0xa8, 0x85, 0x8f, 0x8a, 0xfe, 0x64, 0x14,
	0xf1, 0x2a, 0x50, 0x5e, 0xb7, 0x18, 0xaf, 0x99, 0x49, 0x63, 0x2b, 0xa5, 0xae, 0x18, 0xb3, 0xd3,
	0xc9, 0x16, 0x2c, 0x19, 0xb4, 0xa8, 0xa7, 0x25, 0x76, 0x0a, 0x44, 0x73, 0x9b, 0x2e, 0xfa, 0xb5,
	0x52, 0x6a, 0xcd, 0x38, 0x57, 0x09, 0xec, 0xc2, 0x35, 0x93, 0xbd, 0x47, 0x68, 0xec, 0xe5, 0x22,
	0xe4, 0x55, 0xa4, 0xbc, 0x56, 0xd9, 0x43, 0xeb, 0xf9, 0x17, 0x96, 0x56, 0x4a, 0x5d, 0x32, 0x67,
	0x3c, 0xbc, 0xe8, 0x70, 0x3b, 0xe4, 0xc7, 0x9e, 0x1a, 0xa6, 0xd8, 0x96, 0x28, 0xdb, 0x35, 0x91,
	0xed, 0xf9, 0x87, 0x90, 0x56, 0x4a, 0xbd, 0x61, 0x5e, 0xf8, 0x4a, 0xf2, 0x12, 0x6e, 0x1c, 0xe3,
	0x40, 0x63, 0x0f, 0x95, 0x61, 0xe8, 0x15, 0xf2, 0x2f, 0x0b, 0x6a, 0x9d, 0xfd, 0x54, 0x46, 0xd4,
	0x7a, 0x3c, 0xfb, 0x11, 0xed, 0x53, 0xa8, 0x58, 0xb4, 0x06, 0x1d, 0xb1, 0xab, 0x08, 0x6e, 0x20,
	0x51, 0x9e, 0x6e, 0xa5, 0xd4, 0xb2, 0x95, 0xa8, 0x57, 0x6f, 0x41, 0x71, 0xa4, 0xc7, 0x47, 0xb7,
	0x4a, 0x47, 0x56, 0xe9, 0xc8, 0xb8, 0xcc, 0xd9, 0x4a, 0xa9, 0x30, 0x8a, 0x8b, 0x9e, 0x5b, 0xf4,
	0x85, 0x33, 0x1a, 0x83, 0x84, 0x31, 0x71, 0x52, 0x47, 0xc6, 0x8c, 0xe3, 0x14, 0x6f, 0x17, 0x6a,
	0xf1, 0x1f, 0x59, 0xc2, 0x91, 0x35, 0xe1, 0x90, 0x4f, 0xa7, 0x17, 0xe4, 0x90, 0x8f, 0xa7, 0x53,
	0x8e, 0x4f, 0xa1, 0xe2, 0xd1, 0xcb, 0x23, 0x62, 0x21, 0x0b, 0xa2, 0x26, 0x0a, 0x9b, 0x44, 0x54,
	0x2f, 0x51, 0xe9, 0xec, 0xc2, 0x35, 0x3e, 0x98, 0xbf, 0xad, 0x86, 0x3c, 0x96, 0x04, 0xa3, 0x99,
	0x51, 0x46, 0x24, 0x46, 0xe3, 0xcd, 0xa8, 0x2e, 0x3e, 0x85, 0xaa, 0xc7, 0x52, 0xc0, 0x88, 0xd3,
	0xb2, 0x70, 0x56, 0x93, 0xe9, 0x21, 0x39, 0xab, 0x5e, 0x32, 0x61, 0xa4, 0xe3, 0x69, 0x7e, 0x1f,
	0x8d, 0xbf, 0x96, 0x18, 0x2f, 0xe6, 0xfe, 0x6c, 0x7c, 0xa2, 0x1a, 0xb0, 0x05, 0x45, 0xcf, 0x39,
	0x8e, 0xc6, 0xae, 0x08, 0xdb, 0x10, 0x07, 0x54, 0x64, 0x1b, 0xbc, 0x38, 0xbc, 0xfa, 0x0d, 0xb8,
	0xc9, 0xea, 0x11, 0xf4, 0x3f, 0x27, 0xbc, 0xd2, 0x10, 0xb1, 0xb8, 0x4e, 0x59, 0xdc, 0x66, 0x37,
	0xcd, 0xec, 0x0a, 0x4e, 0x2b, 0xa5, 0x5e, 0xf7, 0x2f, 0x28, 0xee, 0x3c, 0x81, 0x72, 0xf2, 0xd8,
	0xac, 0x0a, 0x4f, 0xc3, 0x53, 0x27, 0xa5, 0xe4, 0x8b, 0x87, 0xa3, 0x09, 0x72, 0xc0, 0xa2, 0x26,
	0xf1, 0x1e, 0xb9, 0x21, 0x98, 0xc7, 0x74, 0xe8, 0x45, 0xcc, 0x23, 0x98, 0x0e, 0xc7, 0x9e, 0x40,
	0x39, 0x20, 0x99, 0x57, 0xc4, 0xe1, 0xa6, 0xb0, 0x00, 0x31, 0x27, 0x23, 0x0b, 0x08, 0xc4, 0x1c,
	0xed, 0x3b, 0x80, 0x26, 0xd3, 0xd3, 0xdf, 0x12, 0x36, 0xe3, 0x60, 0x7a, 0xf2, 0xca, 0x24, 0x39,
	0x75, 0x0b, 0x96, 0x4e, 0x79, 0xac, 0x24, 0xf2, 0xb8, 0x2d, 0xf8, 0xb6, 0x73, 0x21, 0x17, 0xf1,
	0x6d, 0xa7, 0xe7, 0xe2, 0xb0, 0x27, 0x50, 0x3e, 0x23, 0x29, 0x4f, 0xc4, 0xe3, 0x3d, 0x41, 0x08,
	0x31, 0x19, 0x22, 0x42, 0x9c, 0x89, 0xc9, 0xd1, 0xc7, 0x50, 0xf2, 0xb1, 0x13, 0x1f, 0xcc, 0x35,
	0xe1, 0x0a, 0x14, 0x22, 0x1b, 0x72, 0x05, 0xfa, 0x42, 0xa0, 0xf3, 0x31, 0x94, 0x3c, 0x6c, 0x9c,
	0x46, 0xc3, 0xde, 0x17, 0x86, 0x09, 0x01, 0x09, 0x19, 0xe6, 0x09, 0xf1, 0xc9, 0x53, 0xa8, 0x86,
	0x8f, 0x48, 0xe1, 0xc8, 0x75, 0x41, 0x63, 0xc9, 0xa7, 0x2c, 0xa2, 0x31, 0x37, 0xf9, 0xb8, 0x75,
	0x0f, 0x16, 0x47, 0xfc, 0x8f, 0x64, 0xab, 0x1f, 0x08, 0xb6, 0x1b, 0xff, 0xbf, 0x4c, 0x8d, 0x00,
	0xc4, 0x7d, 0x04, 0x61, 0xa5, 0x23, 0x9a, 0x4e, 0x11, 0xed, 0x63, 0xaa, 0x0e, 0x42, 0xed, 0x63,
	0xba, 0x36, 0xf2, 0x5b, 0x70, 0x8b, 0x3d, 0xef, 0x3a, 0xae, 0x37, 0xd2, 0x02, 0x5e, 0x47, 0x8f,
	0xf8, 0xdd, 0xa1, 0xfc, 0xde, 0x63, 0x31, 0xc7, 0x05, 0xd5, 0xf6, 0x56, 0x4a, 0x5d, 0x3d, 0xbc,
	0xa8, 0x12, 0xff, 0x02, 0x56, 0xb9, 0x87, 0x19, 0x87, 0xc1, 0x6d, 0xc4, 0xfc, 0x1b, 0x82, 0x8b,
	0x9f, 0x1d, 0x00, 0x13, 0x17, 0xef, 0xcd, 0x0e, 0x8d, 0x55, 0xb8, 0x2e, 0x2c, 0x9c, 0x56, 0x8a,
	0x43, 0xbe, 0xdf, 0xa4, 0x7c, 0x6f, 0x24, 0x17, 0x2d, 0x94, 0xca, 0x5b, 0x29, 0x75, 0xf9, 0x70,
	0x06, 0x7d, 0x27, 0x0b, 0x69, 0x77, 0xac, 0xfc, 0x1a, 0x00, 0x31, 0x3d, 0x5e, 0xdc, 0xd8, 0x82,
	0x3c, 0xaf, 0x40, 0x4b, 0x73, 0x94, 0xf8, 0x29, 0x72, 0xf3, 0xa7, 0x12, 0x94, 0x13, 0x15, 0x03,
	0xf9, 0x26, 0xac, 0xf4, 0xd5, 0xf6, 0x7e, 0x7b, 0xd8, 0x7e, 0xde, 0xd4, 0x86, 0xdf, 0xef, 0x37,
	0xb5, 0x76, 0xf7, 0x79, 0xbd, 0xd3, 0xde, 0x45, 0x29, 0x79, 0x11, 0xb2, 0x7d, 0xb5, 0xb9, 0x8b,
	0x24, 0x39, 0x0f, 0xe9, 0xc1, 0x13, 0x94, 0x96, 0x17, 0x20, 0x33, 0x78, 0xb8, 0x8d, 0x32, 0xf4,
	0xe3, 0xd1, 0x16, 0xca, 0xd2, 0x8f, 0xed, 0xc7, 0x28, 0x47, 0x20, 0x07, 0x4f, 0x50, 0x9e, 0x10,
	0x0e, 0x1e, 0x6e, 0xa3, 0x05, 0xfa, 0xf1, 0x68, 0x0b, 0x2d, 0xd2, 0x8f, 0xed, 0xc7, 0xa8, 0x40,
	0x3e, 0x9e, 0x3d, 0xdc, 0x46, 0x40, 0x3f, 0x1e, 0x6d, 0xa1, 0x22, 0xfd, 0xd8, 0x7e, 0x8c, 0x4a,
	0x72, 0x01, 0x72, 0xc3, 0x83, 0x7e, 0xa7, 0x89, 0xca, 0x32, 0x40, 0xbe, 0xd7, 0xaf, 0x7f, 0xef,
	0xa0, 0x89, 0x2a, 0x9b, 0x36, 0x94, 0xc4, 0xbf, 0xa4, 0xca, 0x55, 0x28, 0xf2, 0xe5, 0x69, 0xfd,
	0x3a, 0x59, 0x62, 0x09, 0x16, 0x7f, 0xd0, 0x54, 0x7b, 0xb4, 0x25, 0xc9, 0x45, 0x58, 0xe8, 0x75,
	0x9b, 0xb4, 0x91, 0x96, 0x2b, 0x00, 0x9d, 0xde, 0x8b, 0xe6, 0x60, 0x48, 0xdb, 0x19, 0x32, 0xb6,
	0xd5, 0xde, 0x6b, 0x85, 0x84, 0x2c, 0x21, 0x1c, 0x74, 0x7f, 0xbd, 0xdb, 0x7b, 0xd1, 0xa5, 0x84,
	0xdc, 0xe6, 0x7f, 0x4a, 0x51, 0x7d, 0x80, 0x67, 0x50, 0x32, 0x82, 0xd2, 0x41, 0xb7, 0xd7, 0x17,
	0x94, 0xb2, 0x0c, 0x88, 0x52, 0x3a, 0xbd, 0xbd, 0x76, 0xa3, 0xde, 0xd1, 0xba, 0xbd, 0x21, 0x92,
	0xc8, 0x3a, 0x28, 0xb5, 0xf9, 0xb2, 0x8f, 0xd2, 0x8c, 0x73, 0xaf, 0xaf, 0x75, 0x9b, 0x7b, 0xf5,
	0x61, 0x13, 0x65, 0xe4, 0x32, 0x14, 0x28, 0x61, 0xd0, 0x53, 0x87, 0x28, 0x1b, 0x35, 0x87, 0xf5,
	0x6e, 0x0b, 0xe5, 0xa2, 0xc1, 0x9d, 0xde, 0x1e, 0xca, 0x93, 0x75, 0xd3, 0xd6, 0xb3, 0x4e, 0xaf,
	0xa7, 0xa2, 0x85, 0x08, 0xdc, 0x68, 0xb6, 0x3b, 0x68, 0x31, 0x02, 0xd7, 0x77, 0x06, 0xa8, 0x10,
	0x33, 0x6e, 0xef, 0x75, 0x11, 0xc8, 0x32, 0x54, 0xd8, 0x72, 0x07, 0xda, 0xb3, 0x76, 0xb7, 0x3d,
	0x6c, 0xa2, 0x62, 0x34, 0xa0, 0xd1, 0x1b, 0xa0, 0x52, 0xd4, 0x1a, 0xb4, 0xbb, 0xa8, 0xbc, 0xf9,
	0xd7, 0xe9, 0xb8, 0x3e, 0x11, 0x8a, 0x5c, 0x83, 0xf2, 0x4e, 0x3b, 0x29, 0x73, 0x19, 0x0a, 0x8c,
	0x54, 0xdf, 0x25, 0x6a, 0x8e, 0x9a, 0xbb, 0xed, 0xe7, 0x28, 0x1d, 0x37, 0xf7, 0x0f, 0x3a, 0x4c,
	0x56, 0xd6, 0x1c, 0x1c, 0xec, 0xa0, 0x2c, 0x99, 0x90, 0x35, 0x9b, 0xdf, 0x63, 0xa2, 0xb2, 0xd6,
	0x5e, 0x13, 0xe5, 0x85, 0xd6, 0x10, 0x2d, 0xc4, 0xad, 0x4e, 0x93, 0xc9, 0xc9, 0x5b, 0x43, 0x54,
	0x88, 0x5b, 0xdd, 0x26, 0x02, 0x61, 0x01, 0xbd, 0x21, 0x2a, 0x11, 0x75, 0x87, 0x2b, 0xde, 0x6d,
	0xbe, 0x44, 0x65, 0x61, 0x45, 0xf5, 0x97, 0xa8, 0x22, 0x34, 0xdb, 0x5d, 0x54, 0x8d, 0x9b, 0xfd,
	0xde, 0x0b, 0x84, 0xe2, 0xa6, 0xda, 0xdc, 0x47, 0x35, 0xf9, 0x1a, 0xd4, 0xf8, 0xbc, 0x7c, 0x83,
	0xeb, 0xdd, 0x5d, 0x24, 0x93, 0x6d, 0x4f, 0x92, 0x7b, 0x2a, 0x5a, 0xda, 0xfc, 0x3e, 0xc8, 0xe7,
	0x0b, 0x1d, 0x64, 0x3d, 0x6a, 0x77, 0x4f, 0xd0, 0x1f, 0x27, 0x1c, 0x74, 0xdb, 0xcf, 0x7a, 0xea,
	0x3e, 0x92, 0xc8, 0x1e, 0x13, 0x42, 0xb7, 0xa7, 0xee, 0xd7, 0x3b, 0x28, 0x4d, 0x74, 0x4e, 0xda,
	0x3b, 0x4d, 0xb5, 0xdb, 0x3b, 0xe8, 0x74, 0xda, 0x28, 0xb3, 0xf9, 0x03, 0xa1, 0x84, 0x21, 0x6c,
	0xcd, 0x50, 0x6d, 0x27, 0xb6, 0x06, 0x41, 0x89, 0x91, 0x06, 0xcd, 0x4e, 0xb3, 0x41, 0x4c, 0x31,
	0xa2, 0x1c, 0xf4, 0x77, 0x89, 0xf5, 0x51, 0x73, 0x64, 0x94, 0x46, 0xa7, 0xbe, 0xdf, 0x47, 0x99,
	0xcd, 0x5f, 0x16, 0x6b, 0x0a, 0x02, 0xf3, 0xe7, 0x75, 0x35, 0xc1, 0xbc, 0x0a, 0x45, 0x46, 0x62,
	0x67, 0x53, 0xda, 0x79, 0xf0, 0xf3, 0x2f, 0xd6, 0x52, 0xff, 0xfc, 0xc5, 0x5a, 0xea, 0x17, 0x5f,
	0xac, 0x49, 0x3f, 0x7e, 0xb3, 0x26, 0xfd, 0xe4, 0xcd, 0x9a, 0xf4, 0x77, 0x6f, 0xd6, 0xa4, 0x9f,
	0xbf, 0x59, 0x93, 0xfe, 0xf5, 0xcd, 0x9a, 0xf4, 0xef, 0x6f, 0xd6, 0x52, 0xbf, 0x78, 0xb3, 0x26,
	0xfd, 0xd1, 0xbf, 0xad, 0xa5, 0xfe, 0x47, 0x92, 0x0e, 0xf3, 0xf4, 0x0f, 0xfd, 0x8f, 0xfe, 0x37,
	0x00, 0x00, 0xff, 0xff, 0xd6, 0xe8, 0x71, 0x1f, 0x03, 0x30, 0x00, 0x00,
}
