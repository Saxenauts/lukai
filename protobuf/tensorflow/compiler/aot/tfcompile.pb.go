// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/compiler/aot/tfcompile.proto

/*
	Package tensorflow_tfcompile is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/compiler/aot/tfcompile.proto

	It has these top-level messages:
		TensorId
		Feed
		Fetch
		Config
*/
package tensorflow_tfcompile

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow "github.com/d4l3k/pok/tensorflow/core/framework"
import tensorflow1 "github.com/d4l3k/pok/tensorflow/core/framework"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// TensorId identifies a tensor in a TensorFlow graph, by specifying the output
// index of a particular node in the graph.  If the output of the named node
// feeds into other node(s), this corresponds to one or more edges.  Otherwise
// it doesn't correspond to any existing edges at all, e.g. for output nodes.
type TensorId struct {
	NodeName    string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	OutputIndex int64  `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
}

func (m *TensorId) Reset()                    { *m = TensorId{} }
func (*TensorId) ProtoMessage()               {}
func (*TensorId) Descriptor() ([]byte, []int) { return fileDescriptorTfcompile, []int{0} }

func (m *TensorId) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *TensorId) GetOutputIndex() int64 {
	if m != nil {
		return m.OutputIndex
	}
	return 0
}

// Feed represents a single feed tensor in the graph, which corresponds to an
// input argument for the generated function.
type Feed struct {
	Id    *TensorId                    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Shape *tensorflow.TensorShapeProto `protobuf:"bytes,2,opt,name=shape" json:"shape,omitempty"`
	Name  string                       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Optional data type. This is not normally required, as the graph itself
	// contains this information. However, if the node being fed is an op that
	// is not linked into the tfcompile binary, then the type cannot be inferred
	// from the node; in this case, the type should be set here.
	Type tensorflow1.DataType `protobuf:"varint,4,opt,name=type,proto3,enum=tensorflow.DataType" json:"type,omitempty"`
}

func (m *Feed) Reset()                    { *m = Feed{} }
func (*Feed) ProtoMessage()               {}
func (*Feed) Descriptor() ([]byte, []int) { return fileDescriptorTfcompile, []int{1} }

func (m *Feed) GetId() *TensorId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Feed) GetShape() *tensorflow.TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *Feed) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feed) GetType() tensorflow1.DataType {
	if m != nil {
		return m.Type
	}
	return tensorflow1.DT_INVALID
}

// Fetch represents a single fetch tensor in the graph, which corresponds to an
// output argument for the generated function.
type Fetch struct {
	Id   *TensorId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Fetch) Reset()                    { *m = Fetch{} }
func (*Fetch) ProtoMessage()               {}
func (*Fetch) Descriptor() ([]byte, []int) { return fileDescriptorTfcompile, []int{2} }

func (m *Fetch) GetId() *TensorId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Fetch) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Config represents configuration information for tfcompile.
type Config struct {
	// Each feed is a positional input argument for the generated function.  The
	// order of each entry matches the order of each input argument.
	Feed []*Feed `protobuf:"bytes,1,rep,name=feed" json:"feed,omitempty"`
	// Each fetch is a positional output argument for the generated function.  The
	// order of each entry matches the order of each output argument.
	Fetch []*Fetch `protobuf:"bytes,2,rep,name=fetch" json:"fetch,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptorTfcompile, []int{3} }

func (m *Config) GetFeed() []*Feed {
	if m != nil {
		return m.Feed
	}
	return nil
}

func (m *Config) GetFetch() []*Fetch {
	if m != nil {
		return m.Fetch
	}
	return nil
}

func init() {
	proto.RegisterType((*TensorId)(nil), "tensorflow.tfcompile.TensorId")
	proto.RegisterType((*Feed)(nil), "tensorflow.tfcompile.Feed")
	proto.RegisterType((*Fetch)(nil), "tensorflow.tfcompile.Fetch")
	proto.RegisterType((*Config)(nil), "tensorflow.tfcompile.Config")
}
func (this *TensorId) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TensorId)
	if !ok {
		that2, ok := that.(TensorId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.NodeName != that1.NodeName {
		return false
	}
	if this.OutputIndex != that1.OutputIndex {
		return false
	}
	return true
}
func (this *Feed) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Feed)
	if !ok {
		that2, ok := that.(Feed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !this.Shape.Equal(that1.Shape) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *Fetch) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Fetch)
	if !ok {
		that2, ok := that.(Fetch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *Config) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Config)
	if !ok {
		that2, ok := that.(Config)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Feed) != len(that1.Feed) {
		return false
	}
	for i := range this.Feed {
		if !this.Feed[i].Equal(that1.Feed[i]) {
			return false
		}
	}
	if len(this.Fetch) != len(that1.Fetch) {
		return false
	}
	for i := range this.Fetch {
		if !this.Fetch[i].Equal(that1.Fetch[i]) {
			return false
		}
	}
	return true
}
func (this *TensorId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow_tfcompile.TensorId{")
	s = append(s, "NodeName: "+fmt.Sprintf("%#v", this.NodeName)+",\n")
	s = append(s, "OutputIndex: "+fmt.Sprintf("%#v", this.OutputIndex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Feed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tensorflow_tfcompile.Feed{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.Shape != nil {
		s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Fetch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow_tfcompile.Fetch{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Config) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow_tfcompile.Config{")
	if this.Feed != nil {
		s = append(s, "Feed: "+fmt.Sprintf("%#v", this.Feed)+",\n")
	}
	if this.Fetch != nil {
		s = append(s, "Fetch: "+fmt.Sprintf("%#v", this.Fetch)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTfcompile(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TensorId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTfcompile(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	if m.OutputIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTfcompile(dAtA, i, uint64(m.OutputIndex))
	}
	return i, nil
}

func (m *Feed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Feed) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTfcompile(dAtA, i, uint64(m.Id.Size()))
		n1, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Shape != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTfcompile(dAtA, i, uint64(m.Shape.Size()))
		n2, err := m.Shape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTfcompile(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTfcompile(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *Fetch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fetch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTfcompile(dAtA, i, uint64(m.Id.Size()))
		n3, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTfcompile(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Feed) > 0 {
		for _, msg := range m.Feed {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTfcompile(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Fetch) > 0 {
		for _, msg := range m.Fetch {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTfcompile(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Tfcompile(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Tfcompile(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTfcompile(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TensorId) Size() (n int) {
	var l int
	_ = l
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovTfcompile(uint64(l))
	}
	if m.OutputIndex != 0 {
		n += 1 + sovTfcompile(uint64(m.OutputIndex))
	}
	return n
}

func (m *Feed) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovTfcompile(uint64(l))
	}
	if m.Shape != nil {
		l = m.Shape.Size()
		n += 1 + l + sovTfcompile(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTfcompile(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTfcompile(uint64(m.Type))
	}
	return n
}

func (m *Fetch) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovTfcompile(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTfcompile(uint64(l))
	}
	return n
}

func (m *Config) Size() (n int) {
	var l int
	_ = l
	if len(m.Feed) > 0 {
		for _, e := range m.Feed {
			l = e.Size()
			n += 1 + l + sovTfcompile(uint64(l))
		}
	}
	if len(m.Fetch) > 0 {
		for _, e := range m.Fetch {
			l = e.Size()
			n += 1 + l + sovTfcompile(uint64(l))
		}
	}
	return n
}

func sovTfcompile(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTfcompile(x uint64) (n int) {
	return sovTfcompile(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TensorId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TensorId{`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`OutputIndex:` + fmt.Sprintf("%v", this.OutputIndex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Feed{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "TensorId", "TensorId", 1) + `,`,
		`Shape:` + strings.Replace(fmt.Sprintf("%v", this.Shape), "TensorShapeProto", "tensorflow.TensorShapeProto", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Fetch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Fetch{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "TensorId", "TensorId", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Config) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Config{`,
		`Feed:` + strings.Replace(fmt.Sprintf("%v", this.Feed), "Feed", "Feed", 1) + `,`,
		`Fetch:` + strings.Replace(fmt.Sprintf("%v", this.Fetch), "Fetch", "Fetch", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTfcompile(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TensorId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTfcompile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfcompile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTfcompile
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputIndex", wireType)
			}
			m.OutputIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfcompile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputIndex |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTfcompile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTfcompile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Feed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTfcompile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Feed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Feed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfcompile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTfcompile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &TensorId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfcompile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTfcompile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shape == nil {
				m.Shape = &tensorflow.TensorShapeProto{}
			}
			if err := m.Shape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfcompile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTfcompile
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfcompile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (tensorflow1.DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTfcompile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTfcompile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fetch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTfcompile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fetch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fetch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfcompile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTfcompile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &TensorId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfcompile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTfcompile
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTfcompile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTfcompile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTfcompile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfcompile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTfcompile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feed = append(m.Feed, &Feed{})
			if err := m.Feed[len(m.Feed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fetch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfcompile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTfcompile
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fetch = append(m.Fetch, &Fetch{})
			if err := m.Fetch[len(m.Fetch)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTfcompile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTfcompile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTfcompile(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTfcompile
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTfcompile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTfcompile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTfcompile
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTfcompile
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTfcompile(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTfcompile = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTfcompile   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/compiler/aot/tfcompile.proto", fileDescriptorTfcompile)
}

var fileDescriptorTfcompile = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x6a, 0xea, 0x40,
	0x14, 0x86, 0x33, 0x31, 0x8a, 0x4e, 0xee, 0xbd, 0x8b, 0xc1, 0x45, 0xd0, 0xcb, 0xe0, 0x0d, 0x5c,
	0xc8, 0xa2, 0x24, 0x6d, 0xfa, 0x06, 0x5a, 0x04, 0x5b, 0x28, 0x92, 0xba, 0xea, 0x46, 0xa2, 0x99,
	0x68, 0xd0, 0x64, 0x42, 0x32, 0x62, 0xdd, 0xf5, 0x11, 0xfa, 0x18, 0x3e, 0x4a, 0x97, 0x2e, 0xbb,
	0xac, 0xe9, 0xa6, 0x4b, 0x97, 0x5d, 0x96, 0x99, 0x68, 0xb5, 0x60, 0x0b, 0xdd, 0x4d, 0xce, 0x7c,
	0xe7, 0x3b, 0xff, 0x1c, 0x02, 0x4f, 0xe3, 0x84, 0x32, 0x3a, 0x98, 0xf9, 0x16, 0x23, 0x51, 0x4a,
	0x13, 0x7f, 0x4a, 0xe7, 0xd6, 0x90, 0x86, 0x71, 0x30, 0x25, 0x89, 0xe5, 0x52, 0x66, 0x31, 0x7f,
	0xfb, 0x69, 0x0a, 0x14, 0x55, 0xf7, 0xa0, 0xf9, 0x71, 0x57, 0x3b, 0xf9, 0xd4, 0x9e, 0x10, 0xcb,
	0x4f, 0xdc, 0x90, 0xcc, 0x69, 0x32, 0xd9, 0x8a, 0xfb, 0xe9, 0xd8, 0x8d, 0xb7, 0x8e, 0xda, 0xff,
	0x6f, 0xe8, 0x45, 0x4c, 0xd2, 0x1c, 0xd3, 0x2f, 0x61, 0xb9, 0x27, 0xc0, 0x8e, 0x87, 0xea, 0xb0,
	0x12, 0x51, 0x8f, 0xf4, 0x23, 0x37, 0x24, 0x1a, 0x68, 0x00, 0xa3, 0xe2, 0x94, 0x79, 0xe1, 0xda,
	0x0d, 0x09, 0xfa, 0x07, 0x7f, 0xd1, 0x19, 0x8b, 0x67, 0xac, 0x1f, 0x44, 0x1e, 0xb9, 0xd3, 0xe4,
	0x06, 0x30, 0x0a, 0x8e, 0x9a, 0xd7, 0x3a, 0xbc, 0xa4, 0x2f, 0x01, 0x54, 0xda, 0x84, 0x78, 0xc8,
	0x84, 0x72, 0xe0, 0x09, 0x83, 0x6a, 0x63, 0xf3, 0xd8, 0x63, 0xcc, 0xdd, 0x50, 0x47, 0x0e, 0x3c,
	0x64, 0xc3, 0xa2, 0x88, 0x2e, 0xa4, 0xaa, 0xfd, 0xf7, 0xb0, 0x25, 0x07, 0x6f, 0xf8, 0x75, 0x97,
	0x27, 0x76, 0x72, 0x14, 0x21, 0xa8, 0x88, 0x9c, 0x05, 0x91, 0x53, 0x9c, 0x91, 0x01, 0x15, 0xfe,
	0x36, 0x4d, 0x69, 0x00, 0xe3, 0x8f, 0x5d, 0x3d, 0xd4, 0x5c, 0xb8, 0xcc, 0xed, 0x2d, 0x62, 0xe2,
	0x08, 0x42, 0xbf, 0x82, 0xc5, 0x36, 0x61, 0xc3, 0xf1, 0x8f, 0xa3, 0xee, 0xc6, 0xca, 0xfb, 0xb1,
	0xfa, 0x04, 0x96, 0x5a, 0x34, 0xf2, 0x83, 0x11, 0x32, 0xa1, 0xe2, 0x13, 0xc2, 0x7d, 0x05, 0x43,
	0xb5, 0x6b, 0xc7, 0x7d, 0x7c, 0x45, 0x8e, 0xe0, 0xd0, 0x19, 0x2c, 0xfa, 0x3c, 0x86, 0x26, 0x8b,
	0x86, 0xfa, 0x57, 0x0d, 0x6c, 0x38, 0x76, 0x72, 0xb2, 0x79, 0xbb, 0x5a, 0x63, 0xe9, 0x69, 0x8d,
	0xa5, 0xcd, 0x1a, 0x83, 0xfb, 0x0c, 0x83, 0x65, 0x86, 0xc1, 0x63, 0x86, 0xc1, 0x2a, 0xc3, 0xe0,
	0x39, 0xc3, 0xe0, 0x35, 0xc3, 0xd2, 0x26, 0xc3, 0xe0, 0xe1, 0x05, 0x4b, 0x50, 0xa3, 0xc9, 0xe8,
	0xa8, 0xb4, 0xf9, 0xbb, 0x95, 0x1f, 0xc4, 0x52, 0xd3, 0x2e, 0x78, 0x03, 0x60, 0x50, 0x12, 0xff,
	0xc4, 0xf9, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x99, 0x32, 0xd5, 0xb2, 0x02, 0x00, 0x00,
}
