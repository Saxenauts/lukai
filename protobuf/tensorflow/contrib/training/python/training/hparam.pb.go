// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/contrib/training/python/training/hparam.proto

/*
	Package tensorflow is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/contrib/training/python/training/hparam.proto

	It has these top-level messages:
		HParamDef
*/
package tensorflow

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import bytes "bytes"

import fmt "fmt"
import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Protocol buffer holding hyper parameters.
// Examples of hyper parameters:
//   learning_rate = 0.1,
//   num_hidden_units = 100,
//   activations = ['relu', 'tanh']
type HParamDef struct {
	Hparam map[string]*HParamDef_HParamType `protobuf:"bytes,1,rep,name=hparam" json:"hparam,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HParamDef) Reset()                    { *m = HParamDef{} }
func (*HParamDef) ProtoMessage()               {}
func (*HParamDef) Descriptor() ([]byte, []int) { return fileDescriptorHparam, []int{0} }

func (m *HParamDef) GetHparam() map[string]*HParamDef_HParamType {
	if m != nil {
		return m.Hparam
	}
	return nil
}

type HParamDef_BytesList struct {
	Value [][]byte `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *HParamDef_BytesList) Reset()                    { *m = HParamDef_BytesList{} }
func (*HParamDef_BytesList) ProtoMessage()               {}
func (*HParamDef_BytesList) Descriptor() ([]byte, []int) { return fileDescriptorHparam, []int{0, 0} }

func (m *HParamDef_BytesList) GetValue() [][]byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type HParamDef_FloatList struct {
	Value []float32 `protobuf:"fixed32,1,rep,packed,name=value" json:"value,omitempty"`
}

func (m *HParamDef_FloatList) Reset()                    { *m = HParamDef_FloatList{} }
func (*HParamDef_FloatList) ProtoMessage()               {}
func (*HParamDef_FloatList) Descriptor() ([]byte, []int) { return fileDescriptorHparam, []int{0, 1} }

func (m *HParamDef_FloatList) GetValue() []float32 {
	if m != nil {
		return m.Value
	}
	return nil
}

type HParamDef_Int64List struct {
	Value []int64 `protobuf:"varint,1,rep,packed,name=value" json:"value,omitempty"`
}

func (m *HParamDef_Int64List) Reset()                    { *m = HParamDef_Int64List{} }
func (*HParamDef_Int64List) ProtoMessage()               {}
func (*HParamDef_Int64List) Descriptor() ([]byte, []int) { return fileDescriptorHparam, []int{0, 2} }

func (m *HParamDef_Int64List) GetValue() []int64 {
	if m != nil {
		return m.Value
	}
	return nil
}

type HParamDef_BoolList struct {
	Value []bool `protobuf:"varint,1,rep,packed,name=value" json:"value,omitempty"`
}

func (m *HParamDef_BoolList) Reset()                    { *m = HParamDef_BoolList{} }
func (*HParamDef_BoolList) ProtoMessage()               {}
func (*HParamDef_BoolList) Descriptor() ([]byte, []int) { return fileDescriptorHparam, []int{0, 3} }

func (m *HParamDef_BoolList) GetValue() []bool {
	if m != nil {
		return m.Value
	}
	return nil
}

type HParamDef_HParamType struct {
	// Types that are valid to be assigned to Kind:
	//	*HParamDef_HParamType_Int64Value
	//	*HParamDef_HParamType_FloatValue
	//	*HParamDef_HParamType_BytesValue
	//	*HParamDef_HParamType_BoolValue
	//	*HParamDef_HParamType_Int64List
	//	*HParamDef_HParamType_FloatList
	//	*HParamDef_HParamType_BytesList
	//	*HParamDef_HParamType_BoolList
	Kind isHParamDef_HParamType_Kind `protobuf_oneof:"kind"`
}

func (m *HParamDef_HParamType) Reset()                    { *m = HParamDef_HParamType{} }
func (*HParamDef_HParamType) ProtoMessage()               {}
func (*HParamDef_HParamType) Descriptor() ([]byte, []int) { return fileDescriptorHparam, []int{0, 4} }

type isHParamDef_HParamType_Kind interface {
	isHParamDef_HParamType_Kind()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type HParamDef_HParamType_Int64Value struct {
	Int64Value int64 `protobuf:"varint,1,opt,name=int64_value,json=int64Value,proto3,oneof"`
}
type HParamDef_HParamType_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,proto3,oneof"`
}
type HParamDef_HParamType_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,3,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}
type HParamDef_HParamType_BoolValue struct {
	BoolValue bool `protobuf:"varint,7,opt,name=bool_value,json=boolValue,proto3,oneof"`
}
type HParamDef_HParamType_Int64List struct {
	Int64List *HParamDef_Int64List `protobuf:"bytes,4,opt,name=int64_list,json=int64List,oneof"`
}
type HParamDef_HParamType_FloatList struct {
	FloatList *HParamDef_FloatList `protobuf:"bytes,5,opt,name=float_list,json=floatList,oneof"`
}
type HParamDef_HParamType_BytesList struct {
	BytesList *HParamDef_BytesList `protobuf:"bytes,6,opt,name=bytes_list,json=bytesList,oneof"`
}
type HParamDef_HParamType_BoolList struct {
	BoolList *HParamDef_BoolList `protobuf:"bytes,8,opt,name=bool_list,json=boolList,oneof"`
}

func (*HParamDef_HParamType_Int64Value) isHParamDef_HParamType_Kind() {}
func (*HParamDef_HParamType_FloatValue) isHParamDef_HParamType_Kind() {}
func (*HParamDef_HParamType_BytesValue) isHParamDef_HParamType_Kind() {}
func (*HParamDef_HParamType_BoolValue) isHParamDef_HParamType_Kind()  {}
func (*HParamDef_HParamType_Int64List) isHParamDef_HParamType_Kind()  {}
func (*HParamDef_HParamType_FloatList) isHParamDef_HParamType_Kind()  {}
func (*HParamDef_HParamType_BytesList) isHParamDef_HParamType_Kind()  {}
func (*HParamDef_HParamType_BoolList) isHParamDef_HParamType_Kind()   {}

func (m *HParamDef_HParamType) GetKind() isHParamDef_HParamType_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *HParamDef_HParamType) GetInt64Value() int64 {
	if x, ok := m.GetKind().(*HParamDef_HParamType_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *HParamDef_HParamType) GetFloatValue() float32 {
	if x, ok := m.GetKind().(*HParamDef_HParamType_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *HParamDef_HParamType) GetBytesValue() []byte {
	if x, ok := m.GetKind().(*HParamDef_HParamType_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (m *HParamDef_HParamType) GetBoolValue() bool {
	if x, ok := m.GetKind().(*HParamDef_HParamType_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *HParamDef_HParamType) GetInt64List() *HParamDef_Int64List {
	if x, ok := m.GetKind().(*HParamDef_HParamType_Int64List); ok {
		return x.Int64List
	}
	return nil
}

func (m *HParamDef_HParamType) GetFloatList() *HParamDef_FloatList {
	if x, ok := m.GetKind().(*HParamDef_HParamType_FloatList); ok {
		return x.FloatList
	}
	return nil
}

func (m *HParamDef_HParamType) GetBytesList() *HParamDef_BytesList {
	if x, ok := m.GetKind().(*HParamDef_HParamType_BytesList); ok {
		return x.BytesList
	}
	return nil
}

func (m *HParamDef_HParamType) GetBoolList() *HParamDef_BoolList {
	if x, ok := m.GetKind().(*HParamDef_HParamType_BoolList); ok {
		return x.BoolList
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HParamDef_HParamType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HParamDef_HParamType_OneofMarshaler, _HParamDef_HParamType_OneofUnmarshaler, _HParamDef_HParamType_OneofSizer, []interface{}{
		(*HParamDef_HParamType_Int64Value)(nil),
		(*HParamDef_HParamType_FloatValue)(nil),
		(*HParamDef_HParamType_BytesValue)(nil),
		(*HParamDef_HParamType_BoolValue)(nil),
		(*HParamDef_HParamType_Int64List)(nil),
		(*HParamDef_HParamType_FloatList)(nil),
		(*HParamDef_HParamType_BytesList)(nil),
		(*HParamDef_HParamType_BoolList)(nil),
	}
}

func _HParamDef_HParamType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HParamDef_HParamType)
	// kind
	switch x := m.Kind.(type) {
	case *HParamDef_HParamType_Int64Value:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Int64Value))
	case *HParamDef_HParamType_FloatValue:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.FloatValue)))
	case *HParamDef_HParamType_BytesValue:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.BytesValue)
	case *HParamDef_HParamType_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		_ = b.EncodeVarint(7<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *HParamDef_HParamType_Int64List:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Int64List); err != nil {
			return err
		}
	case *HParamDef_HParamType_FloatList:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FloatList); err != nil {
			return err
		}
	case *HParamDef_HParamType_BytesList:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BytesList); err != nil {
			return err
		}
	case *HParamDef_HParamType_BoolList:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BoolList); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HParamDef_HParamType.Kind has unexpected type %T", x)
	}
	return nil
}

func _HParamDef_HParamType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HParamDef_HParamType)
	switch tag {
	case 1: // kind.int64_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &HParamDef_HParamType_Int64Value{int64(x)}
		return true, err
	case 2: // kind.float_value
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Kind = &HParamDef_HParamType_FloatValue{math.Float32frombits(uint32(x))}
		return true, err
	case 3: // kind.bytes_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Kind = &HParamDef_HParamType_BytesValue{x}
		return true, err
	case 7: // kind.bool_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Kind = &HParamDef_HParamType_BoolValue{x != 0}
		return true, err
	case 4: // kind.int64_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HParamDef_Int64List)
		err := b.DecodeMessage(msg)
		m.Kind = &HParamDef_HParamType_Int64List{msg}
		return true, err
	case 5: // kind.float_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HParamDef_FloatList)
		err := b.DecodeMessage(msg)
		m.Kind = &HParamDef_HParamType_FloatList{msg}
		return true, err
	case 6: // kind.bytes_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HParamDef_BytesList)
		err := b.DecodeMessage(msg)
		m.Kind = &HParamDef_HParamType_BytesList{msg}
		return true, err
	case 8: // kind.bool_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HParamDef_BoolList)
		err := b.DecodeMessage(msg)
		m.Kind = &HParamDef_HParamType_BoolList{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HParamDef_HParamType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HParamDef_HParamType)
	// kind
	switch x := m.Kind.(type) {
	case *HParamDef_HParamType_Int64Value:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int64Value))
	case *HParamDef_HParamType_FloatValue:
		n += proto.SizeVarint(2<<3 | proto.WireFixed32)
		n += 4
	case *HParamDef_HParamType_BytesValue:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.BytesValue)))
		n += len(x.BytesValue)
	case *HParamDef_HParamType_BoolValue:
		n += proto.SizeVarint(7<<3 | proto.WireVarint)
		n += 1
	case *HParamDef_HParamType_Int64List:
		s := proto.Size(x.Int64List)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HParamDef_HParamType_FloatList:
		s := proto.Size(x.FloatList)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HParamDef_HParamType_BytesList:
		s := proto.Size(x.BytesList)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HParamDef_HParamType_BoolList:
		s := proto.Size(x.BoolList)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*HParamDef)(nil), "tensorflow.HParamDef")
	proto.RegisterType((*HParamDef_BytesList)(nil), "tensorflow.HParamDef.BytesList")
	proto.RegisterType((*HParamDef_FloatList)(nil), "tensorflow.HParamDef.FloatList")
	proto.RegisterType((*HParamDef_Int64List)(nil), "tensorflow.HParamDef.Int64List")
	proto.RegisterType((*HParamDef_BoolList)(nil), "tensorflow.HParamDef.BoolList")
	proto.RegisterType((*HParamDef_HParamType)(nil), "tensorflow.HParamDef.HParamType")
}
func (this *HParamDef) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HParamDef)
	if !ok {
		that2, ok := that.(HParamDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Hparam) != len(that1.Hparam) {
		return false
	}
	for i := range this.Hparam {
		if !this.Hparam[i].Equal(that1.Hparam[i]) {
			return false
		}
	}
	return true
}
func (this *HParamDef_BytesList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HParamDef_BytesList)
	if !ok {
		that2, ok := that.(HParamDef_BytesList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Value) != len(that1.Value) {
		return false
	}
	for i := range this.Value {
		if !bytes.Equal(this.Value[i], that1.Value[i]) {
			return false
		}
	}
	return true
}
func (this *HParamDef_FloatList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HParamDef_FloatList)
	if !ok {
		that2, ok := that.(HParamDef_FloatList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Value) != len(that1.Value) {
		return false
	}
	for i := range this.Value {
		if this.Value[i] != that1.Value[i] {
			return false
		}
	}
	return true
}
func (this *HParamDef_Int64List) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HParamDef_Int64List)
	if !ok {
		that2, ok := that.(HParamDef_Int64List)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Value) != len(that1.Value) {
		return false
	}
	for i := range this.Value {
		if this.Value[i] != that1.Value[i] {
			return false
		}
	}
	return true
}
func (this *HParamDef_BoolList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HParamDef_BoolList)
	if !ok {
		that2, ok := that.(HParamDef_BoolList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Value) != len(that1.Value) {
		return false
	}
	for i := range this.Value {
		if this.Value[i] != that1.Value[i] {
			return false
		}
	}
	return true
}
func (this *HParamDef_HParamType) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HParamDef_HParamType)
	if !ok {
		that2, ok := that.(HParamDef_HParamType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Kind == nil {
		if this.Kind != nil {
			return false
		}
	} else if this.Kind == nil {
		return false
	} else if !this.Kind.Equal(that1.Kind) {
		return false
	}
	return true
}
func (this *HParamDef_HParamType_Int64Value) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HParamDef_HParamType_Int64Value)
	if !ok {
		that2, ok := that.(HParamDef_HParamType_Int64Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Int64Value != that1.Int64Value {
		return false
	}
	return true
}
func (this *HParamDef_HParamType_FloatValue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HParamDef_HParamType_FloatValue)
	if !ok {
		that2, ok := that.(HParamDef_HParamType_FloatValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FloatValue != that1.FloatValue {
		return false
	}
	return true
}
func (this *HParamDef_HParamType_BytesValue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HParamDef_HParamType_BytesValue)
	if !ok {
		that2, ok := that.(HParamDef_HParamType_BytesValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.BytesValue, that1.BytesValue) {
		return false
	}
	return true
}
func (this *HParamDef_HParamType_BoolValue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HParamDef_HParamType_BoolValue)
	if !ok {
		that2, ok := that.(HParamDef_HParamType_BoolValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.BoolValue != that1.BoolValue {
		return false
	}
	return true
}
func (this *HParamDef_HParamType_Int64List) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HParamDef_HParamType_Int64List)
	if !ok {
		that2, ok := that.(HParamDef_HParamType_Int64List)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Int64List.Equal(that1.Int64List) {
		return false
	}
	return true
}
func (this *HParamDef_HParamType_FloatList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HParamDef_HParamType_FloatList)
	if !ok {
		that2, ok := that.(HParamDef_HParamType_FloatList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.FloatList.Equal(that1.FloatList) {
		return false
	}
	return true
}
func (this *HParamDef_HParamType_BytesList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HParamDef_HParamType_BytesList)
	if !ok {
		that2, ok := that.(HParamDef_HParamType_BytesList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.BytesList.Equal(that1.BytesList) {
		return false
	}
	return true
}
func (this *HParamDef_HParamType_BoolList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HParamDef_HParamType_BoolList)
	if !ok {
		that2, ok := that.(HParamDef_HParamType_BoolList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.BoolList.Equal(that1.BoolList) {
		return false
	}
	return true
}
func (this *HParamDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow.HParamDef{")
	keysForHparam := make([]string, 0, len(this.Hparam))
	for k, _ := range this.Hparam {
		keysForHparam = append(keysForHparam, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHparam)
	mapStringForHparam := "map[string]*HParamDef_HParamType{"
	for _, k := range keysForHparam {
		mapStringForHparam += fmt.Sprintf("%#v: %#v,", k, this.Hparam[k])
	}
	mapStringForHparam += "}"
	if this.Hparam != nil {
		s = append(s, "Hparam: "+mapStringForHparam+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HParamDef_BytesList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow.HParamDef_BytesList{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HParamDef_FloatList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow.HParamDef_FloatList{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HParamDef_Int64List) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow.HParamDef_Int64List{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HParamDef_BoolList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow.HParamDef_BoolList{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HParamDef_HParamType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&tensorflow.HParamDef_HParamType{")
	if this.Kind != nil {
		s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HParamDef_HParamType_Int64Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow.HParamDef_HParamType_Int64Value{` +
		`Int64Value:` + fmt.Sprintf("%#v", this.Int64Value) + `}`}, ", ")
	return s
}
func (this *HParamDef_HParamType_FloatValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow.HParamDef_HParamType_FloatValue{` +
		`FloatValue:` + fmt.Sprintf("%#v", this.FloatValue) + `}`}, ", ")
	return s
}
func (this *HParamDef_HParamType_BytesValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow.HParamDef_HParamType_BytesValue{` +
		`BytesValue:` + fmt.Sprintf("%#v", this.BytesValue) + `}`}, ", ")
	return s
}
func (this *HParamDef_HParamType_BoolValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow.HParamDef_HParamType_BoolValue{` +
		`BoolValue:` + fmt.Sprintf("%#v", this.BoolValue) + `}`}, ", ")
	return s
}
func (this *HParamDef_HParamType_Int64List) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow.HParamDef_HParamType_Int64List{` +
		`Int64List:` + fmt.Sprintf("%#v", this.Int64List) + `}`}, ", ")
	return s
}
func (this *HParamDef_HParamType_FloatList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow.HParamDef_HParamType_FloatList{` +
		`FloatList:` + fmt.Sprintf("%#v", this.FloatList) + `}`}, ", ")
	return s
}
func (this *HParamDef_HParamType_BytesList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow.HParamDef_HParamType_BytesList{` +
		`BytesList:` + fmt.Sprintf("%#v", this.BytesList) + `}`}, ", ")
	return s
}
func (this *HParamDef_HParamType_BoolList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow.HParamDef_HParamType_BoolList{` +
		`BoolList:` + fmt.Sprintf("%#v", this.BoolList) + `}`}, ", ")
	return s
}
func valueToGoStringHparam(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HParamDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HParamDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hparam) > 0 {
		for k, _ := range m.Hparam {
			dAtA[i] = 0xa
			i++
			v := m.Hparam[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovHparam(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovHparam(uint64(len(k))) + msgSize
			i = encodeVarintHparam(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintHparam(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintHparam(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *HParamDef_BytesList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HParamDef_BytesList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, b := range m.Value {
			dAtA[i] = 0xa
			i++
			i = encodeVarintHparam(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *HParamDef_FloatList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HParamDef_FloatList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHparam(dAtA, i, uint64(len(m.Value)*4))
		for _, num := range m.Value {
			f2 := math.Float32bits(float32(num))
			dAtA[i] = uint8(f2)
			i++
			dAtA[i] = uint8(f2 >> 8)
			i++
			dAtA[i] = uint8(f2 >> 16)
			i++
			dAtA[i] = uint8(f2 >> 24)
			i++
		}
	}
	return i, nil
}

func (m *HParamDef_Int64List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HParamDef_Int64List) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA4 := make([]byte, len(m.Value)*10)
		var j3 int
		for _, num1 := range m.Value {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintHparam(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *HParamDef_BoolList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HParamDef_BoolList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHparam(dAtA, i, uint64(len(m.Value)))
		for _, b := range m.Value {
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	return i, nil
}

func (m *HParamDef_HParamType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HParamDef_HParamType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Kind != nil {
		nn5, err := m.Kind.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	return i, nil
}

func (m *HParamDef_HParamType_Int64Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintHparam(dAtA, i, uint64(m.Int64Value))
	return i, nil
}
func (m *HParamDef_HParamType_FloatValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x15
	i++
	i = encodeFixed32Hparam(dAtA, i, uint32(math.Float32bits(float32(m.FloatValue))))
	return i, nil
}
func (m *HParamDef_HParamType_BytesValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BytesValue != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHparam(dAtA, i, uint64(len(m.BytesValue)))
		i += copy(dAtA[i:], m.BytesValue)
	}
	return i, nil
}
func (m *HParamDef_HParamType_Int64List) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Int64List != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintHparam(dAtA, i, uint64(m.Int64List.Size()))
		n6, err := m.Int64List.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *HParamDef_HParamType_FloatList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FloatList != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHparam(dAtA, i, uint64(m.FloatList.Size()))
		n7, err := m.FloatList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *HParamDef_HParamType_BytesList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BytesList != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintHparam(dAtA, i, uint64(m.BytesList.Size()))
		n8, err := m.BytesList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *HParamDef_HParamType_BoolValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x38
	i++
	if m.BoolValue {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *HParamDef_HParamType_BoolList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BoolList != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintHparam(dAtA, i, uint64(m.BoolList.Size()))
		n9, err := m.BoolList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func encodeFixed64Hparam(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Hparam(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintHparam(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HParamDef) Size() (n int) {
	var l int
	_ = l
	if len(m.Hparam) > 0 {
		for k, v := range m.Hparam {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHparam(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovHparam(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovHparam(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *HParamDef_BytesList) Size() (n int) {
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, b := range m.Value {
			l = len(b)
			n += 1 + l + sovHparam(uint64(l))
		}
	}
	return n
}

func (m *HParamDef_FloatList) Size() (n int) {
	var l int
	_ = l
	if len(m.Value) > 0 {
		n += 1 + sovHparam(uint64(len(m.Value)*4)) + len(m.Value)*4
	}
	return n
}

func (m *HParamDef_Int64List) Size() (n int) {
	var l int
	_ = l
	if len(m.Value) > 0 {
		l = 0
		for _, e := range m.Value {
			l += sovHparam(uint64(e))
		}
		n += 1 + sovHparam(uint64(l)) + l
	}
	return n
}

func (m *HParamDef_BoolList) Size() (n int) {
	var l int
	_ = l
	if len(m.Value) > 0 {
		n += 1 + sovHparam(uint64(len(m.Value))) + len(m.Value)*1
	}
	return n
}

func (m *HParamDef_HParamType) Size() (n int) {
	var l int
	_ = l
	if m.Kind != nil {
		n += m.Kind.Size()
	}
	return n
}

func (m *HParamDef_HParamType_Int64Value) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovHparam(uint64(m.Int64Value))
	return n
}
func (m *HParamDef_HParamType_FloatValue) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *HParamDef_HParamType_BytesValue) Size() (n int) {
	var l int
	_ = l
	if m.BytesValue != nil {
		l = len(m.BytesValue)
		n += 1 + l + sovHparam(uint64(l))
	}
	return n
}
func (m *HParamDef_HParamType_Int64List) Size() (n int) {
	var l int
	_ = l
	if m.Int64List != nil {
		l = m.Int64List.Size()
		n += 1 + l + sovHparam(uint64(l))
	}
	return n
}
func (m *HParamDef_HParamType_FloatList) Size() (n int) {
	var l int
	_ = l
	if m.FloatList != nil {
		l = m.FloatList.Size()
		n += 1 + l + sovHparam(uint64(l))
	}
	return n
}
func (m *HParamDef_HParamType_BytesList) Size() (n int) {
	var l int
	_ = l
	if m.BytesList != nil {
		l = m.BytesList.Size()
		n += 1 + l + sovHparam(uint64(l))
	}
	return n
}
func (m *HParamDef_HParamType_BoolValue) Size() (n int) {
	var l int
	_ = l
	n += 2
	return n
}
func (m *HParamDef_HParamType_BoolList) Size() (n int) {
	var l int
	_ = l
	if m.BoolList != nil {
		l = m.BoolList.Size()
		n += 1 + l + sovHparam(uint64(l))
	}
	return n
}

func sovHparam(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHparam(x uint64) (n int) {
	return sovHparam(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HParamDef) String() string {
	if this == nil {
		return "nil"
	}
	keysForHparam := make([]string, 0, len(this.Hparam))
	for k, _ := range this.Hparam {
		keysForHparam = append(keysForHparam, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHparam)
	mapStringForHparam := "map[string]*HParamDef_HParamType{"
	for _, k := range keysForHparam {
		mapStringForHparam += fmt.Sprintf("%v: %v,", k, this.Hparam[k])
	}
	mapStringForHparam += "}"
	s := strings.Join([]string{`&HParamDef{`,
		`Hparam:` + mapStringForHparam + `,`,
		`}`,
	}, "")
	return s
}
func (this *HParamDef_BytesList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HParamDef_BytesList{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HParamDef_FloatList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HParamDef_FloatList{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HParamDef_Int64List) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HParamDef_Int64List{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HParamDef_BoolList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HParamDef_BoolList{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HParamDef_HParamType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HParamDef_HParamType{`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HParamDef_HParamType_Int64Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HParamDef_HParamType_Int64Value{`,
		`Int64Value:` + fmt.Sprintf("%v", this.Int64Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HParamDef_HParamType_FloatValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HParamDef_HParamType_FloatValue{`,
		`FloatValue:` + fmt.Sprintf("%v", this.FloatValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HParamDef_HParamType_BytesValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HParamDef_HParamType_BytesValue{`,
		`BytesValue:` + fmt.Sprintf("%v", this.BytesValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HParamDef_HParamType_Int64List) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HParamDef_HParamType_Int64List{`,
		`Int64List:` + strings.Replace(fmt.Sprintf("%v", this.Int64List), "HParamDef_Int64List", "HParamDef_Int64List", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HParamDef_HParamType_FloatList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HParamDef_HParamType_FloatList{`,
		`FloatList:` + strings.Replace(fmt.Sprintf("%v", this.FloatList), "HParamDef_FloatList", "HParamDef_FloatList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HParamDef_HParamType_BytesList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HParamDef_HParamType_BytesList{`,
		`BytesList:` + strings.Replace(fmt.Sprintf("%v", this.BytesList), "HParamDef_BytesList", "HParamDef_BytesList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HParamDef_HParamType_BoolValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HParamDef_HParamType_BoolValue{`,
		`BoolValue:` + fmt.Sprintf("%v", this.BoolValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HParamDef_HParamType_BoolList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HParamDef_HParamType_BoolList{`,
		`BoolList:` + strings.Replace(fmt.Sprintf("%v", this.BoolList), "HParamDef_BoolList", "HParamDef_BoolList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringHparam(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HParamDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHparam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HParamDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HParamDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hparam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHparam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHparam
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hparam == nil {
				m.Hparam = make(map[string]*HParamDef_HParamType)
			}
			var mapkey string
			var mapvalue *HParamDef_HParamType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHparam
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHparam
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthHparam
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHparam
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHparam
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthHparam
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &HParamDef_HParamType{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHparam(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHparam
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Hparam[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHparam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHparam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HParamDef_BytesList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHparam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BytesList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BytesList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHparam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHparam
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, make([]byte, postIndex-iNdEx))
			copy(m.Value[len(m.Value)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHparam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHparam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HParamDef_FloatList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHparam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FloatList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FloatList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				v = uint32(dAtA[iNdEx-4])
				v |= uint32(dAtA[iNdEx-3]) << 8
				v |= uint32(dAtA[iNdEx-2]) << 16
				v |= uint32(dAtA[iNdEx-1]) << 24
				v2 := float32(math.Float32frombits(v))
				m.Value = append(m.Value, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHparam
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHparam
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 4
					v = uint32(dAtA[iNdEx-4])
					v |= uint32(dAtA[iNdEx-3]) << 8
					v |= uint32(dAtA[iNdEx-2]) << 16
					v |= uint32(dAtA[iNdEx-1]) << 24
					v2 := float32(math.Float32frombits(v))
					m.Value = append(m.Value, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHparam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHparam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HParamDef_Int64List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHparam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Int64List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Int64List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHparam
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Value = append(m.Value, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHparam
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHparam
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHparam
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Value = append(m.Value, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHparam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHparam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HParamDef_BoolList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHparam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoolList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoolList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHparam
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Value = append(m.Value, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHparam
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthHparam
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHparam
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Value = append(m.Value, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHparam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHparam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HParamDef_HParamType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHparam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HParamType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HParamType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Value", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHparam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kind = &HParamDef_HParamType_Int64Value{v}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Kind = &HParamDef_HParamType_FloatValue{float32(math.Float32frombits(v))}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHparam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHparam
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Kind = &HParamDef_HParamType_BytesValue{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHparam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHparam
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HParamDef_Int64List{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &HParamDef_HParamType_Int64List{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHparam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHparam
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HParamDef_FloatList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &HParamDef_HParamType_FloatList{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHparam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHparam
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HParamDef_BytesList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &HParamDef_HParamType_BytesList{v}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHparam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Kind = &HParamDef_HParamType_BoolValue{b}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHparam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHparam
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HParamDef_BoolList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &HParamDef_HParamType_BoolList{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHparam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHparam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHparam(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHparam
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHparam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHparam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHparam
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHparam
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHparam(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHparam = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHparam   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/contrib/training/python/training/hparam.proto", fileDescriptorHparam)
}

var fileDescriptorHparam = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xbf, 0x6e, 0xd4, 0x40,
	0x10, 0xc6, 0x3d, 0x76, 0xee, 0xb0, 0xe7, 0x52, 0x44, 0x16, 0xc5, 0xe9, 0x8a, 0x8d, 0x0f, 0x81,
	0xe4, 0xea, 0x2c, 0x05, 0x14, 0x01, 0x12, 0xd2, 0x61, 0x01, 0x32, 0x12, 0x05, 0xb2, 0x10, 0x0d,
	0x45, 0x64, 0x83, 0x4d, 0x56, 0x31, 0xbb, 0x96, 0xbd, 0x01, 0xb9, 0xe3, 0x11, 0x78, 0x07, 0x1a,
	0x1e, 0x85, 0x32, 0x25, 0x65, 0xce, 0x34, 0x94, 0x29, 0x29, 0xd1, 0xee, 0x3a, 0x7b, 0x96, 0x42,
	0xd2, 0xed, 0x8e, 0x7f, 0xf3, 0xcd, 0x9f, 0x6f, 0x8d, 0x4f, 0xeb, 0x86, 0x0b, 0x9e, 0x9f, 0x96,
	0x91, 0x28, 0x58, 0xcb, 0x9b, 0xb2, 0xe2, 0x5f, 0xa2, 0xf7, 0x9c, 0x89, 0x86, 0xe6, 0x91, 0x68,
	0x32, 0xca, 0x28, 0xfb, 0x18, 0xd5, 0x9d, 0x38, 0xe6, 0x6c, 0x7b, 0x3f, 0xae, 0xb3, 0x26, 0xfb,
	0xb4, 0x52, 0xb9, 0x3e, 0x6e, 0x33, 0xef, 0x9c, 0x4f, 0xd0, 0x4b, 0x5e, 0xcb, 0x8f, 0xcf, 0x8a,
	0xd2, 0x7f, 0x84, 0x53, 0x4d, 0xce, 0x21, 0x70, 0xc2, 0xd9, 0xc1, 0x72, 0xb5, 0x45, 0x57, 0x06,
	0x5b, 0x25, 0x8a, 0x79, 0xce, 0x44, 0xd3, 0xa5, 0x43, 0xc2, 0x62, 0x89, 0x5e, 0xdc, 0x89, 0xa2,
	0x7d, 0x45, 0x5b, 0xe1, 0xdf, 0xc6, 0xc9, 0xe7, 0xac, 0x3a, 0x2d, 0x94, 0xcc, 0x6e, 0xaa, 0x2f,
	0x8b, 0x7b, 0xe8, 0xbd, 0xa8, 0x78, 0x26, 0x14, 0x32, 0x1f, 0x23, 0x76, 0x6c, 0xef, 0xc1, 0x08,
	0x7b, 0xc9, 0xc4, 0xe1, 0x83, 0xab, 0x98, 0x33, 0xc6, 0xee, 0xa2, 0x1b, 0x73, 0x5e, 0x5d, 0xa5,
	0xdc, 0x31, 0xf5, 0xdd, 0x41, 0xd4, 0x8d, 0xbf, 0xe9, 0xea, 0xc2, 0x5f, 0xe2, 0x8c, 0x4a, 0xed,
	0xa3, 0x4b, 0x1c, 0x42, 0x27, 0xb1, 0x52, 0x54, 0xc1, 0xb7, 0x32, 0x26, 0x91, 0x52, 0x76, 0x39,
	0x20, 0x76, 0x00, 0xa1, 0x2d, 0x11, 0x15, 0x34, 0x48, 0x2e, 0x67, 0x1d, 0x10, 0x27, 0x80, 0x70,
	0x57, 0x22, 0x2a, 0xa8, 0x91, 0x35, 0x6a, 0xcd, 0xa3, 0x8a, 0xb6, 0x62, 0xbe, 0x13, 0x40, 0x38,
	0x3b, 0xd8, 0xff, 0xff, 0x36, 0xcd, 0xb0, 0x89, 0x95, 0x7a, 0xd4, 0x4c, 0xbe, 0x46, 0x5d, 0x52,
	0x2b, 0x4c, 0x6e, 0x52, 0x30, 0x5b, 0x95, 0x0a, 0xa5, 0x59, 0xf1, 0x1a, 0x75, 0x47, 0x5a, 0x61,
	0x7a, 0x93, 0x82, 0xb1, 0x4e, 0x2a, 0xe4, 0xc6, 0xc7, 0x7d, 0xc4, 0x9c, 0xf3, 0x6a, 0x98, 0xf3,
	0x56, 0x00, 0xa1, 0xab, 0x00, 0xce, 0x2b, 0x3d, 0xe6, 0x13, 0x54, 0x17, 0x5d, 0xc1, 0x55, 0x15,
	0xc8, 0x35, 0x15, 0x06, 0xaf, 0x12, 0x2b, 0x75, 0xf3, 0xe1, 0x1c, 0x4f, 0x71, 0xe7, 0x84, 0xb2,
	0x0f, 0x8b, 0x77, 0x38, 0x1b, 0xbd, 0x29, 0x7f, 0x0f, 0x9d, 0x93, 0xa2, 0x53, 0xee, 0x78, 0xa9,
	0x3c, 0xfa, 0x87, 0x97, 0x06, 0xdb, 0xaa, 0x46, 0x70, 0xcd, 0xbb, 0x34, 0x46, 0x0f, 0xf6, 0x3f,
	0xb6, 0x1f, 0x42, 0x1c, 0x9d, 0x6d, 0x88, 0xf5, 0x6b, 0x43, 0xac, 0x8b, 0x0d, 0x81, 0xaf, 0x3d,
	0x81, 0x1f, 0x3d, 0x81, 0x9f, 0x3d, 0x81, 0xb3, 0x9e, 0xc0, 0x79, 0x4f, 0xe0, 0x4f, 0x4f, 0xac,
	0x8b, 0x9e, 0xc0, 0xb7, 0xdf, 0xc4, 0xfa, 0x0b, 0x90, 0x4f, 0xd5, 0x6f, 0x72, 0xff, 0x5f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xb8, 0x24, 0xec, 0xdd, 0x6b, 0x03, 0x00, 0x00,
}
