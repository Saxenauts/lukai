// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/contrib/session_bundle/manifest.proto

/*
	Package tensorflow_serving is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/contrib/session_bundle/manifest.proto

	It has these top-level messages:
		Signatures
		TensorBinding
		AssetFile
		Signature
		RegressionSignature
		ClassificationSignature
		GenericSignature
*/
package tensorflow_serving

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import fmt "fmt"
import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Signatures of model export.
type Signatures struct {
	// Default signature of the graph.
	// WARNING(break-tutorial-inline-code): The following code snippet is
	// in-lined in tutorials, please update tutorial documents accordingly
	// whenever code changes.
	DefaultSignature *Signature `protobuf:"bytes,1,opt,name=default_signature,json=defaultSignature" json:"default_signature,omitempty"`
	// Named signatures of the graph.
	NamedSignatures map[string]*Signature `protobuf:"bytes,2,rep,name=named_signatures,json=namedSignatures" json:"named_signatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Signatures) Reset()                    { *m = Signatures{} }
func (*Signatures) ProtoMessage()               {}
func (*Signatures) Descriptor() ([]byte, []int) { return fileDescriptorManifest, []int{0} }

func (m *Signatures) GetDefaultSignature() *Signature {
	if m != nil {
		return m.DefaultSignature
	}
	return nil
}

func (m *Signatures) GetNamedSignatures() map[string]*Signature {
	if m != nil {
		return m.NamedSignatures
	}
	return nil
}

// A binding to a tensor including the name and, possibly in the future, type
// or other metadata. For example, this may specify whether a tensor supports
// batch vs single inference.
type TensorBinding struct {
	// The name of the tensor to bind to.
	TensorName string `protobuf:"bytes,1,opt,name=tensor_name,json=tensorName,proto3" json:"tensor_name,omitempty"`
}

func (m *TensorBinding) Reset()                    { *m = TensorBinding{} }
func (*TensorBinding) ProtoMessage()               {}
func (*TensorBinding) Descriptor() ([]byte, []int) { return fileDescriptorManifest, []int{1} }

func (m *TensorBinding) GetTensorName() string {
	if m != nil {
		return m.TensorName
	}
	return ""
}

// An asset file or set of sharded files with the same name that will be bound
// to a tensor at init / session_bundle load time.
type AssetFile struct {
	// The tensor to bind the asset filename to.
	TensorBinding *TensorBinding `protobuf:"bytes,1,opt,name=tensor_binding,json=tensorBinding" json:"tensor_binding,omitempty"`
	// The filename within the assets directory. Note: does not include the base
	// path or asset directory prefix. Base paths can and will change when models
	// are deployed for serving.
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (m *AssetFile) Reset()                    { *m = AssetFile{} }
func (*AssetFile) ProtoMessage()               {}
func (*AssetFile) Descriptor() ([]byte, []int) { return fileDescriptorManifest, []int{2} }

func (m *AssetFile) GetTensorBinding() *TensorBinding {
	if m != nil {
		return m.TensorBinding
	}
	return nil
}

func (m *AssetFile) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

// A Signature specifies the inputs and outputs of commonly used graphs.
type Signature struct {
	// Types that are valid to be assigned to Type:
	//	*Signature_RegressionSignature
	//	*Signature_ClassificationSignature
	//	*Signature_GenericSignature
	Type isSignature_Type `protobuf_oneof:"type"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptorManifest, []int{3} }

type isSignature_Type interface {
	isSignature_Type()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Signature_RegressionSignature struct {
	RegressionSignature *RegressionSignature `protobuf:"bytes,1,opt,name=regression_signature,json=regressionSignature,oneof"`
}
type Signature_ClassificationSignature struct {
	ClassificationSignature *ClassificationSignature `protobuf:"bytes,2,opt,name=classification_signature,json=classificationSignature,oneof"`
}
type Signature_GenericSignature struct {
	GenericSignature *GenericSignature `protobuf:"bytes,3,opt,name=generic_signature,json=genericSignature,oneof"`
}

func (*Signature_RegressionSignature) isSignature_Type()     {}
func (*Signature_ClassificationSignature) isSignature_Type() {}
func (*Signature_GenericSignature) isSignature_Type()        {}

func (m *Signature) GetType() isSignature_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Signature) GetRegressionSignature() *RegressionSignature {
	if x, ok := m.GetType().(*Signature_RegressionSignature); ok {
		return x.RegressionSignature
	}
	return nil
}

func (m *Signature) GetClassificationSignature() *ClassificationSignature {
	if x, ok := m.GetType().(*Signature_ClassificationSignature); ok {
		return x.ClassificationSignature
	}
	return nil
}

func (m *Signature) GetGenericSignature() *GenericSignature {
	if x, ok := m.GetType().(*Signature_GenericSignature); ok {
		return x.GenericSignature
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Signature) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Signature_OneofMarshaler, _Signature_OneofUnmarshaler, _Signature_OneofSizer, []interface{}{
		(*Signature_RegressionSignature)(nil),
		(*Signature_ClassificationSignature)(nil),
		(*Signature_GenericSignature)(nil),
	}
}

func _Signature_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Signature)
	// type
	switch x := m.Type.(type) {
	case *Signature_RegressionSignature:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RegressionSignature); err != nil {
			return err
		}
	case *Signature_ClassificationSignature:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClassificationSignature); err != nil {
			return err
		}
	case *Signature_GenericSignature:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GenericSignature); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Signature.Type has unexpected type %T", x)
	}
	return nil
}

func _Signature_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Signature)
	switch tag {
	case 1: // type.regression_signature
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RegressionSignature)
		err := b.DecodeMessage(msg)
		m.Type = &Signature_RegressionSignature{msg}
		return true, err
	case 2: // type.classification_signature
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClassificationSignature)
		err := b.DecodeMessage(msg)
		m.Type = &Signature_ClassificationSignature{msg}
		return true, err
	case 3: // type.generic_signature
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GenericSignature)
		err := b.DecodeMessage(msg)
		m.Type = &Signature_GenericSignature{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Signature_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Signature)
	// type
	switch x := m.Type.(type) {
	case *Signature_RegressionSignature:
		s := proto.Size(x.RegressionSignature)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Signature_ClassificationSignature:
		s := proto.Size(x.ClassificationSignature)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Signature_GenericSignature:
		s := proto.Size(x.GenericSignature)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// RegressionSignature specifies a graph that takes an input and returns an
// output.
type RegressionSignature struct {
	Input  *TensorBinding `protobuf:"bytes,1,opt,name=input" json:"input,omitempty"`
	Output *TensorBinding `protobuf:"bytes,2,opt,name=output" json:"output,omitempty"`
}

func (m *RegressionSignature) Reset()                    { *m = RegressionSignature{} }
func (*RegressionSignature) ProtoMessage()               {}
func (*RegressionSignature) Descriptor() ([]byte, []int) { return fileDescriptorManifest, []int{4} }

func (m *RegressionSignature) GetInput() *TensorBinding {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *RegressionSignature) GetOutput() *TensorBinding {
	if m != nil {
		return m.Output
	}
	return nil
}

// ClassificationSignature specifies a graph that takes an input and returns
// classes and their scores.
// WARNING(break-tutorial-inline-code): The following code snippet is
// in-lined in tutorials, please update tutorial documents accordingly
// whenever code changes.
type ClassificationSignature struct {
	Input   *TensorBinding `protobuf:"bytes,1,opt,name=input" json:"input,omitempty"`
	Classes *TensorBinding `protobuf:"bytes,2,opt,name=classes" json:"classes,omitempty"`
	Scores  *TensorBinding `protobuf:"bytes,3,opt,name=scores" json:"scores,omitempty"`
}

func (m *ClassificationSignature) Reset()                    { *m = ClassificationSignature{} }
func (*ClassificationSignature) ProtoMessage()               {}
func (*ClassificationSignature) Descriptor() ([]byte, []int) { return fileDescriptorManifest, []int{5} }

func (m *ClassificationSignature) GetInput() *TensorBinding {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *ClassificationSignature) GetClasses() *TensorBinding {
	if m != nil {
		return m.Classes
	}
	return nil
}

func (m *ClassificationSignature) GetScores() *TensorBinding {
	if m != nil {
		return m.Scores
	}
	return nil
}

// GenericSignature specifies a map from logical name to Tensor name.
// Typical application of GenericSignature is to use a single GenericSignature
// that includes all of the Tensor nodes and target names that may be useful at
// serving, analysis or debugging time. The recommended name for this signature
// in the ModelManifest is "generic_bindings".
type GenericSignature struct {
	Map map[string]*TensorBinding `protobuf:"bytes,1,rep,name=map" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GenericSignature) Reset()                    { *m = GenericSignature{} }
func (*GenericSignature) ProtoMessage()               {}
func (*GenericSignature) Descriptor() ([]byte, []int) { return fileDescriptorManifest, []int{6} }

func (m *GenericSignature) GetMap() map[string]*TensorBinding {
	if m != nil {
		return m.Map
	}
	return nil
}

func init() {
	proto.RegisterType((*Signatures)(nil), "tensorflow.serving.Signatures")
	proto.RegisterType((*TensorBinding)(nil), "tensorflow.serving.TensorBinding")
	proto.RegisterType((*AssetFile)(nil), "tensorflow.serving.AssetFile")
	proto.RegisterType((*Signature)(nil), "tensorflow.serving.Signature")
	proto.RegisterType((*RegressionSignature)(nil), "tensorflow.serving.RegressionSignature")
	proto.RegisterType((*ClassificationSignature)(nil), "tensorflow.serving.ClassificationSignature")
	proto.RegisterType((*GenericSignature)(nil), "tensorflow.serving.GenericSignature")
}
func (this *Signatures) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Signatures)
	if !ok {
		that2, ok := that.(Signatures)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DefaultSignature.Equal(that1.DefaultSignature) {
		return false
	}
	if len(this.NamedSignatures) != len(that1.NamedSignatures) {
		return false
	}
	for i := range this.NamedSignatures {
		if !this.NamedSignatures[i].Equal(that1.NamedSignatures[i]) {
			return false
		}
	}
	return true
}
func (this *TensorBinding) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TensorBinding)
	if !ok {
		that2, ok := that.(TensorBinding)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TensorName != that1.TensorName {
		return false
	}
	return true
}
func (this *AssetFile) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AssetFile)
	if !ok {
		that2, ok := that.(AssetFile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.TensorBinding.Equal(that1.TensorBinding) {
		return false
	}
	if this.Filename != that1.Filename {
		return false
	}
	return true
}
func (this *Signature) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Signature)
	if !ok {
		that2, ok := that.(Signature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Type == nil {
		if this.Type != nil {
			return false
		}
	} else if this.Type == nil {
		return false
	} else if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *Signature_RegressionSignature) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Signature_RegressionSignature)
	if !ok {
		that2, ok := that.(Signature_RegressionSignature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.RegressionSignature.Equal(that1.RegressionSignature) {
		return false
	}
	return true
}
func (this *Signature_ClassificationSignature) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Signature_ClassificationSignature)
	if !ok {
		that2, ok := that.(Signature_ClassificationSignature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.ClassificationSignature.Equal(that1.ClassificationSignature) {
		return false
	}
	return true
}
func (this *Signature_GenericSignature) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Signature_GenericSignature)
	if !ok {
		that2, ok := that.(Signature_GenericSignature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GenericSignature.Equal(that1.GenericSignature) {
		return false
	}
	return true
}
func (this *RegressionSignature) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RegressionSignature)
	if !ok {
		that2, ok := that.(RegressionSignature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if !this.Output.Equal(that1.Output) {
		return false
	}
	return true
}
func (this *ClassificationSignature) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ClassificationSignature)
	if !ok {
		that2, ok := that.(ClassificationSignature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if !this.Classes.Equal(that1.Classes) {
		return false
	}
	if !this.Scores.Equal(that1.Scores) {
		return false
	}
	return true
}
func (this *GenericSignature) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GenericSignature)
	if !ok {
		that2, ok := that.(GenericSignature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Map) != len(that1.Map) {
		return false
	}
	for i := range this.Map {
		if !this.Map[i].Equal(that1.Map[i]) {
			return false
		}
	}
	return true
}
func (this *Signatures) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow_serving.Signatures{")
	if this.DefaultSignature != nil {
		s = append(s, "DefaultSignature: "+fmt.Sprintf("%#v", this.DefaultSignature)+",\n")
	}
	keysForNamedSignatures := make([]string, 0, len(this.NamedSignatures))
	for k, _ := range this.NamedSignatures {
		keysForNamedSignatures = append(keysForNamedSignatures, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNamedSignatures)
	mapStringForNamedSignatures := "map[string]*Signature{"
	for _, k := range keysForNamedSignatures {
		mapStringForNamedSignatures += fmt.Sprintf("%#v: %#v,", k, this.NamedSignatures[k])
	}
	mapStringForNamedSignatures += "}"
	if this.NamedSignatures != nil {
		s = append(s, "NamedSignatures: "+mapStringForNamedSignatures+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TensorBinding) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow_serving.TensorBinding{")
	s = append(s, "TensorName: "+fmt.Sprintf("%#v", this.TensorName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AssetFile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow_serving.AssetFile{")
	if this.TensorBinding != nil {
		s = append(s, "TensorBinding: "+fmt.Sprintf("%#v", this.TensorBinding)+",\n")
	}
	s = append(s, "Filename: "+fmt.Sprintf("%#v", this.Filename)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Signature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensorflow_serving.Signature{")
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Signature_RegressionSignature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_serving.Signature_RegressionSignature{` +
		`RegressionSignature:` + fmt.Sprintf("%#v", this.RegressionSignature) + `}`}, ", ")
	return s
}
func (this *Signature_ClassificationSignature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_serving.Signature_ClassificationSignature{` +
		`ClassificationSignature:` + fmt.Sprintf("%#v", this.ClassificationSignature) + `}`}, ", ")
	return s
}
func (this *Signature_GenericSignature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_serving.Signature_GenericSignature{` +
		`GenericSignature:` + fmt.Sprintf("%#v", this.GenericSignature) + `}`}, ", ")
	return s
}
func (this *RegressionSignature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow_serving.RegressionSignature{")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	if this.Output != nil {
		s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClassificationSignature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensorflow_serving.ClassificationSignature{")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	if this.Classes != nil {
		s = append(s, "Classes: "+fmt.Sprintf("%#v", this.Classes)+",\n")
	}
	if this.Scores != nil {
		s = append(s, "Scores: "+fmt.Sprintf("%#v", this.Scores)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenericSignature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow_serving.GenericSignature{")
	keysForMap := make([]string, 0, len(this.Map))
	for k, _ := range this.Map {
		keysForMap = append(keysForMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMap)
	mapStringForMap := "map[string]*TensorBinding{"
	for _, k := range keysForMap {
		mapStringForMap += fmt.Sprintf("%#v: %#v,", k, this.Map[k])
	}
	mapStringForMap += "}"
	if this.Map != nil {
		s = append(s, "Map: "+mapStringForMap+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringManifest(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Signatures) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signatures) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DefaultSignature != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.DefaultSignature.Size()))
		n1, err := m.DefaultSignature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.NamedSignatures) > 0 {
		for k, _ := range m.NamedSignatures {
			dAtA[i] = 0x12
			i++
			v := m.NamedSignatures[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovManifest(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovManifest(uint64(len(k))) + msgSize
			i = encodeVarintManifest(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintManifest(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintManifest(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	return i, nil
}

func (m *TensorBinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorBinding) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TensorName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintManifest(dAtA, i, uint64(len(m.TensorName)))
		i += copy(dAtA[i:], m.TensorName)
	}
	return i, nil
}

func (m *AssetFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetFile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TensorBinding != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.TensorBinding.Size()))
		n3, err := m.TensorBinding.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Filename) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintManifest(dAtA, i, uint64(len(m.Filename)))
		i += copy(dAtA[i:], m.Filename)
	}
	return i, nil
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		nn4, err := m.Type.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	return i, nil
}

func (m *Signature_RegressionSignature) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RegressionSignature != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.RegressionSignature.Size()))
		n5, err := m.RegressionSignature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Signature_ClassificationSignature) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClassificationSignature != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.ClassificationSignature.Size()))
		n6, err := m.ClassificationSignature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Signature_GenericSignature) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GenericSignature != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.GenericSignature.Size()))
		n7, err := m.GenericSignature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *RegressionSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegressionSignature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Input != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.Input.Size()))
		n8, err := m.Input.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Output != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.Output.Size()))
		n9, err := m.Output.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *ClassificationSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassificationSignature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Input != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.Input.Size()))
		n10, err := m.Input.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Classes != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.Classes.Size()))
		n11, err := m.Classes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Scores != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.Scores.Size()))
		n12, err := m.Scores.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *GenericSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenericSignature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k, _ := range m.Map {
			dAtA[i] = 0xa
			i++
			v := m.Map[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovManifest(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovManifest(uint64(len(k))) + msgSize
			i = encodeVarintManifest(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintManifest(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintManifest(dAtA, i, uint64(v.Size()))
				n13, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n13
			}
		}
	}
	return i, nil
}

func encodeFixed64Manifest(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Manifest(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintManifest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Signatures) Size() (n int) {
	var l int
	_ = l
	if m.DefaultSignature != nil {
		l = m.DefaultSignature.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	if len(m.NamedSignatures) > 0 {
		for k, v := range m.NamedSignatures {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovManifest(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovManifest(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovManifest(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TensorBinding) Size() (n int) {
	var l int
	_ = l
	l = len(m.TensorName)
	if l > 0 {
		n += 1 + l + sovManifest(uint64(l))
	}
	return n
}

func (m *AssetFile) Size() (n int) {
	var l int
	_ = l
	if m.TensorBinding != nil {
		l = m.TensorBinding.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovManifest(uint64(l))
	}
	return n
}

func (m *Signature) Size() (n int) {
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *Signature_RegressionSignature) Size() (n int) {
	var l int
	_ = l
	if m.RegressionSignature != nil {
		l = m.RegressionSignature.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	return n
}
func (m *Signature_ClassificationSignature) Size() (n int) {
	var l int
	_ = l
	if m.ClassificationSignature != nil {
		l = m.ClassificationSignature.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	return n
}
func (m *Signature_GenericSignature) Size() (n int) {
	var l int
	_ = l
	if m.GenericSignature != nil {
		l = m.GenericSignature.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	return n
}
func (m *RegressionSignature) Size() (n int) {
	var l int
	_ = l
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	return n
}

func (m *ClassificationSignature) Size() (n int) {
	var l int
	_ = l
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	if m.Classes != nil {
		l = m.Classes.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	if m.Scores != nil {
		l = m.Scores.Size()
		n += 1 + l + sovManifest(uint64(l))
	}
	return n
}

func (m *GenericSignature) Size() (n int) {
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k, v := range m.Map {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovManifest(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovManifest(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovManifest(uint64(mapEntrySize))
		}
	}
	return n
}

func sovManifest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozManifest(x uint64) (n int) {
	return sovManifest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Signatures) String() string {
	if this == nil {
		return "nil"
	}
	keysForNamedSignatures := make([]string, 0, len(this.NamedSignatures))
	for k, _ := range this.NamedSignatures {
		keysForNamedSignatures = append(keysForNamedSignatures, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNamedSignatures)
	mapStringForNamedSignatures := "map[string]*Signature{"
	for _, k := range keysForNamedSignatures {
		mapStringForNamedSignatures += fmt.Sprintf("%v: %v,", k, this.NamedSignatures[k])
	}
	mapStringForNamedSignatures += "}"
	s := strings.Join([]string{`&Signatures{`,
		`DefaultSignature:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSignature), "Signature", "Signature", 1) + `,`,
		`NamedSignatures:` + mapStringForNamedSignatures + `,`,
		`}`,
	}, "")
	return s
}
func (this *TensorBinding) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TensorBinding{`,
		`TensorName:` + fmt.Sprintf("%v", this.TensorName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssetFile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssetFile{`,
		`TensorBinding:` + strings.Replace(fmt.Sprintf("%v", this.TensorBinding), "TensorBinding", "TensorBinding", 1) + `,`,
		`Filename:` + fmt.Sprintf("%v", this.Filename) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Signature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Signature{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Signature_RegressionSignature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Signature_RegressionSignature{`,
		`RegressionSignature:` + strings.Replace(fmt.Sprintf("%v", this.RegressionSignature), "RegressionSignature", "RegressionSignature", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Signature_ClassificationSignature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Signature_ClassificationSignature{`,
		`ClassificationSignature:` + strings.Replace(fmt.Sprintf("%v", this.ClassificationSignature), "ClassificationSignature", "ClassificationSignature", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Signature_GenericSignature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Signature_GenericSignature{`,
		`GenericSignature:` + strings.Replace(fmt.Sprintf("%v", this.GenericSignature), "GenericSignature", "GenericSignature", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegressionSignature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegressionSignature{`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "TensorBinding", "TensorBinding", 1) + `,`,
		`Output:` + strings.Replace(fmt.Sprintf("%v", this.Output), "TensorBinding", "TensorBinding", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClassificationSignature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClassificationSignature{`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "TensorBinding", "TensorBinding", 1) + `,`,
		`Classes:` + strings.Replace(fmt.Sprintf("%v", this.Classes), "TensorBinding", "TensorBinding", 1) + `,`,
		`Scores:` + strings.Replace(fmt.Sprintf("%v", this.Scores), "TensorBinding", "TensorBinding", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GenericSignature) String() string {
	if this == nil {
		return "nil"
	}
	keysForMap := make([]string, 0, len(this.Map))
	for k, _ := range this.Map {
		keysForMap = append(keysForMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMap)
	mapStringForMap := "map[string]*TensorBinding{"
	for _, k := range keysForMap {
		mapStringForMap += fmt.Sprintf("%v: %v,", k, this.Map[k])
	}
	mapStringForMap += "}"
	s := strings.Join([]string{`&GenericSignature{`,
		`Map:` + mapStringForMap + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringManifest(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Signatures) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signatures: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signatures: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultSignature == nil {
				m.DefaultSignature = &Signature{}
			}
			if err := m.DefaultSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamedSignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NamedSignatures == nil {
				m.NamedSignatures = make(map[string]*Signature)
			}
			var mapkey string
			var mapvalue *Signature
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManifest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManifest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthManifest
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManifest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthManifest
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthManifest
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Signature{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipManifest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthManifest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NamedSignatures[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TensorBinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorBinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorBinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TensorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorBinding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TensorBinding == nil {
				m.TensorBinding = &TensorBinding{}
			}
			if err := m.TensorBinding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegressionSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegressionSignature{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Signature_RegressionSignature{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassificationSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClassificationSignature{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Signature_ClassificationSignature{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenericSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GenericSignature{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Signature_GenericSignature{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegressionSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegressionSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegressionSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &TensorBinding{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &TensorBinding{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClassificationSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassificationSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassificationSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &TensorBinding{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Classes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Classes == nil {
				m.Classes = &TensorBinding{}
			}
			if err := m.Classes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scores == nil {
				m.Scores = &TensorBinding{}
			}
			if err := m.Scores.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = make(map[string]*TensorBinding)
			}
			var mapkey string
			var mapvalue *TensorBinding
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManifest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManifest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthManifest
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManifest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthManifest
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthManifest
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TensorBinding{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipManifest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthManifest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Map[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipManifest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthManifest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowManifest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipManifest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthManifest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowManifest   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/contrib/session_bundle/manifest.proto", fileDescriptorManifest)
}

var fileDescriptorManifest = []byte{
	// 556 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0x0e, 0x2d, 0xcd, 0x8b, 0x0a, 0xe9, 0xb5, 0x52, 0xa3, 0x48, 0x1c, 0xc5, 0x42,
	0xa2, 0x12, 0xe0, 0xa0, 0x66, 0x28, 0x85, 0x01, 0x11, 0x04, 0x54, 0x48, 0x30, 0xb8, 0x2c, 0x48,
	0x88, 0xc8, 0x71, 0xce, 0xe6, 0x84, 0x73, 0x36, 0xbe, 0x73, 0x51, 0x36, 0x56, 0x36, 0x76, 0xfe,
	0x01, 0x26, 0xc4, 0x9f, 0x81, 0x98, 0x3a, 0x32, 0x12, 0xb3, 0x30, 0xf6, 0x4f, 0x40, 0x3e, 0x3b,
	0x4e, 0x9c, 0x1a, 0x64, 0xb1, 0xe5, 0x5e, 0xde, 0xe7, 0x7d, 0xdf, 0x8f, 0x7c, 0x03, 0x07, 0x41,
	0xe8, 0x4b, 0x7f, 0x18, 0x39, 0x5d, 0x49, 0xb9, 0xf0, 0x43, 0xc7, 0xf3, 0xdf, 0x75, 0x6d, 0x9f,
	0xcb, 0x90, 0x0d, 0xbb, 0x82, 0x0a, 0xc1, 0x7c, 0x3e, 0x18, 0x46, 0x7c, 0xe4, 0xd1, 0xee, 0xd8,
	0xe2, 0xcc, 0xa1, 0x42, 0x1a, 0x8a, 0xc1, 0x78, 0x4e, 0x18, 0x82, 0x86, 0xc7, 0x8c, 0xbb, 0xfa,
	0x27, 0x0d, 0xe0, 0x88, 0xb9, 0xdc, 0x92, 0x51, 0x48, 0x05, 0x7e, 0x02, 0x1b, 0x23, 0xea, 0x58,
	0x91, 0x27, 0x07, 0x62, 0x16, 0x6d, 0xa3, 0x1d, 0xb4, 0xdb, 0xdc, 0xbb, 0x64, 0x9c, 0xc5, 0x8d,
	0x1c, 0x35, 0x5b, 0x19, 0x97, 0x47, 0xf0, 0x2b, 0x68, 0x71, 0x6b, 0x4c, 0x47, 0xf3, 0x4a, 0xa2,
	0xad, 0xed, 0xd4, 0x77, 0x9b, 0x7b, 0xbd, 0x7f, 0x96, 0x12, 0xc6, 0xb3, 0x04, 0x9b, 0xbf, 0x1f,
	0x72, 0x19, 0x4e, 0xcc, 0x8b, 0xbc, 0x18, 0xed, 0x58, 0xb0, 0x55, 0x96, 0x88, 0x5b, 0x50, 0x7f,
	0x43, 0x27, 0xaa, 0xeb, 0x86, 0x99, 0x7c, 0xc4, 0x3d, 0x58, 0x39, 0xb6, 0xbc, 0x88, 0xb6, 0xb5,
	0x2a, 0x93, 0xa4, 0xb9, 0x77, 0xb4, 0xdb, 0x48, 0xbf, 0x05, 0xeb, 0xcf, 0x55, 0x6a, 0x9f, 0xf1,
	0x11, 0xe3, 0x2e, 0xbe, 0x0c, 0xcd, 0x94, 0x1d, 0x24, 0xdd, 0x64, 0x1a, 0x90, 0x86, 0x92, 0x66,
	0xf4, 0xb7, 0xd0, 0xb8, 0x2f, 0x04, 0x95, 0x8f, 0x98, 0x47, 0xf1, 0x21, 0x5c, 0xc8, 0xb2, 0x87,
	0x29, 0x9f, 0xad, 0xf2, 0x4a, 0x59, 0x03, 0x05, 0x21, 0x73, 0x5d, 0x16, 0x74, 0x3b, 0xb0, 0xe6,
	0x30, 0x8f, 0x2a, 0x51, 0x4d, 0x89, 0xe6, 0x6f, 0xfd, 0xab, 0x06, 0x8d, 0xf9, 0xd6, 0x5f, 0xc2,
	0x56, 0x48, 0xdd, 0x30, 0xfb, 0x21, 0x2c, 0x1f, 0xf1, 0x5a, 0x99, 0xb2, 0x99, 0xe7, 0xe7, 0x65,
	0x0e, 0x6b, 0xe6, 0x66, 0x78, 0x36, 0x8c, 0x5f, 0x43, 0xdb, 0xf6, 0x2c, 0x21, 0x98, 0xc3, 0x6c,
	0x4b, 0x16, 0x15, 0xd2, 0xe5, 0x5e, 0x2f, 0x53, 0x78, 0x50, 0x60, 0x16, 0x55, 0xb6, 0xed, 0xf2,
	0xaf, 0xf0, 0x11, 0x6c, 0xb8, 0x94, 0xd3, 0x90, 0xd9, 0x0b, 0x12, 0x75, 0x25, 0x71, 0xb5, 0x4c,
	0xe2, 0x71, 0x9a, 0xbc, 0x58, 0xbb, 0xe5, 0x2e, 0xc5, 0xfa, 0xab, 0x70, 0x4e, 0x4e, 0x02, 0xaa,
	0x7f, 0x40, 0xb0, 0x59, 0x32, 0x35, 0xde, 0x87, 0x15, 0xc6, 0x83, 0x48, 0x56, 0xbf, 0x53, 0x9a,
	0x8f, 0x0f, 0x60, 0xd5, 0x8f, 0x64, 0x42, 0x6a, 0x55, 0xc9, 0x0c, 0xd0, 0xbf, 0x23, 0xd8, 0xfe,
	0xcb, 0x7e, 0xfe, 0xbf, 0x9f, 0xbb, 0x70, 0x5e, 0x2d, 0x56, 0x59, 0xae, 0x22, 0x3a, 0x23, 0x92,
	0x61, 0x84, 0xed, 0x27, 0x76, 0xad, 0x57, 0x1e, 0x26, 0x05, 0xf4, 0x2f, 0x08, 0x5a, 0xcb, 0x97,
	0xc0, 0xf7, 0xa0, 0x3e, 0xb6, 0x82, 0x36, 0x52, 0xde, 0xbf, 0x59, 0xe5, 0x78, 0xc6, 0x53, 0x2b,
	0x48, 0x5d, 0x9f, 0x90, 0x9d, 0x17, 0xb0, 0x36, 0x0b, 0x94, 0xb8, 0x7b, 0xbf, 0xe8, 0xee, 0x2a,
	0x4b, 0xca, 0x1d, 0xde, 0xbf, 0x71, 0x32, 0x25, 0xb5, 0x1f, 0x53, 0x52, 0x3b, 0x9d, 0x12, 0xf4,
	0x3e, 0x26, 0xe8, 0x73, 0x4c, 0xd0, 0xb7, 0x98, 0xa0, 0x93, 0x98, 0xa0, 0x9f, 0x31, 0x41, 0xbf,
	0x63, 0x52, 0x3b, 0x8d, 0x09, 0xfa, 0xf8, 0x8b, 0xd4, 0x86, 0xab, 0xea, 0x8f, 0xb4, 0xf7, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x3e, 0x4f, 0x4b, 0x01, 0x85, 0x05, 0x00, 0x00,
}
