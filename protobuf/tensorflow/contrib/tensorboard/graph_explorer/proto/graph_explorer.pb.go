// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/contrib/tensorboard/graph_explorer/proto/graph_explorer.proto

/*
	Package graph_explorer is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/contrib/tensorboard/graph_explorer/proto/graph_explorer.proto

	It has these top-level messages:
		Node
		Edge
		Graph
*/
package graph_explorer

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import fmt "fmt"
import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// There are two types of nodes. A 'metanode' contains other
// nodes and a 'leaf node' has no internal structure.  The metanode containment
// relationship is acyclic, meaning that if a metanode 'A' contains the metanode
// 'B', then 'B' cannot contain 'A'.
type Node struct {
	// The identifier of a node is a sequence of strings separated by '/'. The
	// identifier provides a unique name for a node and defines its hierarchical
	// relation to other nodes.  If no label is provided  the last part of the
	// identifier is used as a label.
	//
	// Example: In the graph below, metanodes are written with square brackets and
	// leaf nodes with parentheses. The metanode 'node1' contains the leaf node
	// 'node4' and the metanode 'node2', which contains the leaf node 'node3'.
	//
	//   [node1 [node2 (node3)] (node4)]
	//
	// The identifiers for these nodes are: "node1", "node1/node2",
	// "node1/node2/node3", and "node1/node4".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A node attribute is information used by Graph Explorer to style a node.
	NodeAttr map[string]string `protobuf:"bytes,2,rep,name=node_attr,json=nodeAttr" json:"node_attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A metanode attribute is one that is inherited by all nodes inside the
	// current metanode. If an attribute applies only to the current node and
	// should not be inherited, it should be specified as a node attribute.
	MetanodeAttr map[string]string `protobuf:"bytes,3,rep,name=metanode_attr,json=metanodeAttr" json:"metanode_attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptorGraphExplorer, []int{0} }

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetNodeAttr() map[string]string {
	if m != nil {
		return m.NodeAttr
	}
	return nil
}

func (m *Node) GetMetanodeAttr() map[string]string {
	if m != nil {
		return m.MetanodeAttr
	}
	return nil
}

// An edge consists of a source and a target node, specified by their
// identifiers. An edge has attributes and data that are similar to node
// attributes and node data. Edges do not form a hierarchy so there are no
// metanode attributes.
type Edge struct {
	// The source and target fields must have the format of a Node name.
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// Edge attributes.
	EdgeAttr map[string]string `protobuf:"bytes,3,rep,name=edge_attr,json=edgeAttr" json:"edge_attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Edge) Reset()                    { *m = Edge{} }
func (*Edge) ProtoMessage()               {}
func (*Edge) Descriptor() ([]byte, []int) { return fileDescriptorGraphExplorer, []int{1} }

func (m *Edge) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Edge) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Edge) GetEdgeAttr() map[string]string {
	if m != nil {
		return m.EdgeAttr
	}
	return nil
}

type Graph struct {
	// List of nodes in the graph.
	Node []*Node `protobuf:"bytes,1,rep,name=node" json:"node,omitempty"`
	// List of edges in the graph.
	Edge []*Edge `protobuf:"bytes,2,rep,name=edge" json:"edge,omitempty"`
	// Default values of node, metanode and edge attributes.
	NodeAttr     map[string]string `protobuf:"bytes,3,rep,name=node_attr,json=nodeAttr" json:"node_attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MetanodeAttr map[string]string `protobuf:"bytes,4,rep,name=metanode_attr,json=metanodeAttr" json:"metanode_attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EdgeAttr     map[string]string `protobuf:"bytes,5,rep,name=edge_attr,json=edgeAttr" json:"edge_attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Graph attributes.
	GraphAttr map[string]string `protobuf:"bytes,6,rep,name=graph_attr,json=graphAttr" json:"graph_attr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Graph) Reset()                    { *m = Graph{} }
func (*Graph) ProtoMessage()               {}
func (*Graph) Descriptor() ([]byte, []int) { return fileDescriptorGraphExplorer, []int{2} }

func (m *Graph) GetNode() []*Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *Graph) GetEdge() []*Edge {
	if m != nil {
		return m.Edge
	}
	return nil
}

func (m *Graph) GetNodeAttr() map[string]string {
	if m != nil {
		return m.NodeAttr
	}
	return nil
}

func (m *Graph) GetMetanodeAttr() map[string]string {
	if m != nil {
		return m.MetanodeAttr
	}
	return nil
}

func (m *Graph) GetEdgeAttr() map[string]string {
	if m != nil {
		return m.EdgeAttr
	}
	return nil
}

func (m *Graph) GetGraphAttr() map[string]string {
	if m != nil {
		return m.GraphAttr
	}
	return nil
}

func init() {
	proto.RegisterType((*Node)(nil), "graph_explorer.Node")
	proto.RegisterType((*Edge)(nil), "graph_explorer.Edge")
	proto.RegisterType((*Graph)(nil), "graph_explorer.Graph")
}
func (this *Node) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Node)
	if !ok {
		that2, ok := that.(Node)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.NodeAttr) != len(that1.NodeAttr) {
		return false
	}
	for i := range this.NodeAttr {
		if this.NodeAttr[i] != that1.NodeAttr[i] {
			return false
		}
	}
	if len(this.MetanodeAttr) != len(that1.MetanodeAttr) {
		return false
	}
	for i := range this.MetanodeAttr {
		if this.MetanodeAttr[i] != that1.MetanodeAttr[i] {
			return false
		}
	}
	return true
}
func (this *Edge) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Edge)
	if !ok {
		that2, ok := that.(Edge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if len(this.EdgeAttr) != len(that1.EdgeAttr) {
		return false
	}
	for i := range this.EdgeAttr {
		if this.EdgeAttr[i] != that1.EdgeAttr[i] {
			return false
		}
	}
	return true
}
func (this *Graph) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Graph)
	if !ok {
		that2, ok := that.(Graph)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Node) != len(that1.Node) {
		return false
	}
	for i := range this.Node {
		if !this.Node[i].Equal(that1.Node[i]) {
			return false
		}
	}
	if len(this.Edge) != len(that1.Edge) {
		return false
	}
	for i := range this.Edge {
		if !this.Edge[i].Equal(that1.Edge[i]) {
			return false
		}
	}
	if len(this.NodeAttr) != len(that1.NodeAttr) {
		return false
	}
	for i := range this.NodeAttr {
		if this.NodeAttr[i] != that1.NodeAttr[i] {
			return false
		}
	}
	if len(this.MetanodeAttr) != len(that1.MetanodeAttr) {
		return false
	}
	for i := range this.MetanodeAttr {
		if this.MetanodeAttr[i] != that1.MetanodeAttr[i] {
			return false
		}
	}
	if len(this.EdgeAttr) != len(that1.EdgeAttr) {
		return false
	}
	for i := range this.EdgeAttr {
		if this.EdgeAttr[i] != that1.EdgeAttr[i] {
			return false
		}
	}
	if len(this.GraphAttr) != len(that1.GraphAttr) {
		return false
	}
	for i := range this.GraphAttr {
		if this.GraphAttr[i] != that1.GraphAttr[i] {
			return false
		}
	}
	return true
}
func (this *Node) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&graph_explorer.Node{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	keysForNodeAttr := make([]string, 0, len(this.NodeAttr))
	for k, _ := range this.NodeAttr {
		keysForNodeAttr = append(keysForNodeAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNodeAttr)
	mapStringForNodeAttr := "map[string]string{"
	for _, k := range keysForNodeAttr {
		mapStringForNodeAttr += fmt.Sprintf("%#v: %#v,", k, this.NodeAttr[k])
	}
	mapStringForNodeAttr += "}"
	if this.NodeAttr != nil {
		s = append(s, "NodeAttr: "+mapStringForNodeAttr+",\n")
	}
	keysForMetanodeAttr := make([]string, 0, len(this.MetanodeAttr))
	for k, _ := range this.MetanodeAttr {
		keysForMetanodeAttr = append(keysForMetanodeAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetanodeAttr)
	mapStringForMetanodeAttr := "map[string]string{"
	for _, k := range keysForMetanodeAttr {
		mapStringForMetanodeAttr += fmt.Sprintf("%#v: %#v,", k, this.MetanodeAttr[k])
	}
	mapStringForMetanodeAttr += "}"
	if this.MetanodeAttr != nil {
		s = append(s, "MetanodeAttr: "+mapStringForMetanodeAttr+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Edge) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&graph_explorer.Edge{")
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	keysForEdgeAttr := make([]string, 0, len(this.EdgeAttr))
	for k, _ := range this.EdgeAttr {
		keysForEdgeAttr = append(keysForEdgeAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEdgeAttr)
	mapStringForEdgeAttr := "map[string]string{"
	for _, k := range keysForEdgeAttr {
		mapStringForEdgeAttr += fmt.Sprintf("%#v: %#v,", k, this.EdgeAttr[k])
	}
	mapStringForEdgeAttr += "}"
	if this.EdgeAttr != nil {
		s = append(s, "EdgeAttr: "+mapStringForEdgeAttr+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Graph) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&graph_explorer.Graph{")
	if this.Node != nil {
		s = append(s, "Node: "+fmt.Sprintf("%#v", this.Node)+",\n")
	}
	if this.Edge != nil {
		s = append(s, "Edge: "+fmt.Sprintf("%#v", this.Edge)+",\n")
	}
	keysForNodeAttr := make([]string, 0, len(this.NodeAttr))
	for k, _ := range this.NodeAttr {
		keysForNodeAttr = append(keysForNodeAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNodeAttr)
	mapStringForNodeAttr := "map[string]string{"
	for _, k := range keysForNodeAttr {
		mapStringForNodeAttr += fmt.Sprintf("%#v: %#v,", k, this.NodeAttr[k])
	}
	mapStringForNodeAttr += "}"
	if this.NodeAttr != nil {
		s = append(s, "NodeAttr: "+mapStringForNodeAttr+",\n")
	}
	keysForMetanodeAttr := make([]string, 0, len(this.MetanodeAttr))
	for k, _ := range this.MetanodeAttr {
		keysForMetanodeAttr = append(keysForMetanodeAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetanodeAttr)
	mapStringForMetanodeAttr := "map[string]string{"
	for _, k := range keysForMetanodeAttr {
		mapStringForMetanodeAttr += fmt.Sprintf("%#v: %#v,", k, this.MetanodeAttr[k])
	}
	mapStringForMetanodeAttr += "}"
	if this.MetanodeAttr != nil {
		s = append(s, "MetanodeAttr: "+mapStringForMetanodeAttr+",\n")
	}
	keysForEdgeAttr := make([]string, 0, len(this.EdgeAttr))
	for k, _ := range this.EdgeAttr {
		keysForEdgeAttr = append(keysForEdgeAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEdgeAttr)
	mapStringForEdgeAttr := "map[string]string{"
	for _, k := range keysForEdgeAttr {
		mapStringForEdgeAttr += fmt.Sprintf("%#v: %#v,", k, this.EdgeAttr[k])
	}
	mapStringForEdgeAttr += "}"
	if this.EdgeAttr != nil {
		s = append(s, "EdgeAttr: "+mapStringForEdgeAttr+",\n")
	}
	keysForGraphAttr := make([]string, 0, len(this.GraphAttr))
	for k, _ := range this.GraphAttr {
		keysForGraphAttr = append(keysForGraphAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForGraphAttr)
	mapStringForGraphAttr := "map[string]string{"
	for _, k := range keysForGraphAttr {
		mapStringForGraphAttr += fmt.Sprintf("%#v: %#v,", k, this.GraphAttr[k])
	}
	mapStringForGraphAttr += "}"
	if this.GraphAttr != nil {
		s = append(s, "GraphAttr: "+mapStringForGraphAttr+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGraphExplorer(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGraphExplorer(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.NodeAttr) > 0 {
		for k, _ := range m.NodeAttr {
			dAtA[i] = 0x12
			i++
			v := m.NodeAttr[k]
			mapSize := 1 + len(k) + sovGraphExplorer(uint64(len(k))) + 1 + len(v) + sovGraphExplorer(uint64(len(v)))
			i = encodeVarintGraphExplorer(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGraphExplorer(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGraphExplorer(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.MetanodeAttr) > 0 {
		for k, _ := range m.MetanodeAttr {
			dAtA[i] = 0x1a
			i++
			v := m.MetanodeAttr[k]
			mapSize := 1 + len(k) + sovGraphExplorer(uint64(len(k))) + 1 + len(v) + sovGraphExplorer(uint64(len(v)))
			i = encodeVarintGraphExplorer(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGraphExplorer(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGraphExplorer(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *Edge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Source) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGraphExplorer(dAtA, i, uint64(len(m.Source)))
		i += copy(dAtA[i:], m.Source)
	}
	if len(m.Target) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGraphExplorer(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if len(m.EdgeAttr) > 0 {
		for k, _ := range m.EdgeAttr {
			dAtA[i] = 0x1a
			i++
			v := m.EdgeAttr[k]
			mapSize := 1 + len(k) + sovGraphExplorer(uint64(len(k))) + 1 + len(v) + sovGraphExplorer(uint64(len(v)))
			i = encodeVarintGraphExplorer(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGraphExplorer(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGraphExplorer(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *Graph) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Graph) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Node) > 0 {
		for _, msg := range m.Node {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGraphExplorer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Edge) > 0 {
		for _, msg := range m.Edge {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGraphExplorer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.NodeAttr) > 0 {
		for k, _ := range m.NodeAttr {
			dAtA[i] = 0x1a
			i++
			v := m.NodeAttr[k]
			mapSize := 1 + len(k) + sovGraphExplorer(uint64(len(k))) + 1 + len(v) + sovGraphExplorer(uint64(len(v)))
			i = encodeVarintGraphExplorer(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGraphExplorer(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGraphExplorer(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.MetanodeAttr) > 0 {
		for k, _ := range m.MetanodeAttr {
			dAtA[i] = 0x22
			i++
			v := m.MetanodeAttr[k]
			mapSize := 1 + len(k) + sovGraphExplorer(uint64(len(k))) + 1 + len(v) + sovGraphExplorer(uint64(len(v)))
			i = encodeVarintGraphExplorer(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGraphExplorer(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGraphExplorer(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.EdgeAttr) > 0 {
		for k, _ := range m.EdgeAttr {
			dAtA[i] = 0x2a
			i++
			v := m.EdgeAttr[k]
			mapSize := 1 + len(k) + sovGraphExplorer(uint64(len(k))) + 1 + len(v) + sovGraphExplorer(uint64(len(v)))
			i = encodeVarintGraphExplorer(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGraphExplorer(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGraphExplorer(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.GraphAttr) > 0 {
		for k, _ := range m.GraphAttr {
			dAtA[i] = 0x32
			i++
			v := m.GraphAttr[k]
			mapSize := 1 + len(k) + sovGraphExplorer(uint64(len(k))) + 1 + len(v) + sovGraphExplorer(uint64(len(v)))
			i = encodeVarintGraphExplorer(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGraphExplorer(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGraphExplorer(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func encodeFixed64GraphExplorer(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32GraphExplorer(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGraphExplorer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Node) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGraphExplorer(uint64(l))
	}
	if len(m.NodeAttr) > 0 {
		for k, v := range m.NodeAttr {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGraphExplorer(uint64(len(k))) + 1 + len(v) + sovGraphExplorer(uint64(len(v)))
			n += mapEntrySize + 1 + sovGraphExplorer(uint64(mapEntrySize))
		}
	}
	if len(m.MetanodeAttr) > 0 {
		for k, v := range m.MetanodeAttr {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGraphExplorer(uint64(len(k))) + 1 + len(v) + sovGraphExplorer(uint64(len(v)))
			n += mapEntrySize + 1 + sovGraphExplorer(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Edge) Size() (n int) {
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovGraphExplorer(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovGraphExplorer(uint64(l))
	}
	if len(m.EdgeAttr) > 0 {
		for k, v := range m.EdgeAttr {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGraphExplorer(uint64(len(k))) + 1 + len(v) + sovGraphExplorer(uint64(len(v)))
			n += mapEntrySize + 1 + sovGraphExplorer(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Graph) Size() (n int) {
	var l int
	_ = l
	if len(m.Node) > 0 {
		for _, e := range m.Node {
			l = e.Size()
			n += 1 + l + sovGraphExplorer(uint64(l))
		}
	}
	if len(m.Edge) > 0 {
		for _, e := range m.Edge {
			l = e.Size()
			n += 1 + l + sovGraphExplorer(uint64(l))
		}
	}
	if len(m.NodeAttr) > 0 {
		for k, v := range m.NodeAttr {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGraphExplorer(uint64(len(k))) + 1 + len(v) + sovGraphExplorer(uint64(len(v)))
			n += mapEntrySize + 1 + sovGraphExplorer(uint64(mapEntrySize))
		}
	}
	if len(m.MetanodeAttr) > 0 {
		for k, v := range m.MetanodeAttr {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGraphExplorer(uint64(len(k))) + 1 + len(v) + sovGraphExplorer(uint64(len(v)))
			n += mapEntrySize + 1 + sovGraphExplorer(uint64(mapEntrySize))
		}
	}
	if len(m.EdgeAttr) > 0 {
		for k, v := range m.EdgeAttr {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGraphExplorer(uint64(len(k))) + 1 + len(v) + sovGraphExplorer(uint64(len(v)))
			n += mapEntrySize + 1 + sovGraphExplorer(uint64(mapEntrySize))
		}
	}
	if len(m.GraphAttr) > 0 {
		for k, v := range m.GraphAttr {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGraphExplorer(uint64(len(k))) + 1 + len(v) + sovGraphExplorer(uint64(len(v)))
			n += mapEntrySize + 1 + sovGraphExplorer(uint64(mapEntrySize))
		}
	}
	return n
}

func sovGraphExplorer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGraphExplorer(x uint64) (n int) {
	return sovGraphExplorer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Node) String() string {
	if this == nil {
		return "nil"
	}
	keysForNodeAttr := make([]string, 0, len(this.NodeAttr))
	for k, _ := range this.NodeAttr {
		keysForNodeAttr = append(keysForNodeAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNodeAttr)
	mapStringForNodeAttr := "map[string]string{"
	for _, k := range keysForNodeAttr {
		mapStringForNodeAttr += fmt.Sprintf("%v: %v,", k, this.NodeAttr[k])
	}
	mapStringForNodeAttr += "}"
	keysForMetanodeAttr := make([]string, 0, len(this.MetanodeAttr))
	for k, _ := range this.MetanodeAttr {
		keysForMetanodeAttr = append(keysForMetanodeAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetanodeAttr)
	mapStringForMetanodeAttr := "map[string]string{"
	for _, k := range keysForMetanodeAttr {
		mapStringForMetanodeAttr += fmt.Sprintf("%v: %v,", k, this.MetanodeAttr[k])
	}
	mapStringForMetanodeAttr += "}"
	s := strings.Join([]string{`&Node{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`NodeAttr:` + mapStringForNodeAttr + `,`,
		`MetanodeAttr:` + mapStringForMetanodeAttr + `,`,
		`}`,
	}, "")
	return s
}
func (this *Edge) String() string {
	if this == nil {
		return "nil"
	}
	keysForEdgeAttr := make([]string, 0, len(this.EdgeAttr))
	for k, _ := range this.EdgeAttr {
		keysForEdgeAttr = append(keysForEdgeAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEdgeAttr)
	mapStringForEdgeAttr := "map[string]string{"
	for _, k := range keysForEdgeAttr {
		mapStringForEdgeAttr += fmt.Sprintf("%v: %v,", k, this.EdgeAttr[k])
	}
	mapStringForEdgeAttr += "}"
	s := strings.Join([]string{`&Edge{`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`EdgeAttr:` + mapStringForEdgeAttr + `,`,
		`}`,
	}, "")
	return s
}
func (this *Graph) String() string {
	if this == nil {
		return "nil"
	}
	keysForNodeAttr := make([]string, 0, len(this.NodeAttr))
	for k, _ := range this.NodeAttr {
		keysForNodeAttr = append(keysForNodeAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNodeAttr)
	mapStringForNodeAttr := "map[string]string{"
	for _, k := range keysForNodeAttr {
		mapStringForNodeAttr += fmt.Sprintf("%v: %v,", k, this.NodeAttr[k])
	}
	mapStringForNodeAttr += "}"
	keysForMetanodeAttr := make([]string, 0, len(this.MetanodeAttr))
	for k, _ := range this.MetanodeAttr {
		keysForMetanodeAttr = append(keysForMetanodeAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetanodeAttr)
	mapStringForMetanodeAttr := "map[string]string{"
	for _, k := range keysForMetanodeAttr {
		mapStringForMetanodeAttr += fmt.Sprintf("%v: %v,", k, this.MetanodeAttr[k])
	}
	mapStringForMetanodeAttr += "}"
	keysForEdgeAttr := make([]string, 0, len(this.EdgeAttr))
	for k, _ := range this.EdgeAttr {
		keysForEdgeAttr = append(keysForEdgeAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEdgeAttr)
	mapStringForEdgeAttr := "map[string]string{"
	for _, k := range keysForEdgeAttr {
		mapStringForEdgeAttr += fmt.Sprintf("%v: %v,", k, this.EdgeAttr[k])
	}
	mapStringForEdgeAttr += "}"
	keysForGraphAttr := make([]string, 0, len(this.GraphAttr))
	for k, _ := range this.GraphAttr {
		keysForGraphAttr = append(keysForGraphAttr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForGraphAttr)
	mapStringForGraphAttr := "map[string]string{"
	for _, k := range keysForGraphAttr {
		mapStringForGraphAttr += fmt.Sprintf("%v: %v,", k, this.GraphAttr[k])
	}
	mapStringForGraphAttr += "}"
	s := strings.Join([]string{`&Graph{`,
		`Node:` + strings.Replace(fmt.Sprintf("%v", this.Node), "Node", "Node", 1) + `,`,
		`Edge:` + strings.Replace(fmt.Sprintf("%v", this.Edge), "Edge", "Edge", 1) + `,`,
		`NodeAttr:` + mapStringForNodeAttr + `,`,
		`MetanodeAttr:` + mapStringForMetanodeAttr + `,`,
		`EdgeAttr:` + mapStringForEdgeAttr + `,`,
		`GraphAttr:` + mapStringForGraphAttr + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGraphExplorer(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphExplorer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphExplorer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAttr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphExplorer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeAttr == nil {
				m.NodeAttr = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphExplorer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphExplorer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphExplorer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGraphExplorer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeAttr[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetanodeAttr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphExplorer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetanodeAttr == nil {
				m.MetanodeAttr = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphExplorer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphExplorer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphExplorer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGraphExplorer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MetanodeAttr[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphExplorer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphExplorer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphExplorer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Edge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Edge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphExplorer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphExplorer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdgeAttr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphExplorer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EdgeAttr == nil {
				m.EdgeAttr = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphExplorer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphExplorer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphExplorer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGraphExplorer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EdgeAttr[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphExplorer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphExplorer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Graph) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphExplorer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Graph: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Graph: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphExplorer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Node = append(m.Node, &Node{})
			if err := m.Node[len(m.Node)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphExplorer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Edge = append(m.Edge, &Edge{})
			if err := m.Edge[len(m.Edge)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAttr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphExplorer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeAttr == nil {
				m.NodeAttr = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphExplorer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphExplorer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphExplorer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGraphExplorer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeAttr[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetanodeAttr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphExplorer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetanodeAttr == nil {
				m.MetanodeAttr = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphExplorer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphExplorer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphExplorer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGraphExplorer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MetanodeAttr[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdgeAttr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphExplorer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EdgeAttr == nil {
				m.EdgeAttr = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphExplorer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphExplorer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphExplorer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGraphExplorer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EdgeAttr[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphAttr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphExplorer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphExplorer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GraphAttr == nil {
				m.GraphAttr = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphExplorer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphExplorer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphExplorer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGraphExplorer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGraphExplorer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.GraphAttr[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphExplorer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphExplorer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGraphExplorer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGraphExplorer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraphExplorer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraphExplorer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGraphExplorer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGraphExplorer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGraphExplorer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGraphExplorer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGraphExplorer   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/contrib/tensorboard/graph_explorer/proto/graph_explorer.proto", fileDescriptorGraphExplorer)
}

var fileDescriptorGraphExplorer = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0xcb, 0xce, 0xd2, 0x40,
	0x14, 0xc7, 0x3b, 0xa5, 0x10, 0x39, 0xfa, 0x11, 0x9d, 0x10, 0xd3, 0xb0, 0x98, 0x10, 0x34, 0xca,
	0xc2, 0xd0, 0x44, 0x37, 0x46, 0x4d, 0xf0, 0x12, 0xe2, 0xc2, 0x4b, 0x62, 0x5f, 0x80, 0xb4, 0x74,
	0xa8, 0x46, 0xe8, 0x90, 0x61, 0x50, 0xd9, 0xf9, 0x08, 0x3e, 0x85, 0xf1, 0x01, 0x7c, 0x08, 0x97,
	0x2c, 0x5d, 0x4a, 0xdd, 0x98, 0xb8, 0xe1, 0x11, 0xcc, 0x1c, 0x86, 0x94, 0x96, 0xa2, 0x21, 0x2e,
	0xbe, 0xcd, 0x64, 0xce, 0xbf, 0xe7, 0xfc, 0xce, 0x65, 0x4e, 0x0a, 0xaf, 0x66, 0x52, 0x28, 0x11,
	0x2e, 0xc6, 0x9e, 0xe2, 0xc9, 0x5c, 0xc8, 0xf1, 0x44, 0xbc, 0xf7, 0x46, 0x22, 0x51, 0xf2, 0x4d,
	0x68, 0xa4, 0x50, 0x04, 0x32, 0xf2, 0x62, 0x19, 0xcc, 0x5e, 0x0f, 0xf9, 0x87, 0xd9, 0x44, 0x48,
	0x2e, 0x3d, 0x0c, 0x2b, 0x88, 0x3d, 0x14, 0x69, 0x23, 0xaf, 0x76, 0x3e, 0xdb, 0xe0, 0xbc, 0x14,
	0x11, 0xa7, 0x14, 0x9c, 0x24, 0x98, 0x72, 0x97, 0xb4, 0x49, 0xb7, 0xee, 0xe3, 0x9d, 0xf6, 0xa1,
	0x9e, 0x88, 0x88, 0x0f, 0x03, 0xa5, 0xa4, 0x6b, 0xb7, 0x2b, 0xdd, 0x8b, 0xb7, 0x3b, 0xbd, 0x02,
	0x56, 0x07, 0xe3, 0xf1, 0x48, 0x29, 0x39, 0x48, 0x94, 0x5c, 0xfa, 0x17, 0x12, 0x63, 0xd2, 0x67,
	0x70, 0x36, 0xe5, 0x2a, 0xc8, 0x20, 0x15, 0x84, 0xdc, 0x28, 0x85, 0xbc, 0x30, 0x9e, 0x19, 0xe8,
	0xd2, 0x74, 0x4f, 0x6a, 0xdd, 0x87, 0xb3, 0x5c, 0x1e, 0x7a, 0x19, 0x2a, 0x6f, 0xf9, 0xd2, 0x54,
	0xac, 0xaf, 0xb4, 0x09, 0xd5, 0x77, 0xc1, 0x64, 0xc1, 0x5d, 0x1b, 0xb5, 0xad, 0x71, 0xcf, 0xbe,
	0x4b, 0x5a, 0x7d, 0xb8, 0x72, 0xc0, 0x3f, 0x05, 0xd0, 0xf9, 0x4a, 0xc0, 0x19, 0x44, 0x31, 0xa7,
	0x57, 0xa1, 0x36, 0x17, 0x0b, 0x39, 0xda, 0x8d, 0xca, 0x58, 0x5a, 0x57, 0x81, 0x8c, 0xb9, 0x32,
	0xb1, 0xc6, 0xd2, 0x43, 0xe4, 0x51, 0x9c, 0xeb, 0xff, 0x60, 0x88, 0x1a, 0x8c, 0xc7, 0xde, 0x10,
	0xb9, 0x31, 0x75, 0xdf, 0xb9, 0x4f, 0x27, 0x95, 0xfd, 0xdb, 0x81, 0xea, 0x53, 0x9d, 0x8c, 0x76,
	0xc1, 0xd1, 0xdd, 0xbb, 0x04, 0x4b, 0x68, 0x96, 0x3d, 0x81, 0x8f, 0x1e, 0xda, 0x53, 0x27, 0x37,
	0x2f, 0xde, 0x2c, 0x2b, 0xd6, 0x47, 0x0f, 0xfa, 0x70, 0x7f, 0x41, 0xb6, 0xbd, 0x5d, 0x2b, 0xba,
	0x63, 0xf6, 0xa3, 0x1b, 0xf2, 0xbc, 0xb8, 0x21, 0x0e, 0x52, 0x6e, 0x96, 0x53, 0xfe, 0xb1, 0x22,
	0xba, 0x9e, 0x6c, 0xd6, 0xd5, 0xbf, 0xd5, 0x73, 0x64, 0xd8, 0xf4, 0x09, 0xc0, 0xd6, 0x1f, 0x11,
	0x35, 0x44, 0x5c, 0x2f, 0x47, 0xe0, 0x99, 0x31, 0xea, 0xf1, 0xce, 0x3e, 0xdf, 0x4d, 0xfd, 0xaf,
	0x7d, 0x69, 0x3d, 0x80, 0x46, 0xbe, 0xaf, 0x53, 0xa2, 0x1f, 0xdf, 0x5a, 0xad, 0x99, 0xf5, 0x7d,
	0xcd, 0xac, 0xcd, 0x9a, 0x91, 0x8f, 0x29, 0x23, 0x5f, 0x52, 0x46, 0xbe, 0xa5, 0x8c, 0xac, 0x52,
	0x46, 0x7e, 0xa4, 0x8c, 0xfc, 0x4a, 0x99, 0xb5, 0x49, 0x19, 0xf9, 0xf4, 0x93, 0x59, 0x61, 0x0d,
	0x7f, 0x49, 0x77, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x20, 0xae, 0x38, 0x5f, 0xe7, 0x04, 0x00,
	0x00,
}
