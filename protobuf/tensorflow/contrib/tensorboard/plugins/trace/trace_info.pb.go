// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/contrib/tensorboard/plugins/trace/trace_info.proto

/*
	Package tensorflow_contrib_tensorboard is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/contrib/tensorboard/plugins/trace/trace_info.proto

	It has these top-level messages:
		TraceInfo
		OpInfo
		LineTrace
		TensorInfo
		FileInfo
*/
package tensorflow_contrib_tensorboard

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import fmt "fmt"
import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TraceInfo struct {
	Ops   []*OpInfo   `protobuf:"bytes,1,rep,name=ops" json:"ops,omitempty"`
	Files []*FileInfo `protobuf:"bytes,2,rep,name=files" json:"files,omitempty"`
}

func (m *TraceInfo) Reset()                    { *m = TraceInfo{} }
func (*TraceInfo) ProtoMessage()               {}
func (*TraceInfo) Descriptor() ([]byte, []int) { return fileDescriptorTraceInfo, []int{0} }

func (m *TraceInfo) GetOps() []*OpInfo {
	if m != nil {
		return m.Ops
	}
	return nil
}

func (m *TraceInfo) GetFiles() []*FileInfo {
	if m != nil {
		return m.Files
	}
	return nil
}

type OpInfo struct {
	Name      string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	OpType    string        `protobuf:"bytes,2,opt,name=op_type,json=opType,proto3" json:"op_type,omitempty"`
	Device    string        `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`
	Traceback []*LineTrace  `protobuf:"bytes,4,rep,name=traceback" json:"traceback,omitempty"`
	Inputs    []*TensorInfo `protobuf:"bytes,5,rep,name=inputs" json:"inputs,omitempty"`
	Outputs   []*TensorInfo `protobuf:"bytes,6,rep,name=outputs" json:"outputs,omitempty"`
}

func (m *OpInfo) Reset()                    { *m = OpInfo{} }
func (*OpInfo) ProtoMessage()               {}
func (*OpInfo) Descriptor() ([]byte, []int) { return fileDescriptorTraceInfo, []int{1} }

func (m *OpInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OpInfo) GetOpType() string {
	if m != nil {
		return m.OpType
	}
	return ""
}

func (m *OpInfo) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *OpInfo) GetTraceback() []*LineTrace {
	if m != nil {
		return m.Traceback
	}
	return nil
}

func (m *OpInfo) GetInputs() []*TensorInfo {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *OpInfo) GetOutputs() []*TensorInfo {
	if m != nil {
		return m.Outputs
	}
	return nil
}

type LineTrace struct {
	// Absolute file path.
	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// 1-based line number.
	LineNumber uint32 `protobuf:"varint,2,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
}

func (m *LineTrace) Reset()                    { *m = LineTrace{} }
func (*LineTrace) ProtoMessage()               {}
func (*LineTrace) Descriptor() ([]byte, []int) { return fileDescriptorTraceInfo, []int{2} }

func (m *LineTrace) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *LineTrace) GetLineNumber() uint32 {
	if m != nil {
		return m.LineNumber
	}
	return 0
}

type TensorInfo struct {
	// Size of the tensor for each dimension. Value of -1 denotes "unknown"
	// size for that dimension.
	Shape []int32 `protobuf:"varint,1,rep,packed,name=shape" json:"shape,omitempty"`
	// The data type of the tensor.
	Dtype string `protobuf:"bytes,2,opt,name=dtype,proto3" json:"dtype,omitempty"`
	// Number of bytes per element in the tensor.
	NumBytesPerElem uint32 `protobuf:"varint,3,opt,name=num_bytes_per_elem,json=numBytesPerElem,proto3" json:"num_bytes_per_elem,omitempty"`
	// List of operation names that consume this tensor.
	Consumers []string `protobuf:"bytes,4,rep,name=consumers" json:"consumers,omitempty"`
}

func (m *TensorInfo) Reset()                    { *m = TensorInfo{} }
func (*TensorInfo) ProtoMessage()               {}
func (*TensorInfo) Descriptor() ([]byte, []int) { return fileDescriptorTraceInfo, []int{3} }

func (m *TensorInfo) GetShape() []int32 {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *TensorInfo) GetDtype() string {
	if m != nil {
		return m.Dtype
	}
	return ""
}

func (m *TensorInfo) GetNumBytesPerElem() uint32 {
	if m != nil {
		return m.NumBytesPerElem
	}
	return 0
}

func (m *TensorInfo) GetConsumers() []string {
	if m != nil {
		return m.Consumers
	}
	return nil
}

type FileInfo struct {
	// Absolute file path to the source code.
	FilePath   string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	SourceCode string `protobuf:"bytes,2,opt,name=source_code,json=sourceCode,proto3" json:"source_code,omitempty"`
	// Map from end of statement to start of statement. End and start are 0-based
	// line indexes.
	MultilineStatements map[uint32]uint32 `protobuf:"bytes,3,rep,name=multiline_statements,json=multilineStatements" json:"multiline_statements,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptorTraceInfo, []int{4} }

func (m *FileInfo) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *FileInfo) GetSourceCode() string {
	if m != nil {
		return m.SourceCode
	}
	return ""
}

func (m *FileInfo) GetMultilineStatements() map[uint32]uint32 {
	if m != nil {
		return m.MultilineStatements
	}
	return nil
}

func init() {
	proto.RegisterType((*TraceInfo)(nil), "tensorflow.contrib.tensorboard.TraceInfo")
	proto.RegisterType((*OpInfo)(nil), "tensorflow.contrib.tensorboard.OpInfo")
	proto.RegisterType((*LineTrace)(nil), "tensorflow.contrib.tensorboard.LineTrace")
	proto.RegisterType((*TensorInfo)(nil), "tensorflow.contrib.tensorboard.TensorInfo")
	proto.RegisterType((*FileInfo)(nil), "tensorflow.contrib.tensorboard.FileInfo")
}
func (this *TraceInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TraceInfo)
	if !ok {
		that2, ok := that.(TraceInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Ops) != len(that1.Ops) {
		return false
	}
	for i := range this.Ops {
		if !this.Ops[i].Equal(that1.Ops[i]) {
			return false
		}
	}
	if len(this.Files) != len(that1.Files) {
		return false
	}
	for i := range this.Files {
		if !this.Files[i].Equal(that1.Files[i]) {
			return false
		}
	}
	return true
}
func (this *OpInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpInfo)
	if !ok {
		that2, ok := that.(OpInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.OpType != that1.OpType {
		return false
	}
	if this.Device != that1.Device {
		return false
	}
	if len(this.Traceback) != len(that1.Traceback) {
		return false
	}
	for i := range this.Traceback {
		if !this.Traceback[i].Equal(that1.Traceback[i]) {
			return false
		}
	}
	if len(this.Inputs) != len(that1.Inputs) {
		return false
	}
	for i := range this.Inputs {
		if !this.Inputs[i].Equal(that1.Inputs[i]) {
			return false
		}
	}
	if len(this.Outputs) != len(that1.Outputs) {
		return false
	}
	for i := range this.Outputs {
		if !this.Outputs[i].Equal(that1.Outputs[i]) {
			return false
		}
	}
	return true
}
func (this *LineTrace) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LineTrace)
	if !ok {
		that2, ok := that.(LineTrace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FilePath != that1.FilePath {
		return false
	}
	if this.LineNumber != that1.LineNumber {
		return false
	}
	return true
}
func (this *TensorInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TensorInfo)
	if !ok {
		that2, ok := that.(TensorInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Shape) != len(that1.Shape) {
		return false
	}
	for i := range this.Shape {
		if this.Shape[i] != that1.Shape[i] {
			return false
		}
	}
	if this.Dtype != that1.Dtype {
		return false
	}
	if this.NumBytesPerElem != that1.NumBytesPerElem {
		return false
	}
	if len(this.Consumers) != len(that1.Consumers) {
		return false
	}
	for i := range this.Consumers {
		if this.Consumers[i] != that1.Consumers[i] {
			return false
		}
	}
	return true
}
func (this *FileInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FileInfo)
	if !ok {
		that2, ok := that.(FileInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FilePath != that1.FilePath {
		return false
	}
	if this.SourceCode != that1.SourceCode {
		return false
	}
	if len(this.MultilineStatements) != len(that1.MultilineStatements) {
		return false
	}
	for i := range this.MultilineStatements {
		if this.MultilineStatements[i] != that1.MultilineStatements[i] {
			return false
		}
	}
	return true
}
func (this *TraceInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow_contrib_tensorboard.TraceInfo{")
	if this.Ops != nil {
		s = append(s, "Ops: "+fmt.Sprintf("%#v", this.Ops)+",\n")
	}
	if this.Files != nil {
		s = append(s, "Files: "+fmt.Sprintf("%#v", this.Files)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&tensorflow_contrib_tensorboard.OpInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "OpType: "+fmt.Sprintf("%#v", this.OpType)+",\n")
	s = append(s, "Device: "+fmt.Sprintf("%#v", this.Device)+",\n")
	if this.Traceback != nil {
		s = append(s, "Traceback: "+fmt.Sprintf("%#v", this.Traceback)+",\n")
	}
	if this.Inputs != nil {
		s = append(s, "Inputs: "+fmt.Sprintf("%#v", this.Inputs)+",\n")
	}
	if this.Outputs != nil {
		s = append(s, "Outputs: "+fmt.Sprintf("%#v", this.Outputs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LineTrace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow_contrib_tensorboard.LineTrace{")
	s = append(s, "FilePath: "+fmt.Sprintf("%#v", this.FilePath)+",\n")
	s = append(s, "LineNumber: "+fmt.Sprintf("%#v", this.LineNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TensorInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tensorflow_contrib_tensorboard.TensorInfo{")
	s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	s = append(s, "Dtype: "+fmt.Sprintf("%#v", this.Dtype)+",\n")
	s = append(s, "NumBytesPerElem: "+fmt.Sprintf("%#v", this.NumBytesPerElem)+",\n")
	s = append(s, "Consumers: "+fmt.Sprintf("%#v", this.Consumers)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FileInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensorflow_contrib_tensorboard.FileInfo{")
	s = append(s, "FilePath: "+fmt.Sprintf("%#v", this.FilePath)+",\n")
	s = append(s, "SourceCode: "+fmt.Sprintf("%#v", this.SourceCode)+",\n")
	keysForMultilineStatements := make([]uint32, 0, len(this.MultilineStatements))
	for k, _ := range this.MultilineStatements {
		keysForMultilineStatements = append(keysForMultilineStatements, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForMultilineStatements)
	mapStringForMultilineStatements := "map[uint32]uint32{"
	for _, k := range keysForMultilineStatements {
		mapStringForMultilineStatements += fmt.Sprintf("%#v: %#v,", k, this.MultilineStatements[k])
	}
	mapStringForMultilineStatements += "}"
	if this.MultilineStatements != nil {
		s = append(s, "MultilineStatements: "+mapStringForMultilineStatements+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTraceInfo(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TraceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for _, msg := range m.Ops {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTraceInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Files) > 0 {
		for _, msg := range m.Files {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTraceInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OpInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTraceInfo(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.OpType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTraceInfo(dAtA, i, uint64(len(m.OpType)))
		i += copy(dAtA[i:], m.OpType)
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTraceInfo(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	if len(m.Traceback) > 0 {
		for _, msg := range m.Traceback {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTraceInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Inputs) > 0 {
		for _, msg := range m.Inputs {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintTraceInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Outputs) > 0 {
		for _, msg := range m.Outputs {
			dAtA[i] = 0x32
			i++
			i = encodeVarintTraceInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LineTrace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LineTrace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FilePath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTraceInfo(dAtA, i, uint64(len(m.FilePath)))
		i += copy(dAtA[i:], m.FilePath)
	}
	if m.LineNumber != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTraceInfo(dAtA, i, uint64(m.LineNumber))
	}
	return i, nil
}

func (m *TensorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Shape) > 0 {
		dAtA2 := make([]byte, len(m.Shape)*10)
		var j1 int
		for _, num1 := range m.Shape {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintTraceInfo(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Dtype) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTraceInfo(dAtA, i, uint64(len(m.Dtype)))
		i += copy(dAtA[i:], m.Dtype)
	}
	if m.NumBytesPerElem != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTraceInfo(dAtA, i, uint64(m.NumBytesPerElem))
	}
	if len(m.Consumers) > 0 {
		for _, s := range m.Consumers {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *FileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FilePath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTraceInfo(dAtA, i, uint64(len(m.FilePath)))
		i += copy(dAtA[i:], m.FilePath)
	}
	if len(m.SourceCode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTraceInfo(dAtA, i, uint64(len(m.SourceCode)))
		i += copy(dAtA[i:], m.SourceCode)
	}
	if len(m.MultilineStatements) > 0 {
		for k, _ := range m.MultilineStatements {
			dAtA[i] = 0x1a
			i++
			v := m.MultilineStatements[k]
			mapSize := 1 + sovTraceInfo(uint64(k)) + 1 + sovTraceInfo(uint64(v))
			i = encodeVarintTraceInfo(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintTraceInfo(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintTraceInfo(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func encodeFixed64TraceInfo(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32TraceInfo(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTraceInfo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TraceInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for _, e := range m.Ops {
			l = e.Size()
			n += 1 + l + sovTraceInfo(uint64(l))
		}
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovTraceInfo(uint64(l))
		}
	}
	return n
}

func (m *OpInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTraceInfo(uint64(l))
	}
	l = len(m.OpType)
	if l > 0 {
		n += 1 + l + sovTraceInfo(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovTraceInfo(uint64(l))
	}
	if len(m.Traceback) > 0 {
		for _, e := range m.Traceback {
			l = e.Size()
			n += 1 + l + sovTraceInfo(uint64(l))
		}
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovTraceInfo(uint64(l))
		}
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 1 + l + sovTraceInfo(uint64(l))
		}
	}
	return n
}

func (m *LineTrace) Size() (n int) {
	var l int
	_ = l
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovTraceInfo(uint64(l))
	}
	if m.LineNumber != 0 {
		n += 1 + sovTraceInfo(uint64(m.LineNumber))
	}
	return n
}

func (m *TensorInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Shape) > 0 {
		l = 0
		for _, e := range m.Shape {
			l += sovTraceInfo(uint64(e))
		}
		n += 1 + sovTraceInfo(uint64(l)) + l
	}
	l = len(m.Dtype)
	if l > 0 {
		n += 1 + l + sovTraceInfo(uint64(l))
	}
	if m.NumBytesPerElem != 0 {
		n += 1 + sovTraceInfo(uint64(m.NumBytesPerElem))
	}
	if len(m.Consumers) > 0 {
		for _, s := range m.Consumers {
			l = len(s)
			n += 1 + l + sovTraceInfo(uint64(l))
		}
	}
	return n
}

func (m *FileInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovTraceInfo(uint64(l))
	}
	l = len(m.SourceCode)
	if l > 0 {
		n += 1 + l + sovTraceInfo(uint64(l))
	}
	if len(m.MultilineStatements) > 0 {
		for k, v := range m.MultilineStatements {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTraceInfo(uint64(k)) + 1 + sovTraceInfo(uint64(v))
			n += mapEntrySize + 1 + sovTraceInfo(uint64(mapEntrySize))
		}
	}
	return n
}

func sovTraceInfo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTraceInfo(x uint64) (n int) {
	return sovTraceInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TraceInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TraceInfo{`,
		`Ops:` + strings.Replace(fmt.Sprintf("%v", this.Ops), "OpInfo", "OpInfo", 1) + `,`,
		`Files:` + strings.Replace(fmt.Sprintf("%v", this.Files), "FileInfo", "FileInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`OpType:` + fmt.Sprintf("%v", this.OpType) + `,`,
		`Device:` + fmt.Sprintf("%v", this.Device) + `,`,
		`Traceback:` + strings.Replace(fmt.Sprintf("%v", this.Traceback), "LineTrace", "LineTrace", 1) + `,`,
		`Inputs:` + strings.Replace(fmt.Sprintf("%v", this.Inputs), "TensorInfo", "TensorInfo", 1) + `,`,
		`Outputs:` + strings.Replace(fmt.Sprintf("%v", this.Outputs), "TensorInfo", "TensorInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LineTrace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LineTrace{`,
		`FilePath:` + fmt.Sprintf("%v", this.FilePath) + `,`,
		`LineNumber:` + fmt.Sprintf("%v", this.LineNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TensorInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TensorInfo{`,
		`Shape:` + fmt.Sprintf("%v", this.Shape) + `,`,
		`Dtype:` + fmt.Sprintf("%v", this.Dtype) + `,`,
		`NumBytesPerElem:` + fmt.Sprintf("%v", this.NumBytesPerElem) + `,`,
		`Consumers:` + fmt.Sprintf("%v", this.Consumers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileInfo) String() string {
	if this == nil {
		return "nil"
	}
	keysForMultilineStatements := make([]uint32, 0, len(this.MultilineStatements))
	for k, _ := range this.MultilineStatements {
		keysForMultilineStatements = append(keysForMultilineStatements, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint32s(keysForMultilineStatements)
	mapStringForMultilineStatements := "map[uint32]uint32{"
	for _, k := range keysForMultilineStatements {
		mapStringForMultilineStatements += fmt.Sprintf("%v: %v,", k, this.MultilineStatements[k])
	}
	mapStringForMultilineStatements += "}"
	s := strings.Join([]string{`&FileInfo{`,
		`FilePath:` + fmt.Sprintf("%v", this.FilePath) + `,`,
		`SourceCode:` + fmt.Sprintf("%v", this.SourceCode) + `,`,
		`MultilineStatements:` + mapStringForMultilineStatements + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTraceInfo(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TraceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTraceInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTraceInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ops = append(m.Ops, &OpInfo{})
			if err := m.Ops[len(m.Ops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTraceInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, &FileInfo{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTraceInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTraceInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTraceInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTraceInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTraceInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTraceInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Traceback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTraceInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Traceback = append(m.Traceback, &LineTrace{})
			if err := m.Traceback[len(m.Traceback)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTraceInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &TensorInfo{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTraceInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, &TensorInfo{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTraceInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTraceInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LineTrace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTraceInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LineTrace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LineTrace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTraceInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineNumber", wireType)
			}
			m.LineNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LineNumber |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTraceInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTraceInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TensorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTraceInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTraceInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shape = append(m.Shape, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTraceInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTraceInfo
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTraceInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shape = append(m.Shape, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTraceInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dtype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBytesPerElem", wireType)
			}
			m.NumBytesPerElem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBytesPerElem |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTraceInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consumers = append(m.Consumers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTraceInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTraceInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTraceInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTraceInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTraceInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultilineStatements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTraceInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MultilineStatements == nil {
				m.MultilineStatements = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTraceInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTraceInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTraceInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTraceInfo(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTraceInfo
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MultilineStatements[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTraceInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTraceInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTraceInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTraceInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTraceInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTraceInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTraceInfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTraceInfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTraceInfo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTraceInfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTraceInfo   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/contrib/tensorboard/plugins/trace/trace_info.proto", fileDescriptorTraceInfo)
}

var fileDescriptorTraceInfo = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0xeb, 0x76, 0xcd, 0x96, 0x77, 0xaa, 0x40, 0x66, 0x82, 0x08, 0x90, 0x99, 0x7a, 0x40,
	0xe5, 0x8f, 0x52, 0x09, 0x2e, 0x13, 0x07, 0x24, 0x0a, 0x2b, 0x9a, 0xc4, 0x9f, 0x29, 0xf4, 0x1e,
	0x25, 0xe9, 0x5b, 0x1a, 0x2d, 0xb1, 0xad, 0xd8, 0x1e, 0xea, 0x0d, 0x09, 0xc1, 0x99, 0x8f, 0xc0,
	0x91, 0x8f, 0xc2, 0x71, 0x47, 0x8e, 0x34, 0x5c, 0x38, 0xee, 0x23, 0xa0, 0x38, 0xed, 0x3a, 0x09,
	0x41, 0xd9, 0x25, 0xf2, 0xfb, 0x58, 0xbf, 0xc7, 0xef, 0xfb, 0xd8, 0x81, 0xa1, 0x2c, 0x84, 0x16,
	0xb1, 0x99, 0xf4, 0x35, 0x72, 0x25, 0x8a, 0x49, 0x26, 0xde, 0xf5, 0x13, 0xc1, 0x75, 0x91, 0xc6,
	0x0b, 0x29, 0x16, 0x51, 0x31, 0xee, 0xcb, 0xcc, 0xbc, 0x4d, 0xb9, 0xea, 0xeb, 0x22, 0x4a, 0xb0,
	0xfe, 0x86, 0x29, 0x9f, 0x08, 0xdf, 0x1a, 0x50, 0xb6, 0xc2, 0xfd, 0x05, 0xee, 0x9f, 0xc3, 0xbb,
	0x1f, 0x09, 0xb8, 0xa3, 0x0a, 0x3a, 0xe0, 0x13, 0x41, 0xf7, 0xa0, 0x25, 0xa4, 0xf2, 0xc8, 0x6e,
	0xab, 0xb7, 0xfd, 0xe0, 0xb6, 0xff, 0x6f, 0xd6, 0x7f, 0x2d, 0x2b, 0x28, 0xa8, 0x10, 0xfa, 0x18,
	0xda, 0x93, 0x34, 0x43, 0xe5, 0x35, 0x2d, 0xdb, 0x5b, 0xc7, 0x0e, 0xd3, 0xcc, 0x1e, 0x19, 0xd4,
	0x58, 0xf7, 0x4b, 0x13, 0x9c, 0xda, 0x8f, 0x52, 0xd8, 0xe0, 0x51, 0x8e, 0x1e, 0xd9, 0x25, 0x3d,
	0x37, 0xb0, 0x6b, 0x7a, 0x0d, 0x36, 0x85, 0x0c, 0xf5, 0x4c, 0xa2, 0xd7, 0xb4, 0xb2, 0x23, 0xe4,
	0x68, 0x26, 0x91, 0x5e, 0x05, 0x67, 0x8c, 0xc7, 0x69, 0x82, 0x5e, 0xab, 0xd6, 0xeb, 0x8a, 0x3e,
	0x07, 0xd7, 0x66, 0x11, 0x47, 0xc9, 0x91, 0xb7, 0x61, 0x7b, 0xba, 0xb3, 0xae, 0xa7, 0x17, 0x29,
	0x47, 0x9b, 0x45, 0xb0, 0x62, 0xe9, 0x00, 0x9c, 0x94, 0x4b, 0xa3, 0x95, 0xd7, 0xb6, 0x2e, 0x77,
	0xd7, 0xb9, 0x8c, 0xec, 0xda, 0xce, 0xb6, 0x20, 0xe9, 0x33, 0xd8, 0x14, 0x46, 0x5b, 0x13, 0xe7,
	0xc2, 0x26, 0x4b, 0xb4, 0x7b, 0x00, 0xee, 0x59, 0x87, 0xf4, 0x06, 0xb8, 0x55, 0x70, 0xa1, 0x8c,
	0xf4, 0x74, 0x91, 0xd4, 0x56, 0x25, 0x1c, 0x46, 0x7a, 0x4a, 0x6f, 0xc1, 0x76, 0x96, 0x72, 0x0c,
	0xb9, 0xc9, 0x63, 0x2c, 0x6c, 0x62, 0x9d, 0x00, 0x2a, 0xe9, 0x95, 0x55, 0xba, 0x1f, 0x08, 0xc0,
	0xea, 0x08, 0xba, 0x03, 0x6d, 0x35, 0x8d, 0x24, 0xda, 0x8b, 0x6f, 0x07, 0x75, 0x51, 0xa9, 0xe3,
	0x73, 0x89, 0xd7, 0x05, 0xbd, 0x07, 0x94, 0x9b, 0x3c, 0x8c, 0x67, 0x1a, 0x55, 0x28, 0xb1, 0x08,
	0x31, 0xc3, 0xdc, 0x86, 0xdf, 0x09, 0x2e, 0x71, 0x93, 0x0f, 0xaa, 0x8d, 0x43, 0x2c, 0xf6, 0x33,
	0xcc, 0xe9, 0x4d, 0x70, 0x13, 0xc1, 0x95, 0xc9, 0xb1, 0x50, 0xf6, 0x16, 0xdc, 0x60, 0x25, 0x74,
	0x3f, 0x35, 0x61, 0x6b, 0xf9, 0x0e, 0xd6, 0x0e, 0xa4, 0x84, 0x29, 0x12, 0x0c, 0x13, 0x31, 0x5e,
	0x36, 0x04, 0xb5, 0xf4, 0x54, 0x8c, 0x91, 0x6a, 0xd8, 0xc9, 0x4d, 0xa6, 0x53, 0x3b, 0xb6, 0xd2,
	0x91, 0xc6, 0x1c, 0xb9, 0x56, 0x5e, 0xcb, 0xc6, 0xfd, 0xe4, 0x7f, 0x5f, 0xa3, 0xff, 0x72, 0x69,
	0xf2, 0xe6, 0xcc, 0x63, 0x9f, 0xeb, 0x62, 0x16, 0x5c, 0xc9, 0xff, 0xdc, 0xb9, 0x3e, 0x04, 0xef,
	0x6f, 0x00, 0xbd, 0x0c, 0xad, 0x23, 0x9c, 0xd9, 0x49, 0x3a, 0x41, 0xb5, 0xac, 0xf2, 0x3c, 0x8e,
	0x32, 0x83, 0x8b, 0xfb, 0xa8, 0x8b, 0x47, 0xcd, 0x3d, 0x32, 0xb8, 0x7f, 0x32, 0x67, 0x8d, 0xef,
	0x73, 0xd6, 0x38, 0x9d, 0x33, 0xf2, 0xbe, 0x64, 0xe4, 0x6b, 0xc9, 0xc8, 0xb7, 0x92, 0x91, 0x93,
	0x92, 0x91, 0x1f, 0x25, 0x23, 0xbf, 0x4a, 0xd6, 0x38, 0x2d, 0x19, 0xf9, 0xfc, 0x93, 0x35, 0x62,
	0xc7, 0xfe, 0xd9, 0x0f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x7b, 0x43, 0x08, 0x23, 0x04,
	0x00, 0x00,
}
