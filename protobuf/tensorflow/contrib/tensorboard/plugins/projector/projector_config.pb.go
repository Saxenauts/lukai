// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/contrib/tensorboard/plugins/projector/projector_config.proto

/*
	Package tensorflow is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/contrib/tensorboard/plugins/projector/projector_config.proto

	It has these top-level messages:
		SpriteMetadata
		EmbeddingInfo
		ProjectorConfig
*/
package tensorflow

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SpriteMetadata struct {
	ImagePath string `protobuf:"bytes,1,opt,name=image_path,json=imagePath,proto3" json:"image_path,omitempty"`
	// [width, height] of a single image in the sprite.
	SingleImageDim []uint32 `protobuf:"varint,2,rep,packed,name=single_image_dim,json=singleImageDim" json:"single_image_dim,omitempty"`
}

func (m *SpriteMetadata) Reset()                    { *m = SpriteMetadata{} }
func (*SpriteMetadata) ProtoMessage()               {}
func (*SpriteMetadata) Descriptor() ([]byte, []int) { return fileDescriptorProjectorConfig, []int{0} }

func (m *SpriteMetadata) GetImagePath() string {
	if m != nil {
		return m.ImagePath
	}
	return ""
}

func (m *SpriteMetadata) GetSingleImageDim() []uint32 {
	if m != nil {
		return m.SingleImageDim
	}
	return nil
}

type EmbeddingInfo struct {
	TensorName    string `protobuf:"bytes,1,opt,name=tensor_name,json=tensorName,proto3" json:"tensor_name,omitempty"`
	MetadataPath  string `protobuf:"bytes,2,opt,name=metadata_path,json=metadataPath,proto3" json:"metadata_path,omitempty"`
	BookmarksPath string `protobuf:"bytes,3,opt,name=bookmarks_path,json=bookmarksPath,proto3" json:"bookmarks_path,omitempty"`
	// Shape of the 2D tensor [N x D]. If missing, it will be inferred from the
	// model checkpoint.
	TensorShape []uint32        `protobuf:"varint,4,rep,packed,name=tensor_shape,json=tensorShape" json:"tensor_shape,omitempty"`
	Sprite      *SpriteMetadata `protobuf:"bytes,5,opt,name=sprite" json:"sprite,omitempty"`
	// Path to the TSV file holding the tensor values. If missing, the tensor
	// is assumed to be stored in the model checkpoint.
	TensorPath string `protobuf:"bytes,6,opt,name=tensor_path,json=tensorPath,proto3" json:"tensor_path,omitempty"`
}

func (m *EmbeddingInfo) Reset()                    { *m = EmbeddingInfo{} }
func (*EmbeddingInfo) ProtoMessage()               {}
func (*EmbeddingInfo) Descriptor() ([]byte, []int) { return fileDescriptorProjectorConfig, []int{1} }

func (m *EmbeddingInfo) GetTensorName() string {
	if m != nil {
		return m.TensorName
	}
	return ""
}

func (m *EmbeddingInfo) GetMetadataPath() string {
	if m != nil {
		return m.MetadataPath
	}
	return ""
}

func (m *EmbeddingInfo) GetBookmarksPath() string {
	if m != nil {
		return m.BookmarksPath
	}
	return ""
}

func (m *EmbeddingInfo) GetTensorShape() []uint32 {
	if m != nil {
		return m.TensorShape
	}
	return nil
}

func (m *EmbeddingInfo) GetSprite() *SpriteMetadata {
	if m != nil {
		return m.Sprite
	}
	return nil
}

func (m *EmbeddingInfo) GetTensorPath() string {
	if m != nil {
		return m.TensorPath
	}
	return ""
}

type ProjectorConfig struct {
	// Path to the checkpoint file. Use either this or model_checkpoint_dir.
	ModelCheckpointPath string           `protobuf:"bytes,1,opt,name=model_checkpoint_path,json=modelCheckpointPath,proto3" json:"model_checkpoint_path,omitempty"`
	Embeddings          []*EmbeddingInfo `protobuf:"bytes,2,rep,name=embeddings" json:"embeddings,omitempty"`
	// Path to the checkpoint directory. The directory will be scanned for the
	// latest checkpoint file.
	ModelCheckpointDir string `protobuf:"bytes,3,opt,name=model_checkpoint_dir,json=modelCheckpointDir,proto3" json:"model_checkpoint_dir,omitempty"`
}

func (m *ProjectorConfig) Reset()                    { *m = ProjectorConfig{} }
func (*ProjectorConfig) ProtoMessage()               {}
func (*ProjectorConfig) Descriptor() ([]byte, []int) { return fileDescriptorProjectorConfig, []int{2} }

func (m *ProjectorConfig) GetModelCheckpointPath() string {
	if m != nil {
		return m.ModelCheckpointPath
	}
	return ""
}

func (m *ProjectorConfig) GetEmbeddings() []*EmbeddingInfo {
	if m != nil {
		return m.Embeddings
	}
	return nil
}

func (m *ProjectorConfig) GetModelCheckpointDir() string {
	if m != nil {
		return m.ModelCheckpointDir
	}
	return ""
}

func init() {
	proto.RegisterType((*SpriteMetadata)(nil), "tensorflow.SpriteMetadata")
	proto.RegisterType((*EmbeddingInfo)(nil), "tensorflow.EmbeddingInfo")
	proto.RegisterType((*ProjectorConfig)(nil), "tensorflow.ProjectorConfig")
}
func (this *SpriteMetadata) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SpriteMetadata)
	if !ok {
		that2, ok := that.(SpriteMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ImagePath != that1.ImagePath {
		return false
	}
	if len(this.SingleImageDim) != len(that1.SingleImageDim) {
		return false
	}
	for i := range this.SingleImageDim {
		if this.SingleImageDim[i] != that1.SingleImageDim[i] {
			return false
		}
	}
	return true
}
func (this *EmbeddingInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EmbeddingInfo)
	if !ok {
		that2, ok := that.(EmbeddingInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TensorName != that1.TensorName {
		return false
	}
	if this.MetadataPath != that1.MetadataPath {
		return false
	}
	if this.BookmarksPath != that1.BookmarksPath {
		return false
	}
	if len(this.TensorShape) != len(that1.TensorShape) {
		return false
	}
	for i := range this.TensorShape {
		if this.TensorShape[i] != that1.TensorShape[i] {
			return false
		}
	}
	if !this.Sprite.Equal(that1.Sprite) {
		return false
	}
	if this.TensorPath != that1.TensorPath {
		return false
	}
	return true
}
func (this *ProjectorConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProjectorConfig)
	if !ok {
		that2, ok := that.(ProjectorConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ModelCheckpointPath != that1.ModelCheckpointPath {
		return false
	}
	if len(this.Embeddings) != len(that1.Embeddings) {
		return false
	}
	for i := range this.Embeddings {
		if !this.Embeddings[i].Equal(that1.Embeddings[i]) {
			return false
		}
	}
	if this.ModelCheckpointDir != that1.ModelCheckpointDir {
		return false
	}
	return true
}
func (this *SpriteMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow.SpriteMetadata{")
	s = append(s, "ImagePath: "+fmt.Sprintf("%#v", this.ImagePath)+",\n")
	s = append(s, "SingleImageDim: "+fmt.Sprintf("%#v", this.SingleImageDim)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EmbeddingInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&tensorflow.EmbeddingInfo{")
	s = append(s, "TensorName: "+fmt.Sprintf("%#v", this.TensorName)+",\n")
	s = append(s, "MetadataPath: "+fmt.Sprintf("%#v", this.MetadataPath)+",\n")
	s = append(s, "BookmarksPath: "+fmt.Sprintf("%#v", this.BookmarksPath)+",\n")
	s = append(s, "TensorShape: "+fmt.Sprintf("%#v", this.TensorShape)+",\n")
	if this.Sprite != nil {
		s = append(s, "Sprite: "+fmt.Sprintf("%#v", this.Sprite)+",\n")
	}
	s = append(s, "TensorPath: "+fmt.Sprintf("%#v", this.TensorPath)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProjectorConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensorflow.ProjectorConfig{")
	s = append(s, "ModelCheckpointPath: "+fmt.Sprintf("%#v", this.ModelCheckpointPath)+",\n")
	if this.Embeddings != nil {
		s = append(s, "Embeddings: "+fmt.Sprintf("%#v", this.Embeddings)+",\n")
	}
	s = append(s, "ModelCheckpointDir: "+fmt.Sprintf("%#v", this.ModelCheckpointDir)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProjectorConfig(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SpriteMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpriteMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ImagePath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProjectorConfig(dAtA, i, uint64(len(m.ImagePath)))
		i += copy(dAtA[i:], m.ImagePath)
	}
	if len(m.SingleImageDim) > 0 {
		dAtA2 := make([]byte, len(m.SingleImageDim)*10)
		var j1 int
		for _, num := range m.SingleImageDim {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintProjectorConfig(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *EmbeddingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmbeddingInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TensorName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProjectorConfig(dAtA, i, uint64(len(m.TensorName)))
		i += copy(dAtA[i:], m.TensorName)
	}
	if len(m.MetadataPath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProjectorConfig(dAtA, i, uint64(len(m.MetadataPath)))
		i += copy(dAtA[i:], m.MetadataPath)
	}
	if len(m.BookmarksPath) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProjectorConfig(dAtA, i, uint64(len(m.BookmarksPath)))
		i += copy(dAtA[i:], m.BookmarksPath)
	}
	if len(m.TensorShape) > 0 {
		dAtA4 := make([]byte, len(m.TensorShape)*10)
		var j3 int
		for _, num := range m.TensorShape {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintProjectorConfig(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.Sprite != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProjectorConfig(dAtA, i, uint64(m.Sprite.Size()))
		n5, err := m.Sprite.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.TensorPath) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintProjectorConfig(dAtA, i, uint64(len(m.TensorPath)))
		i += copy(dAtA[i:], m.TensorPath)
	}
	return i, nil
}

func (m *ProjectorConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProjectorConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ModelCheckpointPath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProjectorConfig(dAtA, i, uint64(len(m.ModelCheckpointPath)))
		i += copy(dAtA[i:], m.ModelCheckpointPath)
	}
	if len(m.Embeddings) > 0 {
		for _, msg := range m.Embeddings {
			dAtA[i] = 0x12
			i++
			i = encodeVarintProjectorConfig(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ModelCheckpointDir) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProjectorConfig(dAtA, i, uint64(len(m.ModelCheckpointDir)))
		i += copy(dAtA[i:], m.ModelCheckpointDir)
	}
	return i, nil
}

func encodeFixed64ProjectorConfig(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32ProjectorConfig(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintProjectorConfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SpriteMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.ImagePath)
	if l > 0 {
		n += 1 + l + sovProjectorConfig(uint64(l))
	}
	if len(m.SingleImageDim) > 0 {
		l = 0
		for _, e := range m.SingleImageDim {
			l += sovProjectorConfig(uint64(e))
		}
		n += 1 + sovProjectorConfig(uint64(l)) + l
	}
	return n
}

func (m *EmbeddingInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.TensorName)
	if l > 0 {
		n += 1 + l + sovProjectorConfig(uint64(l))
	}
	l = len(m.MetadataPath)
	if l > 0 {
		n += 1 + l + sovProjectorConfig(uint64(l))
	}
	l = len(m.BookmarksPath)
	if l > 0 {
		n += 1 + l + sovProjectorConfig(uint64(l))
	}
	if len(m.TensorShape) > 0 {
		l = 0
		for _, e := range m.TensorShape {
			l += sovProjectorConfig(uint64(e))
		}
		n += 1 + sovProjectorConfig(uint64(l)) + l
	}
	if m.Sprite != nil {
		l = m.Sprite.Size()
		n += 1 + l + sovProjectorConfig(uint64(l))
	}
	l = len(m.TensorPath)
	if l > 0 {
		n += 1 + l + sovProjectorConfig(uint64(l))
	}
	return n
}

func (m *ProjectorConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.ModelCheckpointPath)
	if l > 0 {
		n += 1 + l + sovProjectorConfig(uint64(l))
	}
	if len(m.Embeddings) > 0 {
		for _, e := range m.Embeddings {
			l = e.Size()
			n += 1 + l + sovProjectorConfig(uint64(l))
		}
	}
	l = len(m.ModelCheckpointDir)
	if l > 0 {
		n += 1 + l + sovProjectorConfig(uint64(l))
	}
	return n
}

func sovProjectorConfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProjectorConfig(x uint64) (n int) {
	return sovProjectorConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SpriteMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpriteMetadata{`,
		`ImagePath:` + fmt.Sprintf("%v", this.ImagePath) + `,`,
		`SingleImageDim:` + fmt.Sprintf("%v", this.SingleImageDim) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmbeddingInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmbeddingInfo{`,
		`TensorName:` + fmt.Sprintf("%v", this.TensorName) + `,`,
		`MetadataPath:` + fmt.Sprintf("%v", this.MetadataPath) + `,`,
		`BookmarksPath:` + fmt.Sprintf("%v", this.BookmarksPath) + `,`,
		`TensorShape:` + fmt.Sprintf("%v", this.TensorShape) + `,`,
		`Sprite:` + strings.Replace(fmt.Sprintf("%v", this.Sprite), "SpriteMetadata", "SpriteMetadata", 1) + `,`,
		`TensorPath:` + fmt.Sprintf("%v", this.TensorPath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProjectorConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProjectorConfig{`,
		`ModelCheckpointPath:` + fmt.Sprintf("%v", this.ModelCheckpointPath) + `,`,
		`Embeddings:` + strings.Replace(fmt.Sprintf("%v", this.Embeddings), "EmbeddingInfo", "EmbeddingInfo", 1) + `,`,
		`ModelCheckpointDir:` + fmt.Sprintf("%v", this.ModelCheckpointDir) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProjectorConfig(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SpriteMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProjectorConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpriteMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpriteMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProjectorConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProjectorConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImagePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProjectorConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SingleImageDim = append(m.SingleImageDim, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProjectorConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProjectorConfig
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProjectorConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SingleImageDim = append(m.SingleImageDim, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleImageDim", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProjectorConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProjectorConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmbeddingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProjectorConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmbeddingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmbeddingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProjectorConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProjectorConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TensorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProjectorConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProjectorConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookmarksPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProjectorConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProjectorConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookmarksPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProjectorConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TensorShape = append(m.TensorShape, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProjectorConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProjectorConfig
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProjectorConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TensorShape = append(m.TensorShape, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorShape", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sprite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProjectorConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProjectorConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sprite == nil {
				m.Sprite = &SpriteMetadata{}
			}
			if err := m.Sprite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProjectorConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProjectorConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TensorPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProjectorConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProjectorConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectorConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProjectorConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectorConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectorConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelCheckpointPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProjectorConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProjectorConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelCheckpointPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Embeddings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProjectorConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProjectorConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Embeddings = append(m.Embeddings, &EmbeddingInfo{})
			if err := m.Embeddings[len(m.Embeddings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelCheckpointDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProjectorConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProjectorConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelCheckpointDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProjectorConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProjectorConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProjectorConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProjectorConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProjectorConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProjectorConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProjectorConfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProjectorConfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProjectorConfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProjectorConfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProjectorConfig   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/contrib/tensorboard/plugins/projector/projector_config.proto", fileDescriptorProjectorConfig)
}

var fileDescriptorProjectorConfig = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0x31, 0x6f, 0xd4, 0x30,
	0x18, 0x86, 0xe3, 0x16, 0x4e, 0xea, 0x77, 0xcd, 0x81, 0x0c, 0x48, 0x01, 0x09, 0x73, 0x1c, 0x42,
	0xca, 0x80, 0x2e, 0x28, 0x4c, 0xac, 0xb4, 0x0c, 0x1d, 0x40, 0xa7, 0x74, 0x62, 0x8a, 0x9c, 0xc4,
	0x49, 0xcc, 0xc5, 0x76, 0xe4, 0xb8, 0x62, 0xe5, 0x27, 0xf0, 0x33, 0x98, 0xf9, 0x15, 0x8c, 0x1d,
	0x19, 0xb9, 0xb0, 0x30, 0x76, 0xe0, 0x07, 0xa0, 0x73, 0x7c, 0xbd, 0x14, 0x36, 0xeb, 0xfd, 0x5e,
	0x7d, 0xef, 0xfb, 0x3d, 0x32, 0xac, 0x5a, 0xad, 0x8c, 0xca, 0x2e, 0xca, 0xc8, 0x30, 0xd9, 0x29,
	0x5d, 0x36, 0xea, 0x53, 0x94, 0x2b, 0x69, 0x34, 0xcf, 0x9c, 0x94, 0x29, 0xaa, 0x8b, 0xa8, 0x6d,
	0x2e, 0x2a, 0x2e, 0xbb, 0xa8, 0xd5, 0xea, 0x23, 0xcb, 0x8d, 0xd2, 0xfb, 0x57, 0x9a, 0x2b, 0x59,
	0xf2, 0x6a, 0x69, 0x57, 0x61, 0xd8, 0x2f, 0x5a, 0x7c, 0x80, 0xd9, 0x79, 0xab, 0xb9, 0x61, 0xef,
	0x98, 0xa1, 0x05, 0x35, 0x14, 0x3f, 0x06, 0xe0, 0x82, 0x56, 0x2c, 0x6d, 0xa9, 0xa9, 0x03, 0x34,
	0x47, 0xe1, 0x51, 0x72, 0x64, 0x95, 0x15, 0x35, 0x35, 0x0e, 0xe1, 0x6e, 0xc7, 0x65, 0xd5, 0xb0,
	0x74, 0x70, 0x15, 0x5c, 0x04, 0x07, 0xf3, 0xc3, 0xd0, 0x4f, 0x66, 0x83, 0x7e, 0xb6, 0x95, 0x4f,
	0xb9, 0x58, 0xfc, 0x41, 0xe0, 0xbf, 0x15, 0x19, 0x2b, 0x0a, 0x2e, 0xab, 0x33, 0x59, 0x2a, 0xfc,
	0x04, 0xa6, 0x43, 0x74, 0x2a, 0xa9, 0x60, 0x6e, 0xb7, 0x6b, 0xf3, 0x9e, 0x0a, 0x86, 0x9f, 0x81,
	0x2f, 0x5c, 0x8f, 0x21, 0xfe, 0xc0, 0x5a, 0x8e, 0x77, 0xa2, 0x6d, 0xf0, 0x1c, 0x66, 0x99, 0x52,
	0x6b, 0x41, 0xf5, 0xba, 0x1b, 0x5c, 0x87, 0xd6, 0xe5, 0x5f, 0xab, 0xd6, 0xf6, 0x14, 0x8e, 0x5d,
	0x58, 0x57, 0xd3, 0x96, 0x05, 0xb7, 0x6c, 0x49, 0x57, 0xe0, 0x7c, 0x2b, 0xe1, 0x18, 0x26, 0x9d,
	0x3d, 0x3e, 0xb8, 0x3d, 0x47, 0xe1, 0x34, 0x7e, 0xb4, 0xdc, 0x93, 0x59, 0xde, 0xc4, 0x92, 0x38,
	0xe7, 0xe8, 0x06, 0x1b, 0x3d, 0x19, 0xdf, 0xb0, 0xcd, 0x5d, 0x7c, 0x43, 0x70, 0x67, 0xb5, 0x03,
	0x7f, 0x62, 0xb9, 0xe3, 0x18, 0x1e, 0x08, 0x55, 0xb0, 0x26, 0xcd, 0x6b, 0x96, 0xaf, 0x5b, 0xc5,
	0xa5, 0x19, 0xe3, 0xbd, 0x67, 0x87, 0x27, 0xd7, 0x33, 0xdb, 0xff, 0x35, 0x00, 0xdb, 0xd1, 0xeb,
	0x2c, 0xe2, 0x69, 0xfc, 0x70, 0x5c, 0xf0, 0x06, 0xdb, 0x64, 0x64, 0xc6, 0x2f, 0xe1, 0xfe, 0x7f,
	0x71, 0x05, 0xd7, 0x8e, 0x13, 0xfe, 0x27, 0xed, 0x94, 0xeb, 0x37, 0x2f, 0x2e, 0x37, 0xc4, 0xfb,
	0xb1, 0x21, 0xde, 0xd5, 0x86, 0xa0, 0xcf, 0x3d, 0x41, 0x5f, 0x7b, 0x82, 0xbe, 0xf7, 0x04, 0x5d,
	0xf6, 0x04, 0xfd, 0xec, 0x09, 0xfa, 0xdd, 0x13, 0xef, 0xaa, 0x27, 0xe8, 0xcb, 0x2f, 0xe2, 0x65,
	0x13, 0xfb, 0x8f, 0x5e, 0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x12, 0x91, 0x84, 0x9b, 0x02,
	0x00, 0x00,
}
