// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/contrib/verbs/verbs_service.proto

/*
	Package tensorflow is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/contrib/verbs/verbs_service.proto

	It has these top-level messages:
		Channel
		MemoryRegion
		GetRemoteAddressRequest
		GetRemoteAddressResponse
*/
package tensorflow

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Channel struct {
	Lid int32  `protobuf:"varint,1,opt,name=lid,proto3" json:"lid,omitempty"`
	Qpn int32  `protobuf:"varint,2,opt,name=qpn,proto3" json:"qpn,omitempty"`
	Psn int32  `protobuf:"varint,3,opt,name=psn,proto3" json:"psn,omitempty"`
	Snp uint64 `protobuf:"varint,4,opt,name=snp,proto3" json:"snp,omitempty"`
	Iid uint64 `protobuf:"varint,5,opt,name=iid,proto3" json:"iid,omitempty"`
}

func (m *Channel) Reset()                    { *m = Channel{} }
func (*Channel) ProtoMessage()               {}
func (*Channel) Descriptor() ([]byte, []int) { return fileDescriptorVerbsService, []int{0} }

func (m *Channel) GetLid() int32 {
	if m != nil {
		return m.Lid
	}
	return 0
}

func (m *Channel) GetQpn() int32 {
	if m != nil {
		return m.Qpn
	}
	return 0
}

func (m *Channel) GetPsn() int32 {
	if m != nil {
		return m.Psn
	}
	return 0
}

func (m *Channel) GetSnp() uint64 {
	if m != nil {
		return m.Snp
	}
	return 0
}

func (m *Channel) GetIid() uint64 {
	if m != nil {
		return m.Iid
	}
	return 0
}

type MemoryRegion struct {
	RemoteAddr uint64 `protobuf:"varint,1,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	Rkey       uint32 `protobuf:"varint,2,opt,name=rkey,proto3" json:"rkey,omitempty"`
}

func (m *MemoryRegion) Reset()                    { *m = MemoryRegion{} }
func (*MemoryRegion) ProtoMessage()               {}
func (*MemoryRegion) Descriptor() ([]byte, []int) { return fileDescriptorVerbsService, []int{1} }

func (m *MemoryRegion) GetRemoteAddr() uint64 {
	if m != nil {
		return m.RemoteAddr
	}
	return 0
}

func (m *MemoryRegion) GetRkey() uint32 {
	if m != nil {
		return m.Rkey
	}
	return 0
}

type GetRemoteAddressRequest struct {
	HostName string          `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	Channel  *Channel        `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
	Mr       []*MemoryRegion `protobuf:"bytes,3,rep,name=mr" json:"mr,omitempty"`
}

func (m *GetRemoteAddressRequest) Reset()      { *m = GetRemoteAddressRequest{} }
func (*GetRemoteAddressRequest) ProtoMessage() {}
func (*GetRemoteAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorVerbsService, []int{2}
}

func (m *GetRemoteAddressRequest) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GetRemoteAddressRequest) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *GetRemoteAddressRequest) GetMr() []*MemoryRegion {
	if m != nil {
		return m.Mr
	}
	return nil
}

type GetRemoteAddressResponse struct {
	HostName string          `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	Channel  *Channel        `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
	Mr       []*MemoryRegion `protobuf:"bytes,3,rep,name=mr" json:"mr,omitempty"`
}

func (m *GetRemoteAddressResponse) Reset()      { *m = GetRemoteAddressResponse{} }
func (*GetRemoteAddressResponse) ProtoMessage() {}
func (*GetRemoteAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorVerbsService, []int{3}
}

func (m *GetRemoteAddressResponse) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *GetRemoteAddressResponse) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *GetRemoteAddressResponse) GetMr() []*MemoryRegion {
	if m != nil {
		return m.Mr
	}
	return nil
}

func init() {
	proto.RegisterType((*Channel)(nil), "tensorflow.Channel")
	proto.RegisterType((*MemoryRegion)(nil), "tensorflow.MemoryRegion")
	proto.RegisterType((*GetRemoteAddressRequest)(nil), "tensorflow.GetRemoteAddressRequest")
	proto.RegisterType((*GetRemoteAddressResponse)(nil), "tensorflow.GetRemoteAddressResponse")
}
func (this *Channel) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Channel)
	if !ok {
		that2, ok := that.(Channel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Lid != that1.Lid {
		return false
	}
	if this.Qpn != that1.Qpn {
		return false
	}
	if this.Psn != that1.Psn {
		return false
	}
	if this.Snp != that1.Snp {
		return false
	}
	if this.Iid != that1.Iid {
		return false
	}
	return true
}
func (this *MemoryRegion) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MemoryRegion)
	if !ok {
		that2, ok := that.(MemoryRegion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.RemoteAddr != that1.RemoteAddr {
		return false
	}
	if this.Rkey != that1.Rkey {
		return false
	}
	return true
}
func (this *GetRemoteAddressRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetRemoteAddressRequest)
	if !ok {
		that2, ok := that.(GetRemoteAddressRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if !this.Channel.Equal(that1.Channel) {
		return false
	}
	if len(this.Mr) != len(that1.Mr) {
		return false
	}
	for i := range this.Mr {
		if !this.Mr[i].Equal(that1.Mr[i]) {
			return false
		}
	}
	return true
}
func (this *GetRemoteAddressResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetRemoteAddressResponse)
	if !ok {
		that2, ok := that.(GetRemoteAddressResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.HostName != that1.HostName {
		return false
	}
	if !this.Channel.Equal(that1.Channel) {
		return false
	}
	if len(this.Mr) != len(that1.Mr) {
		return false
	}
	for i := range this.Mr {
		if !this.Mr[i].Equal(that1.Mr[i]) {
			return false
		}
	}
	return true
}
func (this *Channel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&tensorflow.Channel{")
	s = append(s, "Lid: "+fmt.Sprintf("%#v", this.Lid)+",\n")
	s = append(s, "Qpn: "+fmt.Sprintf("%#v", this.Qpn)+",\n")
	s = append(s, "Psn: "+fmt.Sprintf("%#v", this.Psn)+",\n")
	s = append(s, "Snp: "+fmt.Sprintf("%#v", this.Snp)+",\n")
	s = append(s, "Iid: "+fmt.Sprintf("%#v", this.Iid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MemoryRegion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow.MemoryRegion{")
	s = append(s, "RemoteAddr: "+fmt.Sprintf("%#v", this.RemoteAddr)+",\n")
	s = append(s, "Rkey: "+fmt.Sprintf("%#v", this.Rkey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRemoteAddressRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensorflow.GetRemoteAddressRequest{")
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.Channel != nil {
		s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	}
	if this.Mr != nil {
		s = append(s, "Mr: "+fmt.Sprintf("%#v", this.Mr)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetRemoteAddressResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensorflow.GetRemoteAddressResponse{")
	s = append(s, "HostName: "+fmt.Sprintf("%#v", this.HostName)+",\n")
	if this.Channel != nil {
		s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	}
	if this.Mr != nil {
		s = append(s, "Mr: "+fmt.Sprintf("%#v", this.Mr)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringVerbsService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VerbsService service

type VerbsServiceClient interface {
	GetRemoteAddress(ctx context.Context, in *GetRemoteAddressRequest, opts ...grpc.CallOption) (*GetRemoteAddressResponse, error)
}

type verbsServiceClient struct {
	cc *grpc.ClientConn
}

func NewVerbsServiceClient(cc *grpc.ClientConn) VerbsServiceClient {
	return &verbsServiceClient{cc}
}

func (c *verbsServiceClient) GetRemoteAddress(ctx context.Context, in *GetRemoteAddressRequest, opts ...grpc.CallOption) (*GetRemoteAddressResponse, error) {
	out := new(GetRemoteAddressResponse)
	err := grpc.Invoke(ctx, "/tensorflow.VerbsService/GetRemoteAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VerbsService service

type VerbsServiceServer interface {
	GetRemoteAddress(context.Context, *GetRemoteAddressRequest) (*GetRemoteAddressResponse, error)
}

func RegisterVerbsServiceServer(s *grpc.Server, srv VerbsServiceServer) {
	s.RegisterService(&_VerbsService_serviceDesc, srv)
}

func _VerbsService_GetRemoteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemoteAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerbsServiceServer).GetRemoteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.VerbsService/GetRemoteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerbsServiceServer).GetRemoteAddress(ctx, req.(*GetRemoteAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VerbsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tensorflow.VerbsService",
	HandlerType: (*VerbsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRemoteAddress",
			Handler:    _VerbsService_GetRemoteAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/tensorflow/contrib/verbs/verbs_service.proto",
}

func (m *Channel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Channel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVerbsService(dAtA, i, uint64(m.Lid))
	}
	if m.Qpn != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVerbsService(dAtA, i, uint64(m.Qpn))
	}
	if m.Psn != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVerbsService(dAtA, i, uint64(m.Psn))
	}
	if m.Snp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVerbsService(dAtA, i, uint64(m.Snp))
	}
	if m.Iid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVerbsService(dAtA, i, uint64(m.Iid))
	}
	return i, nil
}

func (m *MemoryRegion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemoryRegion) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RemoteAddr != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVerbsService(dAtA, i, uint64(m.RemoteAddr))
	}
	if m.Rkey != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVerbsService(dAtA, i, uint64(m.Rkey))
	}
	return i, nil
}

func (m *GetRemoteAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRemoteAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HostName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVerbsService(dAtA, i, uint64(len(m.HostName)))
		i += copy(dAtA[i:], m.HostName)
	}
	if m.Channel != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVerbsService(dAtA, i, uint64(m.Channel.Size()))
		n1, err := m.Channel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Mr) > 0 {
		for _, msg := range m.Mr {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintVerbsService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetRemoteAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRemoteAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HostName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVerbsService(dAtA, i, uint64(len(m.HostName)))
		i += copy(dAtA[i:], m.HostName)
	}
	if m.Channel != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVerbsService(dAtA, i, uint64(m.Channel.Size()))
		n2, err := m.Channel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Mr) > 0 {
		for _, msg := range m.Mr {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintVerbsService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64VerbsService(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32VerbsService(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintVerbsService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Channel) Size() (n int) {
	var l int
	_ = l
	if m.Lid != 0 {
		n += 1 + sovVerbsService(uint64(m.Lid))
	}
	if m.Qpn != 0 {
		n += 1 + sovVerbsService(uint64(m.Qpn))
	}
	if m.Psn != 0 {
		n += 1 + sovVerbsService(uint64(m.Psn))
	}
	if m.Snp != 0 {
		n += 1 + sovVerbsService(uint64(m.Snp))
	}
	if m.Iid != 0 {
		n += 1 + sovVerbsService(uint64(m.Iid))
	}
	return n
}

func (m *MemoryRegion) Size() (n int) {
	var l int
	_ = l
	if m.RemoteAddr != 0 {
		n += 1 + sovVerbsService(uint64(m.RemoteAddr))
	}
	if m.Rkey != 0 {
		n += 1 + sovVerbsService(uint64(m.Rkey))
	}
	return n
}

func (m *GetRemoteAddressRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.HostName)
	if l > 0 {
		n += 1 + l + sovVerbsService(uint64(l))
	}
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovVerbsService(uint64(l))
	}
	if len(m.Mr) > 0 {
		for _, e := range m.Mr {
			l = e.Size()
			n += 1 + l + sovVerbsService(uint64(l))
		}
	}
	return n
}

func (m *GetRemoteAddressResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.HostName)
	if l > 0 {
		n += 1 + l + sovVerbsService(uint64(l))
	}
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovVerbsService(uint64(l))
	}
	if len(m.Mr) > 0 {
		for _, e := range m.Mr {
			l = e.Size()
			n += 1 + l + sovVerbsService(uint64(l))
		}
	}
	return n
}

func sovVerbsService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVerbsService(x uint64) (n int) {
	return sovVerbsService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Channel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Channel{`,
		`Lid:` + fmt.Sprintf("%v", this.Lid) + `,`,
		`Qpn:` + fmt.Sprintf("%v", this.Qpn) + `,`,
		`Psn:` + fmt.Sprintf("%v", this.Psn) + `,`,
		`Snp:` + fmt.Sprintf("%v", this.Snp) + `,`,
		`Iid:` + fmt.Sprintf("%v", this.Iid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MemoryRegion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MemoryRegion{`,
		`RemoteAddr:` + fmt.Sprintf("%v", this.RemoteAddr) + `,`,
		`Rkey:` + fmt.Sprintf("%v", this.Rkey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRemoteAddressRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRemoteAddressRequest{`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`Channel:` + strings.Replace(fmt.Sprintf("%v", this.Channel), "Channel", "Channel", 1) + `,`,
		`Mr:` + strings.Replace(fmt.Sprintf("%v", this.Mr), "MemoryRegion", "MemoryRegion", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRemoteAddressResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRemoteAddressResponse{`,
		`HostName:` + fmt.Sprintf("%v", this.HostName) + `,`,
		`Channel:` + strings.Replace(fmt.Sprintf("%v", this.Channel), "Channel", "Channel", 1) + `,`,
		`Mr:` + strings.Replace(fmt.Sprintf("%v", this.Mr), "MemoryRegion", "MemoryRegion", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringVerbsService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Channel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerbsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lid", wireType)
			}
			m.Lid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerbsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qpn", wireType)
			}
			m.Qpn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerbsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qpn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Psn", wireType)
			}
			m.Psn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerbsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Psn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snp", wireType)
			}
			m.Snp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerbsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Snp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			m.Iid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerbsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVerbsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVerbsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemoryRegion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerbsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemoryRegion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemoryRegion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAddr", wireType)
			}
			m.RemoteAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerbsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoteAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rkey", wireType)
			}
			m.Rkey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerbsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rkey |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVerbsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVerbsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRemoteAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerbsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRemoteAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRemoteAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerbsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerbsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerbsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerbsService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &Channel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerbsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerbsService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mr = append(m.Mr, &MemoryRegion{})
			if err := m.Mr[len(m.Mr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerbsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVerbsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRemoteAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerbsService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRemoteAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRemoteAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerbsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerbsService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerbsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerbsService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &Channel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerbsService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerbsService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mr = append(m.Mr, &MemoryRegion{})
			if err := m.Mr[len(m.Mr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerbsService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVerbsService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVerbsService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVerbsService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVerbsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVerbsService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVerbsService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVerbsService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVerbsService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVerbsService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVerbsService   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/contrib/verbs/verbs_service.proto", fileDescriptorVerbsService)
}

var fileDescriptorVerbsService = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x92, 0xbd, 0x6e, 0x14, 0x31,
	0x14, 0x85, 0xc7, 0x3b, 0x13, 0x42, 0xee, 0x06, 0x29, 0x32, 0x05, 0x16, 0x20, 0xb3, 0x1a, 0x28,
	0xa6, 0x61, 0x56, 0x5a, 0xc4, 0x03, 0x90, 0x14, 0x54, 0xa0, 0xc8, 0x48, 0x74, 0x68, 0x99, 0x9f,
	0x9b, 0xc4, 0x62, 0xc7, 0x9e, 0xb5, 0x27, 0x41, 0xe9, 0x78, 0x03, 0xf2, 0x18, 0x3c, 0x0a, 0x65,
	0x4a, 0x4a, 0x76, 0x68, 0x28, 0xf7, 0x11, 0x90, 0xed, 0x85, 0x1d, 0x81, 0xa0, 0xa5, 0xb1, 0xae,
	0x3e, 0x1d, 0x5d, 0x9f, 0x63, 0x1f, 0x78, 0xda, 0x1a, 0xdd, 0xe9, 0xf2, 0xfc, 0x64, 0xda, 0xa1,
	0xb2, 0xda, 0x9c, 0x2c, 0xf4, 0xfb, 0x69, 0xa5, 0x55, 0x67, 0x64, 0x39, 0xbd, 0x40, 0x53, 0xda,
	0x70, 0xce, 0x2d, 0x9a, 0x0b, 0x59, 0x61, 0xee, 0xf5, 0x14, 0xb6, 0xea, 0xb4, 0x82, 0xdd, 0xa3,
	0xb3, 0x42, 0x29, 0x5c, 0xd0, 0x03, 0x88, 0x17, 0xb2, 0x66, 0x64, 0x42, 0xb2, 0x1d, 0xe1, 0x46,
	0x47, 0x96, 0xad, 0x62, 0xa3, 0x40, 0x96, 0xad, 0x72, 0xa4, 0xb5, 0x8a, 0xc5, 0x81, 0xb4, 0xd6,
	0x13, 0xab, 0x5a, 0x96, 0x4c, 0x48, 0x96, 0x08, 0x37, 0x3a, 0x22, 0x65, 0xcd, 0x76, 0x02, 0x91,
	0xb2, 0x4e, 0x8f, 0x60, 0xff, 0x05, 0x36, 0xda, 0x5c, 0x0a, 0x3c, 0x95, 0x5a, 0xd1, 0x07, 0x30,
	0x36, 0xd8, 0xe8, 0x0e, 0xe7, 0x45, 0x5d, 0x1b, 0x7f, 0x63, 0x22, 0x20, 0xa0, 0x67, 0x75, 0x6d,
	0x28, 0x85, 0xc4, 0xbc, 0xc3, 0x4b, 0x7f, 0xf3, 0x2d, 0xe1, 0xe7, 0xf4, 0x23, 0x81, 0x3b, 0xcf,
	0xb1, 0x13, 0xbf, 0x54, 0x68, 0xad, 0xc0, 0xe5, 0x39, 0xda, 0x8e, 0xde, 0x83, 0xbd, 0x33, 0x6d,
	0xbb, 0xb9, 0x2a, 0x1a, 0xf4, 0xeb, 0xf6, 0xc4, 0x4d, 0x07, 0x5e, 0x16, 0x0d, 0xd2, 0xc7, 0xb0,
	0x5b, 0x85, 0x88, 0x7e, 0xdf, 0x78, 0x76, 0x3b, 0xdf, 0x3e, 0x40, 0xbe, 0x49, 0x2f, 0x7e, 0x6a,
	0x68, 0x06, 0xa3, 0xc6, 0xb0, 0x78, 0x12, 0x67, 0xe3, 0x19, 0x1b, 0x2a, 0x87, 0x11, 0xc4, 0xa8,
	0x31, 0xe9, 0x15, 0x01, 0xf6, 0xa7, 0x23, 0xdb, 0x6a, 0x65, 0xf1, 0xff, 0x58, 0x9a, 0x35, 0xb0,
	0xff, 0xda, 0xfd, 0xf8, 0xab, 0xf0, 0xe1, 0xf4, 0x0d, 0x1c, 0xfc, 0xee, 0x90, 0x3e, 0x1c, 0x6e,
	0xf8, 0xcb, 0x8b, 0xde, 0x7d, 0xf4, 0x6f, 0x51, 0x08, 0x79, 0xf8, 0xf6, 0x7a, 0xc5, 0xa3, 0x2f,
	0x2b, 0x1e, 0xad, 0x57, 0x9c, 0x7c, 0xe8, 0x39, 0xf9, 0xd4, 0x73, 0xf2, 0xb9, 0xe7, 0xe4, 0xba,
	0xe7, 0xe4, 0x6b, 0xcf, 0xc9, 0xf7, 0x9e, 0x47, 0xeb, 0x9e, 0x93, 0xab, 0x6f, 0x3c, 0x82, 0xfb,
	0xda, 0x9c, 0x0e, 0xd7, 0x6e, 0x9a, 0x9a, 0xfb, 0x8e, 0x1e, 0xd2, 0xa1, 0xf1, 0x63, 0x57, 0x54,
	0x7b, 0x4c, 0xca, 0x1b, 0xbe, 0xb2, 0x4f, 0x7e, 0x04, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x0b, 0x3a,
	0xe2, 0xeb, 0x02, 0x00, 0x00,
}
