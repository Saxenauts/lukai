// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/contrib/cloud/kernels/bigquery_table_partition.proto

/*
	Package tensorflow is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/contrib/cloud/kernels/bigquery_table_partition.proto

	It has these top-level messages:
		BigQueryTablePartition
*/
package tensorflow

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// This proto specifies a table partition in BigQuery.
type BigQueryTablePartition struct {
	// [start_index, end_index] specify the boundaries of a partition.
	// If end_index is -1, every row starting from start_index is part of the
	// partition.
	StartIndex int64 `protobuf:"varint,1,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	EndIndex   int64 `protobuf:"varint,2,opt,name=end_index,json=endIndex,proto3" json:"end_index,omitempty"`
}

func (m *BigQueryTablePartition) Reset()      { *m = BigQueryTablePartition{} }
func (*BigQueryTablePartition) ProtoMessage() {}
func (*BigQueryTablePartition) Descriptor() ([]byte, []int) {
	return fileDescriptorBigqueryTablePartition, []int{0}
}

func (m *BigQueryTablePartition) GetStartIndex() int64 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *BigQueryTablePartition) GetEndIndex() int64 {
	if m != nil {
		return m.EndIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*BigQueryTablePartition)(nil), "tensorflow.BigQueryTablePartition")
}
func (this *BigQueryTablePartition) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BigQueryTablePartition)
	if !ok {
		that2, ok := that.(BigQueryTablePartition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.StartIndex != that1.StartIndex {
		return false
	}
	if this.EndIndex != that1.EndIndex {
		return false
	}
	return true
}
func (this *BigQueryTablePartition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow.BigQueryTablePartition{")
	s = append(s, "StartIndex: "+fmt.Sprintf("%#v", this.StartIndex)+",\n")
	s = append(s, "EndIndex: "+fmt.Sprintf("%#v", this.EndIndex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBigqueryTablePartition(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BigQueryTablePartition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BigQueryTablePartition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBigqueryTablePartition(dAtA, i, uint64(m.StartIndex))
	}
	if m.EndIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBigqueryTablePartition(dAtA, i, uint64(m.EndIndex))
	}
	return i, nil
}

func encodeFixed64BigqueryTablePartition(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32BigqueryTablePartition(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBigqueryTablePartition(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BigQueryTablePartition) Size() (n int) {
	var l int
	_ = l
	if m.StartIndex != 0 {
		n += 1 + sovBigqueryTablePartition(uint64(m.StartIndex))
	}
	if m.EndIndex != 0 {
		n += 1 + sovBigqueryTablePartition(uint64(m.EndIndex))
	}
	return n
}

func sovBigqueryTablePartition(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBigqueryTablePartition(x uint64) (n int) {
	return sovBigqueryTablePartition(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BigQueryTablePartition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BigQueryTablePartition{`,
		`StartIndex:` + fmt.Sprintf("%v", this.StartIndex) + `,`,
		`EndIndex:` + fmt.Sprintf("%v", this.EndIndex) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBigqueryTablePartition(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BigQueryTablePartition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigqueryTablePartition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BigQueryTablePartition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BigQueryTablePartition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIndex", wireType)
			}
			m.StartIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigqueryTablePartition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartIndex |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndIndex", wireType)
			}
			m.EndIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigqueryTablePartition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndIndex |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBigqueryTablePartition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigqueryTablePartition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBigqueryTablePartition(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBigqueryTablePartition
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBigqueryTablePartition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBigqueryTablePartition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBigqueryTablePartition
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBigqueryTablePartition
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBigqueryTablePartition(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBigqueryTablePartition = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBigqueryTablePartition   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/contrib/cloud/kernels/bigquery_table_partition.proto", fileDescriptorBigqueryTablePartition)
}

var fileDescriptorBigqueryTablePartition = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xf2, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0x49, 0xcd, 0x2b, 0xce, 0x2f, 0x4a, 0xcb, 0xc9, 0x2f, 0xd7,
	0x4f, 0xce, 0xcf, 0x2b, 0x29, 0xca, 0x4c, 0xd2, 0x4f, 0xce, 0xc9, 0x2f, 0x4d, 0xd1, 0xcf, 0x4e,
	0x2d, 0xca, 0x4b, 0xcd, 0x29, 0xd6, 0x4f, 0xca, 0x4c, 0x2f, 0x2c, 0x4d, 0x2d, 0xaa, 0x8c, 0x2f,
	0x49, 0x4c, 0xca, 0x49, 0x8d, 0x2f, 0x48, 0x2c, 0x2a, 0xc9, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x03,
	0x1b, 0x21, 0xc4, 0x85, 0x30, 0x40, 0x29, 0x8c, 0x4b, 0xcc, 0x29, 0x33, 0x3d, 0x10, 0xa4, 0x3a,
	0x04, 0xa4, 0x38, 0x00, 0xa6, 0x56, 0x48, 0x9e, 0x8b, 0xbb, 0xb8, 0x24, 0xb1, 0xa8, 0x24, 0x3e,
	0x33, 0x2f, 0x25, 0xb5, 0x42, 0x82, 0x51, 0x81, 0x51, 0x83, 0x39, 0x88, 0x0b, 0x2c, 0xe4, 0x09,
	0x12, 0x11, 0x92, 0xe6, 0xe2, 0x4c, 0xcd, 0x4b, 0x81, 0x4a, 0x33, 0x81, 0xa5, 0x39, 0x52, 0xf3,
	0x52, 0xc0, 0x92, 0x4e, 0x3a, 0x17, 0x1e, 0xca, 0x31, 0xdc, 0x78, 0x28, 0xc7, 0xf0, 0xe1, 0xa1,
	0x1c, 0x63, 0xc3, 0x23, 0x39, 0xc6, 0x15, 0x8f, 0xe4, 0x18, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0,
	0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x17, 0x8f, 0xe4, 0x18, 0x3e, 0x3c, 0x92, 0x63, 0x9c,
	0xf0, 0x58, 0x8e, 0x21, 0x89, 0x0d, 0xec, 0x30, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0,
	0x31, 0xc9, 0x67, 0xe4, 0x00, 0x00, 0x00,
}
