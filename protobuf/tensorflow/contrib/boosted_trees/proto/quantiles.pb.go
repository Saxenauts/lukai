// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/contrib/boosted_trees/proto/quantiles.proto

/*
	Package boosted_trees is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/contrib/boosted_trees/proto/quantiles.proto

	It has these top-level messages:
		QuantileConfig
		QuantileEntry
		QuantileSummaryState
		QuantileStreamState
*/
package boosted_trees

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type QuantileConfig struct {
	// Maximum eps error when computing quantile summaries.
	Eps float64 `protobuf:"fixed64,1,opt,name=eps,proto3" json:"eps,omitempty"`
	// Number of quantiles to generate.
	NumQuantiles int64 `protobuf:"varint,2,opt,name=num_quantiles,json=numQuantiles,proto3" json:"num_quantiles,omitempty"`
}

func (m *QuantileConfig) Reset()                    { *m = QuantileConfig{} }
func (*QuantileConfig) ProtoMessage()               {}
func (*QuantileConfig) Descriptor() ([]byte, []int) { return fileDescriptorQuantiles, []int{0} }

func (m *QuantileConfig) GetEps() float64 {
	if m != nil {
		return m.Eps
	}
	return 0
}

func (m *QuantileConfig) GetNumQuantiles() int64 {
	if m != nil {
		return m.NumQuantiles
	}
	return 0
}

type QuantileEntry struct {
	// Value for the entry.
	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	// Weight for the entry.
	Weight float32 `protobuf:"fixed32,2,opt,name=weight,proto3" json:"weight,omitempty"`
	// We need the minimum and maximum rank possible for this entry.
	// Rank is 0.0 for the absolute minimum and sum of the weights for the maximum
	// value in the input.
	MinRank float32 `protobuf:"fixed32,3,opt,name=min_rank,json=minRank,proto3" json:"min_rank,omitempty"`
	MaxRank float32 `protobuf:"fixed32,4,opt,name=max_rank,json=maxRank,proto3" json:"max_rank,omitempty"`
}

func (m *QuantileEntry) Reset()                    { *m = QuantileEntry{} }
func (*QuantileEntry) ProtoMessage()               {}
func (*QuantileEntry) Descriptor() ([]byte, []int) { return fileDescriptorQuantiles, []int{1} }

func (m *QuantileEntry) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *QuantileEntry) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *QuantileEntry) GetMinRank() float32 {
	if m != nil {
		return m.MinRank
	}
	return 0
}

func (m *QuantileEntry) GetMaxRank() float32 {
	if m != nil {
		return m.MaxRank
	}
	return 0
}

type QuantileSummaryState struct {
	Entries []*QuantileEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *QuantileSummaryState) Reset()                    { *m = QuantileSummaryState{} }
func (*QuantileSummaryState) ProtoMessage()               {}
func (*QuantileSummaryState) Descriptor() ([]byte, []int) { return fileDescriptorQuantiles, []int{2} }

func (m *QuantileSummaryState) GetEntries() []*QuantileEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type QuantileStreamState struct {
	Summaries []*QuantileSummaryState `protobuf:"bytes,1,rep,name=summaries" json:"summaries,omitempty"`
}

func (m *QuantileStreamState) Reset()                    { *m = QuantileStreamState{} }
func (*QuantileStreamState) ProtoMessage()               {}
func (*QuantileStreamState) Descriptor() ([]byte, []int) { return fileDescriptorQuantiles, []int{3} }

func (m *QuantileStreamState) GetSummaries() []*QuantileSummaryState {
	if m != nil {
		return m.Summaries
	}
	return nil
}

func init() {
	proto.RegisterType((*QuantileConfig)(nil), "boosted_trees.QuantileConfig")
	proto.RegisterType((*QuantileEntry)(nil), "boosted_trees.QuantileEntry")
	proto.RegisterType((*QuantileSummaryState)(nil), "boosted_trees.QuantileSummaryState")
	proto.RegisterType((*QuantileStreamState)(nil), "boosted_trees.QuantileStreamState")
}
func (this *QuantileConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QuantileConfig)
	if !ok {
		that2, ok := that.(QuantileConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Eps != that1.Eps {
		return false
	}
	if this.NumQuantiles != that1.NumQuantiles {
		return false
	}
	return true
}
func (this *QuantileEntry) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QuantileEntry)
	if !ok {
		that2, ok := that.(QuantileEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	if this.MinRank != that1.MinRank {
		return false
	}
	if this.MaxRank != that1.MaxRank {
		return false
	}
	return true
}
func (this *QuantileSummaryState) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QuantileSummaryState)
	if !ok {
		that2, ok := that.(QuantileSummaryState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Entries) != len(that1.Entries) {
		return false
	}
	for i := range this.Entries {
		if !this.Entries[i].Equal(that1.Entries[i]) {
			return false
		}
	}
	return true
}
func (this *QuantileStreamState) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*QuantileStreamState)
	if !ok {
		that2, ok := that.(QuantileStreamState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Summaries) != len(that1.Summaries) {
		return false
	}
	for i := range this.Summaries {
		if !this.Summaries[i].Equal(that1.Summaries[i]) {
			return false
		}
	}
	return true
}
func (this *QuantileConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&boosted_trees.QuantileConfig{")
	s = append(s, "Eps: "+fmt.Sprintf("%#v", this.Eps)+",\n")
	s = append(s, "NumQuantiles: "+fmt.Sprintf("%#v", this.NumQuantiles)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QuantileEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&boosted_trees.QuantileEntry{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Weight: "+fmt.Sprintf("%#v", this.Weight)+",\n")
	s = append(s, "MinRank: "+fmt.Sprintf("%#v", this.MinRank)+",\n")
	s = append(s, "MaxRank: "+fmt.Sprintf("%#v", this.MaxRank)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QuantileSummaryState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&boosted_trees.QuantileSummaryState{")
	if this.Entries != nil {
		s = append(s, "Entries: "+fmt.Sprintf("%#v", this.Entries)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QuantileStreamState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&boosted_trees.QuantileStreamState{")
	if this.Summaries != nil {
		s = append(s, "Summaries: "+fmt.Sprintf("%#v", this.Summaries)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringQuantiles(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *QuantileConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuantileConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Eps != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Quantiles(dAtA, i, uint64(math.Float64bits(float64(m.Eps))))
	}
	if m.NumQuantiles != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintQuantiles(dAtA, i, uint64(m.NumQuantiles))
	}
	return i, nil
}

func (m *QuantileEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuantileEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Quantiles(dAtA, i, uint32(math.Float32bits(float32(m.Value))))
	}
	if m.Weight != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Quantiles(dAtA, i, uint32(math.Float32bits(float32(m.Weight))))
	}
	if m.MinRank != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Quantiles(dAtA, i, uint32(math.Float32bits(float32(m.MinRank))))
	}
	if m.MaxRank != 0 {
		dAtA[i] = 0x25
		i++
		i = encodeFixed32Quantiles(dAtA, i, uint32(math.Float32bits(float32(m.MaxRank))))
	}
	return i, nil
}

func (m *QuantileSummaryState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuantileSummaryState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintQuantiles(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *QuantileStreamState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuantileStreamState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Summaries) > 0 {
		for _, msg := range m.Summaries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintQuantiles(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Quantiles(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Quantiles(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintQuantiles(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *QuantileConfig) Size() (n int) {
	var l int
	_ = l
	if m.Eps != 0 {
		n += 9
	}
	if m.NumQuantiles != 0 {
		n += 1 + sovQuantiles(uint64(m.NumQuantiles))
	}
	return n
}

func (m *QuantileEntry) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 5
	}
	if m.Weight != 0 {
		n += 5
	}
	if m.MinRank != 0 {
		n += 5
	}
	if m.MaxRank != 0 {
		n += 5
	}
	return n
}

func (m *QuantileSummaryState) Size() (n int) {
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovQuantiles(uint64(l))
		}
	}
	return n
}

func (m *QuantileStreamState) Size() (n int) {
	var l int
	_ = l
	if len(m.Summaries) > 0 {
		for _, e := range m.Summaries {
			l = e.Size()
			n += 1 + l + sovQuantiles(uint64(l))
		}
	}
	return n
}

func sovQuantiles(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozQuantiles(x uint64) (n int) {
	return sovQuantiles(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *QuantileConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuantileConfig{`,
		`Eps:` + fmt.Sprintf("%v", this.Eps) + `,`,
		`NumQuantiles:` + fmt.Sprintf("%v", this.NumQuantiles) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuantileEntry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuantileEntry{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Weight:` + fmt.Sprintf("%v", this.Weight) + `,`,
		`MinRank:` + fmt.Sprintf("%v", this.MinRank) + `,`,
		`MaxRank:` + fmt.Sprintf("%v", this.MaxRank) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuantileSummaryState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuantileSummaryState{`,
		`Entries:` + strings.Replace(fmt.Sprintf("%v", this.Entries), "QuantileEntry", "QuantileEntry", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuantileStreamState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuantileStreamState{`,
		`Summaries:` + strings.Replace(fmt.Sprintf("%v", this.Summaries), "QuantileSummaryState", "QuantileSummaryState", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringQuantiles(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *QuantileConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuantiles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuantileConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuantileConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eps", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Eps = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumQuantiles", wireType)
			}
			m.NumQuantiles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuantiles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumQuantiles |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuantiles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuantiles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuantileEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuantiles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuantileEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuantileEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Value = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Weight = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinRank", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.MinRank = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRank", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.MaxRank = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQuantiles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuantiles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuantileSummaryState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuantiles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuantileSummaryState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuantileSummaryState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuantiles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuantiles
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &QuantileEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuantiles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuantiles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuantileStreamState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuantiles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuantileStreamState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuantileStreamState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuantiles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuantiles
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summaries = append(m.Summaries, &QuantileSummaryState{})
			if err := m.Summaries[len(m.Summaries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuantiles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuantiles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuantiles(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuantiles
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuantiles
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuantiles
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthQuantiles
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQuantiles
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQuantiles(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQuantiles = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuantiles   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/contrib/boosted_trees/proto/quantiles.proto", fileDescriptorQuantiles)
}

var fileDescriptorQuantiles = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x31, 0x4f, 0x3a, 0x31,
	0x18, 0xc6, 0xef, 0xe5, 0xfe, 0x7f, 0xd0, 0x2a, 0xc6, 0x9c, 0xc4, 0x60, 0x62, 0x1a, 0x72, 0x2c,
	0x4c, 0x5c, 0xa2, 0x89, 0xab, 0x51, 0x63, 0xdc, 0x4c, 0x2c, 0x8b, 0x1b, 0xe9, 0x69, 0xc1, 0x0b,
	0xb4, 0xc5, 0xb6, 0x27, 0xb0, 0xf9, 0x11, 0xfc, 0x18, 0x7e, 0x14, 0x47, 0x46, 0x47, 0xa9, 0x8b,
	0x23, 0xa3, 0xa3, 0xb9, 0xc2, 0x81, 0x0c, 0x6e, 0x7d, 0xf2, 0x3c, 0xef, 0xaf, 0xef, 0xd3, 0xa2,
	0xd3, 0x81, 0x92, 0x46, 0xc6, 0x69, 0x27, 0x32, 0x4c, 0x68, 0xa9, 0x3a, 0x7d, 0x39, 0x8c, 0xee,
	0xa4, 0x30, 0x2a, 0x89, 0xa3, 0x58, 0x4a, 0x6d, 0xd8, 0x7d, 0xdb, 0x28, 0xc6, 0x74, 0xe4, 0x92,
	0xd1, 0x63, 0x4a, 0x85, 0x49, 0xfa, 0x4c, 0x37, 0x9d, 0x0e, 0xca, 0x6b, 0xa1, 0xf0, 0x0a, 0xed,
	0xdc, 0x2c, 0x12, 0x17, 0x52, 0x74, 0x92, 0x6e, 0xb0, 0x8b, 0x7c, 0x36, 0xd0, 0x55, 0xa8, 0x41,
	0x03, 0x48, 0x76, 0x0c, 0xea, 0xa8, 0x2c, 0x52, 0xde, 0x5e, 0x92, 0xaa, 0x85, 0x1a, 0x34, 0x7c,
	0xb2, 0x2d, 0x52, 0x9e, 0xcf, 0xea, 0x50, 0xa3, 0x72, 0x2e, 0x2e, 0x85, 0x51, 0xe3, 0xa0, 0x82,
	0xfe, 0x3f, 0xd1, 0x7e, 0xca, 0x1c, 0xa9, 0x40, 0xe6, 0x22, 0xd8, 0x47, 0xc5, 0x21, 0x4b, 0xba,
	0x0f, 0xc6, 0x41, 0x0a, 0x64, 0xa1, 0x82, 0x03, 0xb4, 0xc1, 0x13, 0xd1, 0x56, 0x54, 0xf4, 0xaa,
	0xbe, 0x73, 0x4a, 0x3c, 0x11, 0x84, 0x8a, 0x9e, 0xb3, 0xe8, 0x68, 0x6e, 0xfd, 0x5b, 0x58, 0x74,
	0x94, 0x59, 0xe1, 0x35, 0xaa, 0xe4, 0x97, 0xb6, 0x52, 0xce, 0xa9, 0x1a, 0xb7, 0x0c, 0x35, 0x2c,
	0x38, 0x41, 0x25, 0x96, 0x3d, 0x09, 0xcb, 0x7a, 0xf8, 0x8d, 0xad, 0xa3, 0xc3, 0xe6, 0x5a, 0xed,
	0xe6, 0xda, 0xaa, 0x24, 0x0f, 0x87, 0xb7, 0x68, 0x6f, 0xc9, 0x33, 0x8a, 0x51, 0x3e, 0xc7, 0x9d,
	0xa1, 0x4d, 0xed, 0xf0, 0x2b, 0x60, 0xfd, 0x0f, 0xe0, 0xef, 0x35, 0xc8, 0x6a, 0xea, 0x3c, 0x9a,
	0x4c, 0xb1, 0xf7, 0x3e, 0xc5, 0xde, 0x6c, 0x8a, 0xe1, 0xd9, 0x62, 0x78, 0xb5, 0x18, 0xde, 0x2c,
	0x86, 0x89, 0xc5, 0xf0, 0x61, 0x31, 0x7c, 0x59, 0xec, 0xcd, 0x2c, 0x86, 0x97, 0x4f, 0xec, 0x7d,
	0x03, 0xc4, 0x45, 0xf7, 0x5d, 0xc7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xdd, 0x7b, 0x20,
	0xf1, 0x01, 0x00, 0x00,
}
