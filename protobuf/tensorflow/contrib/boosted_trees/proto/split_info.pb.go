// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/contrib/boosted_trees/proto/split_info.proto

/*
	Package tensorflow_boosted_trees_learner is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/contrib/boosted_trees/proto/split_info.proto

	It has these top-level messages:
		SplitInfo
*/
package tensorflow_boosted_trees_learner

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow_boosted_trees_trees "github.com/d4l3k/pok/tensorflow/contrib/boosted_trees/proto"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Gathered information for a split node.
type SplitInfo struct {
	// The split node without the child nodes attached.
	SplitNode *tensorflow_boosted_trees_trees.TreeNode `protobuf:"bytes,1,opt,name=split_node,json=splitNode" json:"split_node,omitempty"`
	// Left Leaf node.
	LeftChild *tensorflow_boosted_trees_trees.Leaf `protobuf:"bytes,2,opt,name=left_child,json=leftChild" json:"left_child,omitempty"`
	// Right Leaf node.
	RightChild *tensorflow_boosted_trees_trees.Leaf `protobuf:"bytes,3,opt,name=right_child,json=rightChild" json:"right_child,omitempty"`
}

func (m *SplitInfo) Reset()                    { *m = SplitInfo{} }
func (*SplitInfo) ProtoMessage()               {}
func (*SplitInfo) Descriptor() ([]byte, []int) { return fileDescriptorSplitInfo, []int{0} }

func (m *SplitInfo) GetSplitNode() *tensorflow_boosted_trees_trees.TreeNode {
	if m != nil {
		return m.SplitNode
	}
	return nil
}

func (m *SplitInfo) GetLeftChild() *tensorflow_boosted_trees_trees.Leaf {
	if m != nil {
		return m.LeftChild
	}
	return nil
}

func (m *SplitInfo) GetRightChild() *tensorflow_boosted_trees_trees.Leaf {
	if m != nil {
		return m.RightChild
	}
	return nil
}

func init() {
	proto.RegisterType((*SplitInfo)(nil), "tensorflow.boosted_trees.learner.SplitInfo")
}
func (this *SplitInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SplitInfo)
	if !ok {
		that2, ok := that.(SplitInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SplitNode.Equal(that1.SplitNode) {
		return false
	}
	if !this.LeftChild.Equal(that1.LeftChild) {
		return false
	}
	if !this.RightChild.Equal(that1.RightChild) {
		return false
	}
	return true
}
func (this *SplitInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensorflow_boosted_trees_learner.SplitInfo{")
	if this.SplitNode != nil {
		s = append(s, "SplitNode: "+fmt.Sprintf("%#v", this.SplitNode)+",\n")
	}
	if this.LeftChild != nil {
		s = append(s, "LeftChild: "+fmt.Sprintf("%#v", this.LeftChild)+",\n")
	}
	if this.RightChild != nil {
		s = append(s, "RightChild: "+fmt.Sprintf("%#v", this.RightChild)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSplitInfo(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SplitInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SplitNode != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSplitInfo(dAtA, i, uint64(m.SplitNode.Size()))
		n1, err := m.SplitNode.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.LeftChild != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSplitInfo(dAtA, i, uint64(m.LeftChild.Size()))
		n2, err := m.LeftChild.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.RightChild != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSplitInfo(dAtA, i, uint64(m.RightChild.Size()))
		n3, err := m.RightChild.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeFixed64SplitInfo(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32SplitInfo(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSplitInfo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SplitInfo) Size() (n int) {
	var l int
	_ = l
	if m.SplitNode != nil {
		l = m.SplitNode.Size()
		n += 1 + l + sovSplitInfo(uint64(l))
	}
	if m.LeftChild != nil {
		l = m.LeftChild.Size()
		n += 1 + l + sovSplitInfo(uint64(l))
	}
	if m.RightChild != nil {
		l = m.RightChild.Size()
		n += 1 + l + sovSplitInfo(uint64(l))
	}
	return n
}

func sovSplitInfo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSplitInfo(x uint64) (n int) {
	return sovSplitInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SplitInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SplitInfo{`,
		`SplitNode:` + strings.Replace(fmt.Sprintf("%v", this.SplitNode), "TreeNode", "tensorflow_boosted_trees_trees.TreeNode", 1) + `,`,
		`LeftChild:` + strings.Replace(fmt.Sprintf("%v", this.LeftChild), "Leaf", "tensorflow_boosted_trees_trees.Leaf", 1) + `,`,
		`RightChild:` + strings.Replace(fmt.Sprintf("%v", this.RightChild), "Leaf", "tensorflow_boosted_trees_trees.Leaf", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSplitInfo(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SplitInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSplitInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSplitInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSplitInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SplitNode == nil {
				m.SplitNode = &tensorflow_boosted_trees_trees.TreeNode{}
			}
			if err := m.SplitNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftChild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSplitInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSplitInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeftChild == nil {
				m.LeftChild = &tensorflow_boosted_trees_trees.Leaf{}
			}
			if err := m.LeftChild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightChild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSplitInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSplitInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RightChild == nil {
				m.RightChild = &tensorflow_boosted_trees_trees.Leaf{}
			}
			if err := m.RightChild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSplitInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSplitInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSplitInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSplitInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSplitInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSplitInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSplitInfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSplitInfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSplitInfo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSplitInfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSplitInfo   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/contrib/boosted_trees/proto/split_info.proto", fileDescriptorSplitInfo)
}

var fileDescriptorSplitInfo = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xb1, 0x4a, 0x03, 0x41,
	0x10, 0x86, 0x6f, 0x14, 0x84, 0x6c, 0xba, 0xab, 0x82, 0xc5, 0x10, 0xc4, 0x22, 0xd5, 0x2d, 0x68,
	0x63, 0x29, 0x06, 0x11, 0x41, 0x2c, 0xa2, 0xfd, 0x91, 0xbb, 0x9b, 0x4d, 0x16, 0x96, 0x9d, 0xb0,
	0xb7, 0x62, 0xeb, 0x23, 0xf8, 0x18, 0x3e, 0x8a, 0x65, 0x4a, 0xcb, 0xdc, 0xda, 0x58, 0xa6, 0xb4,
	0x94, 0xdd, 0x43, 0xc4, 0x42, 0xd4, 0x66, 0xf8, 0x19, 0xe6, 0xfb, 0x7e, 0x18, 0x71, 0xba, 0x72,
	0xec, 0xb9, 0xba, 0x53, 0xd2, 0x93, 0x6d, 0xd9, 0x29, 0xc3, 0xf7, 0xb2, 0x66, 0xeb, 0x9d, 0xae,
	0x64, 0xc5, 0xdc, 0x7a, 0x6a, 0x4a, 0xef, 0x88, 0x5a, 0x99, 0x2e, 0x65, 0xbb, 0x32, 0xda, 0x97,
	0xda, 0x2a, 0x2e, 0xd2, 0x22, 0x1f, 0x7f, 0x81, 0xc5, 0x37, 0xa0, 0x30, 0x34, 0x77, 0x96, 0xdc,
	0xfe, 0xc9, 0x1f, 0xd5, 0x31, 0x97, 0x35, 0x5b, 0xa5, 0x17, 0xbd, 0xfb, 0x60, 0x03, 0x62, 0x70,
	0x13, 0x0b, 0x2f, 0xad, 0xe2, 0xfc, 0x42, 0x88, 0xbe, 0xdd, 0x72, 0x43, 0x23, 0x18, 0xc3, 0x64,
	0x78, 0x34, 0x29, 0x7e, 0xac, 0xef, 0xe7, 0xad, 0x23, 0xba, 0xe6, 0x86, 0x66, 0x83, 0xc4, 0xc6,
	0x98, 0x4f, 0x85, 0x30, 0xa4, 0x7c, 0x59, 0x2f, 0xb5, 0x69, 0x46, 0x3b, 0x49, 0x74, 0xf8, 0x9b,
	0xe8, 0x8a, 0xe6, 0x6a, 0x36, 0x88, 0xdc, 0x34, 0x62, 0xf9, 0xb9, 0x18, 0x3a, 0xbd, 0x58, 0x7e,
	0x5a, 0x76, 0xff, 0x61, 0x11, 0x09, 0x4c, 0x9a, 0x33, 0xb9, 0xee, 0x30, 0x7b, 0xe9, 0x30, 0xdb,
	0x76, 0x08, 0x0f, 0x01, 0xe1, 0x29, 0x20, 0x3c, 0x07, 0x84, 0x75, 0x40, 0xd8, 0x04, 0x84, 0xb7,
	0x80, 0xd9, 0x36, 0x20, 0x3c, 0xbe, 0x62, 0xf6, 0x0e, 0x50, 0xed, 0xa5, 0xd7, 0x1c, 0x7f, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x9b, 0xc4, 0x45, 0x72, 0xba, 0x01, 0x00, 0x00,
}
