// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/contrib/tpu/profiler/tpu_profiler.proto

/*
	Package tensorflow is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/contrib/tpu/profiler/tpu_profiler.proto

	It has these top-level messages:
		ProfileRequest
		ProfileResponse
*/
package tensorflow

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow10 "github.com/d4l3k/pok/protobuf/tensorflow/core/framework"

import bytes "bytes"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ProfileRequest struct {
	// In future, the caller will be able to customize when profiling starts and
	// stops. For now, it collects `duration_ms` milliseconds worth of data.
	DurationMs uint64 `protobuf:"varint,1,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	// The maximum number of events to return. By default (value 0), return all
	// events.
	MaxEvents uint64 `protobuf:"varint,2,opt,name=max_events,json=maxEvents,proto3" json:"max_events,omitempty"`
}

func (m *ProfileRequest) Reset()                    { *m = ProfileRequest{} }
func (*ProfileRequest) ProtoMessage()               {}
func (*ProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorTpuProfiler, []int{0} }

func (m *ProfileRequest) GetDurationMs() uint64 {
	if m != nil {
		return m.DurationMs
	}
	return 0
}

func (m *ProfileRequest) GetMaxEvents() uint64 {
	if m != nil {
		return m.MaxEvents
	}
	return 0
}

type ProfileResponse struct {
	XprofResponseSize uint64 `protobuf:"varint,1,opt,name=xprof_response_size,json=xprofResponseSize,proto3" json:"xprof_response_size,omitempty"`
	// Graphs of programs executed on TPUs during the profiling period.
	ComputationGraph []*tensorflow10.GraphDef `protobuf:"bytes,2,rep,name=computation_graph,json=computationGraph" json:"computation_graph,omitempty"`
	// Encoded Trace proto message that contains metadata about the trace captured
	// during the profiling period. Describes the devices and resources that
	// 'trace_events' refers to.
	EncodedTrace []byte `protobuf:"bytes,3,opt,name=encoded_trace,json=encodedTrace,proto3" json:"encoded_trace,omitempty"`
}

func (m *ProfileResponse) Reset()                    { *m = ProfileResponse{} }
func (*ProfileResponse) ProtoMessage()               {}
func (*ProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorTpuProfiler, []int{1} }

func (m *ProfileResponse) GetXprofResponseSize() uint64 {
	if m != nil {
		return m.XprofResponseSize
	}
	return 0
}

func (m *ProfileResponse) GetComputationGraph() []*tensorflow10.GraphDef {
	if m != nil {
		return m.ComputationGraph
	}
	return nil
}

func (m *ProfileResponse) GetEncodedTrace() []byte {
	if m != nil {
		return m.EncodedTrace
	}
	return nil
}

func init() {
	proto.RegisterType((*ProfileRequest)(nil), "tensorflow.ProfileRequest")
	proto.RegisterType((*ProfileResponse)(nil), "tensorflow.ProfileResponse")
}
func (this *ProfileRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProfileRequest)
	if !ok {
		that2, ok := that.(ProfileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DurationMs != that1.DurationMs {
		return false
	}
	if this.MaxEvents != that1.MaxEvents {
		return false
	}
	return true
}
func (this *ProfileResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ProfileResponse)
	if !ok {
		that2, ok := that.(ProfileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.XprofResponseSize != that1.XprofResponseSize {
		return false
	}
	if len(this.ComputationGraph) != len(that1.ComputationGraph) {
		return false
	}
	for i := range this.ComputationGraph {
		if !this.ComputationGraph[i].Equal(that1.ComputationGraph[i]) {
			return false
		}
	}
	if !bytes.Equal(this.EncodedTrace, that1.EncodedTrace) {
		return false
	}
	return true
}
func (this *ProfileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow.ProfileRequest{")
	s = append(s, "DurationMs: "+fmt.Sprintf("%#v", this.DurationMs)+",\n")
	s = append(s, "MaxEvents: "+fmt.Sprintf("%#v", this.MaxEvents)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProfileResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensorflow.ProfileResponse{")
	s = append(s, "XprofResponseSize: "+fmt.Sprintf("%#v", this.XprofResponseSize)+",\n")
	if this.ComputationGraph != nil {
		s = append(s, "ComputationGraph: "+fmt.Sprintf("%#v", this.ComputationGraph)+",\n")
	}
	s = append(s, "EncodedTrace: "+fmt.Sprintf("%#v", this.EncodedTrace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTpuProfiler(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TPUProfiler service

type TPUProfilerClient interface {
	// Starts a profiling session, blocks until it completes, and returns data.
	Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
}

type tPUProfilerClient struct {
	cc *grpc.ClientConn
}

func NewTPUProfilerClient(cc *grpc.ClientConn) TPUProfilerClient {
	return &tPUProfilerClient{cc}
}

func (c *tPUProfilerClient) Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := grpc.Invoke(ctx, "/tensorflow.TPUProfiler/Profile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TPUProfiler service

type TPUProfilerServer interface {
	// Starts a profiling session, blocks until it completes, and returns data.
	Profile(context.Context, *ProfileRequest) (*ProfileResponse, error)
}

func RegisterTPUProfilerServer(s *grpc.Server, srv TPUProfilerServer) {
	s.RegisterService(&_TPUProfiler_serviceDesc, srv)
}

func _TPUProfiler_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TPUProfilerServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.TPUProfiler/Profile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TPUProfilerServer).Profile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TPUProfiler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tensorflow.TPUProfiler",
	HandlerType: (*TPUProfilerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Profile",
			Handler:    _TPUProfiler_Profile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/tensorflow/contrib/tpu/profiler/tpu_profiler.proto",
}

func (m *ProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DurationMs != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTpuProfiler(dAtA, i, uint64(m.DurationMs))
	}
	if m.MaxEvents != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTpuProfiler(dAtA, i, uint64(m.MaxEvents))
	}
	return i, nil
}

func (m *ProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XprofResponseSize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTpuProfiler(dAtA, i, uint64(m.XprofResponseSize))
	}
	if len(m.ComputationGraph) > 0 {
		for _, msg := range m.ComputationGraph {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTpuProfiler(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.EncodedTrace) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTpuProfiler(dAtA, i, uint64(len(m.EncodedTrace)))
		i += copy(dAtA[i:], m.EncodedTrace)
	}
	return i, nil
}

func encodeFixed64TpuProfiler(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32TpuProfiler(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTpuProfiler(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ProfileRequest) Size() (n int) {
	var l int
	_ = l
	if m.DurationMs != 0 {
		n += 1 + sovTpuProfiler(uint64(m.DurationMs))
	}
	if m.MaxEvents != 0 {
		n += 1 + sovTpuProfiler(uint64(m.MaxEvents))
	}
	return n
}

func (m *ProfileResponse) Size() (n int) {
	var l int
	_ = l
	if m.XprofResponseSize != 0 {
		n += 1 + sovTpuProfiler(uint64(m.XprofResponseSize))
	}
	if len(m.ComputationGraph) > 0 {
		for _, e := range m.ComputationGraph {
			l = e.Size()
			n += 1 + l + sovTpuProfiler(uint64(l))
		}
	}
	l = len(m.EncodedTrace)
	if l > 0 {
		n += 1 + l + sovTpuProfiler(uint64(l))
	}
	return n
}

func sovTpuProfiler(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTpuProfiler(x uint64) (n int) {
	return sovTpuProfiler(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ProfileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProfileRequest{`,
		`DurationMs:` + fmt.Sprintf("%v", this.DurationMs) + `,`,
		`MaxEvents:` + fmt.Sprintf("%v", this.MaxEvents) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProfileResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProfileResponse{`,
		`XprofResponseSize:` + fmt.Sprintf("%v", this.XprofResponseSize) + `,`,
		`ComputationGraph:` + strings.Replace(fmt.Sprintf("%v", this.ComputationGraph), "GraphDef", "tensorflow10.GraphDef", 1) + `,`,
		`EncodedTrace:` + fmt.Sprintf("%v", this.EncodedTrace) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTpuProfiler(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTpuProfiler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationMs", wireType)
			}
			m.DurationMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpuProfiler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationMs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEvents", wireType)
			}
			m.MaxEvents = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpuProfiler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEvents |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTpuProfiler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTpuProfiler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTpuProfiler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XprofResponseSize", wireType)
			}
			m.XprofResponseSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpuProfiler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XprofResponseSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputationGraph", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpuProfiler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTpuProfiler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComputationGraph = append(m.ComputationGraph, &tensorflow10.GraphDef{})
			if err := m.ComputationGraph[len(m.ComputationGraph)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedTrace", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTpuProfiler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTpuProfiler
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedTrace = append(m.EncodedTrace[:0], dAtA[iNdEx:postIndex]...)
			if m.EncodedTrace == nil {
				m.EncodedTrace = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTpuProfiler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTpuProfiler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTpuProfiler(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTpuProfiler
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTpuProfiler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTpuProfiler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTpuProfiler
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTpuProfiler
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTpuProfiler(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTpuProfiler = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTpuProfiler   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/contrib/tpu/profiler/tpu_profiler.proto", fileDescriptorTpuProfiler)
}

var fileDescriptorTpuProfiler = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x4e, 0xea, 0x40,
	0x18, 0x85, 0x3b, 0x70, 0x73, 0x6f, 0xee, 0xc0, 0xbd, 0xca, 0xe8, 0xa2, 0xc1, 0x38, 0x12, 0x8c,
	0x09, 0x0b, 0xd3, 0x26, 0xb8, 0x74, 0xa5, 0xc1, 0xb8, 0x32, 0x21, 0x05, 0xd7, 0x4d, 0x29, 0x7f,
	0xb5, 0x91, 0x76, 0xea, 0xcc, 0x54, 0x08, 0x2b, 0x1f, 0xc1, 0xc7, 0xd0, 0x37, 0x71, 0xc9, 0xd2,
	0xa5, 0x8c, 0x1b, 0x97, 0x3c, 0x82, 0xe9, 0xb4, 0x08, 0x24, 0xee, 0xfa, 0x7f, 0xe7, 0x3f, 0xa7,
	0x67, 0x66, 0xf0, 0x69, 0xc2, 0x99, 0x64, 0x83, 0x34, 0xb0, 0x25, 0xc4, 0x82, 0xf1, 0x60, 0xc4,
	0xc6, 0xb6, 0xcf, 0x62, 0xc9, 0xc3, 0x81, 0x2d, 0x93, 0xd4, 0x4e, 0x38, 0x0b, 0xc2, 0x11, 0xf0,
	0x6c, 0x70, 0x97, 0x83, 0xa5, 0x5d, 0x04, 0xaf, 0x3c, 0xf5, 0xa3, 0x0d, 0x3f, 0x07, 0x3b, 0xe0,
	0x5e, 0x04, 0x63, 0xc6, 0xef, 0xec, 0x1b, 0xee, 0x25, 0xb7, 0xb9, 0xa5, 0xd9, 0xc5, 0xff, 0xbb,
	0x79, 0x88, 0x03, 0xf7, 0x29, 0x08, 0x49, 0x0e, 0x70, 0x65, 0x98, 0x72, 0x4f, 0x86, 0x2c, 0x76,
	0x23, 0x61, 0xa2, 0x06, 0x6a, 0xfd, 0x72, 0xf0, 0x12, 0x5d, 0x09, 0xb2, 0x8f, 0x71, 0xe4, 0x4d,
	0x5c, 0x78, 0x80, 0x58, 0x0a, 0xb3, 0xa4, 0xf5, 0xbf, 0x91, 0x37, 0xb9, 0xd0, 0xa0, 0xf9, 0x82,
	0xf0, 0xd6, 0x77, 0xa4, 0x48, 0x58, 0x2c, 0x80, 0x58, 0x78, 0x67, 0x92, 0x75, 0x75, 0x79, 0x41,
	0x5c, 0x11, 0x4e, 0xa1, 0xc8, 0xae, 0x69, 0x69, 0xb9, 0xdb, 0x0b, 0xa7, 0x40, 0xce, 0x70, 0xcd,
	0x67, 0x51, 0x92, 0xca, 0xbc, 0x86, 0x2e, 0x6c, 0x96, 0x1a, 0xe5, 0x56, 0xa5, 0xbd, 0x6b, 0xad,
	0x0e, 0x66, 0x5d, 0x66, 0x42, 0x07, 0x02, 0x67, 0x7b, 0x6d, 0x5d, 0x43, 0x72, 0x88, 0xff, 0x41,
	0xec, 0xb3, 0x21, 0x0c, 0x5d, 0xc9, 0x3d, 0x1f, 0xcc, 0x72, 0x03, 0xb5, 0xaa, 0x4e, 0xb5, 0x80,
	0xfd, 0x8c, 0xb5, 0x7b, 0xb8, 0xd2, 0xef, 0x5e, 0x17, 0x6d, 0x39, 0xe9, 0xe0, 0x3f, 0xc5, 0x37,
	0xa9, 0xaf, 0xff, 0x66, 0xf3, 0x86, 0xea, 0x7b, 0x3f, 0x6a, 0x79, 0xfd, 0xa6, 0x71, 0x7e, 0x3c,
	0x9b, 0x53, 0xe3, 0x6d, 0x4e, 0x8d, 0xc5, 0x9c, 0xa2, 0x47, 0x45, 0xd1, 0xb3, 0xa2, 0xe8, 0x55,
	0x51, 0x34, 0x53, 0x14, 0xbd, 0x2b, 0x8a, 0x3e, 0x15, 0x35, 0x16, 0x8a, 0xa2, 0xa7, 0x0f, 0x6a,
	0x0c, 0x7e, 0xeb, 0x77, 0x38, 0xf9, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xa1, 0x97, 0x5b, 0xf9,
	0x01, 0x00, 0x00,
}
