// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/contrib/tpu/profiler/trace_events.proto

/*
	Package tensorflow_tpu is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/contrib/tpu/profiler/trace_events.proto

	It has these top-level messages:
		Trace
		Device
		Resource
		TraceEvent
*/
package tensorflow_tpu

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import fmt "fmt"
import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// A 'Trace' contains metadata for the individual traces of a system.
type Trace struct {
	// The devices that this trace has information about. Maps from device_id to
	// more data about the specific device.
	Devices map[uint64]*Device `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// All trace events capturing in the profiling period.
	TraceEvents []*TraceEvent `protobuf:"bytes,4,rep,name=trace_events,json=traceEvents" json:"trace_events,omitempty"`
}

func (m *Trace) Reset()                    { *m = Trace{} }
func (*Trace) ProtoMessage()               {}
func (*Trace) Descriptor() ([]byte, []int) { return fileDescriptorTraceEvents, []int{0} }

func (m *Trace) GetDevices() map[uint64]*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *Trace) GetTraceEvents() []*TraceEvent {
	if m != nil {
		return m.TraceEvents
	}
	return nil
}

// A 'device' is a physical entity in the system and is comprised of several
// resources.
type Device struct {
	// The name of the device.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The id of this device, unique in a single trace.
	DeviceId uint64 `protobuf:"varint,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// The resources on this device, keyed by resource_id;
	Resources map[uint64]*Resource `protobuf:"bytes,3,rep,name=resources" json:"resources,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptorTraceEvents, []int{1} }

func (m *Device) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *Device) GetResources() map[uint64]*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

// A 'resource' generally is a specific computation component on a device. These
// can range from threads on CPUs to specific arithmetic units on hardware
// devices.
type Resource struct {
	// The name of the resource.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The id of the resource. Unique within a device.
	ResourceId uint64 `protobuf:"varint,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (m *Resource) Reset()                    { *m = Resource{} }
func (*Resource) ProtoMessage()               {}
func (*Resource) Descriptor() ([]byte, []int) { return fileDescriptorTraceEvents, []int{2} }

func (m *Resource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Resource) GetResourceId() uint64 {
	if m != nil {
		return m.ResourceId
	}
	return 0
}

type TraceEvent struct {
	// The id of the device that this event occurred on. The full dataset should
	// have this device present in the Trace object.
	DeviceId uint64 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// The id of the resource that this event occurred on. The full dataset should
	// have this resource present in the Device object of the Trace object. A
	// resource_id is unique on a specific device, but not necessarily within the
	// trace.
	ResourceId uint64 `protobuf:"varint,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// The name of this trace event.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The timestamp that this event occurred at (in picos since tracing started).
	TimestampPs uint64 `protobuf:"varint,9,opt,name=timestamp_ps,json=timestampPs,proto3" json:"timestamp_ps,omitempty"`
	// The duration of the event in picoseconds if applicable.
	// Events without duration are called instant events.
	DurationPs uint64 `protobuf:"varint,10,opt,name=duration_ps,json=durationPs,proto3" json:"duration_ps,omitempty"`
}

func (m *TraceEvent) Reset()                    { *m = TraceEvent{} }
func (*TraceEvent) ProtoMessage()               {}
func (*TraceEvent) Descriptor() ([]byte, []int) { return fileDescriptorTraceEvents, []int{3} }

func (m *TraceEvent) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *TraceEvent) GetResourceId() uint64 {
	if m != nil {
		return m.ResourceId
	}
	return 0
}

func (m *TraceEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TraceEvent) GetTimestampPs() uint64 {
	if m != nil {
		return m.TimestampPs
	}
	return 0
}

func (m *TraceEvent) GetDurationPs() uint64 {
	if m != nil {
		return m.DurationPs
	}
	return 0
}

func init() {
	proto.RegisterType((*Trace)(nil), "tensorflow.tpu.Trace")
	proto.RegisterType((*Device)(nil), "tensorflow.tpu.Device")
	proto.RegisterType((*Resource)(nil), "tensorflow.tpu.Resource")
	proto.RegisterType((*TraceEvent)(nil), "tensorflow.tpu.TraceEvent")
}
func (this *Trace) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Trace)
	if !ok {
		that2, ok := that.(Trace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Devices) != len(that1.Devices) {
		return false
	}
	for i := range this.Devices {
		if !this.Devices[i].Equal(that1.Devices[i]) {
			return false
		}
	}
	if len(this.TraceEvents) != len(that1.TraceEvents) {
		return false
	}
	for i := range this.TraceEvents {
		if !this.TraceEvents[i].Equal(that1.TraceEvents[i]) {
			return false
		}
	}
	return true
}
func (this *Device) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Device)
	if !ok {
		that2, ok := that.(Device)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	if len(this.Resources) != len(that1.Resources) {
		return false
	}
	for i := range this.Resources {
		if !this.Resources[i].Equal(that1.Resources[i]) {
			return false
		}
	}
	return true
}
func (this *Resource) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Resource)
	if !ok {
		that2, ok := that.(Resource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.ResourceId != that1.ResourceId {
		return false
	}
	return true
}
func (this *TraceEvent) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TraceEvent)
	if !ok {
		that2, ok := that.(TraceEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	if this.ResourceId != that1.ResourceId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.TimestampPs != that1.TimestampPs {
		return false
	}
	if this.DurationPs != that1.DurationPs {
		return false
	}
	return true
}
func (this *Trace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow_tpu.Trace{")
	keysForDevices := make([]uint64, 0, len(this.Devices))
	for k, _ := range this.Devices {
		keysForDevices = append(keysForDevices, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForDevices)
	mapStringForDevices := "map[uint64]*Device{"
	for _, k := range keysForDevices {
		mapStringForDevices += fmt.Sprintf("%#v: %#v,", k, this.Devices[k])
	}
	mapStringForDevices += "}"
	if this.Devices != nil {
		s = append(s, "Devices: "+mapStringForDevices+",\n")
	}
	if this.TraceEvents != nil {
		s = append(s, "TraceEvents: "+fmt.Sprintf("%#v", this.TraceEvents)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Device) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensorflow_tpu.Device{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "DeviceId: "+fmt.Sprintf("%#v", this.DeviceId)+",\n")
	keysForResources := make([]uint64, 0, len(this.Resources))
	for k, _ := range this.Resources {
		keysForResources = append(keysForResources, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForResources)
	mapStringForResources := "map[uint64]*Resource{"
	for _, k := range keysForResources {
		mapStringForResources += fmt.Sprintf("%#v: %#v,", k, this.Resources[k])
	}
	mapStringForResources += "}"
	if this.Resources != nil {
		s = append(s, "Resources: "+mapStringForResources+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Resource) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow_tpu.Resource{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "ResourceId: "+fmt.Sprintf("%#v", this.ResourceId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TraceEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&tensorflow_tpu.TraceEvent{")
	s = append(s, "DeviceId: "+fmt.Sprintf("%#v", this.DeviceId)+",\n")
	s = append(s, "ResourceId: "+fmt.Sprintf("%#v", this.ResourceId)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "TimestampPs: "+fmt.Sprintf("%#v", this.TimestampPs)+",\n")
	s = append(s, "DurationPs: "+fmt.Sprintf("%#v", this.DurationPs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTraceEvents(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Trace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Devices) > 0 {
		for k, _ := range m.Devices {
			dAtA[i] = 0xa
			i++
			v := m.Devices[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTraceEvents(uint64(msgSize))
			}
			mapSize := 1 + sovTraceEvents(uint64(k)) + msgSize
			i = encodeVarintTraceEvents(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintTraceEvents(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTraceEvents(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if len(m.TraceEvents) > 0 {
		for _, msg := range m.TraceEvents {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTraceEvents(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Device) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Device) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTraceEvents(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.DeviceId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTraceEvents(dAtA, i, uint64(m.DeviceId))
	}
	if len(m.Resources) > 0 {
		for k, _ := range m.Resources {
			dAtA[i] = 0x1a
			i++
			v := m.Resources[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTraceEvents(uint64(msgSize))
			}
			mapSize := 1 + sovTraceEvents(uint64(k)) + msgSize
			i = encodeVarintTraceEvents(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintTraceEvents(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTraceEvents(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	return i, nil
}

func (m *Resource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTraceEvents(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.ResourceId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTraceEvents(dAtA, i, uint64(m.ResourceId))
	}
	return i, nil
}

func (m *TraceEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DeviceId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTraceEvents(dAtA, i, uint64(m.DeviceId))
	}
	if m.ResourceId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTraceEvents(dAtA, i, uint64(m.ResourceId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTraceEvents(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.TimestampPs != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTraceEvents(dAtA, i, uint64(m.TimestampPs))
	}
	if m.DurationPs != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTraceEvents(dAtA, i, uint64(m.DurationPs))
	}
	return i, nil
}

func encodeFixed64TraceEvents(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32TraceEvents(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTraceEvents(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Trace) Size() (n int) {
	var l int
	_ = l
	if len(m.Devices) > 0 {
		for k, v := range m.Devices {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTraceEvents(uint64(l))
			}
			mapEntrySize := 1 + sovTraceEvents(uint64(k)) + l
			n += mapEntrySize + 1 + sovTraceEvents(uint64(mapEntrySize))
		}
	}
	if len(m.TraceEvents) > 0 {
		for _, e := range m.TraceEvents {
			l = e.Size()
			n += 1 + l + sovTraceEvents(uint64(l))
		}
	}
	return n
}

func (m *Device) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTraceEvents(uint64(l))
	}
	if m.DeviceId != 0 {
		n += 1 + sovTraceEvents(uint64(m.DeviceId))
	}
	if len(m.Resources) > 0 {
		for k, v := range m.Resources {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTraceEvents(uint64(l))
			}
			mapEntrySize := 1 + sovTraceEvents(uint64(k)) + l
			n += mapEntrySize + 1 + sovTraceEvents(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Resource) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTraceEvents(uint64(l))
	}
	if m.ResourceId != 0 {
		n += 1 + sovTraceEvents(uint64(m.ResourceId))
	}
	return n
}

func (m *TraceEvent) Size() (n int) {
	var l int
	_ = l
	if m.DeviceId != 0 {
		n += 1 + sovTraceEvents(uint64(m.DeviceId))
	}
	if m.ResourceId != 0 {
		n += 1 + sovTraceEvents(uint64(m.ResourceId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTraceEvents(uint64(l))
	}
	if m.TimestampPs != 0 {
		n += 1 + sovTraceEvents(uint64(m.TimestampPs))
	}
	if m.DurationPs != 0 {
		n += 1 + sovTraceEvents(uint64(m.DurationPs))
	}
	return n
}

func sovTraceEvents(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTraceEvents(x uint64) (n int) {
	return sovTraceEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Trace) String() string {
	if this == nil {
		return "nil"
	}
	keysForDevices := make([]uint64, 0, len(this.Devices))
	for k, _ := range this.Devices {
		keysForDevices = append(keysForDevices, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForDevices)
	mapStringForDevices := "map[uint64]*Device{"
	for _, k := range keysForDevices {
		mapStringForDevices += fmt.Sprintf("%v: %v,", k, this.Devices[k])
	}
	mapStringForDevices += "}"
	s := strings.Join([]string{`&Trace{`,
		`Devices:` + mapStringForDevices + `,`,
		`TraceEvents:` + strings.Replace(fmt.Sprintf("%v", this.TraceEvents), "TraceEvent", "TraceEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Device) String() string {
	if this == nil {
		return "nil"
	}
	keysForResources := make([]uint64, 0, len(this.Resources))
	for k, _ := range this.Resources {
		keysForResources = append(keysForResources, k)
	}
	github_com_gogo_protobuf_sortkeys.Uint64s(keysForResources)
	mapStringForResources := "map[uint64]*Resource{"
	for _, k := range keysForResources {
		mapStringForResources += fmt.Sprintf("%v: %v,", k, this.Resources[k])
	}
	mapStringForResources += "}"
	s := strings.Join([]string{`&Device{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DeviceId:` + fmt.Sprintf("%v", this.DeviceId) + `,`,
		`Resources:` + mapStringForResources + `,`,
		`}`,
	}, "")
	return s
}
func (this *Resource) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Resource{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ResourceId:` + fmt.Sprintf("%v", this.ResourceId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TraceEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TraceEvent{`,
		`DeviceId:` + fmt.Sprintf("%v", this.DeviceId) + `,`,
		`ResourceId:` + fmt.Sprintf("%v", this.ResourceId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`TimestampPs:` + fmt.Sprintf("%v", this.TimestampPs) + `,`,
		`DurationPs:` + fmt.Sprintf("%v", this.DurationPs) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTraceEvents(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Trace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTraceEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTraceEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Devices == nil {
				m.Devices = make(map[uint64]*Device)
			}
			var mapkey uint64
			var mapvalue *Device
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTraceEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTraceEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTraceEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTraceEvents
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTraceEvents
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Device{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTraceEvents(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTraceEvents
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Devices[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTraceEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceEvents = append(m.TraceEvents, &TraceEvent{})
			if err := m.TraceEvents[len(m.TraceEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTraceEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTraceEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Device) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTraceEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Device: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Device: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTraceEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			m.DeviceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTraceEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = make(map[uint64]*Resource)
			}
			var mapkey uint64
			var mapvalue *Resource
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTraceEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTraceEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTraceEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTraceEvents
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTraceEvents
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Resource{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTraceEvents(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTraceEvents
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Resources[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTraceEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTraceEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTraceEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTraceEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			m.ResourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTraceEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTraceEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTraceEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			m.DeviceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			m.ResourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTraceEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampPs", wireType)
			}
			m.TimestampPs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampPs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationPs", wireType)
			}
			m.DurationPs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraceEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationPs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTraceEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTraceEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTraceEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTraceEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTraceEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTraceEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTraceEvents
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTraceEvents
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTraceEvents(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTraceEvents = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTraceEvents   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/contrib/tpu/profiler/trace_events.proto", fileDescriptorTraceEvents)
}

var fileDescriptorTraceEvents = []byte{
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0xfb, 0x6e, 0xb2, 0xeb, 0xe6, 0x4d, 0x59, 0x64, 0x0e, 0x12, 0x2a, 0x8c, 0x35, 0x20,
	0xf4, 0xb0, 0x24, 0xb0, 0x5e, 0xc4, 0x3f, 0x08, 0xea, 0x1e, 0xf6, 0xb6, 0x0c, 0xe2, 0xb5, 0xa4,
	0xcd, 0x14, 0x82, 0x6d, 0x26, 0xcc, 0x4c, 0x2a, 0x7b, 0xf3, 0x23, 0xf8, 0x19, 0x3c, 0xf9, 0x51,
	0x3c, 0xee, 0x49, 0xf6, 0x68, 0xe3, 0xc5, 0xe3, 0x7e, 0x04, 0xc9, 0x0c, 0x69, 0x92, 0x12, 0xf0,
	0x36, 0x3c, 0x7d, 0x9e, 0xdf, 0xfb, 0x3e, 0x6f, 0x83, 0xaf, 0x0a, 0x29, 0xb4, 0x58, 0x94, 0xab,
	0x58, 0xf3, 0x5c, 0x09, 0xb9, 0x5a, 0x8b, 0x2f, 0xf1, 0x52, 0xe4, 0x5a, 0x66, 0x8b, 0x58, 0x17,
	0x65, 0x5c, 0x48, 0xb1, 0xca, 0xd6, 0x5c, 0xc6, 0x5a, 0x26, 0x4b, 0x3e, 0xe7, 0x5b, 0x9e, 0x6b,
	0x15, 0x99, 0x14, 0x39, 0x6b, 0x33, 0x91, 0x2e, 0xca, 0xf0, 0x0e, 0xf0, 0xf8, 0x63, 0x6d, 0x23,
	0xaf, 0xf1, 0x41, 0xca, 0xb7, 0xd9, 0x92, 0xab, 0x00, 0xa6, 0xce, 0xcc, 0xbf, 0x08, 0xa3, 0xbe,
	0x37, 0x32, 0xbe, 0xe8, 0x83, 0x35, 0x5d, 0xe6, 0x5a, 0xde, 0xb0, 0x26, 0x42, 0xde, 0xe0, 0xb8,
	0x3b, 0x2d, 0x70, 0x0d, 0x62, 0x32, 0x88, 0xb8, 0xac, 0x2d, 0xcc, 0xd7, 0xfb, 0xb7, 0x9a, 0x30,
	0x1c, 0x77, 0xb9, 0xe4, 0x21, 0x3a, 0x9f, 0xf9, 0x4d, 0x00, 0x53, 0x98, 0xb9, 0xac, 0x7e, 0x92,
	0x73, 0x3c, 0xde, 0x26, 0xeb, 0x92, 0x07, 0x47, 0x53, 0x98, 0xf9, 0x17, 0x8f, 0x0e, 0xc9, 0x36,
	0xce, 0xac, 0xe9, 0xe5, 0xd1, 0x0b, 0x08, 0x7f, 0x01, 0x9e, 0x58, 0x95, 0x10, 0x74, 0xf3, 0x64,
	0xc3, 0x0d, 0xcf, 0x63, 0xe6, 0x4d, 0x1e, 0xa3, 0x67, 0x97, 0x9f, 0x67, 0xa9, 0x81, 0xba, 0xec,
	0xd4, 0x0a, 0x57, 0x29, 0x79, 0x8f, 0x9e, 0xe4, 0x4a, 0x94, 0xb2, 0x3e, 0x87, 0x63, 0xba, 0x3c,
	0x1b, 0x9e, 0x18, 0xb1, 0xc6, 0x67, 0x2f, 0xd2, 0xe6, 0x26, 0x9f, 0xf0, 0xac, 0xff, 0xe3, 0x40,
	0xad, 0xa8, 0x5f, 0x2b, 0x38, 0x1c, 0xd2, 0x00, 0xba, 0xc5, 0xde, 0xe2, 0x69, 0x23, 0x0f, 0x36,
	0x7b, 0x82, 0x7e, 0xb3, 0x44, 0xdb, 0x0d, 0x1b, 0xe9, 0x2a, 0x0d, 0xbf, 0x03, 0x62, 0xfb, 0x4f,
	0xf4, 0x2f, 0x01, 0x07, 0x97, 0xf8, 0x1f, 0x6c, 0xbf, 0x81, 0xd3, 0xd9, 0xe0, 0x29, 0x8e, 0x75,
	0xb6, 0xe1, 0x4a, 0x27, 0x9b, 0x62, 0x5e, 0xa8, 0xc0, 0x33, 0x29, 0x7f, 0xaf, 0x5d, 0xab, 0x9a,
	0x9b, 0x96, 0x32, 0xd1, 0x99, 0xc8, 0x6b, 0x07, 0x5a, 0x6e, 0x23, 0x5d, 0xab, 0x77, 0xe7, 0xb7,
	0x3b, 0x3a, 0xba, 0xdb, 0xd1, 0xd1, 0xfd, 0x8e, 0xc2, 0xd7, 0x8a, 0xc2, 0x8f, 0x8a, 0xc2, 0xcf,
	0x8a, 0xc2, 0x6d, 0x45, 0xe1, 0x77, 0x45, 0xe1, 0x6f, 0x45, 0x47, 0xf7, 0x15, 0x85, 0x6f, 0x7f,
	0xe8, 0x68, 0x71, 0x62, 0x3e, 0xef, 0xe7, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x0a, 0xa0,
	0xf0, 0x1d, 0x03, 0x00, 0x00,
}
