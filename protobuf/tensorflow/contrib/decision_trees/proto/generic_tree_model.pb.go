// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/contrib/decision_trees/proto/generic_tree_model.proto

/*
	Package tensorflow_decision_trees is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/contrib/decision_trees/proto/generic_tree_model.proto

	It has these top-level messages:
		Model
		ModelAndFeatures
		Ensemble
		Summation
		Averaging
		DecisionTree
		TreeNode
		BinaryNode
		SparseVector
		Vector
		Leaf
		FeatureId
		ObliqueFeatures
		InequalityTest
		Value
*/
package tensorflow_decision_trees

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"

import strconv "strconv"

import fmt "fmt"
import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BinaryNode_Direction int32

const (
	LEFT  BinaryNode_Direction = 0
	RIGHT BinaryNode_Direction = 1
)

var BinaryNode_Direction_name = map[int32]string{
	0: "LEFT",
	1: "RIGHT",
}
var BinaryNode_Direction_value = map[string]int32{
	"LEFT":  0,
	"RIGHT": 1,
}

func (BinaryNode_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorGenericTreeModel, []int{7, 0}
}

type InequalityTest_Type int32

const (
	LESS_OR_EQUAL    InequalityTest_Type = 0
	LESS_THAN        InequalityTest_Type = 1
	GREATER_OR_EQUAL InequalityTest_Type = 2
	GREATER_THAN     InequalityTest_Type = 3
)

var InequalityTest_Type_name = map[int32]string{
	0: "LESS_OR_EQUAL",
	1: "LESS_THAN",
	2: "GREATER_OR_EQUAL",
	3: "GREATER_THAN",
}
var InequalityTest_Type_value = map[string]int32{
	"LESS_OR_EQUAL":    0,
	"LESS_THAN":        1,
	"GREATER_OR_EQUAL": 2,
	"GREATER_THAN":     3,
}

func (InequalityTest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorGenericTreeModel, []int{13, 0}
}

// A generic handle for any type of model.
type Model struct {
	// Types that are valid to be assigned to Model:
	//	*Model_DecisionTree
	//	*Model_Ensemble
	//	*Model_CustomModel
	Model          isModel_Model          `protobuf_oneof:"model"`
	AdditionalData []*google_protobuf.Any `protobuf:"bytes,4,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *Model) Reset()                    { *m = Model{} }
func (*Model) ProtoMessage()               {}
func (*Model) Descriptor() ([]byte, []int) { return fileDescriptorGenericTreeModel, []int{0} }

type isModel_Model interface {
	isModel_Model()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Model_DecisionTree struct {
	DecisionTree *DecisionTree `protobuf:"bytes,1,opt,name=decision_tree,json=decisionTree,oneof"`
}
type Model_Ensemble struct {
	Ensemble *Ensemble `protobuf:"bytes,2,opt,name=ensemble,oneof"`
}
type Model_CustomModel struct {
	CustomModel *google_protobuf.Any `protobuf:"bytes,3,opt,name=custom_model,json=customModel,oneof"`
}

func (*Model_DecisionTree) isModel_Model() {}
func (*Model_Ensemble) isModel_Model()     {}
func (*Model_CustomModel) isModel_Model()  {}

func (m *Model) GetModel() isModel_Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *Model) GetDecisionTree() *DecisionTree {
	if x, ok := m.GetModel().(*Model_DecisionTree); ok {
		return x.DecisionTree
	}
	return nil
}

func (m *Model) GetEnsemble() *Ensemble {
	if x, ok := m.GetModel().(*Model_Ensemble); ok {
		return x.Ensemble
	}
	return nil
}

func (m *Model) GetCustomModel() *google_protobuf.Any {
	if x, ok := m.GetModel().(*Model_CustomModel); ok {
		return x.CustomModel
	}
	return nil
}

func (m *Model) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Model) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Model_OneofMarshaler, _Model_OneofUnmarshaler, _Model_OneofSizer, []interface{}{
		(*Model_DecisionTree)(nil),
		(*Model_Ensemble)(nil),
		(*Model_CustomModel)(nil),
	}
}

func _Model_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Model)
	// model
	switch x := m.Model.(type) {
	case *Model_DecisionTree:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DecisionTree); err != nil {
			return err
		}
	case *Model_Ensemble:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ensemble); err != nil {
			return err
		}
	case *Model_CustomModel:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomModel); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Model.Model has unexpected type %T", x)
	}
	return nil
}

func _Model_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Model)
	switch tag {
	case 1: // model.decision_tree
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DecisionTree)
		err := b.DecodeMessage(msg)
		m.Model = &Model_DecisionTree{msg}
		return true, err
	case 2: // model.ensemble
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ensemble)
		err := b.DecodeMessage(msg)
		m.Model = &Model_Ensemble{msg}
		return true, err
	case 3: // model.custom_model
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.Model = &Model_CustomModel{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Model_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Model)
	// model
	switch x := m.Model.(type) {
	case *Model_DecisionTree:
		s := proto.Size(x.DecisionTree)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Model_Ensemble:
		s := proto.Size(x.Ensemble)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Model_CustomModel:
		s := proto.Size(x.CustomModel)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ModelAndFeatures struct {
	// Given a FeatureId feature_id, the feature's description is in
	// features[feature_id.id.value].
	Features       map[string]*ModelAndFeatures_Feature `protobuf:"bytes,1,rep,name=features" json:"features,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Model          *Model                               `protobuf:"bytes,2,opt,name=model" json:"model,omitempty"`
	AdditionalData []*google_protobuf.Any               `protobuf:"bytes,3,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *ModelAndFeatures) Reset()                    { *m = ModelAndFeatures{} }
func (*ModelAndFeatures) ProtoMessage()               {}
func (*ModelAndFeatures) Descriptor() ([]byte, []int) { return fileDescriptorGenericTreeModel, []int{1} }

func (m *ModelAndFeatures) GetFeatures() map[string]*ModelAndFeatures_Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *ModelAndFeatures) GetModel() *Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *ModelAndFeatures) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

type ModelAndFeatures_Feature struct {
	// TODO(jonasz): Remove this field, as it's confusing. Ctx: cr/153569450.
	FeatureId      *FeatureId             `protobuf:"bytes,1,opt,name=feature_id,json=featureId" json:"feature_id,omitempty"`
	AdditionalData []*google_protobuf.Any `protobuf:"bytes,2,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *ModelAndFeatures_Feature) Reset()      { *m = ModelAndFeatures_Feature{} }
func (*ModelAndFeatures_Feature) ProtoMessage() {}
func (*ModelAndFeatures_Feature) Descriptor() ([]byte, []int) {
	return fileDescriptorGenericTreeModel, []int{1, 0}
}

func (m *ModelAndFeatures_Feature) GetFeatureId() *FeatureId {
	if m != nil {
		return m.FeatureId
	}
	return nil
}

func (m *ModelAndFeatures_Feature) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// An ordered sequence of models. This message can be used to express bagged or
// boosted models, as well as custom ensembles.
type Ensemble struct {
	Members []*Ensemble_Member `protobuf:"bytes,100,rep,name=members" json:"members,omitempty"`
	// The presence of a certain combination_technique indicates how to combine
	// the outputs of member models in order to compute the ensemble's output.
	//
	// Types that are valid to be assigned to CombinationTechnique:
	//	*Ensemble_SummationCombinationTechnique
	//	*Ensemble_AveragingCombinationTechnique
	//	*Ensemble_CustomCombinationTechnique
	CombinationTechnique isEnsemble_CombinationTechnique `protobuf_oneof:"combination_technique"`
	AdditionalData       []*google_protobuf.Any          `protobuf:"bytes,4,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *Ensemble) Reset()                    { *m = Ensemble{} }
func (*Ensemble) ProtoMessage()               {}
func (*Ensemble) Descriptor() ([]byte, []int) { return fileDescriptorGenericTreeModel, []int{2} }

type isEnsemble_CombinationTechnique interface {
	isEnsemble_CombinationTechnique()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Ensemble_SummationCombinationTechnique struct {
	SummationCombinationTechnique *Summation `protobuf:"bytes,1,opt,name=summation_combination_technique,json=summationCombinationTechnique,oneof"`
}
type Ensemble_AveragingCombinationTechnique struct {
	AveragingCombinationTechnique *Averaging `protobuf:"bytes,2,opt,name=averaging_combination_technique,json=averagingCombinationTechnique,oneof"`
}
type Ensemble_CustomCombinationTechnique struct {
	CustomCombinationTechnique *google_protobuf.Any `protobuf:"bytes,3,opt,name=custom_combination_technique,json=customCombinationTechnique,oneof"`
}

func (*Ensemble_SummationCombinationTechnique) isEnsemble_CombinationTechnique() {}
func (*Ensemble_AveragingCombinationTechnique) isEnsemble_CombinationTechnique() {}
func (*Ensemble_CustomCombinationTechnique) isEnsemble_CombinationTechnique()    {}

func (m *Ensemble) GetCombinationTechnique() isEnsemble_CombinationTechnique {
	if m != nil {
		return m.CombinationTechnique
	}
	return nil
}

func (m *Ensemble) GetMembers() []*Ensemble_Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Ensemble) GetSummationCombinationTechnique() *Summation {
	if x, ok := m.GetCombinationTechnique().(*Ensemble_SummationCombinationTechnique); ok {
		return x.SummationCombinationTechnique
	}
	return nil
}

func (m *Ensemble) GetAveragingCombinationTechnique() *Averaging {
	if x, ok := m.GetCombinationTechnique().(*Ensemble_AveragingCombinationTechnique); ok {
		return x.AveragingCombinationTechnique
	}
	return nil
}

func (m *Ensemble) GetCustomCombinationTechnique() *google_protobuf.Any {
	if x, ok := m.GetCombinationTechnique().(*Ensemble_CustomCombinationTechnique); ok {
		return x.CustomCombinationTechnique
	}
	return nil
}

func (m *Ensemble) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Ensemble) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Ensemble_OneofMarshaler, _Ensemble_OneofUnmarshaler, _Ensemble_OneofSizer, []interface{}{
		(*Ensemble_SummationCombinationTechnique)(nil),
		(*Ensemble_AveragingCombinationTechnique)(nil),
		(*Ensemble_CustomCombinationTechnique)(nil),
	}
}

func _Ensemble_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Ensemble)
	// combination_technique
	switch x := m.CombinationTechnique.(type) {
	case *Ensemble_SummationCombinationTechnique:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SummationCombinationTechnique); err != nil {
			return err
		}
	case *Ensemble_AveragingCombinationTechnique:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AveragingCombinationTechnique); err != nil {
			return err
		}
	case *Ensemble_CustomCombinationTechnique:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomCombinationTechnique); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Ensemble.CombinationTechnique has unexpected type %T", x)
	}
	return nil
}

func _Ensemble_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Ensemble)
	switch tag {
	case 1: // combination_technique.summation_combination_technique
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Summation)
		err := b.DecodeMessage(msg)
		m.CombinationTechnique = &Ensemble_SummationCombinationTechnique{msg}
		return true, err
	case 2: // combination_technique.averaging_combination_technique
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Averaging)
		err := b.DecodeMessage(msg)
		m.CombinationTechnique = &Ensemble_AveragingCombinationTechnique{msg}
		return true, err
	case 3: // combination_technique.custom_combination_technique
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.CombinationTechnique = &Ensemble_CustomCombinationTechnique{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Ensemble_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Ensemble)
	// combination_technique
	switch x := m.CombinationTechnique.(type) {
	case *Ensemble_SummationCombinationTechnique:
		s := proto.Size(x.SummationCombinationTechnique)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Ensemble_AveragingCombinationTechnique:
		s := proto.Size(x.AveragingCombinationTechnique)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Ensemble_CustomCombinationTechnique:
		s := proto.Size(x.CustomCombinationTechnique)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Ensemble_Member struct {
	Submodel       *Model                       `protobuf:"bytes,1,opt,name=submodel" json:"submodel,omitempty"`
	SubmodelId     *google_protobuf1.Int32Value `protobuf:"bytes,2,opt,name=submodel_id,json=submodelId" json:"submodel_id,omitempty"`
	AdditionalData []*google_protobuf.Any       `protobuf:"bytes,3,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *Ensemble_Member) Reset()      { *m = Ensemble_Member{} }
func (*Ensemble_Member) ProtoMessage() {}
func (*Ensemble_Member) Descriptor() ([]byte, []int) {
	return fileDescriptorGenericTreeModel, []int{2, 0}
}

func (m *Ensemble_Member) GetSubmodel() *Model {
	if m != nil {
		return m.Submodel
	}
	return nil
}

func (m *Ensemble_Member) GetSubmodelId() *google_protobuf1.Int32Value {
	if m != nil {
		return m.SubmodelId
	}
	return nil
}

func (m *Ensemble_Member) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// When present, the Ensemble's output is the sum of member models' outputs.
type Summation struct {
	AdditionalData []*google_protobuf.Any `protobuf:"bytes,1,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *Summation) Reset()                    { *m = Summation{} }
func (*Summation) ProtoMessage()               {}
func (*Summation) Descriptor() ([]byte, []int) { return fileDescriptorGenericTreeModel, []int{3} }

func (m *Summation) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// When present, the Ensemble's output is the average of member models' outputs.
type Averaging struct {
	AdditionalData []*google_protobuf.Any `protobuf:"bytes,1,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *Averaging) Reset()                    { *m = Averaging{} }
func (*Averaging) ProtoMessage()               {}
func (*Averaging) Descriptor() ([]byte, []int) { return fileDescriptorGenericTreeModel, []int{4} }

func (m *Averaging) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

type DecisionTree struct {
	Nodes          []*TreeNode            `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
	AdditionalData []*google_protobuf.Any `protobuf:"bytes,2,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *DecisionTree) Reset()                    { *m = DecisionTree{} }
func (*DecisionTree) ProtoMessage()               {}
func (*DecisionTree) Descriptor() ([]byte, []int) { return fileDescriptorGenericTreeModel, []int{5} }

func (m *DecisionTree) GetNodes() []*TreeNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *DecisionTree) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

type TreeNode struct {
	// Following fields are provided for convenience and better readability.
	// Filling them in is not required.
	NodeId      *google_protobuf1.Int32Value `protobuf:"bytes,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Depth       *google_protobuf1.Int32Value `protobuf:"bytes,2,opt,name=depth" json:"depth,omitempty"`
	SubtreeSize *google_protobuf1.Int32Value `protobuf:"bytes,3,opt,name=subtree_size,json=subtreeSize" json:"subtree_size,omitempty"`
	// Types that are valid to be assigned to NodeType:
	//	*TreeNode_BinaryNode
	//	*TreeNode_Leaf
	//	*TreeNode_CustomNodeType
	NodeType       isTreeNode_NodeType    `protobuf_oneof:"node_type"`
	AdditionalData []*google_protobuf.Any `protobuf:"bytes,7,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *TreeNode) Reset()                    { *m = TreeNode{} }
func (*TreeNode) ProtoMessage()               {}
func (*TreeNode) Descriptor() ([]byte, []int) { return fileDescriptorGenericTreeModel, []int{6} }

type isTreeNode_NodeType interface {
	isTreeNode_NodeType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TreeNode_BinaryNode struct {
	BinaryNode *BinaryNode `protobuf:"bytes,4,opt,name=binary_node,json=binaryNode,oneof"`
}
type TreeNode_Leaf struct {
	Leaf *Leaf `protobuf:"bytes,5,opt,name=leaf,oneof"`
}
type TreeNode_CustomNodeType struct {
	CustomNodeType *google_protobuf.Any `protobuf:"bytes,6,opt,name=custom_node_type,json=customNodeType,oneof"`
}

func (*TreeNode_BinaryNode) isTreeNode_NodeType()     {}
func (*TreeNode_Leaf) isTreeNode_NodeType()           {}
func (*TreeNode_CustomNodeType) isTreeNode_NodeType() {}

func (m *TreeNode) GetNodeType() isTreeNode_NodeType {
	if m != nil {
		return m.NodeType
	}
	return nil
}

func (m *TreeNode) GetNodeId() *google_protobuf1.Int32Value {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *TreeNode) GetDepth() *google_protobuf1.Int32Value {
	if m != nil {
		return m.Depth
	}
	return nil
}

func (m *TreeNode) GetSubtreeSize() *google_protobuf1.Int32Value {
	if m != nil {
		return m.SubtreeSize
	}
	return nil
}

func (m *TreeNode) GetBinaryNode() *BinaryNode {
	if x, ok := m.GetNodeType().(*TreeNode_BinaryNode); ok {
		return x.BinaryNode
	}
	return nil
}

func (m *TreeNode) GetLeaf() *Leaf {
	if x, ok := m.GetNodeType().(*TreeNode_Leaf); ok {
		return x.Leaf
	}
	return nil
}

func (m *TreeNode) GetCustomNodeType() *google_protobuf.Any {
	if x, ok := m.GetNodeType().(*TreeNode_CustomNodeType); ok {
		return x.CustomNodeType
	}
	return nil
}

func (m *TreeNode) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TreeNode) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TreeNode_OneofMarshaler, _TreeNode_OneofUnmarshaler, _TreeNode_OneofSizer, []interface{}{
		(*TreeNode_BinaryNode)(nil),
		(*TreeNode_Leaf)(nil),
		(*TreeNode_CustomNodeType)(nil),
	}
}

func _TreeNode_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TreeNode)
	// node_type
	switch x := m.NodeType.(type) {
	case *TreeNode_BinaryNode:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BinaryNode); err != nil {
			return err
		}
	case *TreeNode_Leaf:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Leaf); err != nil {
			return err
		}
	case *TreeNode_CustomNodeType:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomNodeType); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TreeNode.NodeType has unexpected type %T", x)
	}
	return nil
}

func _TreeNode_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TreeNode)
	switch tag {
	case 4: // node_type.binary_node
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BinaryNode)
		err := b.DecodeMessage(msg)
		m.NodeType = &TreeNode_BinaryNode{msg}
		return true, err
	case 5: // node_type.leaf
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Leaf)
		err := b.DecodeMessage(msg)
		m.NodeType = &TreeNode_Leaf{msg}
		return true, err
	case 6: // node_type.custom_node_type
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.NodeType = &TreeNode_CustomNodeType{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TreeNode_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TreeNode)
	// node_type
	switch x := m.NodeType.(type) {
	case *TreeNode_BinaryNode:
		s := proto.Size(x.BinaryNode)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TreeNode_Leaf:
		s := proto.Size(x.Leaf)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TreeNode_CustomNodeType:
		s := proto.Size(x.CustomNodeType)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type BinaryNode struct {
	LeftChildId  *google_protobuf1.Int32Value `protobuf:"bytes,1,opt,name=left_child_id,json=leftChildId" json:"left_child_id,omitempty"`
	RightChildId *google_protobuf1.Int32Value `protobuf:"bytes,2,opt,name=right_child_id,json=rightChildId" json:"right_child_id,omitempty"`
	// When left_child_test is undefined for a particular datapoint (e.g. because
	// it's not defined when feature value is missing), the datapoint should go
	// in this direction.
	DefaultDirection BinaryNode_Direction `protobuf:"varint,3,opt,name=default_direction,json=defaultDirection,proto3,enum=tensorflow.decision_trees.BinaryNode_Direction" json:"default_direction,omitempty"`
	// When a datapoint satisfies the test, it should be propagated to the left
	// child.
	//
	// Types that are valid to be assigned to LeftChildTest:
	//	*BinaryNode_InequalityLeftChildTest
	//	*BinaryNode_CustomLeftChildTest
	LeftChildTest isBinaryNode_LeftChildTest `protobuf_oneof:"left_child_test"`
}

func (m *BinaryNode) Reset()                    { *m = BinaryNode{} }
func (*BinaryNode) ProtoMessage()               {}
func (*BinaryNode) Descriptor() ([]byte, []int) { return fileDescriptorGenericTreeModel, []int{7} }

type isBinaryNode_LeftChildTest interface {
	isBinaryNode_LeftChildTest()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BinaryNode_InequalityLeftChildTest struct {
	InequalityLeftChildTest *InequalityTest `protobuf:"bytes,4,opt,name=inequality_left_child_test,json=inequalityLeftChildTest,oneof"`
}
type BinaryNode_CustomLeftChildTest struct {
	CustomLeftChildTest *google_protobuf.Any `protobuf:"bytes,5,opt,name=custom_left_child_test,json=customLeftChildTest,oneof"`
}

func (*BinaryNode_InequalityLeftChildTest) isBinaryNode_LeftChildTest() {}
func (*BinaryNode_CustomLeftChildTest) isBinaryNode_LeftChildTest()     {}

func (m *BinaryNode) GetLeftChildTest() isBinaryNode_LeftChildTest {
	if m != nil {
		return m.LeftChildTest
	}
	return nil
}

func (m *BinaryNode) GetLeftChildId() *google_protobuf1.Int32Value {
	if m != nil {
		return m.LeftChildId
	}
	return nil
}

func (m *BinaryNode) GetRightChildId() *google_protobuf1.Int32Value {
	if m != nil {
		return m.RightChildId
	}
	return nil
}

func (m *BinaryNode) GetDefaultDirection() BinaryNode_Direction {
	if m != nil {
		return m.DefaultDirection
	}
	return LEFT
}

func (m *BinaryNode) GetInequalityLeftChildTest() *InequalityTest {
	if x, ok := m.GetLeftChildTest().(*BinaryNode_InequalityLeftChildTest); ok {
		return x.InequalityLeftChildTest
	}
	return nil
}

func (m *BinaryNode) GetCustomLeftChildTest() *google_protobuf.Any {
	if x, ok := m.GetLeftChildTest().(*BinaryNode_CustomLeftChildTest); ok {
		return x.CustomLeftChildTest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BinaryNode) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BinaryNode_OneofMarshaler, _BinaryNode_OneofUnmarshaler, _BinaryNode_OneofSizer, []interface{}{
		(*BinaryNode_InequalityLeftChildTest)(nil),
		(*BinaryNode_CustomLeftChildTest)(nil),
	}
}

func _BinaryNode_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BinaryNode)
	// left_child_test
	switch x := m.LeftChildTest.(type) {
	case *BinaryNode_InequalityLeftChildTest:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InequalityLeftChildTest); err != nil {
			return err
		}
	case *BinaryNode_CustomLeftChildTest:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomLeftChildTest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BinaryNode.LeftChildTest has unexpected type %T", x)
	}
	return nil
}

func _BinaryNode_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BinaryNode)
	switch tag {
	case 4: // left_child_test.inequality_left_child_test
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InequalityTest)
		err := b.DecodeMessage(msg)
		m.LeftChildTest = &BinaryNode_InequalityLeftChildTest{msg}
		return true, err
	case 5: // left_child_test.custom_left_child_test
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.LeftChildTest = &BinaryNode_CustomLeftChildTest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BinaryNode_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BinaryNode)
	// left_child_test
	switch x := m.LeftChildTest.(type) {
	case *BinaryNode_InequalityLeftChildTest:
		s := proto.Size(x.InequalityLeftChildTest)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BinaryNode_CustomLeftChildTest:
		s := proto.Size(x.CustomLeftChildTest)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A SparseVector represents a vector in which only certain select elements
// are non-zero.  Maps labels to values (e.g. class id to probability or count).
type SparseVector struct {
	SparseValue map[int64]*Value `protobuf:"bytes,1,rep,name=sparse_value,json=sparseValue" json:"sparse_value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SparseVector) Reset()                    { *m = SparseVector{} }
func (*SparseVector) ProtoMessage()               {}
func (*SparseVector) Descriptor() ([]byte, []int) { return fileDescriptorGenericTreeModel, []int{8} }

func (m *SparseVector) GetSparseValue() map[int64]*Value {
	if m != nil {
		return m.SparseValue
	}
	return nil
}

type Vector struct {
	Value []*Value `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *Vector) Reset()                    { *m = Vector{} }
func (*Vector) ProtoMessage()               {}
func (*Vector) Descriptor() ([]byte, []int) { return fileDescriptorGenericTreeModel, []int{9} }

func (m *Vector) GetValue() []*Value {
	if m != nil {
		return m.Value
	}
	return nil
}

type Leaf struct {
	// Types that are valid to be assigned to Leaf:
	//	*Leaf_Vector
	//	*Leaf_SparseVector
	Leaf isLeaf_Leaf `protobuf_oneof:"leaf"`
	// For non-standard handling of leaves.
	AdditionalData []*google_protobuf.Any `protobuf:"bytes,3,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *Leaf) Reset()                    { *m = Leaf{} }
func (*Leaf) ProtoMessage()               {}
func (*Leaf) Descriptor() ([]byte, []int) { return fileDescriptorGenericTreeModel, []int{10} }

type isLeaf_Leaf interface {
	isLeaf_Leaf()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Leaf_Vector struct {
	Vector *Vector `protobuf:"bytes,1,opt,name=vector,oneof"`
}
type Leaf_SparseVector struct {
	SparseVector *SparseVector `protobuf:"bytes,2,opt,name=sparse_vector,json=sparseVector,oneof"`
}

func (*Leaf_Vector) isLeaf_Leaf()       {}
func (*Leaf_SparseVector) isLeaf_Leaf() {}

func (m *Leaf) GetLeaf() isLeaf_Leaf {
	if m != nil {
		return m.Leaf
	}
	return nil
}

func (m *Leaf) GetVector() *Vector {
	if x, ok := m.GetLeaf().(*Leaf_Vector); ok {
		return x.Vector
	}
	return nil
}

func (m *Leaf) GetSparseVector() *SparseVector {
	if x, ok := m.GetLeaf().(*Leaf_SparseVector); ok {
		return x.SparseVector
	}
	return nil
}

func (m *Leaf) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Leaf) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Leaf_OneofMarshaler, _Leaf_OneofUnmarshaler, _Leaf_OneofSizer, []interface{}{
		(*Leaf_Vector)(nil),
		(*Leaf_SparseVector)(nil),
	}
}

func _Leaf_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Leaf)
	// leaf
	switch x := m.Leaf.(type) {
	case *Leaf_Vector:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vector); err != nil {
			return err
		}
	case *Leaf_SparseVector:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SparseVector); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Leaf.Leaf has unexpected type %T", x)
	}
	return nil
}

func _Leaf_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Leaf)
	switch tag {
	case 1: // leaf.vector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Vector)
		err := b.DecodeMessage(msg)
		m.Leaf = &Leaf_Vector{msg}
		return true, err
	case 2: // leaf.sparse_vector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SparseVector)
		err := b.DecodeMessage(msg)
		m.Leaf = &Leaf_SparseVector{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Leaf_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Leaf)
	// leaf
	switch x := m.Leaf.(type) {
	case *Leaf_Vector:
		s := proto.Size(x.Vector)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Leaf_SparseVector:
		s := proto.Size(x.SparseVector)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FeatureId struct {
	Id             *google_protobuf1.StringValue `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	AdditionalData []*google_protobuf.Any        `protobuf:"bytes,2,rep,name=additional_data,json=additionalData" json:"additional_data,omitempty"`
}

func (m *FeatureId) Reset()                    { *m = FeatureId{} }
func (*FeatureId) ProtoMessage()               {}
func (*FeatureId) Descriptor() ([]byte, []int) { return fileDescriptorGenericTreeModel, []int{11} }

func (m *FeatureId) GetId() *google_protobuf1.StringValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *FeatureId) GetAdditionalData() []*google_protobuf.Any {
	if m != nil {
		return m.AdditionalData
	}
	return nil
}

type ObliqueFeatures struct {
	// total value is sum(features[i] * weights[i]).
	Features []*FeatureId `protobuf:"bytes,1,rep,name=features" json:"features,omitempty"`
	Weights  []float32    `protobuf:"fixed32,2,rep,packed,name=weights" json:"weights,omitempty"`
}

func (m *ObliqueFeatures) Reset()                    { *m = ObliqueFeatures{} }
func (*ObliqueFeatures) ProtoMessage()               {}
func (*ObliqueFeatures) Descriptor() ([]byte, []int) { return fileDescriptorGenericTreeModel, []int{12} }

func (m *ObliqueFeatures) GetFeatures() []*FeatureId {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *ObliqueFeatures) GetWeights() []float32 {
	if m != nil {
		return m.Weights
	}
	return nil
}

type InequalityTest struct {
	// When the feature is missing, the test's outcome is undefined.
	//
	// Types that are valid to be assigned to FeatureSum:
	//	*InequalityTest_FeatureId
	//	*InequalityTest_Oblique
	FeatureSum isInequalityTest_FeatureSum `protobuf_oneof:"FeatureSum"`
	Type       InequalityTest_Type         `protobuf:"varint,2,opt,name=type,proto3,enum=tensorflow.decision_trees.InequalityTest_Type" json:"type,omitempty"`
	Threshold  *Value                      `protobuf:"bytes,3,opt,name=threshold" json:"threshold,omitempty"`
}

func (m *InequalityTest) Reset()                    { *m = InequalityTest{} }
func (*InequalityTest) ProtoMessage()               {}
func (*InequalityTest) Descriptor() ([]byte, []int) { return fileDescriptorGenericTreeModel, []int{13} }

type isInequalityTest_FeatureSum interface {
	isInequalityTest_FeatureSum()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type InequalityTest_FeatureId struct {
	FeatureId *FeatureId `protobuf:"bytes,1,opt,name=feature_id,json=featureId,oneof"`
}
type InequalityTest_Oblique struct {
	Oblique *ObliqueFeatures `protobuf:"bytes,4,opt,name=oblique,oneof"`
}

func (*InequalityTest_FeatureId) isInequalityTest_FeatureSum() {}
func (*InequalityTest_Oblique) isInequalityTest_FeatureSum()   {}

func (m *InequalityTest) GetFeatureSum() isInequalityTest_FeatureSum {
	if m != nil {
		return m.FeatureSum
	}
	return nil
}

func (m *InequalityTest) GetFeatureId() *FeatureId {
	if x, ok := m.GetFeatureSum().(*InequalityTest_FeatureId); ok {
		return x.FeatureId
	}
	return nil
}

func (m *InequalityTest) GetOblique() *ObliqueFeatures {
	if x, ok := m.GetFeatureSum().(*InequalityTest_Oblique); ok {
		return x.Oblique
	}
	return nil
}

func (m *InequalityTest) GetType() InequalityTest_Type {
	if m != nil {
		return m.Type
	}
	return LESS_OR_EQUAL
}

func (m *InequalityTest) GetThreshold() *Value {
	if m != nil {
		return m.Threshold
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InequalityTest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InequalityTest_OneofMarshaler, _InequalityTest_OneofUnmarshaler, _InequalityTest_OneofSizer, []interface{}{
		(*InequalityTest_FeatureId)(nil),
		(*InequalityTest_Oblique)(nil),
	}
}

func _InequalityTest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InequalityTest)
	// FeatureSum
	switch x := m.FeatureSum.(type) {
	case *InequalityTest_FeatureId:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FeatureId); err != nil {
			return err
		}
	case *InequalityTest_Oblique:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Oblique); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("InequalityTest.FeatureSum has unexpected type %T", x)
	}
	return nil
}

func _InequalityTest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InequalityTest)
	switch tag {
	case 1: // FeatureSum.feature_id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FeatureId)
		err := b.DecodeMessage(msg)
		m.FeatureSum = &InequalityTest_FeatureId{msg}
		return true, err
	case 4: // FeatureSum.oblique
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ObliqueFeatures)
		err := b.DecodeMessage(msg)
		m.FeatureSum = &InequalityTest_Oblique{msg}
		return true, err
	default:
		return false, nil
	}
}

func _InequalityTest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InequalityTest)
	// FeatureSum
	switch x := m.FeatureSum.(type) {
	case *InequalityTest_FeatureId:
		s := proto.Size(x.FeatureId)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InequalityTest_Oblique:
		s := proto.Size(x.Oblique)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Represents a single value of any type, e.g. 5 or "abc".
type Value struct {
	// Types that are valid to be assigned to Value:
	//	*Value_FloatValue
	//	*Value_DoubleValue
	//	*Value_Int32Value
	//	*Value_Int64Value
	//	*Value_CustomValue
	Value isValue_Value `protobuf_oneof:"value"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptorGenericTreeModel, []int{14} }

type isValue_Value interface {
	isValue_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Value_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,1,opt,name=float_value,json=floatValue,proto3,oneof"`
}
type Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,2,opt,name=double_value,json=doubleValue,proto3,oneof"`
}
type Value_Int32Value struct {
	Int32Value int32 `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3,oneof"`
}
type Value_Int64Value struct {
	Int64Value int64 `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3,oneof"`
}
type Value_CustomValue struct {
	CustomValue *google_protobuf.Any `protobuf:"bytes,5,opt,name=custom_value,json=customValue,oneof"`
}

func (*Value_FloatValue) isValue_Value()  {}
func (*Value_DoubleValue) isValue_Value() {}
func (*Value_Int32Value) isValue_Value()  {}
func (*Value_Int64Value) isValue_Value()  {}
func (*Value_CustomValue) isValue_Value() {}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Value) GetFloatValue() float32 {
	if x, ok := m.GetValue().(*Value_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *Value) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *Value) GetInt32Value() int32 {
	if x, ok := m.GetValue().(*Value_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (m *Value) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*Value_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *Value) GetCustomValue() *google_protobuf.Any {
	if x, ok := m.GetValue().(*Value_CustomValue); ok {
		return x.CustomValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Value_OneofMarshaler, _Value_OneofUnmarshaler, _Value_OneofSizer, []interface{}{
		(*Value_FloatValue)(nil),
		(*Value_DoubleValue)(nil),
		(*Value_Int32Value)(nil),
		(*Value_Int64Value)(nil),
		(*Value_CustomValue)(nil),
	}
}

func _Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Value)
	// value
	switch x := m.Value.(type) {
	case *Value_FloatValue:
		_ = b.EncodeVarint(1<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.FloatValue)))
	case *Value_DoubleValue:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed64)
		_ = b.EncodeFixed64(math.Float64bits(x.DoubleValue))
	case *Value_Int32Value:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Int32Value))
	case *Value_Int64Value:
		_ = b.EncodeVarint(4<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Int64Value))
	case *Value_CustomValue:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CustomValue); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Value.Value has unexpected type %T", x)
	}
	return nil
}

func _Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Value)
	switch tag {
	case 1: // value.float_value
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Value = &Value_FloatValue{math.Float32frombits(uint32(x))}
		return true, err
	case 2: // value.double_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &Value_DoubleValue{math.Float64frombits(x)}
		return true, err
	case 3: // value.int32_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Value_Int32Value{int32(x)}
		return true, err
	case 4: // value.int64_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Value_Int64Value{int64(x)}
		return true, err
	case 5: // value.custom_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.Value = &Value_CustomValue{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Value)
	// value
	switch x := m.Value.(type) {
	case *Value_FloatValue:
		n += proto.SizeVarint(1<<3 | proto.WireFixed32)
		n += 4
	case *Value_DoubleValue:
		n += proto.SizeVarint(2<<3 | proto.WireFixed64)
		n += 8
	case *Value_Int32Value:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int32Value))
	case *Value_Int64Value:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int64Value))
	case *Value_CustomValue:
		s := proto.Size(x.CustomValue)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Model)(nil), "tensorflow.decision_trees.Model")
	proto.RegisterType((*ModelAndFeatures)(nil), "tensorflow.decision_trees.ModelAndFeatures")
	proto.RegisterType((*ModelAndFeatures_Feature)(nil), "tensorflow.decision_trees.ModelAndFeatures.Feature")
	proto.RegisterType((*Ensemble)(nil), "tensorflow.decision_trees.Ensemble")
	proto.RegisterType((*Ensemble_Member)(nil), "tensorflow.decision_trees.Ensemble.Member")
	proto.RegisterType((*Summation)(nil), "tensorflow.decision_trees.Summation")
	proto.RegisterType((*Averaging)(nil), "tensorflow.decision_trees.Averaging")
	proto.RegisterType((*DecisionTree)(nil), "tensorflow.decision_trees.DecisionTree")
	proto.RegisterType((*TreeNode)(nil), "tensorflow.decision_trees.TreeNode")
	proto.RegisterType((*BinaryNode)(nil), "tensorflow.decision_trees.BinaryNode")
	proto.RegisterType((*SparseVector)(nil), "tensorflow.decision_trees.SparseVector")
	proto.RegisterType((*Vector)(nil), "tensorflow.decision_trees.Vector")
	proto.RegisterType((*Leaf)(nil), "tensorflow.decision_trees.Leaf")
	proto.RegisterType((*FeatureId)(nil), "tensorflow.decision_trees.FeatureId")
	proto.RegisterType((*ObliqueFeatures)(nil), "tensorflow.decision_trees.ObliqueFeatures")
	proto.RegisterType((*InequalityTest)(nil), "tensorflow.decision_trees.InequalityTest")
	proto.RegisterType((*Value)(nil), "tensorflow.decision_trees.Value")
	proto.RegisterEnum("tensorflow.decision_trees.BinaryNode_Direction", BinaryNode_Direction_name, BinaryNode_Direction_value)
	proto.RegisterEnum("tensorflow.decision_trees.InequalityTest_Type", InequalityTest_Type_name, InequalityTest_Type_value)
}
func (x BinaryNode_Direction) String() string {
	s, ok := BinaryNode_Direction_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x InequalityTest_Type) String() string {
	s, ok := InequalityTest_Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Model) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Model)
	if !ok {
		that2, ok := that.(Model)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Model == nil {
		if this.Model != nil {
			return false
		}
	} else if this.Model == nil {
		return false
	} else if !this.Model.Equal(that1.Model) {
		return false
	}
	if len(this.AdditionalData) != len(that1.AdditionalData) {
		return false
	}
	for i := range this.AdditionalData {
		if !this.AdditionalData[i].Equal(that1.AdditionalData[i]) {
			return false
		}
	}
	return true
}
func (this *Model_DecisionTree) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Model_DecisionTree)
	if !ok {
		that2, ok := that.(Model_DecisionTree)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.DecisionTree.Equal(that1.DecisionTree) {
		return false
	}
	return true
}
func (this *Model_Ensemble) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Model_Ensemble)
	if !ok {
		that2, ok := that.(Model_Ensemble)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Ensemble.Equal(that1.Ensemble) {
		return false
	}
	return true
}
func (this *Model_CustomModel) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Model_CustomModel)
	if !ok {
		that2, ok := that.(Model_CustomModel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CustomModel.Equal(that1.CustomModel) {
		return false
	}
	return true
}
func (this *ModelAndFeatures) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ModelAndFeatures)
	if !ok {
		that2, ok := that.(ModelAndFeatures)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Features) != len(that1.Features) {
		return false
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return false
		}
	}
	if !this.Model.Equal(that1.Model) {
		return false
	}
	if len(this.AdditionalData) != len(that1.AdditionalData) {
		return false
	}
	for i := range this.AdditionalData {
		if !this.AdditionalData[i].Equal(that1.AdditionalData[i]) {
			return false
		}
	}
	return true
}
func (this *ModelAndFeatures_Feature) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ModelAndFeatures_Feature)
	if !ok {
		that2, ok := that.(ModelAndFeatures_Feature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.FeatureId.Equal(that1.FeatureId) {
		return false
	}
	if len(this.AdditionalData) != len(that1.AdditionalData) {
		return false
	}
	for i := range this.AdditionalData {
		if !this.AdditionalData[i].Equal(that1.AdditionalData[i]) {
			return false
		}
	}
	return true
}
func (this *Ensemble) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Ensemble)
	if !ok {
		that2, ok := that.(Ensemble)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	if that1.CombinationTechnique == nil {
		if this.CombinationTechnique != nil {
			return false
		}
	} else if this.CombinationTechnique == nil {
		return false
	} else if !this.CombinationTechnique.Equal(that1.CombinationTechnique) {
		return false
	}
	if len(this.AdditionalData) != len(that1.AdditionalData) {
		return false
	}
	for i := range this.AdditionalData {
		if !this.AdditionalData[i].Equal(that1.AdditionalData[i]) {
			return false
		}
	}
	return true
}
func (this *Ensemble_SummationCombinationTechnique) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Ensemble_SummationCombinationTechnique)
	if !ok {
		that2, ok := that.(Ensemble_SummationCombinationTechnique)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SummationCombinationTechnique.Equal(that1.SummationCombinationTechnique) {
		return false
	}
	return true
}
func (this *Ensemble_AveragingCombinationTechnique) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Ensemble_AveragingCombinationTechnique)
	if !ok {
		that2, ok := that.(Ensemble_AveragingCombinationTechnique)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.AveragingCombinationTechnique.Equal(that1.AveragingCombinationTechnique) {
		return false
	}
	return true
}
func (this *Ensemble_CustomCombinationTechnique) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Ensemble_CustomCombinationTechnique)
	if !ok {
		that2, ok := that.(Ensemble_CustomCombinationTechnique)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CustomCombinationTechnique.Equal(that1.CustomCombinationTechnique) {
		return false
	}
	return true
}
func (this *Ensemble_Member) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Ensemble_Member)
	if !ok {
		that2, ok := that.(Ensemble_Member)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Submodel.Equal(that1.Submodel) {
		return false
	}
	if !this.SubmodelId.Equal(that1.SubmodelId) {
		return false
	}
	if len(this.AdditionalData) != len(that1.AdditionalData) {
		return false
	}
	for i := range this.AdditionalData {
		if !this.AdditionalData[i].Equal(that1.AdditionalData[i]) {
			return false
		}
	}
	return true
}
func (this *Summation) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Summation)
	if !ok {
		that2, ok := that.(Summation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.AdditionalData) != len(that1.AdditionalData) {
		return false
	}
	for i := range this.AdditionalData {
		if !this.AdditionalData[i].Equal(that1.AdditionalData[i]) {
			return false
		}
	}
	return true
}
func (this *Averaging) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Averaging)
	if !ok {
		that2, ok := that.(Averaging)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.AdditionalData) != len(that1.AdditionalData) {
		return false
	}
	for i := range this.AdditionalData {
		if !this.AdditionalData[i].Equal(that1.AdditionalData[i]) {
			return false
		}
	}
	return true
}
func (this *DecisionTree) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DecisionTree)
	if !ok {
		that2, ok := that.(DecisionTree)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	if len(this.AdditionalData) != len(that1.AdditionalData) {
		return false
	}
	for i := range this.AdditionalData {
		if !this.AdditionalData[i].Equal(that1.AdditionalData[i]) {
			return false
		}
	}
	return true
}
func (this *TreeNode) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TreeNode)
	if !ok {
		that2, ok := that.(TreeNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.NodeId.Equal(that1.NodeId) {
		return false
	}
	if !this.Depth.Equal(that1.Depth) {
		return false
	}
	if !this.SubtreeSize.Equal(that1.SubtreeSize) {
		return false
	}
	if that1.NodeType == nil {
		if this.NodeType != nil {
			return false
		}
	} else if this.NodeType == nil {
		return false
	} else if !this.NodeType.Equal(that1.NodeType) {
		return false
	}
	if len(this.AdditionalData) != len(that1.AdditionalData) {
		return false
	}
	for i := range this.AdditionalData {
		if !this.AdditionalData[i].Equal(that1.AdditionalData[i]) {
			return false
		}
	}
	return true
}
func (this *TreeNode_BinaryNode) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TreeNode_BinaryNode)
	if !ok {
		that2, ok := that.(TreeNode_BinaryNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.BinaryNode.Equal(that1.BinaryNode) {
		return false
	}
	return true
}
func (this *TreeNode_Leaf) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TreeNode_Leaf)
	if !ok {
		that2, ok := that.(TreeNode_Leaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Leaf.Equal(that1.Leaf) {
		return false
	}
	return true
}
func (this *TreeNode_CustomNodeType) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TreeNode_CustomNodeType)
	if !ok {
		that2, ok := that.(TreeNode_CustomNodeType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CustomNodeType.Equal(that1.CustomNodeType) {
		return false
	}
	return true
}
func (this *BinaryNode) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BinaryNode)
	if !ok {
		that2, ok := that.(BinaryNode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.LeftChildId.Equal(that1.LeftChildId) {
		return false
	}
	if !this.RightChildId.Equal(that1.RightChildId) {
		return false
	}
	if this.DefaultDirection != that1.DefaultDirection {
		return false
	}
	if that1.LeftChildTest == nil {
		if this.LeftChildTest != nil {
			return false
		}
	} else if this.LeftChildTest == nil {
		return false
	} else if !this.LeftChildTest.Equal(that1.LeftChildTest) {
		return false
	}
	return true
}
func (this *BinaryNode_InequalityLeftChildTest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BinaryNode_InequalityLeftChildTest)
	if !ok {
		that2, ok := that.(BinaryNode_InequalityLeftChildTest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.InequalityLeftChildTest.Equal(that1.InequalityLeftChildTest) {
		return false
	}
	return true
}
func (this *BinaryNode_CustomLeftChildTest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BinaryNode_CustomLeftChildTest)
	if !ok {
		that2, ok := that.(BinaryNode_CustomLeftChildTest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CustomLeftChildTest.Equal(that1.CustomLeftChildTest) {
		return false
	}
	return true
}
func (this *SparseVector) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SparseVector)
	if !ok {
		that2, ok := that.(SparseVector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.SparseValue) != len(that1.SparseValue) {
		return false
	}
	for i := range this.SparseValue {
		if !this.SparseValue[i].Equal(that1.SparseValue[i]) {
			return false
		}
	}
	return true
}
func (this *Vector) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Vector)
	if !ok {
		that2, ok := that.(Vector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Value) != len(that1.Value) {
		return false
	}
	for i := range this.Value {
		if !this.Value[i].Equal(that1.Value[i]) {
			return false
		}
	}
	return true
}
func (this *Leaf) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Leaf)
	if !ok {
		that2, ok := that.(Leaf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Leaf == nil {
		if this.Leaf != nil {
			return false
		}
	} else if this.Leaf == nil {
		return false
	} else if !this.Leaf.Equal(that1.Leaf) {
		return false
	}
	if len(this.AdditionalData) != len(that1.AdditionalData) {
		return false
	}
	for i := range this.AdditionalData {
		if !this.AdditionalData[i].Equal(that1.AdditionalData[i]) {
			return false
		}
	}
	return true
}
func (this *Leaf_Vector) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Leaf_Vector)
	if !ok {
		that2, ok := that.(Leaf_Vector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Vector.Equal(that1.Vector) {
		return false
	}
	return true
}
func (this *Leaf_SparseVector) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Leaf_SparseVector)
	if !ok {
		that2, ok := that.(Leaf_SparseVector)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SparseVector.Equal(that1.SparseVector) {
		return false
	}
	return true
}
func (this *FeatureId) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*FeatureId)
	if !ok {
		that2, ok := that.(FeatureId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if len(this.AdditionalData) != len(that1.AdditionalData) {
		return false
	}
	for i := range this.AdditionalData {
		if !this.AdditionalData[i].Equal(that1.AdditionalData[i]) {
			return false
		}
	}
	return true
}
func (this *ObliqueFeatures) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ObliqueFeatures)
	if !ok {
		that2, ok := that.(ObliqueFeatures)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Features) != len(that1.Features) {
		return false
	}
	for i := range this.Features {
		if !this.Features[i].Equal(that1.Features[i]) {
			return false
		}
	}
	if len(this.Weights) != len(that1.Weights) {
		return false
	}
	for i := range this.Weights {
		if this.Weights[i] != that1.Weights[i] {
			return false
		}
	}
	return true
}
func (this *InequalityTest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InequalityTest)
	if !ok {
		that2, ok := that.(InequalityTest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.FeatureSum == nil {
		if this.FeatureSum != nil {
			return false
		}
	} else if this.FeatureSum == nil {
		return false
	} else if !this.FeatureSum.Equal(that1.FeatureSum) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Threshold.Equal(that1.Threshold) {
		return false
	}
	return true
}
func (this *InequalityTest_FeatureId) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InequalityTest_FeatureId)
	if !ok {
		that2, ok := that.(InequalityTest_FeatureId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.FeatureId.Equal(that1.FeatureId) {
		return false
	}
	return true
}
func (this *InequalityTest_Oblique) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InequalityTest_Oblique)
	if !ok {
		that2, ok := that.(InequalityTest_Oblique)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Oblique.Equal(that1.Oblique) {
		return false
	}
	return true
}
func (this *Value) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Value)
	if !ok {
		that2, ok := that.(Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *Value_FloatValue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Value_FloatValue)
	if !ok {
		that2, ok := that.(Value_FloatValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FloatValue != that1.FloatValue {
		return false
	}
	return true
}
func (this *Value_DoubleValue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Value_DoubleValue)
	if !ok {
		that2, ok := that.(Value_DoubleValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.DoubleValue != that1.DoubleValue {
		return false
	}
	return true
}
func (this *Value_Int32Value) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Value_Int32Value)
	if !ok {
		that2, ok := that.(Value_Int32Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Int32Value != that1.Int32Value {
		return false
	}
	return true
}
func (this *Value_Int64Value) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Value_Int64Value)
	if !ok {
		that2, ok := that.(Value_Int64Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Int64Value != that1.Int64Value {
		return false
	}
	return true
}
func (this *Value_CustomValue) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Value_CustomValue)
	if !ok {
		that2, ok := that.(Value_CustomValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.CustomValue.Equal(that1.CustomValue) {
		return false
	}
	return true
}
func (this *Model) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tensorflow_decision_trees.Model{")
	if this.Model != nil {
		s = append(s, "Model: "+fmt.Sprintf("%#v", this.Model)+",\n")
	}
	if this.AdditionalData != nil {
		s = append(s, "AdditionalData: "+fmt.Sprintf("%#v", this.AdditionalData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Model_DecisionTree) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.Model_DecisionTree{` +
		`DecisionTree:` + fmt.Sprintf("%#v", this.DecisionTree) + `}`}, ", ")
	return s
}
func (this *Model_Ensemble) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.Model_Ensemble{` +
		`Ensemble:` + fmt.Sprintf("%#v", this.Ensemble) + `}`}, ", ")
	return s
}
func (this *Model_CustomModel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.Model_CustomModel{` +
		`CustomModel:` + fmt.Sprintf("%#v", this.CustomModel) + `}`}, ", ")
	return s
}
func (this *ModelAndFeatures) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensorflow_decision_trees.ModelAndFeatures{")
	keysForFeatures := make([]string, 0, len(this.Features))
	for k, _ := range this.Features {
		keysForFeatures = append(keysForFeatures, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForFeatures)
	mapStringForFeatures := "map[string]*ModelAndFeatures_Feature{"
	for _, k := range keysForFeatures {
		mapStringForFeatures += fmt.Sprintf("%#v: %#v,", k, this.Features[k])
	}
	mapStringForFeatures += "}"
	if this.Features != nil {
		s = append(s, "Features: "+mapStringForFeatures+",\n")
	}
	if this.Model != nil {
		s = append(s, "Model: "+fmt.Sprintf("%#v", this.Model)+",\n")
	}
	if this.AdditionalData != nil {
		s = append(s, "AdditionalData: "+fmt.Sprintf("%#v", this.AdditionalData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelAndFeatures_Feature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow_decision_trees.ModelAndFeatures_Feature{")
	if this.FeatureId != nil {
		s = append(s, "FeatureId: "+fmt.Sprintf("%#v", this.FeatureId)+",\n")
	}
	if this.AdditionalData != nil {
		s = append(s, "AdditionalData: "+fmt.Sprintf("%#v", this.AdditionalData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Ensemble) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&tensorflow_decision_trees.Ensemble{")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	if this.CombinationTechnique != nil {
		s = append(s, "CombinationTechnique: "+fmt.Sprintf("%#v", this.CombinationTechnique)+",\n")
	}
	if this.AdditionalData != nil {
		s = append(s, "AdditionalData: "+fmt.Sprintf("%#v", this.AdditionalData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Ensemble_SummationCombinationTechnique) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.Ensemble_SummationCombinationTechnique{` +
		`SummationCombinationTechnique:` + fmt.Sprintf("%#v", this.SummationCombinationTechnique) + `}`}, ", ")
	return s
}
func (this *Ensemble_AveragingCombinationTechnique) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.Ensemble_AveragingCombinationTechnique{` +
		`AveragingCombinationTechnique:` + fmt.Sprintf("%#v", this.AveragingCombinationTechnique) + `}`}, ", ")
	return s
}
func (this *Ensemble_CustomCombinationTechnique) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.Ensemble_CustomCombinationTechnique{` +
		`CustomCombinationTechnique:` + fmt.Sprintf("%#v", this.CustomCombinationTechnique) + `}`}, ", ")
	return s
}
func (this *Ensemble_Member) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensorflow_decision_trees.Ensemble_Member{")
	if this.Submodel != nil {
		s = append(s, "Submodel: "+fmt.Sprintf("%#v", this.Submodel)+",\n")
	}
	if this.SubmodelId != nil {
		s = append(s, "SubmodelId: "+fmt.Sprintf("%#v", this.SubmodelId)+",\n")
	}
	if this.AdditionalData != nil {
		s = append(s, "AdditionalData: "+fmt.Sprintf("%#v", this.AdditionalData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Summation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow_decision_trees.Summation{")
	if this.AdditionalData != nil {
		s = append(s, "AdditionalData: "+fmt.Sprintf("%#v", this.AdditionalData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Averaging) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow_decision_trees.Averaging{")
	if this.AdditionalData != nil {
		s = append(s, "AdditionalData: "+fmt.Sprintf("%#v", this.AdditionalData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DecisionTree) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow_decision_trees.DecisionTree{")
	if this.Nodes != nil {
		s = append(s, "Nodes: "+fmt.Sprintf("%#v", this.Nodes)+",\n")
	}
	if this.AdditionalData != nil {
		s = append(s, "AdditionalData: "+fmt.Sprintf("%#v", this.AdditionalData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TreeNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&tensorflow_decision_trees.TreeNode{")
	if this.NodeId != nil {
		s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	}
	if this.Depth != nil {
		s = append(s, "Depth: "+fmt.Sprintf("%#v", this.Depth)+",\n")
	}
	if this.SubtreeSize != nil {
		s = append(s, "SubtreeSize: "+fmt.Sprintf("%#v", this.SubtreeSize)+",\n")
	}
	if this.NodeType != nil {
		s = append(s, "NodeType: "+fmt.Sprintf("%#v", this.NodeType)+",\n")
	}
	if this.AdditionalData != nil {
		s = append(s, "AdditionalData: "+fmt.Sprintf("%#v", this.AdditionalData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TreeNode_BinaryNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.TreeNode_BinaryNode{` +
		`BinaryNode:` + fmt.Sprintf("%#v", this.BinaryNode) + `}`}, ", ")
	return s
}
func (this *TreeNode_Leaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.TreeNode_Leaf{` +
		`Leaf:` + fmt.Sprintf("%#v", this.Leaf) + `}`}, ", ")
	return s
}
func (this *TreeNode_CustomNodeType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.TreeNode_CustomNodeType{` +
		`CustomNodeType:` + fmt.Sprintf("%#v", this.CustomNodeType) + `}`}, ", ")
	return s
}
func (this *BinaryNode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&tensorflow_decision_trees.BinaryNode{")
	if this.LeftChildId != nil {
		s = append(s, "LeftChildId: "+fmt.Sprintf("%#v", this.LeftChildId)+",\n")
	}
	if this.RightChildId != nil {
		s = append(s, "RightChildId: "+fmt.Sprintf("%#v", this.RightChildId)+",\n")
	}
	s = append(s, "DefaultDirection: "+fmt.Sprintf("%#v", this.DefaultDirection)+",\n")
	if this.LeftChildTest != nil {
		s = append(s, "LeftChildTest: "+fmt.Sprintf("%#v", this.LeftChildTest)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BinaryNode_InequalityLeftChildTest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.BinaryNode_InequalityLeftChildTest{` +
		`InequalityLeftChildTest:` + fmt.Sprintf("%#v", this.InequalityLeftChildTest) + `}`}, ", ")
	return s
}
func (this *BinaryNode_CustomLeftChildTest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.BinaryNode_CustomLeftChildTest{` +
		`CustomLeftChildTest:` + fmt.Sprintf("%#v", this.CustomLeftChildTest) + `}`}, ", ")
	return s
}
func (this *SparseVector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow_decision_trees.SparseVector{")
	keysForSparseValue := make([]int64, 0, len(this.SparseValue))
	for k, _ := range this.SparseValue {
		keysForSparseValue = append(keysForSparseValue, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSparseValue)
	mapStringForSparseValue := "map[int64]*Value{"
	for _, k := range keysForSparseValue {
		mapStringForSparseValue += fmt.Sprintf("%#v: %#v,", k, this.SparseValue[k])
	}
	mapStringForSparseValue += "}"
	if this.SparseValue != nil {
		s = append(s, "SparseValue: "+mapStringForSparseValue+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow_decision_trees.Vector{")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Leaf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensorflow_decision_trees.Leaf{")
	if this.Leaf != nil {
		s = append(s, "Leaf: "+fmt.Sprintf("%#v", this.Leaf)+",\n")
	}
	if this.AdditionalData != nil {
		s = append(s, "AdditionalData: "+fmt.Sprintf("%#v", this.AdditionalData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Leaf_Vector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.Leaf_Vector{` +
		`Vector:` + fmt.Sprintf("%#v", this.Vector) + `}`}, ", ")
	return s
}
func (this *Leaf_SparseVector) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.Leaf_SparseVector{` +
		`SparseVector:` + fmt.Sprintf("%#v", this.SparseVector) + `}`}, ", ")
	return s
}
func (this *FeatureId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow_decision_trees.FeatureId{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.AdditionalData != nil {
		s = append(s, "AdditionalData: "+fmt.Sprintf("%#v", this.AdditionalData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ObliqueFeatures) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow_decision_trees.ObliqueFeatures{")
	if this.Features != nil {
		s = append(s, "Features: "+fmt.Sprintf("%#v", this.Features)+",\n")
	}
	s = append(s, "Weights: "+fmt.Sprintf("%#v", this.Weights)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InequalityTest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tensorflow_decision_trees.InequalityTest{")
	if this.FeatureSum != nil {
		s = append(s, "FeatureSum: "+fmt.Sprintf("%#v", this.FeatureSum)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Threshold != nil {
		s = append(s, "Threshold: "+fmt.Sprintf("%#v", this.Threshold)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InequalityTest_FeatureId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.InequalityTest_FeatureId{` +
		`FeatureId:` + fmt.Sprintf("%#v", this.FeatureId) + `}`}, ", ")
	return s
}
func (this *InequalityTest_Oblique) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.InequalityTest_Oblique{` +
		`Oblique:` + fmt.Sprintf("%#v", this.Oblique) + `}`}, ", ")
	return s
}
func (this *Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&tensorflow_decision_trees.Value{")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Value_FloatValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.Value_FloatValue{` +
		`FloatValue:` + fmt.Sprintf("%#v", this.FloatValue) + `}`}, ", ")
	return s
}
func (this *Value_DoubleValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.Value_DoubleValue{` +
		`DoubleValue:` + fmt.Sprintf("%#v", this.DoubleValue) + `}`}, ", ")
	return s
}
func (this *Value_Int32Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.Value_Int32Value{` +
		`Int32Value:` + fmt.Sprintf("%#v", this.Int32Value) + `}`}, ", ")
	return s
}
func (this *Value_Int64Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.Value_Int64Value{` +
		`Int64Value:` + fmt.Sprintf("%#v", this.Int64Value) + `}`}, ", ")
	return s
}
func (this *Value_CustomValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow_decision_trees.Value_CustomValue{` +
		`CustomValue:` + fmt.Sprintf("%#v", this.CustomValue) + `}`}, ", ")
	return s
}
func valueToGoStringGenericTreeModel(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Model) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Model) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Model != nil {
		nn1, err := m.Model.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if len(m.AdditionalData) > 0 {
		for _, msg := range m.AdditionalData {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGenericTreeModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Model_DecisionTree) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DecisionTree != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.DecisionTree.Size()))
		n2, err := m.DecisionTree.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Model_Ensemble) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Ensemble != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.Ensemble.Size()))
		n3, err := m.Ensemble.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Model_CustomModel) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomModel != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.CustomModel.Size()))
		n4, err := m.CustomModel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *ModelAndFeatures) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelAndFeatures) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Features) > 0 {
		for k, _ := range m.Features {
			dAtA[i] = 0xa
			i++
			v := m.Features[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovGenericTreeModel(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovGenericTreeModel(uint64(len(k))) + msgSize
			i = encodeVarintGenericTreeModel(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenericTreeModel(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintGenericTreeModel(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	if m.Model != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.Model.Size()))
		n6, err := m.Model.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.AdditionalData) > 0 {
		for _, msg := range m.AdditionalData {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGenericTreeModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ModelAndFeatures_Feature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelAndFeatures_Feature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FeatureId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.FeatureId.Size()))
		n7, err := m.FeatureId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.AdditionalData) > 0 {
		for _, msg := range m.AdditionalData {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenericTreeModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Ensemble) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ensemble) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CombinationTechnique != nil {
		nn8, err := m.CombinationTechnique.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn8
	}
	if len(m.AdditionalData) > 0 {
		for _, msg := range m.AdditionalData {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGenericTreeModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x6
			i++
			i = encodeVarintGenericTreeModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Ensemble_SummationCombinationTechnique) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SummationCombinationTechnique != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.SummationCombinationTechnique.Size()))
		n9, err := m.SummationCombinationTechnique.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Ensemble_AveragingCombinationTechnique) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AveragingCombinationTechnique != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.AveragingCombinationTechnique.Size()))
		n10, err := m.AveragingCombinationTechnique.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Ensemble_CustomCombinationTechnique) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomCombinationTechnique != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.CustomCombinationTechnique.Size()))
		n11, err := m.CustomCombinationTechnique.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Ensemble_Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ensemble_Member) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Submodel != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.Submodel.Size()))
		n12, err := m.Submodel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.SubmodelId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.SubmodelId.Size()))
		n13, err := m.SubmodelId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.AdditionalData) > 0 {
		for _, msg := range m.AdditionalData {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGenericTreeModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Summation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Summation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AdditionalData) > 0 {
		for _, msg := range m.AdditionalData {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenericTreeModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Averaging) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Averaging) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AdditionalData) > 0 {
		for _, msg := range m.AdditionalData {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenericTreeModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DecisionTree) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecisionTree) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenericTreeModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AdditionalData) > 0 {
		for _, msg := range m.AdditionalData {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenericTreeModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TreeNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreeNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.NodeId.Size()))
		n14, err := m.NodeId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Depth != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.Depth.Size()))
		n15, err := m.Depth.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.SubtreeSize != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.SubtreeSize.Size()))
		n16, err := m.SubtreeSize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.NodeType != nil {
		nn17, err := m.NodeType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn17
	}
	if len(m.AdditionalData) > 0 {
		for _, msg := range m.AdditionalData {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintGenericTreeModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TreeNode_BinaryNode) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BinaryNode != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.BinaryNode.Size()))
		n18, err := m.BinaryNode.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *TreeNode_Leaf) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Leaf != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.Leaf.Size()))
		n19, err := m.Leaf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *TreeNode_CustomNodeType) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomNodeType != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.CustomNodeType.Size()))
		n20, err := m.CustomNodeType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *BinaryNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BinaryNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LeftChildId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.LeftChildId.Size()))
		n21, err := m.LeftChildId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.RightChildId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.RightChildId.Size()))
		n22, err := m.RightChildId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.DefaultDirection != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.DefaultDirection))
	}
	if m.LeftChildTest != nil {
		nn23, err := m.LeftChildTest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn23
	}
	return i, nil
}

func (m *BinaryNode_InequalityLeftChildTest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InequalityLeftChildTest != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.InequalityLeftChildTest.Size()))
		n24, err := m.InequalityLeftChildTest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *BinaryNode_CustomLeftChildTest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomLeftChildTest != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.CustomLeftChildTest.Size()))
		n25, err := m.CustomLeftChildTest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *SparseVector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SparseVector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SparseValue) > 0 {
		for k, _ := range m.SparseValue {
			dAtA[i] = 0xa
			i++
			v := m.SparseValue[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovGenericTreeModel(uint64(msgSize))
			}
			mapSize := 1 + sovGenericTreeModel(uint64(k)) + msgSize
			i = encodeVarintGenericTreeModel(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintGenericTreeModel(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintGenericTreeModel(dAtA, i, uint64(v.Size()))
				n26, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n26
			}
		}
	}
	return i, nil
}

func (m *Vector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, msg := range m.Value {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenericTreeModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Leaf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Leaf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Leaf != nil {
		nn27, err := m.Leaf.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn27
	}
	if len(m.AdditionalData) > 0 {
		for _, msg := range m.AdditionalData {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGenericTreeModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Leaf_Vector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Vector != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.Vector.Size()))
		n28, err := m.Vector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *Leaf_SparseVector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SparseVector != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.SparseVector.Size()))
		n29, err := m.SparseVector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *FeatureId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.Id.Size()))
		n30, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if len(m.AdditionalData) > 0 {
		for _, msg := range m.AdditionalData {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenericTreeModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ObliqueFeatures) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObliqueFeatures) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, msg := range m.Features {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenericTreeModel(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Weights) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(len(m.Weights)*4))
		for _, num := range m.Weights {
			f31 := math.Float32bits(float32(num))
			dAtA[i] = uint8(f31)
			i++
			dAtA[i] = uint8(f31 >> 8)
			i++
			dAtA[i] = uint8(f31 >> 16)
			i++
			dAtA[i] = uint8(f31 >> 24)
			i++
		}
	}
	return i, nil
}

func (m *InequalityTest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InequalityTest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FeatureSum != nil {
		nn32, err := m.FeatureSum.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn32
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.Type))
	}
	if m.Threshold != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.Threshold.Size()))
		n33, err := m.Threshold.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func (m *InequalityTest_FeatureId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.FeatureId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.FeatureId.Size()))
		n34, err := m.FeatureId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}
func (m *InequalityTest_Oblique) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Oblique != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.Oblique.Size()))
		n35, err := m.Oblique.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}
func (m *Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Value) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn36, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn36
	}
	return i, nil
}

func (m *Value_FloatValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xd
	i++
	i = encodeFixed32GenericTreeModel(dAtA, i, uint32(math.Float32bits(float32(m.FloatValue))))
	return i, nil
}
func (m *Value_DoubleValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x11
	i++
	i = encodeFixed64GenericTreeModel(dAtA, i, uint64(math.Float64bits(float64(m.DoubleValue))))
	return i, nil
}
func (m *Value_Int32Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.Int32Value))
	return i, nil
}
func (m *Value_Int64Value) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x20
	i++
	i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.Int64Value))
	return i, nil
}
func (m *Value_CustomValue) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CustomValue != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGenericTreeModel(dAtA, i, uint64(m.CustomValue.Size()))
		n37, err := m.CustomValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func encodeFixed64GenericTreeModel(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32GenericTreeModel(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGenericTreeModel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Model) Size() (n int) {
	var l int
	_ = l
	if m.Model != nil {
		n += m.Model.Size()
	}
	if len(m.AdditionalData) > 0 {
		for _, e := range m.AdditionalData {
			l = e.Size()
			n += 1 + l + sovGenericTreeModel(uint64(l))
		}
	}
	return n
}

func (m *Model_DecisionTree) Size() (n int) {
	var l int
	_ = l
	if m.DecisionTree != nil {
		l = m.DecisionTree.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	return n
}
func (m *Model_Ensemble) Size() (n int) {
	var l int
	_ = l
	if m.Ensemble != nil {
		l = m.Ensemble.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	return n
}
func (m *Model_CustomModel) Size() (n int) {
	var l int
	_ = l
	if m.CustomModel != nil {
		l = m.CustomModel.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	return n
}
func (m *ModelAndFeatures) Size() (n int) {
	var l int
	_ = l
	if len(m.Features) > 0 {
		for k, v := range m.Features {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGenericTreeModel(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovGenericTreeModel(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovGenericTreeModel(uint64(mapEntrySize))
		}
	}
	if m.Model != nil {
		l = m.Model.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	if len(m.AdditionalData) > 0 {
		for _, e := range m.AdditionalData {
			l = e.Size()
			n += 1 + l + sovGenericTreeModel(uint64(l))
		}
	}
	return n
}

func (m *ModelAndFeatures_Feature) Size() (n int) {
	var l int
	_ = l
	if m.FeatureId != nil {
		l = m.FeatureId.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	if len(m.AdditionalData) > 0 {
		for _, e := range m.AdditionalData {
			l = e.Size()
			n += 1 + l + sovGenericTreeModel(uint64(l))
		}
	}
	return n
}

func (m *Ensemble) Size() (n int) {
	var l int
	_ = l
	if m.CombinationTechnique != nil {
		n += m.CombinationTechnique.Size()
	}
	if len(m.AdditionalData) > 0 {
		for _, e := range m.AdditionalData {
			l = e.Size()
			n += 1 + l + sovGenericTreeModel(uint64(l))
		}
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 2 + l + sovGenericTreeModel(uint64(l))
		}
	}
	return n
}

func (m *Ensemble_SummationCombinationTechnique) Size() (n int) {
	var l int
	_ = l
	if m.SummationCombinationTechnique != nil {
		l = m.SummationCombinationTechnique.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	return n
}
func (m *Ensemble_AveragingCombinationTechnique) Size() (n int) {
	var l int
	_ = l
	if m.AveragingCombinationTechnique != nil {
		l = m.AveragingCombinationTechnique.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	return n
}
func (m *Ensemble_CustomCombinationTechnique) Size() (n int) {
	var l int
	_ = l
	if m.CustomCombinationTechnique != nil {
		l = m.CustomCombinationTechnique.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	return n
}
func (m *Ensemble_Member) Size() (n int) {
	var l int
	_ = l
	if m.Submodel != nil {
		l = m.Submodel.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	if m.SubmodelId != nil {
		l = m.SubmodelId.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	if len(m.AdditionalData) > 0 {
		for _, e := range m.AdditionalData {
			l = e.Size()
			n += 1 + l + sovGenericTreeModel(uint64(l))
		}
	}
	return n
}

func (m *Summation) Size() (n int) {
	var l int
	_ = l
	if len(m.AdditionalData) > 0 {
		for _, e := range m.AdditionalData {
			l = e.Size()
			n += 1 + l + sovGenericTreeModel(uint64(l))
		}
	}
	return n
}

func (m *Averaging) Size() (n int) {
	var l int
	_ = l
	if len(m.AdditionalData) > 0 {
		for _, e := range m.AdditionalData {
			l = e.Size()
			n += 1 + l + sovGenericTreeModel(uint64(l))
		}
	}
	return n
}

func (m *DecisionTree) Size() (n int) {
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovGenericTreeModel(uint64(l))
		}
	}
	if len(m.AdditionalData) > 0 {
		for _, e := range m.AdditionalData {
			l = e.Size()
			n += 1 + l + sovGenericTreeModel(uint64(l))
		}
	}
	return n
}

func (m *TreeNode) Size() (n int) {
	var l int
	_ = l
	if m.NodeId != nil {
		l = m.NodeId.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	if m.Depth != nil {
		l = m.Depth.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	if m.SubtreeSize != nil {
		l = m.SubtreeSize.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	if m.NodeType != nil {
		n += m.NodeType.Size()
	}
	if len(m.AdditionalData) > 0 {
		for _, e := range m.AdditionalData {
			l = e.Size()
			n += 1 + l + sovGenericTreeModel(uint64(l))
		}
	}
	return n
}

func (m *TreeNode_BinaryNode) Size() (n int) {
	var l int
	_ = l
	if m.BinaryNode != nil {
		l = m.BinaryNode.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	return n
}
func (m *TreeNode_Leaf) Size() (n int) {
	var l int
	_ = l
	if m.Leaf != nil {
		l = m.Leaf.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	return n
}
func (m *TreeNode_CustomNodeType) Size() (n int) {
	var l int
	_ = l
	if m.CustomNodeType != nil {
		l = m.CustomNodeType.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	return n
}
func (m *BinaryNode) Size() (n int) {
	var l int
	_ = l
	if m.LeftChildId != nil {
		l = m.LeftChildId.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	if m.RightChildId != nil {
		l = m.RightChildId.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	if m.DefaultDirection != 0 {
		n += 1 + sovGenericTreeModel(uint64(m.DefaultDirection))
	}
	if m.LeftChildTest != nil {
		n += m.LeftChildTest.Size()
	}
	return n
}

func (m *BinaryNode_InequalityLeftChildTest) Size() (n int) {
	var l int
	_ = l
	if m.InequalityLeftChildTest != nil {
		l = m.InequalityLeftChildTest.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	return n
}
func (m *BinaryNode_CustomLeftChildTest) Size() (n int) {
	var l int
	_ = l
	if m.CustomLeftChildTest != nil {
		l = m.CustomLeftChildTest.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	return n
}
func (m *SparseVector) Size() (n int) {
	var l int
	_ = l
	if len(m.SparseValue) > 0 {
		for k, v := range m.SparseValue {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGenericTreeModel(uint64(l))
			}
			mapEntrySize := 1 + sovGenericTreeModel(uint64(k)) + l
			n += mapEntrySize + 1 + sovGenericTreeModel(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Vector) Size() (n int) {
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, e := range m.Value {
			l = e.Size()
			n += 1 + l + sovGenericTreeModel(uint64(l))
		}
	}
	return n
}

func (m *Leaf) Size() (n int) {
	var l int
	_ = l
	if m.Leaf != nil {
		n += m.Leaf.Size()
	}
	if len(m.AdditionalData) > 0 {
		for _, e := range m.AdditionalData {
			l = e.Size()
			n += 1 + l + sovGenericTreeModel(uint64(l))
		}
	}
	return n
}

func (m *Leaf_Vector) Size() (n int) {
	var l int
	_ = l
	if m.Vector != nil {
		l = m.Vector.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	return n
}
func (m *Leaf_SparseVector) Size() (n int) {
	var l int
	_ = l
	if m.SparseVector != nil {
		l = m.SparseVector.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	return n
}
func (m *FeatureId) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	if len(m.AdditionalData) > 0 {
		for _, e := range m.AdditionalData {
			l = e.Size()
			n += 1 + l + sovGenericTreeModel(uint64(l))
		}
	}
	return n
}

func (m *ObliqueFeatures) Size() (n int) {
	var l int
	_ = l
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 1 + l + sovGenericTreeModel(uint64(l))
		}
	}
	if len(m.Weights) > 0 {
		n += 1 + sovGenericTreeModel(uint64(len(m.Weights)*4)) + len(m.Weights)*4
	}
	return n
}

func (m *InequalityTest) Size() (n int) {
	var l int
	_ = l
	if m.FeatureSum != nil {
		n += m.FeatureSum.Size()
	}
	if m.Type != 0 {
		n += 1 + sovGenericTreeModel(uint64(m.Type))
	}
	if m.Threshold != nil {
		l = m.Threshold.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	return n
}

func (m *InequalityTest_FeatureId) Size() (n int) {
	var l int
	_ = l
	if m.FeatureId != nil {
		l = m.FeatureId.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	return n
}
func (m *InequalityTest_Oblique) Size() (n int) {
	var l int
	_ = l
	if m.Oblique != nil {
		l = m.Oblique.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	return n
}
func (m *Value) Size() (n int) {
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *Value_FloatValue) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *Value_DoubleValue) Size() (n int) {
	var l int
	_ = l
	n += 9
	return n
}
func (m *Value_Int32Value) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGenericTreeModel(uint64(m.Int32Value))
	return n
}
func (m *Value_Int64Value) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGenericTreeModel(uint64(m.Int64Value))
	return n
}
func (m *Value_CustomValue) Size() (n int) {
	var l int
	_ = l
	if m.CustomValue != nil {
		l = m.CustomValue.Size()
		n += 1 + l + sovGenericTreeModel(uint64(l))
	}
	return n
}

func sovGenericTreeModel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGenericTreeModel(x uint64) (n int) {
	return sovGenericTreeModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Model) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Model{`,
		`Model:` + fmt.Sprintf("%v", this.Model) + `,`,
		`AdditionalData:` + strings.Replace(fmt.Sprintf("%v", this.AdditionalData), "Any", "google_protobuf.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Model_DecisionTree) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Model_DecisionTree{`,
		`DecisionTree:` + strings.Replace(fmt.Sprintf("%v", this.DecisionTree), "DecisionTree", "DecisionTree", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Model_Ensemble) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Model_Ensemble{`,
		`Ensemble:` + strings.Replace(fmt.Sprintf("%v", this.Ensemble), "Ensemble", "Ensemble", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Model_CustomModel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Model_CustomModel{`,
		`CustomModel:` + strings.Replace(fmt.Sprintf("%v", this.CustomModel), "Any", "google_protobuf.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelAndFeatures) String() string {
	if this == nil {
		return "nil"
	}
	keysForFeatures := make([]string, 0, len(this.Features))
	for k, _ := range this.Features {
		keysForFeatures = append(keysForFeatures, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForFeatures)
	mapStringForFeatures := "map[string]*ModelAndFeatures_Feature{"
	for _, k := range keysForFeatures {
		mapStringForFeatures += fmt.Sprintf("%v: %v,", k, this.Features[k])
	}
	mapStringForFeatures += "}"
	s := strings.Join([]string{`&ModelAndFeatures{`,
		`Features:` + mapStringForFeatures + `,`,
		`Model:` + strings.Replace(fmt.Sprintf("%v", this.Model), "Model", "Model", 1) + `,`,
		`AdditionalData:` + strings.Replace(fmt.Sprintf("%v", this.AdditionalData), "Any", "google_protobuf.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelAndFeatures_Feature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelAndFeatures_Feature{`,
		`FeatureId:` + strings.Replace(fmt.Sprintf("%v", this.FeatureId), "FeatureId", "FeatureId", 1) + `,`,
		`AdditionalData:` + strings.Replace(fmt.Sprintf("%v", this.AdditionalData), "Any", "google_protobuf.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ensemble) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ensemble{`,
		`CombinationTechnique:` + fmt.Sprintf("%v", this.CombinationTechnique) + `,`,
		`AdditionalData:` + strings.Replace(fmt.Sprintf("%v", this.AdditionalData), "Any", "google_protobuf.Any", 1) + `,`,
		`Members:` + strings.Replace(fmt.Sprintf("%v", this.Members), "Ensemble_Member", "Ensemble_Member", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ensemble_SummationCombinationTechnique) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ensemble_SummationCombinationTechnique{`,
		`SummationCombinationTechnique:` + strings.Replace(fmt.Sprintf("%v", this.SummationCombinationTechnique), "Summation", "Summation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ensemble_AveragingCombinationTechnique) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ensemble_AveragingCombinationTechnique{`,
		`AveragingCombinationTechnique:` + strings.Replace(fmt.Sprintf("%v", this.AveragingCombinationTechnique), "Averaging", "Averaging", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ensemble_CustomCombinationTechnique) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ensemble_CustomCombinationTechnique{`,
		`CustomCombinationTechnique:` + strings.Replace(fmt.Sprintf("%v", this.CustomCombinationTechnique), "Any", "google_protobuf.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ensemble_Member) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ensemble_Member{`,
		`Submodel:` + strings.Replace(fmt.Sprintf("%v", this.Submodel), "Model", "Model", 1) + `,`,
		`SubmodelId:` + strings.Replace(fmt.Sprintf("%v", this.SubmodelId), "Int32Value", "google_protobuf1.Int32Value", 1) + `,`,
		`AdditionalData:` + strings.Replace(fmt.Sprintf("%v", this.AdditionalData), "Any", "google_protobuf.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Summation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Summation{`,
		`AdditionalData:` + strings.Replace(fmt.Sprintf("%v", this.AdditionalData), "Any", "google_protobuf.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Averaging) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Averaging{`,
		`AdditionalData:` + strings.Replace(fmt.Sprintf("%v", this.AdditionalData), "Any", "google_protobuf.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DecisionTree) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DecisionTree{`,
		`Nodes:` + strings.Replace(fmt.Sprintf("%v", this.Nodes), "TreeNode", "TreeNode", 1) + `,`,
		`AdditionalData:` + strings.Replace(fmt.Sprintf("%v", this.AdditionalData), "Any", "google_protobuf.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TreeNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TreeNode{`,
		`NodeId:` + strings.Replace(fmt.Sprintf("%v", this.NodeId), "Int32Value", "google_protobuf1.Int32Value", 1) + `,`,
		`Depth:` + strings.Replace(fmt.Sprintf("%v", this.Depth), "Int32Value", "google_protobuf1.Int32Value", 1) + `,`,
		`SubtreeSize:` + strings.Replace(fmt.Sprintf("%v", this.SubtreeSize), "Int32Value", "google_protobuf1.Int32Value", 1) + `,`,
		`NodeType:` + fmt.Sprintf("%v", this.NodeType) + `,`,
		`AdditionalData:` + strings.Replace(fmt.Sprintf("%v", this.AdditionalData), "Any", "google_protobuf.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TreeNode_BinaryNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TreeNode_BinaryNode{`,
		`BinaryNode:` + strings.Replace(fmt.Sprintf("%v", this.BinaryNode), "BinaryNode", "BinaryNode", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TreeNode_Leaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TreeNode_Leaf{`,
		`Leaf:` + strings.Replace(fmt.Sprintf("%v", this.Leaf), "Leaf", "Leaf", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TreeNode_CustomNodeType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TreeNode_CustomNodeType{`,
		`CustomNodeType:` + strings.Replace(fmt.Sprintf("%v", this.CustomNodeType), "Any", "google_protobuf.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BinaryNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BinaryNode{`,
		`LeftChildId:` + strings.Replace(fmt.Sprintf("%v", this.LeftChildId), "Int32Value", "google_protobuf1.Int32Value", 1) + `,`,
		`RightChildId:` + strings.Replace(fmt.Sprintf("%v", this.RightChildId), "Int32Value", "google_protobuf1.Int32Value", 1) + `,`,
		`DefaultDirection:` + fmt.Sprintf("%v", this.DefaultDirection) + `,`,
		`LeftChildTest:` + fmt.Sprintf("%v", this.LeftChildTest) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BinaryNode_InequalityLeftChildTest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BinaryNode_InequalityLeftChildTest{`,
		`InequalityLeftChildTest:` + strings.Replace(fmt.Sprintf("%v", this.InequalityLeftChildTest), "InequalityTest", "InequalityTest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BinaryNode_CustomLeftChildTest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BinaryNode_CustomLeftChildTest{`,
		`CustomLeftChildTest:` + strings.Replace(fmt.Sprintf("%v", this.CustomLeftChildTest), "Any", "google_protobuf.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SparseVector) String() string {
	if this == nil {
		return "nil"
	}
	keysForSparseValue := make([]int64, 0, len(this.SparseValue))
	for k, _ := range this.SparseValue {
		keysForSparseValue = append(keysForSparseValue, k)
	}
	github_com_gogo_protobuf_sortkeys.Int64s(keysForSparseValue)
	mapStringForSparseValue := "map[int64]*Value{"
	for _, k := range keysForSparseValue {
		mapStringForSparseValue += fmt.Sprintf("%v: %v,", k, this.SparseValue[k])
	}
	mapStringForSparseValue += "}"
	s := strings.Join([]string{`&SparseVector{`,
		`SparseValue:` + mapStringForSparseValue + `,`,
		`}`,
	}, "")
	return s
}
func (this *Vector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Vector{`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "Value", "Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Leaf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Leaf{`,
		`Leaf:` + fmt.Sprintf("%v", this.Leaf) + `,`,
		`AdditionalData:` + strings.Replace(fmt.Sprintf("%v", this.AdditionalData), "Any", "google_protobuf.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Leaf_Vector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Leaf_Vector{`,
		`Vector:` + strings.Replace(fmt.Sprintf("%v", this.Vector), "Vector", "Vector", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Leaf_SparseVector) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Leaf_SparseVector{`,
		`SparseVector:` + strings.Replace(fmt.Sprintf("%v", this.SparseVector), "SparseVector", "SparseVector", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeatureId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeatureId{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "StringValue", "google_protobuf1.StringValue", 1) + `,`,
		`AdditionalData:` + strings.Replace(fmt.Sprintf("%v", this.AdditionalData), "Any", "google_protobuf.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ObliqueFeatures) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ObliqueFeatures{`,
		`Features:` + strings.Replace(fmt.Sprintf("%v", this.Features), "FeatureId", "FeatureId", 1) + `,`,
		`Weights:` + fmt.Sprintf("%v", this.Weights) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InequalityTest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InequalityTest{`,
		`FeatureSum:` + fmt.Sprintf("%v", this.FeatureSum) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Threshold:` + strings.Replace(fmt.Sprintf("%v", this.Threshold), "Value", "Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InequalityTest_FeatureId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InequalityTest_FeatureId{`,
		`FeatureId:` + strings.Replace(fmt.Sprintf("%v", this.FeatureId), "FeatureId", "FeatureId", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InequalityTest_Oblique) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InequalityTest_Oblique{`,
		`Oblique:` + strings.Replace(fmt.Sprintf("%v", this.Oblique), "ObliqueFeatures", "ObliqueFeatures", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_FloatValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_FloatValue{`,
		`FloatValue:` + fmt.Sprintf("%v", this.FloatValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_DoubleValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_DoubleValue{`,
		`DoubleValue:` + fmt.Sprintf("%v", this.DoubleValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_Int32Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_Int32Value{`,
		`Int32Value:` + fmt.Sprintf("%v", this.Int32Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_Int64Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_Int64Value{`,
		`Int64Value:` + fmt.Sprintf("%v", this.Int64Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Value_CustomValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Value_CustomValue{`,
		`CustomValue:` + strings.Replace(fmt.Sprintf("%v", this.CustomValue), "Any", "google_protobuf.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenericTreeModel(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Model) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericTreeModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTree", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DecisionTree{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Model = &Model_DecisionTree{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ensemble", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Ensemble{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Model = &Model_Ensemble{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomModel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &google_protobuf.Any{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Model = &Model_CustomModel{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalData = append(m.AdditionalData, &google_protobuf.Any{})
			if err := m.AdditionalData[len(m.AdditionalData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenericTreeModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelAndFeatures) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericTreeModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelAndFeatures: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelAndFeatures: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Features == nil {
				m.Features = make(map[string]*ModelAndFeatures_Feature)
			}
			var mapkey string
			var mapvalue *ModelAndFeatures_Feature
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenericTreeModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenericTreeModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenericTreeModel
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenericTreeModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenericTreeModel
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthGenericTreeModel
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ModelAndFeatures_Feature{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenericTreeModel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenericTreeModel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Features[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Model == nil {
				m.Model = &Model{}
			}
			if err := m.Model.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalData = append(m.AdditionalData, &google_protobuf.Any{})
			if err := m.AdditionalData[len(m.AdditionalData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenericTreeModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelAndFeatures_Feature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericTreeModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Feature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Feature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeatureId == nil {
				m.FeatureId = &FeatureId{}
			}
			if err := m.FeatureId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalData = append(m.AdditionalData, &google_protobuf.Any{})
			if err := m.AdditionalData[len(m.AdditionalData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenericTreeModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ensemble) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericTreeModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ensemble: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ensemble: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SummationCombinationTechnique", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Summation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CombinationTechnique = &Ensemble_SummationCombinationTechnique{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AveragingCombinationTechnique", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Averaging{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CombinationTechnique = &Ensemble_AveragingCombinationTechnique{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomCombinationTechnique", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &google_protobuf.Any{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.CombinationTechnique = &Ensemble_CustomCombinationTechnique{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalData = append(m.AdditionalData, &google_protobuf.Any{})
			if err := m.AdditionalData[len(m.AdditionalData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &Ensemble_Member{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenericTreeModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ensemble_Member) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericTreeModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submodel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Submodel == nil {
				m.Submodel = &Model{}
			}
			if err := m.Submodel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmodelId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubmodelId == nil {
				m.SubmodelId = &google_protobuf1.Int32Value{}
			}
			if err := m.SubmodelId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalData = append(m.AdditionalData, &google_protobuf.Any{})
			if err := m.AdditionalData[len(m.AdditionalData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenericTreeModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Summation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericTreeModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Summation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Summation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalData = append(m.AdditionalData, &google_protobuf.Any{})
			if err := m.AdditionalData[len(m.AdditionalData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenericTreeModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Averaging) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericTreeModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Averaging: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Averaging: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalData = append(m.AdditionalData, &google_protobuf.Any{})
			if err := m.AdditionalData[len(m.AdditionalData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenericTreeModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecisionTree) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericTreeModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecisionTree: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecisionTree: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &TreeNode{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalData = append(m.AdditionalData, &google_protobuf.Any{})
			if err := m.AdditionalData[len(m.AdditionalData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenericTreeModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreeNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericTreeModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreeNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreeNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeId == nil {
				m.NodeId = &google_protobuf1.Int32Value{}
			}
			if err := m.NodeId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Depth == nil {
				m.Depth = &google_protobuf1.Int32Value{}
			}
			if err := m.Depth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubtreeSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubtreeSize == nil {
				m.SubtreeSize = &google_protobuf1.Int32Value{}
			}
			if err := m.SubtreeSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BinaryNode{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NodeType = &TreeNode_BinaryNode{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leaf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Leaf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NodeType = &TreeNode_Leaf{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomNodeType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &google_protobuf.Any{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NodeType = &TreeNode_CustomNodeType{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalData = append(m.AdditionalData, &google_protobuf.Any{})
			if err := m.AdditionalData[len(m.AdditionalData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenericTreeModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BinaryNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericTreeModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BinaryNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BinaryNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftChildId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeftChildId == nil {
				m.LeftChildId = &google_protobuf1.Int32Value{}
			}
			if err := m.LeftChildId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightChildId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RightChildId == nil {
				m.RightChildId = &google_protobuf1.Int32Value{}
			}
			if err := m.RightChildId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDirection", wireType)
			}
			m.DefaultDirection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultDirection |= (BinaryNode_Direction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InequalityLeftChildTest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InequalityTest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LeftChildTest = &BinaryNode_InequalityLeftChildTest{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomLeftChildTest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &google_protobuf.Any{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.LeftChildTest = &BinaryNode_CustomLeftChildTest{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenericTreeModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SparseVector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericTreeModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SparseVector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SparseVector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SparseValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SparseValue == nil {
				m.SparseValue = make(map[int64]*Value)
			}
			var mapkey int64
			var mapvalue *Value
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenericTreeModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenericTreeModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenericTreeModel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenericTreeModel
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthGenericTreeModel
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Value{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenericTreeModel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenericTreeModel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SparseValue[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenericTreeModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericTreeModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, &Value{})
			if err := m.Value[len(m.Value)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenericTreeModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Leaf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericTreeModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Leaf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Leaf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Vector{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Leaf = &Leaf_Vector{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SparseVector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SparseVector{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Leaf = &Leaf_SparseVector{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalData = append(m.AdditionalData, &google_protobuf.Any{})
			if err := m.AdditionalData[len(m.AdditionalData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenericTreeModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericTreeModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &google_protobuf1.StringValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalData = append(m.AdditionalData, &google_protobuf.Any{})
			if err := m.AdditionalData[len(m.AdditionalData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenericTreeModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObliqueFeatures) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericTreeModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObliqueFeatures: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObliqueFeatures: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Features = append(m.Features, &FeatureId{})
			if err := m.Features[len(m.Features)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				v = uint32(dAtA[iNdEx-4])
				v |= uint32(dAtA[iNdEx-3]) << 8
				v |= uint32(dAtA[iNdEx-2]) << 16
				v |= uint32(dAtA[iNdEx-1]) << 24
				v2 := float32(math.Float32frombits(v))
				m.Weights = append(m.Weights, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenericTreeModel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenericTreeModel
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 4
					v = uint32(dAtA[iNdEx-4])
					v |= uint32(dAtA[iNdEx-3]) << 8
					v |= uint32(dAtA[iNdEx-2]) << 16
					v |= uint32(dAtA[iNdEx-1]) << 24
					v2 := float32(math.Float32frombits(v))
					m.Weights = append(m.Weights, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Weights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenericTreeModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InequalityTest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericTreeModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InequalityTest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InequalityTest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FeatureId{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FeatureSum = &InequalityTest_FeatureId{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (InequalityTest_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Threshold == nil {
				m.Threshold = &Value{}
			}
			if err := m.Threshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oblique", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObliqueFeatures{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FeatureSum = &InequalityTest_Oblique{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenericTreeModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericTreeModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Value = &Value_FloatValue{float32(math.Float32frombits(v))}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Value = &Value_DoubleValue{float64(math.Float64frombits(v))}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32Value", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &Value_Int32Value{v}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Value", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &Value_Int64Value{v}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &google_protobuf.Any{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &Value_CustomValue{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenericTreeModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericTreeModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenericTreeModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenericTreeModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenericTreeModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGenericTreeModel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGenericTreeModel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGenericTreeModel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGenericTreeModel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenericTreeModel   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/contrib/decision_trees/proto/generic_tree_model.proto", fileDescriptorGenericTreeModel)
}

var fileDescriptorGenericTreeModel = []byte{
	// 1365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xcf, 0x93, 0x13, 0xc5,
	0x17, 0x9f, 0xce, 0xcf, 0xcd, 0x4b, 0x76, 0x09, 0xfd, 0xe5, 0x2b, 0x21, 0x62, 0x58, 0x06, 0x2d,
	0xd1, 0xb2, 0x92, 0x12, 0x70, 0x0b, 0x14, 0x91, 0x84, 0x0d, 0x4c, 0x74, 0x01, 0xed, 0x04, 0xca,
	0x2a, 0xad, 0x8a, 0x93, 0x4c, 0x27, 0x99, 0x72, 0x32, 0x13, 0x66, 0x26, 0x60, 0x38, 0x59, 0xe5,
	0xc5, 0xa3, 0xfe, 0x01, 0xde, 0xf9, 0x3b, 0xf4, 0xe2, 0xc5, 0x2a, 0x8e, 0xca, 0x49, 0x62, 0x95,
	0xe5, 0x91, 0xa3, 0x47, 0xab, 0x7f, 0xcc, 0x24, 0xbb, 0x84, 0xd9, 0x59, 0xf6, 0xd6, 0xdd, 0xf3,
	0x3e, 0x9f, 0xd7, 0xef, 0xbd, 0x7e, 0x3f, 0x06, 0x5a, 0x13, 0xd7, 0xf1, 0x9d, 0xde, 0x74, 0x50,
	0xf3, 0xa9, 0xed, 0x39, 0xee, 0xc0, 0x72, 0x1e, 0xd4, 0xfa, 0x8e, 0xed, 0xbb, 0x66, 0xaf, 0x66,
	0xd0, 0xbe, 0xe9, 0x99, 0x8e, 0xdd, 0xf5, 0x5d, 0x4a, 0xbd, 0x1a, 0x17, 0xad, 0x0d, 0xa9, 0x4d,
	0x5d, 0xb3, 0xcf, 0xcf, 0xba, 0x63, 0xc7, 0xa0, 0x56, 0x95, 0x7f, 0xc0, 0x27, 0x16, 0x0c, 0xd5,
	0xdd, 0xc8, 0xf2, 0x89, 0xa1, 0xe3, 0x0c, 0x2d, 0x5a, 0x0b, 0x95, 0xe9, 0xf6, 0x4c, 0xa0, 0xca,
	0x95, 0xbd, 0x9f, 0x1e, 0xb8, 0xfa, 0x64, 0x42, 0x5d, 0x4f, 0x7c, 0x57, 0x7f, 0x4a, 0x40, 0xfa,
	0x26, 0xd3, 0x82, 0x6f, 0xc1, 0xfa, 0x2e, 0xda, 0x12, 0xda, 0x44, 0x67, 0xf3, 0xe7, 0xde, 0xac,
	0xbe, 0x50, 0x6f, 0x75, 0x5b, 0x6e, 0x3b, 0x2e, 0xa5, 0x9a, 0x42, 0x0a, 0xc6, 0xd2, 0x1e, 0xd7,
	0x61, 0x8d, 0xda, 0x1e, 0x1d, 0xf7, 0x2c, 0x5a, 0x4a, 0x70, 0xaa, 0x33, 0x11, 0x54, 0x4d, 0x29,
	0xaa, 0x29, 0x24, 0x84, 0xe1, 0x4b, 0x50, 0xe8, 0x4f, 0x3d, 0xdf, 0x19, 0x0b, 0x47, 0x94, 0x92,
	0x9c, 0xe6, 0x58, 0x55, 0xd8, 0x54, 0x0d, 0x6c, 0xaa, 0xd6, 0xed, 0x99, 0xa6, 0x90, 0xbc, 0x90,
	0x15, 0xd6, 0x7c, 0x08, 0x47, 0x74, 0xc3, 0x30, 0x7d, 0xd3, 0xb1, 0x75, 0xab, 0x6b, 0xe8, 0xbe,
	0x5e, 0x4a, 0x6d, 0x26, 0x5f, 0x84, 0x26, 0x1b, 0x0b, 0xe1, 0x6d, 0xdd, 0xd7, 0x1b, 0x59, 0x48,
	0x73, 0x95, 0xea, 0xdf, 0x49, 0x28, 0x72, 0xc6, 0xba, 0x6d, 0x5c, 0xa7, 0xba, 0x3f, 0x75, 0xa9,
	0x87, 0xef, 0xc0, 0xda, 0x40, 0xae, 0x4b, 0x88, 0xb3, 0x5e, 0x8a, 0x30, 0x6d, 0x2f, 0xbc, 0x1a,
	0x2c, 0x9a, 0xb6, 0xef, 0xce, 0x48, 0x48, 0x85, 0xb7, 0xa4, 0x52, 0xe9, 0xae, 0xcd, 0xfd, 0x38,
	0x89, 0x10, 0x5f, 0x65, 0x6b, 0x32, 0xbe, 0xad, 0xe5, 0x1f, 0x11, 0x64, 0xe5, 0x95, 0xf0, 0x0d,
	0x00, 0x79, 0x9d, 0xae, 0x69, 0xc8, 0x17, 0xf0, 0x7a, 0xc4, 0x3d, 0x24, 0xae, 0x65, 0x34, 0x12,
	0x25, 0x44, 0x72, 0x83, 0x60, 0xbb, 0xea, 0x4e, 0x89, 0x03, 0xdc, 0x69, 0x02, 0xeb, 0xbb, 0xbc,
	0x84, 0x8b, 0x90, 0xfc, 0x9a, 0xce, 0xf8, 0x8d, 0x72, 0x84, 0x2d, 0x71, 0x0b, 0xd2, 0xf7, 0x75,
	0x6b, 0x1a, 0x3c, 0xae, 0xf3, 0x2f, 0x11, 0x01, 0x22, 0x18, 0xde, 0x4f, 0x5c, 0x44, 0xea, 0xa3,
	0x34, 0xac, 0x05, 0x8f, 0x10, 0xdb, 0x70, 0xca, 0x9b, 0x8e, 0xc7, 0x3a, 0xbb, 0x51, 0xb7, 0xef,
	0x8c, 0x7b, 0xa6, 0x2d, 0xd6, 0x3e, 0xed, 0x8f, 0x6c, 0xf3, 0xde, 0x94, 0xc6, 0xf0, 0x4d, 0x3b,
	0x60, 0xd0, 0x14, 0xf2, 0x5a, 0x48, 0x77, 0x6d, 0xc1, 0xd6, 0x09, 0xc8, 0x98, 0x3e, 0xfd, 0x3e,
	0x75, 0xf5, 0xa1, 0x69, 0x0f, 0x5f, 0xa0, 0x2f, 0xb1, 0xaf, 0xbe, 0x7a, 0xc0, 0xc0, 0xf4, 0x85,
	0x74, 0x2b, 0xf5, 0x7d, 0x0e, 0x27, 0x65, 0x62, 0xad, 0x56, 0x16, 0x9d, 0x68, 0x65, 0x81, 0x5d,
	0xc9, 0x7c, 0xb8, 0xbc, 0xc3, 0xdb, 0x90, 0x1d, 0xd3, 0x71, 0x8f, 0xba, 0x5e, 0xc9, 0xe0, 0xb0,
	0xb7, 0x63, 0xd4, 0x8c, 0xea, 0x4d, 0x0e, 0x21, 0x01, 0xb4, 0xfc, 0x0b, 0x82, 0x8c, 0x38, 0xc3,
	0x97, 0x61, 0xcd, 0x9b, 0xf6, 0x44, 0x5a, 0xa1, 0x98, 0x69, 0x15, 0x22, 0xf0, 0x65, 0xc8, 0x07,
	0x6b, 0x96, 0x0f, 0x22, 0x06, 0xaf, 0x3e, 0x67, 0x49, 0xcb, 0xf6, 0xcf, 0x9f, 0xbb, 0xcb, 0x9e,
	0x12, 0x81, 0x40, 0x7e, 0x75, 0x0e, 0x1c, 0x20, 0x2f, 0x1b, 0xc7, 0xe1, 0xff, 0x2b, 0xa3, 0xa3,
	0x7e, 0x0c, 0xb9, 0xf0, 0x6d, 0xad, 0x52, 0x82, 0xe2, 0x2b, 0x61, 0x5c, 0xe1, 0xbb, 0x39, 0x2c,
	0xd7, 0xf7, 0x08, 0x0a, 0xcb, 0x2d, 0x01, 0x5f, 0x82, 0xb4, 0xed, 0x18, 0x61, 0x91, 0x8c, 0xaa,
	0xff, 0x4c, 0xfe, 0x96, 0x63, 0x50, 0x22, 0x10, 0x87, 0xac, 0x1f, 0xea, 0xcf, 0x49, 0x58, 0x0b,
	0x28, 0xf1, 0x05, 0xc8, 0x32, 0xd2, 0x45, 0x45, 0x8b, 0x8c, 0x60, 0x86, 0xc9, 0xb6, 0x0c, 0xfc,
	0x2e, 0xa4, 0x0d, 0x3a, 0xf1, 0x47, 0x71, 0xa2, 0x2e, 0x24, 0xf1, 0x15, 0x28, 0x78, 0xd3, 0x1e,
	0xef, 0xdc, 0x9e, 0xf9, 0x30, 0x48, 0xa3, 0x48, 0x64, 0x5e, 0x02, 0xda, 0xe6, 0x43, 0x8a, 0x35,
	0xc8, 0xb3, 0x70, 0xbb, 0xb3, 0x2e, 0xbb, 0x43, 0x29, 0xc5, 0xe1, 0x6f, 0x44, 0x78, 0xad, 0xc1,
	0xa5, 0x99, 0x91, 0x9a, 0x42, 0xa0, 0x17, 0xee, 0xf0, 0x7b, 0x90, 0xb2, 0xa8, 0x3e, 0x28, 0xa5,
	0x39, 0xc5, 0xa9, 0x08, 0x8a, 0x1d, 0xaa, 0x0f, 0x34, 0x85, 0x70, 0x71, 0x7c, 0x15, 0x8a, 0xb2,
	0x2e, 0x70, 0x87, 0xf9, 0xb3, 0x09, 0x2d, 0x65, 0x22, 0x6b, 0xc1, 0x86, 0x90, 0x67, 0x4a, 0x3b,
	0xb3, 0xc9, 0xca, 0xfc, 0xcf, 0x1e, 0xe0, 0xcd, 0xe7, 0x21, 0x17, 0x6a, 0x56, 0x9f, 0x24, 0x01,
	0x16, 0x16, 0xe2, 0x8f, 0x60, 0xdd, 0xa2, 0x03, 0xbf, 0xdb, 0x1f, 0x99, 0x96, 0x11, 0x33, 0x98,
	0x79, 0x86, 0xb8, 0xc6, 0x00, 0x2d, 0x03, 0xd7, 0x61, 0xc3, 0x35, 0x87, 0xa3, 0x25, 0x86, 0x18,
	0xa1, 0x2d, 0x70, 0x48, 0x40, 0xf1, 0x25, 0x1c, 0x35, 0xe8, 0x40, 0x9f, 0x5a, 0x7e, 0xd7, 0x30,
	0x5d, 0xda, 0x67, 0x57, 0xe7, 0x61, 0xde, 0x38, 0x57, 0x8b, 0x15, 0xa7, 0xea, 0x76, 0x00, 0x23,
	0x45, 0xc9, 0x14, 0x9e, 0xe0, 0x11, 0x94, 0x4d, 0x9b, 0xde, 0x9b, 0xea, 0x96, 0xe9, 0xcf, 0xba,
	0x4b, 0xc6, 0xfa, 0xd4, 0xf3, 0xe5, 0x73, 0x78, 0x2b, 0x42, 0x4d, 0x2b, 0x04, 0x77, 0xa8, 0xe7,
	0x6b, 0x0a, 0x39, 0xbe, 0xa0, 0xdb, 0x09, 0x1c, 0xc1, 0x3e, 0xe1, 0x4f, 0xe0, 0x15, 0x19, 0xe8,
	0xbd, 0x5a, 0xd2, 0x91, 0xe1, 0xfe, 0x9f, 0x40, 0xed, 0x22, 0x53, 0x37, 0x21, 0xb7, 0xb0, 0x61,
	0x0d, 0x52, 0x3b, 0xcd, 0xeb, 0x9d, 0xa2, 0x82, 0x73, 0x90, 0x26, 0xad, 0x1b, 0x5a, 0xa7, 0x88,
	0x1a, 0x47, 0xe1, 0xc8, 0x1e, 0x3d, 0xea, 0x6f, 0x08, 0x0a, 0xed, 0x89, 0xee, 0x7a, 0xf4, 0x2e,
	0xed, 0xfb, 0x8e, 0x8b, 0xbf, 0x80, 0x82, 0xc7, 0xf7, 0x5d, 0xd1, 0xd6, 0x45, 0xcd, 0xb8, 0x18,
	0xd5, 0x60, 0x97, 0xe0, 0xc1, 0x86, 0x41, 0xc5, 0x5c, 0x95, 0xf7, 0x16, 0x27, 0xe5, 0xaf, 0xa0,
	0xb8, 0x57, 0x60, 0x79, 0xa4, 0x48, 0x8a, 0x91, 0x62, 0x6b, 0xf7, 0x48, 0x11, 0xd5, 0x29, 0x64,
	0xde, 0x2f, 0xe6, 0x87, 0xab, 0x90, 0x91, 0x86, 0x84, 0x2c, 0xc2, 0x82, 0xb8, 0x2c, 0xea, 0x13,
	0x04, 0x29, 0x96, 0x8d, 0xf8, 0x03, 0xc8, 0xdc, 0xe7, 0x54, 0xf2, 0x85, 0x9f, 0x8e, 0x62, 0xe0,
	0x82, 0x9a, 0x42, 0x24, 0x84, 0x8d, 0xf1, 0x81, 0x1b, 0x05, 0x47, 0x62, 0xdf, 0x31, 0x7e, 0xd9,
	0x8f, 0x6c, 0x8c, 0xf7, 0x96, 0xc3, 0x72, 0xc8, 0x26, 0x96, 0x11, 0x85, 0x48, 0xfd, 0x06, 0x72,
	0xe1, 0xac, 0x88, 0xdf, 0x81, 0x44, 0x98, 0xbe, 0x27, 0x9f, 0xa3, 0x69, 0xfb, 0xae, 0x69, 0x0f,
	0x85, 0x6b, 0x12, 0xe6, 0x61, 0x47, 0x49, 0x75, 0x0c, 0x47, 0x6e, 0xf7, 0x2c, 0xd6, 0x38, 0xc3,
	0xf9, 0xfd, 0xea, 0x73, 0xf3, 0x7b, 0xac, 0x19, 0x77, 0x69, 0x54, 0x2f, 0x41, 0xf6, 0x01, 0x65,
	0x85, 0xc1, 0xe3, 0x77, 0x49, 0x90, 0x60, 0xab, 0x7e, 0x97, 0x84, 0x8d, 0xdd, 0x79, 0x88, 0x9b,
	0x2f, 0x3b, 0x54, 0x6b, 0xca, 0xf2, 0x48, 0xdd, 0x80, 0x14, 0x2f, 0xc8, 0x09, 0x5e, 0x6e, 0xaa,
	0xb1, 0xeb, 0x40, 0x95, 0x15, 0x66, 0xc2, 0xb1, 0xf8, 0x0a, 0xe4, 0xfc, 0x91, 0x4b, 0xbd, 0x91,
	0x63, 0x19, 0xb2, 0x3d, 0xed, 0xff, 0x3e, 0x17, 0x10, 0x7c, 0x1d, 0xb2, 0x8e, 0x70, 0xa6, 0x2c,
	0x47, 0x51, 0xf3, 0xd9, 0x1e, 0xb7, 0x6b, 0x0a, 0x09, 0xc0, 0xea, 0xa7, 0x90, 0xe2, 0xed, 0xe2,
	0x28, 0xac, 0xef, 0x34, 0xdb, 0xed, 0xee, 0x6d, 0xd2, 0x6d, 0x7e, 0x76, 0xa7, 0xbe, 0x53, 0x54,
	0xf0, 0x3a, 0xe4, 0xf8, 0x51, 0x47, 0xab, 0xdf, 0x2a, 0x22, 0x7c, 0x0c, 0x8a, 0x37, 0x48, 0xb3,
	0xde, 0x69, 0x92, 0x85, 0x50, 0x02, 0x17, 0xa1, 0x10, 0x9c, 0x72, 0xb9, 0x64, 0xa3, 0x00, 0x20,
	0x15, 0xb5, 0xa7, 0x63, 0xf5, 0x0f, 0x04, 0x69, 0x7e, 0x79, 0x7c, 0x1a, 0xf2, 0x03, 0xcb, 0xd1,
	0xfd, 0xb0, 0xaa, 0xa0, 0xb3, 0x09, 0xd6, 0x2c, 0xf9, 0xa1, 0x10, 0x39, 0x03, 0x05, 0xc3, 0x99,
	0xf6, 0xac, 0xa0, 0xf2, 0x30, 0x07, 0x23, 0xf6, 0x43, 0x29, 0x4e, 0x43, 0x1e, 0x93, 0x75, 0x05,
	0x29, 0xc3, 0x7c, 0x97, 0x66, 0x3c, 0x66, 0xd8, 0x2a, 0xa4, 0xc8, 0xd6, 0x05, 0x29, 0xc2, 0x1c,
	0x94, 0x94, 0x22, 0x5b, 0x17, 0x84, 0xc8, 0xe2, 0x8f, 0x56, 0xc8, 0xa4, 0xe3, 0xfc, 0xd1, 0x72,
	0x28, 0xfb, 0x25, 0xe5, 0x98, 0x46, 0xed, 0xf1, 0xd3, 0x8a, 0xf2, 0xfb, 0xd3, 0x8a, 0xf2, 0xec,
	0x69, 0x05, 0x7d, 0x3b, 0xaf, 0xa0, 0x47, 0xf3, 0x0a, 0xfa, 0x75, 0x5e, 0x41, 0x8f, 0xe7, 0x15,
	0xf4, 0xe7, 0xbc, 0x82, 0xfe, 0x99, 0x57, 0x94, 0x67, 0xf3, 0x0a, 0xfa, 0xe1, 0xaf, 0x8a, 0xf2,
	0x2f, 0x42, 0xbd, 0x0c, 0xa7, 0x3d, 0xff, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x03, 0xbc,
	0x37, 0x8d, 0x10, 0x00, 0x00,
}
