// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/core/framework/tensor.proto

/*
	Package tensorflow is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/core/framework/tensor.proto

	It has these top-level messages:
		TensorProto
		VariantTensorDataProto
*/
package tensorflow

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow1 "github.com/d4l3k/pok/tensorflow/core/framework"
import tensorflow2 "github.com/d4l3k/pok/tensorflow/core/framework"
import tensorflow3 "github.com/d4l3k/pok/tensorflow/core/framework"

import bytes "bytes"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Protocol buffer representing a tensor.
type TensorProto struct {
	Dtype tensorflow3.DataType `protobuf:"varint,1,opt,name=dtype,proto3,enum=tensorflow.DataType" json:"dtype,omitempty"`
	// Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
	TensorShape *tensorflow2.TensorShapeProto `protobuf:"bytes,2,opt,name=tensor_shape,json=tensorShape" json:"tensor_shape,omitempty"`
	// Version number.
	//
	// In version 0, if the "repeated xxx" representations contain only one
	// element, that element is repeated to fill the shape.  This makes it easy
	// to represent a constant Tensor with a single value.
	VersionNumber int32 `protobuf:"varint,3,opt,name=version_number,json=versionNumber,proto3" json:"version_number,omitempty"`
	// Serialized raw tensor content from either Tensor::AsProtoTensorContent or
	// memcpy in tensorflow::grpc::EncodeTensorToByteBuffer. This representation
	// can be used for all tensor types. The purpose of this representation is to
	// reduce serialization overhead during RPC call by avoiding serialization of
	// many repeated small items.
	TensorContent []byte `protobuf:"bytes,4,opt,name=tensor_content,json=tensorContent,proto3" json:"tensor_content,omitempty"`
	// DT_HALF. Note that since protobuf has no int16 type, we'll have some
	// pointless zero padding for each value here.
	HalfVal []int32 `protobuf:"varint,13,rep,packed,name=half_val,json=halfVal" json:"half_val,omitempty"`
	// DT_FLOAT.
	FloatVal []float32 `protobuf:"fixed32,5,rep,packed,name=float_val,json=floatVal" json:"float_val,omitempty"`
	// DT_DOUBLE.
	DoubleVal []float64 `protobuf:"fixed64,6,rep,packed,name=double_val,json=doubleVal" json:"double_val,omitempty"`
	// DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
	IntVal []int32 `protobuf:"varint,7,rep,packed,name=int_val,json=intVal" json:"int_val,omitempty"`
	// DT_STRING
	StringVal [][]byte `protobuf:"bytes,8,rep,name=string_val,json=stringVal" json:"string_val,omitempty"`
	// DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
	// and imaginary parts of i-th single precision complex.
	ScomplexVal []float32 `protobuf:"fixed32,9,rep,packed,name=scomplex_val,json=scomplexVal" json:"scomplex_val,omitempty"`
	// DT_INT64
	Int64Val []int64 `protobuf:"varint,10,rep,packed,name=int64_val,json=int64Val" json:"int64_val,omitempty"`
	// DT_BOOL
	BoolVal []bool `protobuf:"varint,11,rep,packed,name=bool_val,json=boolVal" json:"bool_val,omitempty"`
	// DT_COMPLEX128. dcomplex_val(2*i) and dcomplex_val(2*i+1) are real
	// and imaginary parts of i-th double precision complex.
	DcomplexVal []float64 `protobuf:"fixed64,12,rep,packed,name=dcomplex_val,json=dcomplexVal" json:"dcomplex_val,omitempty"`
	// DT_RESOURCE
	ResourceHandleVal []*tensorflow1.ResourceHandleProto `protobuf:"bytes,14,rep,name=resource_handle_val,json=resourceHandleVal" json:"resource_handle_val,omitempty"`
	// DT_VARIANT
	VariantVal []*VariantTensorDataProto `protobuf:"bytes,15,rep,name=variant_val,json=variantVal" json:"variant_val,omitempty"`
}

func (m *TensorProto) Reset()                    { *m = TensorProto{} }
func (*TensorProto) ProtoMessage()               {}
func (*TensorProto) Descriptor() ([]byte, []int) { return fileDescriptorTensor, []int{0} }

func (m *TensorProto) GetDtype() tensorflow3.DataType {
	if m != nil {
		return m.Dtype
	}
	return tensorflow3.DT_INVALID
}

func (m *TensorProto) GetTensorShape() *tensorflow2.TensorShapeProto {
	if m != nil {
		return m.TensorShape
	}
	return nil
}

func (m *TensorProto) GetVersionNumber() int32 {
	if m != nil {
		return m.VersionNumber
	}
	return 0
}

func (m *TensorProto) GetTensorContent() []byte {
	if m != nil {
		return m.TensorContent
	}
	return nil
}

func (m *TensorProto) GetHalfVal() []int32 {
	if m != nil {
		return m.HalfVal
	}
	return nil
}

func (m *TensorProto) GetFloatVal() []float32 {
	if m != nil {
		return m.FloatVal
	}
	return nil
}

func (m *TensorProto) GetDoubleVal() []float64 {
	if m != nil {
		return m.DoubleVal
	}
	return nil
}

func (m *TensorProto) GetIntVal() []int32 {
	if m != nil {
		return m.IntVal
	}
	return nil
}

func (m *TensorProto) GetStringVal() [][]byte {
	if m != nil {
		return m.StringVal
	}
	return nil
}

func (m *TensorProto) GetScomplexVal() []float32 {
	if m != nil {
		return m.ScomplexVal
	}
	return nil
}

func (m *TensorProto) GetInt64Val() []int64 {
	if m != nil {
		return m.Int64Val
	}
	return nil
}

func (m *TensorProto) GetBoolVal() []bool {
	if m != nil {
		return m.BoolVal
	}
	return nil
}

func (m *TensorProto) GetDcomplexVal() []float64 {
	if m != nil {
		return m.DcomplexVal
	}
	return nil
}

func (m *TensorProto) GetResourceHandleVal() []*tensorflow1.ResourceHandleProto {
	if m != nil {
		return m.ResourceHandleVal
	}
	return nil
}

func (m *TensorProto) GetVariantVal() []*VariantTensorDataProto {
	if m != nil {
		return m.VariantVal
	}
	return nil
}

// Protocol buffer representing the serialization format of DT_VARIANT tensors.
type VariantTensorDataProto struct {
	// Name of the type of objects being serialized.
	TypeName string `protobuf:"bytes,1,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	// Portions of the object that are not Tensors.
	Metadata []byte `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Tensors contained within objects being serialized.
	Tensors []*TensorProto `protobuf:"bytes,3,rep,name=tensors" json:"tensors,omitempty"`
}

func (m *VariantTensorDataProto) Reset()                    { *m = VariantTensorDataProto{} }
func (*VariantTensorDataProto) ProtoMessage()               {}
func (*VariantTensorDataProto) Descriptor() ([]byte, []int) { return fileDescriptorTensor, []int{1} }

func (m *VariantTensorDataProto) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

func (m *VariantTensorDataProto) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *VariantTensorDataProto) GetTensors() []*TensorProto {
	if m != nil {
		return m.Tensors
	}
	return nil
}

func init() {
	proto.RegisterType((*TensorProto)(nil), "tensorflow.TensorProto")
	proto.RegisterType((*VariantTensorDataProto)(nil), "tensorflow.VariantTensorDataProto")
}
func (this *TensorProto) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TensorProto)
	if !ok {
		that2, ok := that.(TensorProto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Dtype != that1.Dtype {
		return false
	}
	if !this.TensorShape.Equal(that1.TensorShape) {
		return false
	}
	if this.VersionNumber != that1.VersionNumber {
		return false
	}
	if !bytes.Equal(this.TensorContent, that1.TensorContent) {
		return false
	}
	if len(this.HalfVal) != len(that1.HalfVal) {
		return false
	}
	for i := range this.HalfVal {
		if this.HalfVal[i] != that1.HalfVal[i] {
			return false
		}
	}
	if len(this.FloatVal) != len(that1.FloatVal) {
		return false
	}
	for i := range this.FloatVal {
		if this.FloatVal[i] != that1.FloatVal[i] {
			return false
		}
	}
	if len(this.DoubleVal) != len(that1.DoubleVal) {
		return false
	}
	for i := range this.DoubleVal {
		if this.DoubleVal[i] != that1.DoubleVal[i] {
			return false
		}
	}
	if len(this.IntVal) != len(that1.IntVal) {
		return false
	}
	for i := range this.IntVal {
		if this.IntVal[i] != that1.IntVal[i] {
			return false
		}
	}
	if len(this.StringVal) != len(that1.StringVal) {
		return false
	}
	for i := range this.StringVal {
		if !bytes.Equal(this.StringVal[i], that1.StringVal[i]) {
			return false
		}
	}
	if len(this.ScomplexVal) != len(that1.ScomplexVal) {
		return false
	}
	for i := range this.ScomplexVal {
		if this.ScomplexVal[i] != that1.ScomplexVal[i] {
			return false
		}
	}
	if len(this.Int64Val) != len(that1.Int64Val) {
		return false
	}
	for i := range this.Int64Val {
		if this.Int64Val[i] != that1.Int64Val[i] {
			return false
		}
	}
	if len(this.BoolVal) != len(that1.BoolVal) {
		return false
	}
	for i := range this.BoolVal {
		if this.BoolVal[i] != that1.BoolVal[i] {
			return false
		}
	}
	if len(this.DcomplexVal) != len(that1.DcomplexVal) {
		return false
	}
	for i := range this.DcomplexVal {
		if this.DcomplexVal[i] != that1.DcomplexVal[i] {
			return false
		}
	}
	if len(this.ResourceHandleVal) != len(that1.ResourceHandleVal) {
		return false
	}
	for i := range this.ResourceHandleVal {
		if !this.ResourceHandleVal[i].Equal(that1.ResourceHandleVal[i]) {
			return false
		}
	}
	if len(this.VariantVal) != len(that1.VariantVal) {
		return false
	}
	for i := range this.VariantVal {
		if !this.VariantVal[i].Equal(that1.VariantVal[i]) {
			return false
		}
	}
	return true
}
func (this *VariantTensorDataProto) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*VariantTensorDataProto)
	if !ok {
		that2, ok := that.(VariantTensorDataProto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TypeName != that1.TypeName {
		return false
	}
	if !bytes.Equal(this.Metadata, that1.Metadata) {
		return false
	}
	if len(this.Tensors) != len(that1.Tensors) {
		return false
	}
	for i := range this.Tensors {
		if !this.Tensors[i].Equal(that1.Tensors[i]) {
			return false
		}
	}
	return true
}
func (this *TensorProto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&tensorflow.TensorProto{")
	s = append(s, "Dtype: "+fmt.Sprintf("%#v", this.Dtype)+",\n")
	if this.TensorShape != nil {
		s = append(s, "TensorShape: "+fmt.Sprintf("%#v", this.TensorShape)+",\n")
	}
	s = append(s, "VersionNumber: "+fmt.Sprintf("%#v", this.VersionNumber)+",\n")
	s = append(s, "TensorContent: "+fmt.Sprintf("%#v", this.TensorContent)+",\n")
	s = append(s, "HalfVal: "+fmt.Sprintf("%#v", this.HalfVal)+",\n")
	s = append(s, "FloatVal: "+fmt.Sprintf("%#v", this.FloatVal)+",\n")
	s = append(s, "DoubleVal: "+fmt.Sprintf("%#v", this.DoubleVal)+",\n")
	s = append(s, "IntVal: "+fmt.Sprintf("%#v", this.IntVal)+",\n")
	s = append(s, "StringVal: "+fmt.Sprintf("%#v", this.StringVal)+",\n")
	s = append(s, "ScomplexVal: "+fmt.Sprintf("%#v", this.ScomplexVal)+",\n")
	s = append(s, "Int64Val: "+fmt.Sprintf("%#v", this.Int64Val)+",\n")
	s = append(s, "BoolVal: "+fmt.Sprintf("%#v", this.BoolVal)+",\n")
	s = append(s, "DcomplexVal: "+fmt.Sprintf("%#v", this.DcomplexVal)+",\n")
	if this.ResourceHandleVal != nil {
		s = append(s, "ResourceHandleVal: "+fmt.Sprintf("%#v", this.ResourceHandleVal)+",\n")
	}
	if this.VariantVal != nil {
		s = append(s, "VariantVal: "+fmt.Sprintf("%#v", this.VariantVal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VariantTensorDataProto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensorflow.VariantTensorDataProto{")
	s = append(s, "TypeName: "+fmt.Sprintf("%#v", this.TypeName)+",\n")
	s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	if this.Tensors != nil {
		s = append(s, "Tensors: "+fmt.Sprintf("%#v", this.Tensors)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTensor(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TensorProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TensorProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Dtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTensor(dAtA, i, uint64(m.Dtype))
	}
	if m.TensorShape != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTensor(dAtA, i, uint64(m.TensorShape.Size()))
		n1, err := m.TensorShape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.VersionNumber != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTensor(dAtA, i, uint64(m.VersionNumber))
	}
	if len(m.TensorContent) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTensor(dAtA, i, uint64(len(m.TensorContent)))
		i += copy(dAtA[i:], m.TensorContent)
	}
	if len(m.FloatVal) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTensor(dAtA, i, uint64(len(m.FloatVal)*4))
		for _, num := range m.FloatVal {
			f2 := math.Float32bits(float32(num))
			dAtA[i] = uint8(f2)
			i++
			dAtA[i] = uint8(f2 >> 8)
			i++
			dAtA[i] = uint8(f2 >> 16)
			i++
			dAtA[i] = uint8(f2 >> 24)
			i++
		}
	}
	if len(m.DoubleVal) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTensor(dAtA, i, uint64(len(m.DoubleVal)*8))
		for _, num := range m.DoubleVal {
			f3 := math.Float64bits(float64(num))
			dAtA[i] = uint8(f3)
			i++
			dAtA[i] = uint8(f3 >> 8)
			i++
			dAtA[i] = uint8(f3 >> 16)
			i++
			dAtA[i] = uint8(f3 >> 24)
			i++
			dAtA[i] = uint8(f3 >> 32)
			i++
			dAtA[i] = uint8(f3 >> 40)
			i++
			dAtA[i] = uint8(f3 >> 48)
			i++
			dAtA[i] = uint8(f3 >> 56)
			i++
		}
	}
	if len(m.IntVal) > 0 {
		dAtA5 := make([]byte, len(m.IntVal)*10)
		var j4 int
		for _, num1 := range m.IntVal {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTensor(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	if len(m.StringVal) > 0 {
		for _, b := range m.StringVal {
			dAtA[i] = 0x42
			i++
			i = encodeVarintTensor(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.ScomplexVal) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTensor(dAtA, i, uint64(len(m.ScomplexVal)*4))
		for _, num := range m.ScomplexVal {
			f6 := math.Float32bits(float32(num))
			dAtA[i] = uint8(f6)
			i++
			dAtA[i] = uint8(f6 >> 8)
			i++
			dAtA[i] = uint8(f6 >> 16)
			i++
			dAtA[i] = uint8(f6 >> 24)
			i++
		}
	}
	if len(m.Int64Val) > 0 {
		dAtA8 := make([]byte, len(m.Int64Val)*10)
		var j7 int
		for _, num1 := range m.Int64Val {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x52
		i++
		i = encodeVarintTensor(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if len(m.BoolVal) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTensor(dAtA, i, uint64(len(m.BoolVal)))
		for _, b := range m.BoolVal {
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if len(m.DcomplexVal) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTensor(dAtA, i, uint64(len(m.DcomplexVal)*8))
		for _, num := range m.DcomplexVal {
			f9 := math.Float64bits(float64(num))
			dAtA[i] = uint8(f9)
			i++
			dAtA[i] = uint8(f9 >> 8)
			i++
			dAtA[i] = uint8(f9 >> 16)
			i++
			dAtA[i] = uint8(f9 >> 24)
			i++
			dAtA[i] = uint8(f9 >> 32)
			i++
			dAtA[i] = uint8(f9 >> 40)
			i++
			dAtA[i] = uint8(f9 >> 48)
			i++
			dAtA[i] = uint8(f9 >> 56)
			i++
		}
	}
	if len(m.HalfVal) > 0 {
		dAtA11 := make([]byte, len(m.HalfVal)*10)
		var j10 int
		for _, num1 := range m.HalfVal {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		dAtA[i] = 0x6a
		i++
		i = encodeVarintTensor(dAtA, i, uint64(j10))
		i += copy(dAtA[i:], dAtA11[:j10])
	}
	if len(m.ResourceHandleVal) > 0 {
		for _, msg := range m.ResourceHandleVal {
			dAtA[i] = 0x72
			i++
			i = encodeVarintTensor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.VariantVal) > 0 {
		for _, msg := range m.VariantVal {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintTensor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VariantTensorDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VariantTensorDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TypeName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTensor(dAtA, i, uint64(len(m.TypeName)))
		i += copy(dAtA[i:], m.TypeName)
	}
	if len(m.Metadata) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTensor(dAtA, i, uint64(len(m.Metadata)))
		i += copy(dAtA[i:], m.Metadata)
	}
	if len(m.Tensors) > 0 {
		for _, msg := range m.Tensors {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTensor(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Tensor(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Tensor(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTensor(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TensorProto) Size() (n int) {
	var l int
	_ = l
	if m.Dtype != 0 {
		n += 1 + sovTensor(uint64(m.Dtype))
	}
	if m.TensorShape != nil {
		l = m.TensorShape.Size()
		n += 1 + l + sovTensor(uint64(l))
	}
	if m.VersionNumber != 0 {
		n += 1 + sovTensor(uint64(m.VersionNumber))
	}
	l = len(m.TensorContent)
	if l > 0 {
		n += 1 + l + sovTensor(uint64(l))
	}
	if len(m.FloatVal) > 0 {
		n += 1 + sovTensor(uint64(len(m.FloatVal)*4)) + len(m.FloatVal)*4
	}
	if len(m.DoubleVal) > 0 {
		n += 1 + sovTensor(uint64(len(m.DoubleVal)*8)) + len(m.DoubleVal)*8
	}
	if len(m.IntVal) > 0 {
		l = 0
		for _, e := range m.IntVal {
			l += sovTensor(uint64(e))
		}
		n += 1 + sovTensor(uint64(l)) + l
	}
	if len(m.StringVal) > 0 {
		for _, b := range m.StringVal {
			l = len(b)
			n += 1 + l + sovTensor(uint64(l))
		}
	}
	if len(m.ScomplexVal) > 0 {
		n += 1 + sovTensor(uint64(len(m.ScomplexVal)*4)) + len(m.ScomplexVal)*4
	}
	if len(m.Int64Val) > 0 {
		l = 0
		for _, e := range m.Int64Val {
			l += sovTensor(uint64(e))
		}
		n += 1 + sovTensor(uint64(l)) + l
	}
	if len(m.BoolVal) > 0 {
		n += 1 + sovTensor(uint64(len(m.BoolVal))) + len(m.BoolVal)*1
	}
	if len(m.DcomplexVal) > 0 {
		n += 1 + sovTensor(uint64(len(m.DcomplexVal)*8)) + len(m.DcomplexVal)*8
	}
	if len(m.HalfVal) > 0 {
		l = 0
		for _, e := range m.HalfVal {
			l += sovTensor(uint64(e))
		}
		n += 1 + sovTensor(uint64(l)) + l
	}
	if len(m.ResourceHandleVal) > 0 {
		for _, e := range m.ResourceHandleVal {
			l = e.Size()
			n += 1 + l + sovTensor(uint64(l))
		}
	}
	if len(m.VariantVal) > 0 {
		for _, e := range m.VariantVal {
			l = e.Size()
			n += 1 + l + sovTensor(uint64(l))
		}
	}
	return n
}

func (m *VariantTensorDataProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.TypeName)
	if l > 0 {
		n += 1 + l + sovTensor(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovTensor(uint64(l))
	}
	if len(m.Tensors) > 0 {
		for _, e := range m.Tensors {
			l = e.Size()
			n += 1 + l + sovTensor(uint64(l))
		}
	}
	return n
}

func sovTensor(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTensor(x uint64) (n int) {
	return sovTensor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TensorProto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TensorProto{`,
		`Dtype:` + fmt.Sprintf("%v", this.Dtype) + `,`,
		`TensorShape:` + strings.Replace(fmt.Sprintf("%v", this.TensorShape), "TensorShapeProto", "tensorflow2.TensorShapeProto", 1) + `,`,
		`VersionNumber:` + fmt.Sprintf("%v", this.VersionNumber) + `,`,
		`TensorContent:` + fmt.Sprintf("%v", this.TensorContent) + `,`,
		`FloatVal:` + fmt.Sprintf("%v", this.FloatVal) + `,`,
		`DoubleVal:` + fmt.Sprintf("%v", this.DoubleVal) + `,`,
		`IntVal:` + fmt.Sprintf("%v", this.IntVal) + `,`,
		`StringVal:` + fmt.Sprintf("%v", this.StringVal) + `,`,
		`ScomplexVal:` + fmt.Sprintf("%v", this.ScomplexVal) + `,`,
		`Int64Val:` + fmt.Sprintf("%v", this.Int64Val) + `,`,
		`BoolVal:` + fmt.Sprintf("%v", this.BoolVal) + `,`,
		`DcomplexVal:` + fmt.Sprintf("%v", this.DcomplexVal) + `,`,
		`HalfVal:` + fmt.Sprintf("%v", this.HalfVal) + `,`,
		`ResourceHandleVal:` + strings.Replace(fmt.Sprintf("%v", this.ResourceHandleVal), "ResourceHandleProto", "tensorflow1.ResourceHandleProto", 1) + `,`,
		`VariantVal:` + strings.Replace(fmt.Sprintf("%v", this.VariantVal), "VariantTensorDataProto", "VariantTensorDataProto", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VariantTensorDataProto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VariantTensorDataProto{`,
		`TypeName:` + fmt.Sprintf("%v", this.TypeName) + `,`,
		`Metadata:` + fmt.Sprintf("%v", this.Metadata) + `,`,
		`Tensors:` + strings.Replace(fmt.Sprintf("%v", this.Tensors), "TensorProto", "TensorProto", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTensor(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TensorProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTensor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (tensorflow3.DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorShape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTensor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TensorShape == nil {
				m.TensorShape = &tensorflow2.TensorShapeProto{}
			}
			if err := m.TensorShape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionNumber", wireType)
			}
			m.VersionNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VersionNumber |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorContent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTensor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TensorContent = append(m.TensorContent[:0], dAtA[iNdEx:postIndex]...)
			if m.TensorContent == nil {
				m.TensorContent = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				v = uint32(dAtA[iNdEx-4])
				v |= uint32(dAtA[iNdEx-3]) << 8
				v |= uint32(dAtA[iNdEx-2]) << 16
				v |= uint32(dAtA[iNdEx-1]) << 24
				v2 := float32(math.Float32frombits(v))
				m.FloatVal = append(m.FloatVal, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTensor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTensor
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 4
					v = uint32(dAtA[iNdEx-4])
					v |= uint32(dAtA[iNdEx-3]) << 8
					v |= uint32(dAtA[iNdEx-2]) << 16
					v |= uint32(dAtA[iNdEx-1]) << 24
					v2 := float32(math.Float32frombits(v))
					m.FloatVal = append(m.FloatVal, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatVal", wireType)
			}
		case 6:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				v = uint64(dAtA[iNdEx-8])
				v |= uint64(dAtA[iNdEx-7]) << 8
				v |= uint64(dAtA[iNdEx-6]) << 16
				v |= uint64(dAtA[iNdEx-5]) << 24
				v |= uint64(dAtA[iNdEx-4]) << 32
				v |= uint64(dAtA[iNdEx-3]) << 40
				v |= uint64(dAtA[iNdEx-2]) << 48
				v |= uint64(dAtA[iNdEx-1]) << 56
				v2 := float64(math.Float64frombits(v))
				m.DoubleVal = append(m.DoubleVal, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTensor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTensor
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 8
					v = uint64(dAtA[iNdEx-8])
					v |= uint64(dAtA[iNdEx-7]) << 8
					v |= uint64(dAtA[iNdEx-6]) << 16
					v |= uint64(dAtA[iNdEx-5]) << 24
					v |= uint64(dAtA[iNdEx-4]) << 32
					v |= uint64(dAtA[iNdEx-3]) << 40
					v |= uint64(dAtA[iNdEx-2]) << 48
					v |= uint64(dAtA[iNdEx-1]) << 56
					v2 := float64(math.Float64frombits(v))
					m.DoubleVal = append(m.DoubleVal, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DoubleVal", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTensor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IntVal = append(m.IntVal, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTensor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTensor
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTensor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IntVal = append(m.IntVal, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IntVal", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringVal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTensor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringVal = append(m.StringVal, make([]byte, postIndex-iNdEx))
			copy(m.StringVal[len(m.StringVal)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 4
				v = uint32(dAtA[iNdEx-4])
				v |= uint32(dAtA[iNdEx-3]) << 8
				v |= uint32(dAtA[iNdEx-2]) << 16
				v |= uint32(dAtA[iNdEx-1]) << 24
				v2 := float32(math.Float32frombits(v))
				m.ScomplexVal = append(m.ScomplexVal, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTensor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTensor
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 4
					v = uint32(dAtA[iNdEx-4])
					v |= uint32(dAtA[iNdEx-3]) << 8
					v |= uint32(dAtA[iNdEx-2]) << 16
					v |= uint32(dAtA[iNdEx-1]) << 24
					v2 := float32(math.Float32frombits(v))
					m.ScomplexVal = append(m.ScomplexVal, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ScomplexVal", wireType)
			}
		case 10:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTensor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Int64Val = append(m.Int64Val, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTensor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTensor
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTensor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Int64Val = append(m.Int64Val, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Val", wireType)
			}
		case 11:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTensor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BoolVal = append(m.BoolVal, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTensor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTensor
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTensor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BoolVal = append(m.BoolVal, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolVal", wireType)
			}
		case 12:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				iNdEx += 8
				v = uint64(dAtA[iNdEx-8])
				v |= uint64(dAtA[iNdEx-7]) << 8
				v |= uint64(dAtA[iNdEx-6]) << 16
				v |= uint64(dAtA[iNdEx-5]) << 24
				v |= uint64(dAtA[iNdEx-4]) << 32
				v |= uint64(dAtA[iNdEx-3]) << 40
				v |= uint64(dAtA[iNdEx-2]) << 48
				v |= uint64(dAtA[iNdEx-1]) << 56
				v2 := float64(math.Float64frombits(v))
				m.DcomplexVal = append(m.DcomplexVal, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTensor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTensor
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					iNdEx += 8
					v = uint64(dAtA[iNdEx-8])
					v |= uint64(dAtA[iNdEx-7]) << 8
					v |= uint64(dAtA[iNdEx-6]) << 16
					v |= uint64(dAtA[iNdEx-5]) << 24
					v |= uint64(dAtA[iNdEx-4]) << 32
					v |= uint64(dAtA[iNdEx-3]) << 40
					v |= uint64(dAtA[iNdEx-2]) << 48
					v |= uint64(dAtA[iNdEx-1]) << 56
					v2 := float64(math.Float64frombits(v))
					m.DcomplexVal = append(m.DcomplexVal, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DcomplexVal", wireType)
			}
		case 13:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTensor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HalfVal = append(m.HalfVal, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTensor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTensor
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTensor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HalfVal = append(m.HalfVal, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HalfVal", wireType)
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceHandleVal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTensor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceHandleVal = append(m.ResourceHandleVal, &tensorflow1.ResourceHandleProto{})
			if err := m.ResourceHandleVal[len(m.ResourceHandleVal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VariantVal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTensor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VariantVal = append(m.VariantVal, &VariantTensorDataProto{})
			if err := m.VariantVal[len(m.VariantVal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTensor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTensor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VariantTensorDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTensor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VariantTensorDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VariantTensorDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTensor
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Metadata == nil {
				m.Metadata = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tensors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTensor
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tensors = append(m.Tensors, &TensorProto{})
			if err := m.Tensors[len(m.Tensors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTensor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTensor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTensor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTensor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTensor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTensor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTensor
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTensor
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTensor(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTensor = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTensor   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/core/framework/tensor.proto", fileDescriptorTensor)
}

var fileDescriptorTensor = []byte{
	// 576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xbf, 0x6f, 0xd3, 0x4e,
	0x18, 0xc6, 0x73, 0xf5, 0x37, 0x8d, 0xfd, 0xda, 0xed, 0x17, 0x0c, 0x02, 0x2b, 0xa5, 0x8e, 0x89,
	0x14, 0xc9, 0x42, 0x28, 0x11, 0x01, 0xb1, 0x22, 0xa5, 0x0c, 0x4c, 0xa5, 0x32, 0x55, 0x24, 0xa6,
	0xe8, 0x12, 0x5f, 0x1a, 0x0b, 0xdb, 0x17, 0x9d, 0x9d, 0x94, 0x6e, 0x0c, 0x6c, 0x2c, 0xfc, 0x19,
	0xfc, 0x29, 0x8c, 0x1d, 0x19, 0x89, 0x59, 0x18, 0x3b, 0x32, 0xa2, 0x7b, 0xcf, 0x49, 0xcc, 0x0f,
	0x95, 0xd1, 0xcf, 0xf3, 0x79, 0x9f, 0xf7, 0x3d, 0xdf, 0x7b, 0xd0, 0x9b, 0x0b, 0x9e, 0xf3, 0xf1,
	0x62, 0xda, 0xcb, 0x59, 0x9a, 0x71, 0x31, 0x8d, 0xf9, 0x79, 0x6f, 0xc2, 0x05, 0xeb, 0x4d, 0x05,
	0x4d, 0xd8, 0x39, 0x17, 0x6f, 0x4a, 0xa7, 0x8b, 0xa4, 0x0d, 0x5b, 0xae, 0x79, 0x4d, 0x8d, 0x60,
	0x19, 0x5f, 0x88, 0x09, 0x1b, 0xcd, 0x68, 0x1a, 0xc6, 0x4c, 0x15, 0x37, 0x1f, 0xfe, 0xab, 0xc9,
	0x28, 0x9b, 0xd1, 0xf9, 0x9a, 0xee, 0x5c, 0x43, 0x5f, 0xcc, 0x59, 0xa6, 0xb0, 0xf6, 0x87, 0x3a,
	0x98, 0xa7, 0x48, 0x9e, 0xe0, 0x84, 0x0f, 0xa0, 0x1e, 0x4a, 0xdf, 0x21, 0x1e, 0xf1, 0xf7, 0xfb,
	0xb7, 0xbb, 0xdb, 0x98, 0xee, 0x73, 0x9a, 0xd3, 0xd3, 0x8b, 0x39, 0x0b, 0x14, 0x62, 0x3f, 0x03,
	0xab, 0xda, 0xd8, 0xd9, 0xf1, 0x88, 0x6f, 0xf6, 0xef, 0x55, 0x4b, 0x54, 0xf4, 0x2b, 0x69, 0x63,
	0x7e, 0x60, 0xe6, 0x5b, 0xc5, 0xee, 0xc0, 0xfe, 0x92, 0x89, 0x2c, 0xe2, 0xe9, 0x28, 0x5d, 0x24,
	0x63, 0x26, 0x1c, 0xcd, 0x23, 0x7e, 0x3d, 0xd8, 0x2b, 0xd5, 0x63, 0x14, 0x25, 0x56, 0xf6, 0x99,
	0xf0, 0x34, 0x67, 0x69, 0xee, 0xfc, 0xe7, 0x11, 0xdf, 0x0a, 0xf6, 0x94, 0x7a, 0xa4, 0x44, 0xbb,
	0x05, 0xc6, 0x34, 0xe6, 0x34, 0x1f, 0x2d, 0x69, 0xec, 0xd4, 0x3d, 0xcd, 0xdf, 0x19, 0xec, 0xdc,
	0x20, 0x81, 0x8e, 0xe2, 0x90, 0xc6, 0xf6, 0x7d, 0x80, 0x90, 0x2f, 0xc6, 0x31, 0x43, 0x62, 0xd7,
	0xd3, 0x7c, 0x82, 0x84, 0xa1, 0x54, 0x89, 0x1c, 0x40, 0x23, 0x4a, 0x55, 0x42, 0xc3, 0xd3, 0xfc,
	0x3a, 0xfa, 0xbb, 0x51, 0x8a, 0xf5, 0x87, 0x00, 0x59, 0x2e, 0xa2, 0xf4, 0x0c, 0x7d, 0xdd, 0xd3,
	0x7c, 0x2b, 0x30, 0x94, 0x22, 0xed, 0x0e, 0x58, 0xd9, 0x84, 0x27, 0xf3, 0x98, 0xbd, 0x45, 0xc0,
	0xd8, 0x8c, 0x60, 0xae, 0x75, 0x89, 0xb5, 0xc0, 0x88, 0xd2, 0xfc, 0xe9, 0x13, 0x64, 0xc0, 0xd3,
	0x7c, 0x4d, 0x8d, 0x89, 0xa2, 0x6a, 0xa3, 0x8f, 0x39, 0x8f, 0xd1, 0x37, 0x3d, 0xcd, 0xd7, 0xd1,
	0x6f, 0x48, 0xad, 0x6c, 0x13, 0x56, 0xdb, 0x58, 0x9b, 0x73, 0x98, 0x61, 0xa5, 0xcd, 0x21, 0xe8,
	0x33, 0x1a, 0x4f, 0x11, 0xd9, 0xdb, 0x1c, 0xa5, 0x21, 0x35, 0x69, 0xbf, 0x84, 0x5b, 0xbf, 0x6d,
	0x19, 0x92, 0xfb, 0x9e, 0xe6, 0x9b, 0xfd, 0x56, 0xf5, 0x0a, 0x83, 0x12, 0x7b, 0x81, 0x94, 0xba,
	0xc5, 0x9b, 0xe2, 0x17, 0x51, 0x06, 0x1e, 0x81, 0xb9, 0xa4, 0x22, 0xa2, 0xe5, 0xdf, 0xfb, 0x1f,
	0x83, 0xda, 0xd5, 0xa0, 0xa1, 0xb2, 0xd5, 0x4a, 0xc8, 0x5d, 0x52, 0x59, 0x50, 0x96, 0x0d, 0x69,
	0xdc, 0x7e, 0x4f, 0xe0, 0xce, 0xdf, 0x31, 0xfb, 0x00, 0x0c, 0xb9, 0x74, 0xa3, 0x94, 0x26, 0x6a,
	0x39, 0x8d, 0x40, 0x97, 0xc2, 0x31, 0x4d, 0x98, 0xdd, 0x04, 0x3d, 0x61, 0x39, 0x0d, 0x69, 0x4e,
	0x71, 0x0b, 0xad, 0x60, 0xf3, 0x6d, 0x3f, 0x82, 0x86, 0x1a, 0x22, 0x73, 0x34, 0x1c, 0xea, 0xee,
	0x9f, 0x0b, 0xaa, 0x26, 0x59, 0x73, 0x83, 0xd7, 0x97, 0x2b, 0xb7, 0xf6, 0x65, 0xe5, 0xd6, 0xae,
	0x56, 0x2e, 0x79, 0x57, 0xb8, 0xe4, 0x53, 0xe1, 0x92, 0xcf, 0x85, 0x4b, 0x2e, 0x0b, 0x97, 0x7c,
	0x2d, 0x5c, 0xf2, 0xbd, 0x70, 0x6b, 0x57, 0x85, 0x4b, 0x3e, 0x7e, 0x73, 0x6b, 0xe0, 0x70, 0x71,
	0x56, 0x8d, 0xdc, 0x3c, 0xb4, 0x81, 0x55, 0x49, 0xcf, 0x4e, 0xc8, 0x0f, 0x42, 0xc6, 0xbb, 0xf8,
	0xec, 0x1e, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x95, 0x4c, 0x0e, 0x01, 0x3b, 0x04, 0x00, 0x00,
}
