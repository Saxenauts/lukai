// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/core/framework/types.proto

/*
Package tensorflow is a generated protocol buffer package.

It is generated from these files:
	protobuf/tensorflow/core/framework/types.proto

It has these top-level messages:
*/
package tensorflow

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// LINT.IfChange
type DataType int32

const (
	// Not a legal value for DataType.  Used to indicate a DataType field
	// has not been set.
	DT_INVALID DataType = 0
	// Data types that all computation devices are expected to be
	// capable to support.
	DT_FLOAT      DataType = 1
	DT_DOUBLE     DataType = 2
	DT_INT32      DataType = 3
	DT_UINT8      DataType = 4
	DT_INT16      DataType = 5
	DT_INT8       DataType = 6
	DT_STRING     DataType = 7
	DT_COMPLEX64  DataType = 8
	DT_INT64      DataType = 9
	DT_BOOL       DataType = 10
	DT_QINT8      DataType = 11
	DT_QUINT8     DataType = 12
	DT_QINT32     DataType = 13
	DT_BFLOAT16   DataType = 14
	DT_QINT16     DataType = 15
	DT_QUINT16    DataType = 16
	DT_UINT16     DataType = 17
	DT_COMPLEX128 DataType = 18
	DT_HALF       DataType = 19
	DT_RESOURCE   DataType = 20
	DT_VARIANT    DataType = 21
	// Do not use!  These are only for parameters.  Every enum above
	// should have a corresponding value below (verified by types_test).
	DT_FLOAT_REF      DataType = 101
	DT_DOUBLE_REF     DataType = 102
	DT_INT32_REF      DataType = 103
	DT_UINT8_REF      DataType = 104
	DT_INT16_REF      DataType = 105
	DT_INT8_REF       DataType = 106
	DT_STRING_REF     DataType = 107
	DT_COMPLEX64_REF  DataType = 108
	DT_INT64_REF      DataType = 109
	DT_BOOL_REF       DataType = 110
	DT_QINT8_REF      DataType = 111
	DT_QUINT8_REF     DataType = 112
	DT_QINT32_REF     DataType = 113
	DT_BFLOAT16_REF   DataType = 114
	DT_QINT16_REF     DataType = 115
	DT_QUINT16_REF    DataType = 116
	DT_UINT16_REF     DataType = 117
	DT_COMPLEX128_REF DataType = 118
	DT_HALF_REF       DataType = 119
	DT_RESOURCE_REF   DataType = 120
	DT_VARIANT_REF    DataType = 121
)

var DataType_name = map[int32]string{
	0:   "DT_INVALID",
	1:   "DT_FLOAT",
	2:   "DT_DOUBLE",
	3:   "DT_INT32",
	4:   "DT_UINT8",
	5:   "DT_INT16",
	6:   "DT_INT8",
	7:   "DT_STRING",
	8:   "DT_COMPLEX64",
	9:   "DT_INT64",
	10:  "DT_BOOL",
	11:  "DT_QINT8",
	12:  "DT_QUINT8",
	13:  "DT_QINT32",
	14:  "DT_BFLOAT16",
	15:  "DT_QINT16",
	16:  "DT_QUINT16",
	17:  "DT_UINT16",
	18:  "DT_COMPLEX128",
	19:  "DT_HALF",
	20:  "DT_RESOURCE",
	21:  "DT_VARIANT",
	101: "DT_FLOAT_REF",
	102: "DT_DOUBLE_REF",
	103: "DT_INT32_REF",
	104: "DT_UINT8_REF",
	105: "DT_INT16_REF",
	106: "DT_INT8_REF",
	107: "DT_STRING_REF",
	108: "DT_COMPLEX64_REF",
	109: "DT_INT64_REF",
	110: "DT_BOOL_REF",
	111: "DT_QINT8_REF",
	112: "DT_QUINT8_REF",
	113: "DT_QINT32_REF",
	114: "DT_BFLOAT16_REF",
	115: "DT_QINT16_REF",
	116: "DT_QUINT16_REF",
	117: "DT_UINT16_REF",
	118: "DT_COMPLEX128_REF",
	119: "DT_HALF_REF",
	120: "DT_RESOURCE_REF",
	121: "DT_VARIANT_REF",
}
var DataType_value = map[string]int32{
	"DT_INVALID":        0,
	"DT_FLOAT":          1,
	"DT_DOUBLE":         2,
	"DT_INT32":          3,
	"DT_UINT8":          4,
	"DT_INT16":          5,
	"DT_INT8":           6,
	"DT_STRING":         7,
	"DT_COMPLEX64":      8,
	"DT_INT64":          9,
	"DT_BOOL":           10,
	"DT_QINT8":          11,
	"DT_QUINT8":         12,
	"DT_QINT32":         13,
	"DT_BFLOAT16":       14,
	"DT_QINT16":         15,
	"DT_QUINT16":        16,
	"DT_UINT16":         17,
	"DT_COMPLEX128":     18,
	"DT_HALF":           19,
	"DT_RESOURCE":       20,
	"DT_VARIANT":        21,
	"DT_FLOAT_REF":      101,
	"DT_DOUBLE_REF":     102,
	"DT_INT32_REF":      103,
	"DT_UINT8_REF":      104,
	"DT_INT16_REF":      105,
	"DT_INT8_REF":       106,
	"DT_STRING_REF":     107,
	"DT_COMPLEX64_REF":  108,
	"DT_INT64_REF":      109,
	"DT_BOOL_REF":       110,
	"DT_QINT8_REF":      111,
	"DT_QUINT8_REF":     112,
	"DT_QINT32_REF":     113,
	"DT_BFLOAT16_REF":   114,
	"DT_QINT16_REF":     115,
	"DT_QUINT16_REF":    116,
	"DT_UINT16_REF":     117,
	"DT_COMPLEX128_REF": 118,
	"DT_HALF_REF":       119,
	"DT_RESOURCE_REF":   120,
	"DT_VARIANT_REF":    121,
}

func (DataType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func init() {
	proto.RegisterEnum("tensorflow.DataType", DataType_name, DataType_value)
}
func (x DataType) String() string {
	s, ok := DataType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

func init() { proto.RegisterFile("protobuf/tensorflow/core/framework/types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x93, 0x4d, 0x6f, 0xd3, 0x4e,
	0x10, 0xc6, 0xb3, 0xff, 0x3f, 0x6d, 0xd3, 0xcd, 0xdb, 0x64, 0xdb, 0x4a, 0x9c, 0xf6, 0x03, 0x70,
	0x48, 0xe4, 0xb6, 0xb2, 0x72, 0x4d, 0x6a, 0x07, 0x2c, 0x19, 0x3b, 0x71, 0x37, 0x55, 0x6f, 0x56,
	0x8a, 0x9c, 0x02, 0x7d, 0x71, 0xb0, 0x5d, 0x42, 0x6e, 0x7c, 0x04, 0x3e, 0x06, 0x1f, 0x85, 0x63,
	0x8f, 0x1c, 0x89, 0x91, 0x10, 0xc7, 0x1e, 0x39, 0xa2, 0x8c, 0x27, 0x59, 0x73, 0xdc, 0xdf, 0x3c,
	0xfb, 0xcc, 0xb3, 0xb3, 0x1a, 0xde, 0x99, 0x27, 0x71, 0x16, 0x5f, 0x3d, 0xcc, 0xba, 0x59, 0x74,
	0x9f, 0xc6, 0xc9, 0xec, 0x36, 0x5e, 0x74, 0xdf, 0xc4, 0x49, 0xd4, 0x9d, 0x25, 0xd3, 0xbb, 0x68,
	0x11, 0x27, 0x37, 0xdd, 0x6c, 0x39, 0x8f, 0xd2, 0x42, 0x28, 0xb8, 0x96, 0xbd, 0xf8, 0xb5, 0xc3,
	0xab, 0xd6, 0x34, 0x9b, 0xaa, 0xe5, 0x3c, 0x12, 0x4d, 0xce, 0x2d, 0x15, 0x3a, 0xde, 0x45, 0xdf,
	0x75, 0x2c, 0xa8, 0x88, 0x3a, 0xaf, 0x5a, 0x2a, 0x1c, 0xba, 0x7e, 0x5f, 0x01, 0x13, 0x0d, 0xbe,
	0x6f, 0xa9, 0xd0, 0xf2, 0x27, 0x03, 0xd7, 0x86, 0xff, 0xa8, 0xe8, 0x78, 0xea, 0xe4, 0x18, 0xfe,
	0xa7, 0xd3, 0xc4, 0xf1, 0x54, 0x0f, 0x9e, 0xe9, 0x9a, 0x61, 0xc2, 0x8e, 0xa8, 0xf1, 0xbd, 0xe2,
	0xd4, 0x83, 0x5d, 0x72, 0x39, 0x57, 0x81, 0xe3, 0xbd, 0x84, 0x3d, 0x01, 0xbc, 0x6e, 0xa9, 0xf0,
	0xcc, 0x7f, 0x3d, 0x72, 0xed, 0x4b, 0xf3, 0x14, 0xaa, 0xfa, 0xae, 0x79, 0x0a, 0xfb, 0x74, 0x77,
	0xe0, 0xfb, 0x2e, 0x70, 0x2a, 0x8d, 0xd1, 0xa9, 0x46, 0x4e, 0xe3, 0xa2, 0x67, 0x7d, 0x73, 0x2c,
	0x02, 0x35, 0x44, 0x8b, 0xd7, 0xd6, 0x17, 0x31, 0xbc, 0x61, 0x42, 0xb3, 0x54, 0x37, 0x4c, 0x68,
	0xd1, 0x5b, 0xf1, 0xb6, 0x61, 0x02, 0x50, 0x99, 0x8e, 0x6d, 0xd1, 0xe6, 0x0d, 0x9d, 0xcb, 0x38,
	0xee, 0x81, 0xa0, 0x28, 0xaf, 0xfa, 0xee, 0x10, 0x0e, 0xc8, 0x3e, 0xb0, 0xcf, 0xfd, 0x49, 0x70,
	0x66, 0xc3, 0x21, 0xf9, 0x5d, 0xf4, 0x03, 0xa7, 0xef, 0x29, 0x38, 0xa2, 0x87, 0x61, 0xfb, 0x30,
	0xb0, 0x87, 0x10, 0x91, 0x65, 0x31, 0x3f, 0x44, 0x33, 0x12, 0x61, 0x64, 0x24, 0xd7, 0x44, 0xf0,
	0x4d, 0x48, 0xde, 0x6a, 0x8d, 0x61, 0x22, 0x79, 0x47, 0xbd, 0xb7, 0x92, 0xf7, 0xe4, 0x5c, 0xcc,
	0x14, 0xd1, 0x8d, 0x38, 0xe4, 0x50, 0x9e, 0x2b, 0xd2, 0x5b, 0xed, 0x45, 0xe4, 0x6e, 0x33, 0x26,
	0xdf, 0x77, 0x11, 0xdc, 0x93, 0x64, 0xbc, 0x75, 0x8f, 0xc9, 0x7d, 0xac, 0x33, 0xcd, 0x37, 0x48,
	0x07, 0xff, 0x20, 0x0e, 0x78, 0xab, 0x34, 0x6f, 0x84, 0x49, 0x49, 0x47, 0x28, 0x15, 0x82, 0x37,
	0xf5, 0xdc, 0x91, 0x65, 0x24, 0x2b, 0xa1, 0x07, 0x71, 0xc4, 0xdb, 0xff, 0xcc, 0x1f, 0xf1, 0x47,
	0x8a, 0xbb, 0xfe, 0x03, 0x04, 0x0b, 0x6a, 0xbb, 0xf9, 0x07, 0x84, 0x9f, 0xa8, 0x07, 0xfd, 0x05,
	0xb2, 0xe5, 0xe0, 0xf2, 0x71, 0x25, 0x2b, 0xdf, 0x57, 0xb2, 0xf2, 0xb4, 0x92, 0xec, 0x73, 0x2e,
	0xd9, 0xd7, 0x5c, 0xb2, 0x6f, 0xb9, 0x64, 0x8f, 0xb9, 0x64, 0x3f, 0x72, 0xc9, 0x7e, 0xe7, 0xb2,
	0xf2, 0x94, 0x4b, 0xf6, 0xe5, 0xa7, 0xac, 0xf0, 0xe7, 0x71, 0x72, 0xdd, 0xd1, 0x6b, 0xd2, 0xd9,
	0x2e, 0xd2, 0xa0, 0xb6, 0xde, 0x94, 0x74, 0xb4, 0x5e, 0xa4, 0x74, 0xc4, 0xfe, 0x30, 0x76, 0xb5,
	0x8b, 0x5b, 0x75, 0xf2, 0x37, 0x00, 0x00, 0xff, 0xff, 0x71, 0xc0, 0xa8, 0x67, 0x87, 0x03, 0x00,
	0x00,
}
