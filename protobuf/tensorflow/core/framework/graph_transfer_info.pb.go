// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/core/framework/graph_transfer_info.proto

/*
	Package tensorflow is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/core/framework/graph_transfer_info.proto

	It has these top-level messages:
		GraphTransferInfo
*/
package tensorflow

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow1 "github.com/d4l3k/pok/protobuf/tensorflow/core/framework"

import strconv "strconv"

import bytes "bytes"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GraphTransferInfo_Destination int32

const (
	NOP     GraphTransferInfo_Destination = 0
	HEXAGON GraphTransferInfo_Destination = 1
)

var GraphTransferInfo_Destination_name = map[int32]string{
	0: "NOP",
	1: "HEXAGON",
}
var GraphTransferInfo_Destination_value = map[string]int32{
	"NOP":     0,
	"HEXAGON": 1,
}

func (GraphTransferInfo_Destination) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorGraphTransferInfo, []int{0, 0}
}

// Protocol buffer representing a handle to a tensorflow resource. Handles are
// not valid across executions, but can be serialized back and forth from within
// a single run.
type GraphTransferInfo struct {
	NodeInfo       []*GraphTransferInfo_NodeInfo       `protobuf:"bytes,1,rep,name=node_info,json=nodeInfo" json:"node_info,omitempty"`
	ConstNodeInfo  []*GraphTransferInfo_ConstNodeInfo  `protobuf:"bytes,2,rep,name=const_node_info,json=constNodeInfo" json:"const_node_info,omitempty"`
	NodeInputInfo  []*GraphTransferInfo_NodeInputInfo  `protobuf:"bytes,3,rep,name=node_input_info,json=nodeInputInfo" json:"node_input_info,omitempty"`
	NodeOutputInfo []*GraphTransferInfo_NodeOutputInfo `protobuf:"bytes,4,rep,name=node_output_info,json=nodeOutputInfo" json:"node_output_info,omitempty"`
	// Input Node parameters of transferred graph
	GraphInputNodeInfo  []*GraphTransferInfo_GraphInputNodeInfo  `protobuf:"bytes,5,rep,name=graph_input_node_info,json=graphInputNodeInfo" json:"graph_input_node_info,omitempty"`
	GraphOutputNodeInfo []*GraphTransferInfo_GraphOutputNodeInfo `protobuf:"bytes,6,rep,name=graph_output_node_info,json=graphOutputNodeInfo" json:"graph_output_node_info,omitempty"`
	// Destination of graph transfer
	Destination GraphTransferInfo_Destination `protobuf:"varint,7,opt,name=destination,proto3,enum=tensorflow.GraphTransferInfo_Destination" json:"destination,omitempty"`
}

func (m *GraphTransferInfo) Reset()      { *m = GraphTransferInfo{} }
func (*GraphTransferInfo) ProtoMessage() {}
func (*GraphTransferInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorGraphTransferInfo, []int{0}
}

func (m *GraphTransferInfo) GetNodeInfo() []*GraphTransferInfo_NodeInfo {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

func (m *GraphTransferInfo) GetConstNodeInfo() []*GraphTransferInfo_ConstNodeInfo {
	if m != nil {
		return m.ConstNodeInfo
	}
	return nil
}

func (m *GraphTransferInfo) GetNodeInputInfo() []*GraphTransferInfo_NodeInputInfo {
	if m != nil {
		return m.NodeInputInfo
	}
	return nil
}

func (m *GraphTransferInfo) GetNodeOutputInfo() []*GraphTransferInfo_NodeOutputInfo {
	if m != nil {
		return m.NodeOutputInfo
	}
	return nil
}

func (m *GraphTransferInfo) GetGraphInputNodeInfo() []*GraphTransferInfo_GraphInputNodeInfo {
	if m != nil {
		return m.GraphInputNodeInfo
	}
	return nil
}

func (m *GraphTransferInfo) GetGraphOutputNodeInfo() []*GraphTransferInfo_GraphOutputNodeInfo {
	if m != nil {
		return m.GraphOutputNodeInfo
	}
	return nil
}

func (m *GraphTransferInfo) GetDestination() GraphTransferInfo_Destination {
	if m != nil {
		return m.Destination
	}
	return NOP
}

type GraphTransferInfo_NodeInput struct {
	NodeId     int32 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	OutputPort int32 `protobuf:"varint,2,opt,name=output_port,json=outputPort,proto3" json:"output_port,omitempty"`
}

func (m *GraphTransferInfo_NodeInput) Reset()      { *m = GraphTransferInfo_NodeInput{} }
func (*GraphTransferInfo_NodeInput) ProtoMessage() {}
func (*GraphTransferInfo_NodeInput) Descriptor() ([]byte, []int) {
	return fileDescriptorGraphTransferInfo, []int{0, 0}
}

func (m *GraphTransferInfo_NodeInput) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *GraphTransferInfo_NodeInput) GetOutputPort() int32 {
	if m != nil {
		return m.OutputPort
	}
	return 0
}

type GraphTransferInfo_NodeInfo struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NodeId      int32  `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	TypeName    string `protobuf:"bytes,3,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	SocOpId     int32  `protobuf:"varint,4,opt,name=soc_op_id,json=socOpId,proto3" json:"soc_op_id,omitempty"`
	PaddingId   int32  `protobuf:"varint,5,opt,name=padding_id,json=paddingId,proto3" json:"padding_id,omitempty"`
	InputCount  int32  `protobuf:"varint,6,opt,name=input_count,json=inputCount,proto3" json:"input_count,omitempty"`
	OutputCount int32  `protobuf:"varint,7,opt,name=output_count,json=outputCount,proto3" json:"output_count,omitempty"`
}

func (m *GraphTransferInfo_NodeInfo) Reset()      { *m = GraphTransferInfo_NodeInfo{} }
func (*GraphTransferInfo_NodeInfo) ProtoMessage() {}
func (*GraphTransferInfo_NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorGraphTransferInfo, []int{0, 1}
}

func (m *GraphTransferInfo_NodeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GraphTransferInfo_NodeInfo) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *GraphTransferInfo_NodeInfo) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

func (m *GraphTransferInfo_NodeInfo) GetSocOpId() int32 {
	if m != nil {
		return m.SocOpId
	}
	return 0
}

func (m *GraphTransferInfo_NodeInfo) GetPaddingId() int32 {
	if m != nil {
		return m.PaddingId
	}
	return 0
}

func (m *GraphTransferInfo_NodeInfo) GetInputCount() int32 {
	if m != nil {
		return m.InputCount
	}
	return 0
}

func (m *GraphTransferInfo_NodeInfo) GetOutputCount() int32 {
	if m != nil {
		return m.OutputCount
	}
	return 0
}

type GraphTransferInfo_ConstNodeInfo struct {
	Name   string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NodeId int32                `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Shape  []int64              `protobuf:"varint,3,rep,packed,name=shape" json:"shape,omitempty"`
	Data   []byte               `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Dtype  tensorflow1.DataType `protobuf:"varint,5,opt,name=dtype,proto3,enum=tensorflow.DataType" json:"dtype,omitempty"`
}

func (m *GraphTransferInfo_ConstNodeInfo) Reset()      { *m = GraphTransferInfo_ConstNodeInfo{} }
func (*GraphTransferInfo_ConstNodeInfo) ProtoMessage() {}
func (*GraphTransferInfo_ConstNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorGraphTransferInfo, []int{0, 2}
}

func (m *GraphTransferInfo_ConstNodeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GraphTransferInfo_ConstNodeInfo) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *GraphTransferInfo_ConstNodeInfo) GetShape() []int64 {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *GraphTransferInfo_ConstNodeInfo) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GraphTransferInfo_ConstNodeInfo) GetDtype() tensorflow1.DataType {
	if m != nil {
		return m.Dtype
	}
	return tensorflow1.DT_INVALID
}

type GraphTransferInfo_NodeInputInfo struct {
	NodeId    int32                          `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeInput []*GraphTransferInfo_NodeInput `protobuf:"bytes,2,rep,name=node_input,json=nodeInput" json:"node_input,omitempty"`
}

func (m *GraphTransferInfo_NodeInputInfo) Reset()      { *m = GraphTransferInfo_NodeInputInfo{} }
func (*GraphTransferInfo_NodeInputInfo) ProtoMessage() {}
func (*GraphTransferInfo_NodeInputInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorGraphTransferInfo, []int{0, 3}
}

func (m *GraphTransferInfo_NodeInputInfo) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *GraphTransferInfo_NodeInputInfo) GetNodeInput() []*GraphTransferInfo_NodeInput {
	if m != nil {
		return m.NodeInput
	}
	return nil
}

type GraphTransferInfo_NodeOutputInfo struct {
	NodeId      int32   `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	MaxByteSize []int32 `protobuf:"varint,2,rep,packed,name=max_byte_size,json=maxByteSize" json:"max_byte_size,omitempty"`
}

func (m *GraphTransferInfo_NodeOutputInfo) Reset()      { *m = GraphTransferInfo_NodeOutputInfo{} }
func (*GraphTransferInfo_NodeOutputInfo) ProtoMessage() {}
func (*GraphTransferInfo_NodeOutputInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorGraphTransferInfo, []int{0, 4}
}

func (m *GraphTransferInfo_NodeOutputInfo) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *GraphTransferInfo_NodeOutputInfo) GetMaxByteSize() []int32 {
	if m != nil {
		return m.MaxByteSize
	}
	return nil
}

type GraphTransferInfo_GraphInputNodeInfo struct {
	Name  string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Shape []int64              `protobuf:"varint,2,rep,packed,name=shape" json:"shape,omitempty"`
	Dtype tensorflow1.DataType `protobuf:"varint,3,opt,name=dtype,proto3,enum=tensorflow.DataType" json:"dtype,omitempty"`
}

func (m *GraphTransferInfo_GraphInputNodeInfo) Reset()      { *m = GraphTransferInfo_GraphInputNodeInfo{} }
func (*GraphTransferInfo_GraphInputNodeInfo) ProtoMessage() {}
func (*GraphTransferInfo_GraphInputNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorGraphTransferInfo, []int{0, 5}
}

func (m *GraphTransferInfo_GraphInputNodeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GraphTransferInfo_GraphInputNodeInfo) GetShape() []int64 {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *GraphTransferInfo_GraphInputNodeInfo) GetDtype() tensorflow1.DataType {
	if m != nil {
		return m.Dtype
	}
	return tensorflow1.DT_INVALID
}

type GraphTransferInfo_GraphOutputNodeInfo struct {
	Name  string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Shape []int64              `protobuf:"varint,2,rep,packed,name=shape" json:"shape,omitempty"`
	Dtype tensorflow1.DataType `protobuf:"varint,3,opt,name=dtype,proto3,enum=tensorflow.DataType" json:"dtype,omitempty"`
}

func (m *GraphTransferInfo_GraphOutputNodeInfo) Reset()      { *m = GraphTransferInfo_GraphOutputNodeInfo{} }
func (*GraphTransferInfo_GraphOutputNodeInfo) ProtoMessage() {}
func (*GraphTransferInfo_GraphOutputNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorGraphTransferInfo, []int{0, 6}
}

func (m *GraphTransferInfo_GraphOutputNodeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GraphTransferInfo_GraphOutputNodeInfo) GetShape() []int64 {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *GraphTransferInfo_GraphOutputNodeInfo) GetDtype() tensorflow1.DataType {
	if m != nil {
		return m.Dtype
	}
	return tensorflow1.DT_INVALID
}

func init() {
	proto.RegisterType((*GraphTransferInfo)(nil), "tensorflow.GraphTransferInfo")
	proto.RegisterType((*GraphTransferInfo_NodeInput)(nil), "tensorflow.GraphTransferInfo.NodeInput")
	proto.RegisterType((*GraphTransferInfo_NodeInfo)(nil), "tensorflow.GraphTransferInfo.NodeInfo")
	proto.RegisterType((*GraphTransferInfo_ConstNodeInfo)(nil), "tensorflow.GraphTransferInfo.ConstNodeInfo")
	proto.RegisterType((*GraphTransferInfo_NodeInputInfo)(nil), "tensorflow.GraphTransferInfo.NodeInputInfo")
	proto.RegisterType((*GraphTransferInfo_NodeOutputInfo)(nil), "tensorflow.GraphTransferInfo.NodeOutputInfo")
	proto.RegisterType((*GraphTransferInfo_GraphInputNodeInfo)(nil), "tensorflow.GraphTransferInfo.GraphInputNodeInfo")
	proto.RegisterType((*GraphTransferInfo_GraphOutputNodeInfo)(nil), "tensorflow.GraphTransferInfo.GraphOutputNodeInfo")
	proto.RegisterEnum("tensorflow.GraphTransferInfo_Destination", GraphTransferInfo_Destination_name, GraphTransferInfo_Destination_value)
}
func (x GraphTransferInfo_Destination) String() string {
	s, ok := GraphTransferInfo_Destination_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GraphTransferInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GraphTransferInfo)
	if !ok {
		that2, ok := that.(GraphTransferInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.NodeInfo) != len(that1.NodeInfo) {
		return false
	}
	for i := range this.NodeInfo {
		if !this.NodeInfo[i].Equal(that1.NodeInfo[i]) {
			return false
		}
	}
	if len(this.ConstNodeInfo) != len(that1.ConstNodeInfo) {
		return false
	}
	for i := range this.ConstNodeInfo {
		if !this.ConstNodeInfo[i].Equal(that1.ConstNodeInfo[i]) {
			return false
		}
	}
	if len(this.NodeInputInfo) != len(that1.NodeInputInfo) {
		return false
	}
	for i := range this.NodeInputInfo {
		if !this.NodeInputInfo[i].Equal(that1.NodeInputInfo[i]) {
			return false
		}
	}
	if len(this.NodeOutputInfo) != len(that1.NodeOutputInfo) {
		return false
	}
	for i := range this.NodeOutputInfo {
		if !this.NodeOutputInfo[i].Equal(that1.NodeOutputInfo[i]) {
			return false
		}
	}
	if len(this.GraphInputNodeInfo) != len(that1.GraphInputNodeInfo) {
		return false
	}
	for i := range this.GraphInputNodeInfo {
		if !this.GraphInputNodeInfo[i].Equal(that1.GraphInputNodeInfo[i]) {
			return false
		}
	}
	if len(this.GraphOutputNodeInfo) != len(that1.GraphOutputNodeInfo) {
		return false
	}
	for i := range this.GraphOutputNodeInfo {
		if !this.GraphOutputNodeInfo[i].Equal(that1.GraphOutputNodeInfo[i]) {
			return false
		}
	}
	if this.Destination != that1.Destination {
		return false
	}
	return true
}
func (this *GraphTransferInfo_NodeInput) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GraphTransferInfo_NodeInput)
	if !ok {
		that2, ok := that.(GraphTransferInfo_NodeInput)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.NodeId != that1.NodeId {
		return false
	}
	if this.OutputPort != that1.OutputPort {
		return false
	}
	return true
}
func (this *GraphTransferInfo_NodeInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GraphTransferInfo_NodeInfo)
	if !ok {
		that2, ok := that.(GraphTransferInfo_NodeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.NodeId != that1.NodeId {
		return false
	}
	if this.TypeName != that1.TypeName {
		return false
	}
	if this.SocOpId != that1.SocOpId {
		return false
	}
	if this.PaddingId != that1.PaddingId {
		return false
	}
	if this.InputCount != that1.InputCount {
		return false
	}
	if this.OutputCount != that1.OutputCount {
		return false
	}
	return true
}
func (this *GraphTransferInfo_ConstNodeInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GraphTransferInfo_ConstNodeInfo)
	if !ok {
		that2, ok := that.(GraphTransferInfo_ConstNodeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.NodeId != that1.NodeId {
		return false
	}
	if len(this.Shape) != len(that1.Shape) {
		return false
	}
	for i := range this.Shape {
		if this.Shape[i] != that1.Shape[i] {
			return false
		}
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Dtype != that1.Dtype {
		return false
	}
	return true
}
func (this *GraphTransferInfo_NodeInputInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GraphTransferInfo_NodeInputInfo)
	if !ok {
		that2, ok := that.(GraphTransferInfo_NodeInputInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.NodeId != that1.NodeId {
		return false
	}
	if len(this.NodeInput) != len(that1.NodeInput) {
		return false
	}
	for i := range this.NodeInput {
		if !this.NodeInput[i].Equal(that1.NodeInput[i]) {
			return false
		}
	}
	return true
}
func (this *GraphTransferInfo_NodeOutputInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GraphTransferInfo_NodeOutputInfo)
	if !ok {
		that2, ok := that.(GraphTransferInfo_NodeOutputInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.NodeId != that1.NodeId {
		return false
	}
	if len(this.MaxByteSize) != len(that1.MaxByteSize) {
		return false
	}
	for i := range this.MaxByteSize {
		if this.MaxByteSize[i] != that1.MaxByteSize[i] {
			return false
		}
	}
	return true
}
func (this *GraphTransferInfo_GraphInputNodeInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GraphTransferInfo_GraphInputNodeInfo)
	if !ok {
		that2, ok := that.(GraphTransferInfo_GraphInputNodeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Shape) != len(that1.Shape) {
		return false
	}
	for i := range this.Shape {
		if this.Shape[i] != that1.Shape[i] {
			return false
		}
	}
	if this.Dtype != that1.Dtype {
		return false
	}
	return true
}
func (this *GraphTransferInfo_GraphOutputNodeInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GraphTransferInfo_GraphOutputNodeInfo)
	if !ok {
		that2, ok := that.(GraphTransferInfo_GraphOutputNodeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Shape) != len(that1.Shape) {
		return false
	}
	for i := range this.Shape {
		if this.Shape[i] != that1.Shape[i] {
			return false
		}
	}
	if this.Dtype != that1.Dtype {
		return false
	}
	return true
}
func (this *GraphTransferInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&tensorflow.GraphTransferInfo{")
	if this.NodeInfo != nil {
		s = append(s, "NodeInfo: "+fmt.Sprintf("%#v", this.NodeInfo)+",\n")
	}
	if this.ConstNodeInfo != nil {
		s = append(s, "ConstNodeInfo: "+fmt.Sprintf("%#v", this.ConstNodeInfo)+",\n")
	}
	if this.NodeInputInfo != nil {
		s = append(s, "NodeInputInfo: "+fmt.Sprintf("%#v", this.NodeInputInfo)+",\n")
	}
	if this.NodeOutputInfo != nil {
		s = append(s, "NodeOutputInfo: "+fmt.Sprintf("%#v", this.NodeOutputInfo)+",\n")
	}
	if this.GraphInputNodeInfo != nil {
		s = append(s, "GraphInputNodeInfo: "+fmt.Sprintf("%#v", this.GraphInputNodeInfo)+",\n")
	}
	if this.GraphOutputNodeInfo != nil {
		s = append(s, "GraphOutputNodeInfo: "+fmt.Sprintf("%#v", this.GraphOutputNodeInfo)+",\n")
	}
	s = append(s, "Destination: "+fmt.Sprintf("%#v", this.Destination)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphTransferInfo_NodeInput) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow.GraphTransferInfo_NodeInput{")
	s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	s = append(s, "OutputPort: "+fmt.Sprintf("%#v", this.OutputPort)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphTransferInfo_NodeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&tensorflow.GraphTransferInfo_NodeInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	s = append(s, "TypeName: "+fmt.Sprintf("%#v", this.TypeName)+",\n")
	s = append(s, "SocOpId: "+fmt.Sprintf("%#v", this.SocOpId)+",\n")
	s = append(s, "PaddingId: "+fmt.Sprintf("%#v", this.PaddingId)+",\n")
	s = append(s, "InputCount: "+fmt.Sprintf("%#v", this.InputCount)+",\n")
	s = append(s, "OutputCount: "+fmt.Sprintf("%#v", this.OutputCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphTransferInfo_ConstNodeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&tensorflow.GraphTransferInfo_ConstNodeInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Dtype: "+fmt.Sprintf("%#v", this.Dtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphTransferInfo_NodeInputInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow.GraphTransferInfo_NodeInputInfo{")
	s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	if this.NodeInput != nil {
		s = append(s, "NodeInput: "+fmt.Sprintf("%#v", this.NodeInput)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphTransferInfo_NodeOutputInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow.GraphTransferInfo_NodeOutputInfo{")
	s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	s = append(s, "MaxByteSize: "+fmt.Sprintf("%#v", this.MaxByteSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphTransferInfo_GraphInputNodeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensorflow.GraphTransferInfo_GraphInputNodeInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	s = append(s, "Dtype: "+fmt.Sprintf("%#v", this.Dtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GraphTransferInfo_GraphOutputNodeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensorflow.GraphTransferInfo_GraphOutputNodeInfo{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	s = append(s, "Dtype: "+fmt.Sprintf("%#v", this.Dtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGraphTransferInfo(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GraphTransferInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTransferInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeInfo) > 0 {
		for _, msg := range m.NodeInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGraphTransferInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ConstNodeInfo) > 0 {
		for _, msg := range m.ConstNodeInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGraphTransferInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.NodeInputInfo) > 0 {
		for _, msg := range m.NodeInputInfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGraphTransferInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.NodeOutputInfo) > 0 {
		for _, msg := range m.NodeOutputInfo {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGraphTransferInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GraphInputNodeInfo) > 0 {
		for _, msg := range m.GraphInputNodeInfo {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintGraphTransferInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GraphOutputNodeInfo) > 0 {
		for _, msg := range m.GraphOutputNodeInfo {
			dAtA[i] = 0x32
			i++
			i = encodeVarintGraphTransferInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Destination != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.Destination))
	}
	return i, nil
}

func (m *GraphTransferInfo_NodeInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTransferInfo_NodeInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.NodeId))
	}
	if m.OutputPort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.OutputPort))
	}
	return i, nil
}

func (m *GraphTransferInfo_NodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTransferInfo_NodeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.NodeId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.NodeId))
	}
	if len(m.TypeName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(len(m.TypeName)))
		i += copy(dAtA[i:], m.TypeName)
	}
	if m.SocOpId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.SocOpId))
	}
	if m.PaddingId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.PaddingId))
	}
	if m.InputCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.InputCount))
	}
	if m.OutputCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.OutputCount))
	}
	return i, nil
}

func (m *GraphTransferInfo_ConstNodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTransferInfo_ConstNodeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.NodeId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.NodeId))
	}
	if len(m.Shape) > 0 {
		dAtA2 := make([]byte, len(m.Shape)*10)
		var j1 int
		for _, num1 := range m.Shape {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Dtype != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.Dtype))
	}
	return i, nil
}

func (m *GraphTransferInfo_NodeInputInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTransferInfo_NodeInputInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.NodeId))
	}
	if len(m.NodeInput) > 0 {
		for _, msg := range m.NodeInput {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGraphTransferInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GraphTransferInfo_NodeOutputInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTransferInfo_NodeOutputInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.NodeId))
	}
	if len(m.MaxByteSize) > 0 {
		dAtA4 := make([]byte, len(m.MaxByteSize)*10)
		var j3 int
		for _, num1 := range m.MaxByteSize {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *GraphTransferInfo_GraphInputNodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTransferInfo_GraphInputNodeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Shape) > 0 {
		dAtA6 := make([]byte, len(m.Shape)*10)
		var j5 int
		for _, num1 := range m.Shape {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.Dtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.Dtype))
	}
	return i, nil
}

func (m *GraphTransferInfo_GraphOutputNodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphTransferInfo_GraphOutputNodeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Shape) > 0 {
		dAtA8 := make([]byte, len(m.Shape)*10)
		var j7 int
		for _, num1 := range m.Shape {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if m.Dtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGraphTransferInfo(dAtA, i, uint64(m.Dtype))
	}
	return i, nil
}

func encodeFixed64GraphTransferInfo(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32GraphTransferInfo(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGraphTransferInfo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GraphTransferInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.NodeInfo) > 0 {
		for _, e := range m.NodeInfo {
			l = e.Size()
			n += 1 + l + sovGraphTransferInfo(uint64(l))
		}
	}
	if len(m.ConstNodeInfo) > 0 {
		for _, e := range m.ConstNodeInfo {
			l = e.Size()
			n += 1 + l + sovGraphTransferInfo(uint64(l))
		}
	}
	if len(m.NodeInputInfo) > 0 {
		for _, e := range m.NodeInputInfo {
			l = e.Size()
			n += 1 + l + sovGraphTransferInfo(uint64(l))
		}
	}
	if len(m.NodeOutputInfo) > 0 {
		for _, e := range m.NodeOutputInfo {
			l = e.Size()
			n += 1 + l + sovGraphTransferInfo(uint64(l))
		}
	}
	if len(m.GraphInputNodeInfo) > 0 {
		for _, e := range m.GraphInputNodeInfo {
			l = e.Size()
			n += 1 + l + sovGraphTransferInfo(uint64(l))
		}
	}
	if len(m.GraphOutputNodeInfo) > 0 {
		for _, e := range m.GraphOutputNodeInfo {
			l = e.Size()
			n += 1 + l + sovGraphTransferInfo(uint64(l))
		}
	}
	if m.Destination != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.Destination))
	}
	return n
}

func (m *GraphTransferInfo_NodeInput) Size() (n int) {
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.NodeId))
	}
	if m.OutputPort != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.OutputPort))
	}
	return n
}

func (m *GraphTransferInfo_NodeInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGraphTransferInfo(uint64(l))
	}
	if m.NodeId != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.NodeId))
	}
	l = len(m.TypeName)
	if l > 0 {
		n += 1 + l + sovGraphTransferInfo(uint64(l))
	}
	if m.SocOpId != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.SocOpId))
	}
	if m.PaddingId != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.PaddingId))
	}
	if m.InputCount != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.InputCount))
	}
	if m.OutputCount != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.OutputCount))
	}
	return n
}

func (m *GraphTransferInfo_ConstNodeInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGraphTransferInfo(uint64(l))
	}
	if m.NodeId != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.NodeId))
	}
	if len(m.Shape) > 0 {
		l = 0
		for _, e := range m.Shape {
			l += sovGraphTransferInfo(uint64(e))
		}
		n += 1 + sovGraphTransferInfo(uint64(l)) + l
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovGraphTransferInfo(uint64(l))
	}
	if m.Dtype != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.Dtype))
	}
	return n
}

func (m *GraphTransferInfo_NodeInputInfo) Size() (n int) {
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.NodeId))
	}
	if len(m.NodeInput) > 0 {
		for _, e := range m.NodeInput {
			l = e.Size()
			n += 1 + l + sovGraphTransferInfo(uint64(l))
		}
	}
	return n
}

func (m *GraphTransferInfo_NodeOutputInfo) Size() (n int) {
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.NodeId))
	}
	if len(m.MaxByteSize) > 0 {
		l = 0
		for _, e := range m.MaxByteSize {
			l += sovGraphTransferInfo(uint64(e))
		}
		n += 1 + sovGraphTransferInfo(uint64(l)) + l
	}
	return n
}

func (m *GraphTransferInfo_GraphInputNodeInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGraphTransferInfo(uint64(l))
	}
	if len(m.Shape) > 0 {
		l = 0
		for _, e := range m.Shape {
			l += sovGraphTransferInfo(uint64(e))
		}
		n += 1 + sovGraphTransferInfo(uint64(l)) + l
	}
	if m.Dtype != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.Dtype))
	}
	return n
}

func (m *GraphTransferInfo_GraphOutputNodeInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGraphTransferInfo(uint64(l))
	}
	if len(m.Shape) > 0 {
		l = 0
		for _, e := range m.Shape {
			l += sovGraphTransferInfo(uint64(e))
		}
		n += 1 + sovGraphTransferInfo(uint64(l)) + l
	}
	if m.Dtype != 0 {
		n += 1 + sovGraphTransferInfo(uint64(m.Dtype))
	}
	return n
}

func sovGraphTransferInfo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGraphTransferInfo(x uint64) (n int) {
	return sovGraphTransferInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GraphTransferInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphTransferInfo{`,
		`NodeInfo:` + strings.Replace(fmt.Sprintf("%v", this.NodeInfo), "GraphTransferInfo_NodeInfo", "GraphTransferInfo_NodeInfo", 1) + `,`,
		`ConstNodeInfo:` + strings.Replace(fmt.Sprintf("%v", this.ConstNodeInfo), "GraphTransferInfo_ConstNodeInfo", "GraphTransferInfo_ConstNodeInfo", 1) + `,`,
		`NodeInputInfo:` + strings.Replace(fmt.Sprintf("%v", this.NodeInputInfo), "GraphTransferInfo_NodeInputInfo", "GraphTransferInfo_NodeInputInfo", 1) + `,`,
		`NodeOutputInfo:` + strings.Replace(fmt.Sprintf("%v", this.NodeOutputInfo), "GraphTransferInfo_NodeOutputInfo", "GraphTransferInfo_NodeOutputInfo", 1) + `,`,
		`GraphInputNodeInfo:` + strings.Replace(fmt.Sprintf("%v", this.GraphInputNodeInfo), "GraphTransferInfo_GraphInputNodeInfo", "GraphTransferInfo_GraphInputNodeInfo", 1) + `,`,
		`GraphOutputNodeInfo:` + strings.Replace(fmt.Sprintf("%v", this.GraphOutputNodeInfo), "GraphTransferInfo_GraphOutputNodeInfo", "GraphTransferInfo_GraphOutputNodeInfo", 1) + `,`,
		`Destination:` + fmt.Sprintf("%v", this.Destination) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphTransferInfo_NodeInput) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphTransferInfo_NodeInput{`,
		`NodeId:` + fmt.Sprintf("%v", this.NodeId) + `,`,
		`OutputPort:` + fmt.Sprintf("%v", this.OutputPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphTransferInfo_NodeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphTransferInfo_NodeInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`NodeId:` + fmt.Sprintf("%v", this.NodeId) + `,`,
		`TypeName:` + fmt.Sprintf("%v", this.TypeName) + `,`,
		`SocOpId:` + fmt.Sprintf("%v", this.SocOpId) + `,`,
		`PaddingId:` + fmt.Sprintf("%v", this.PaddingId) + `,`,
		`InputCount:` + fmt.Sprintf("%v", this.InputCount) + `,`,
		`OutputCount:` + fmt.Sprintf("%v", this.OutputCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphTransferInfo_ConstNodeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphTransferInfo_ConstNodeInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`NodeId:` + fmt.Sprintf("%v", this.NodeId) + `,`,
		`Shape:` + fmt.Sprintf("%v", this.Shape) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Dtype:` + fmt.Sprintf("%v", this.Dtype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphTransferInfo_NodeInputInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphTransferInfo_NodeInputInfo{`,
		`NodeId:` + fmt.Sprintf("%v", this.NodeId) + `,`,
		`NodeInput:` + strings.Replace(fmt.Sprintf("%v", this.NodeInput), "GraphTransferInfo_NodeInput", "GraphTransferInfo_NodeInput", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphTransferInfo_NodeOutputInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphTransferInfo_NodeOutputInfo{`,
		`NodeId:` + fmt.Sprintf("%v", this.NodeId) + `,`,
		`MaxByteSize:` + fmt.Sprintf("%v", this.MaxByteSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphTransferInfo_GraphInputNodeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphTransferInfo_GraphInputNodeInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Shape:` + fmt.Sprintf("%v", this.Shape) + `,`,
		`Dtype:` + fmt.Sprintf("%v", this.Dtype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphTransferInfo_GraphOutputNodeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphTransferInfo_GraphOutputNodeInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Shape:` + fmt.Sprintf("%v", this.Shape) + `,`,
		`Dtype:` + fmt.Sprintf("%v", this.Dtype) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGraphTransferInfo(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GraphTransferInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphTransferInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphTransferInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphTransferInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeInfo = append(m.NodeInfo, &GraphTransferInfo_NodeInfo{})
			if err := m.NodeInfo[len(m.NodeInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstNodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConstNodeInfo = append(m.ConstNodeInfo, &GraphTransferInfo_ConstNodeInfo{})
			if err := m.ConstNodeInfo[len(m.ConstNodeInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInputInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeInputInfo = append(m.NodeInputInfo, &GraphTransferInfo_NodeInputInfo{})
			if err := m.NodeInputInfo[len(m.NodeInputInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeOutputInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeOutputInfo = append(m.NodeOutputInfo, &GraphTransferInfo_NodeOutputInfo{})
			if err := m.NodeOutputInfo[len(m.NodeOutputInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphInputNodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphInputNodeInfo = append(m.GraphInputNodeInfo, &GraphTransferInfo_GraphInputNodeInfo{})
			if err := m.GraphInputNodeInfo[len(m.GraphInputNodeInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphOutputNodeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphOutputNodeInfo = append(m.GraphOutputNodeInfo, &GraphTransferInfo_GraphOutputNodeInfo{})
			if err := m.GraphOutputNodeInfo[len(m.GraphOutputNodeInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			m.Destination = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Destination |= (GraphTransferInfo_Destination(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraphTransferInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphTransferInfo_NodeInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphTransferInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputPort", wireType)
			}
			m.OutputPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputPort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraphTransferInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphTransferInfo_NodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphTransferInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SocOpId", wireType)
			}
			m.SocOpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SocOpId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaddingId", wireType)
			}
			m.PaddingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaddingId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputCount", wireType)
			}
			m.InputCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InputCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputCount", wireType)
			}
			m.OutputCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraphTransferInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphTransferInfo_ConstNodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphTransferInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConstNodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConstNodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphTransferInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shape = append(m.Shape, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphTransferInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGraphTransferInfo
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphTransferInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shape = append(m.Shape, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (tensorflow1.DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraphTransferInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphTransferInfo_NodeInputInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphTransferInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInputInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInputInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInput", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeInput = append(m.NodeInput, &GraphTransferInfo_NodeInput{})
			if err := m.NodeInput[len(m.NodeInput)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraphTransferInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphTransferInfo_NodeOutputInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphTransferInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeOutputInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeOutputInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphTransferInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MaxByteSize = append(m.MaxByteSize, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphTransferInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGraphTransferInfo
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphTransferInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MaxByteSize = append(m.MaxByteSize, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxByteSize", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraphTransferInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphTransferInfo_GraphInputNodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphTransferInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphInputNodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphInputNodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphTransferInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shape = append(m.Shape, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphTransferInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGraphTransferInfo
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphTransferInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shape = append(m.Shape, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (tensorflow1.DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraphTransferInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphTransferInfo_GraphOutputNodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraphTransferInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphOutputNodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphOutputNodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphTransferInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Shape = append(m.Shape, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraphTransferInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGraphTransferInfo
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraphTransferInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Shape = append(m.Shape, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (tensorflow1.DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraphTransferInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraphTransferInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGraphTransferInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGraphTransferInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraphTransferInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGraphTransferInfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGraphTransferInfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGraphTransferInfo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGraphTransferInfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGraphTransferInfo   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/core/framework/graph_transfer_info.proto", fileDescriptorGraphTransferInfo)
}

var fileDescriptorGraphTransferInfo = []byte{
	// 691 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0x4b, 0x6f, 0xd3, 0x4a,
	0x14, 0xc7, 0x33, 0x49, 0x93, 0x34, 0x27, 0x4d, 0x6e, 0xef, 0xb4, 0xb7, 0x37, 0x32, 0xc2, 0x94,
	0x22, 0xa0, 0x3c, 0x94, 0x40, 0xd9, 0xb2, 0xa1, 0x0f, 0x4a, 0x85, 0x48, 0x22, 0xb7, 0x42, 0xec,
	0x2c, 0xd7, 0x1e, 0xa7, 0xa1, 0x64, 0xc6, 0xb2, 0x27, 0x6a, 0xd3, 0x15, 0x1f, 0x01, 0xf1, 0x29,
	0xf8, 0x28, 0x2c, 0x2b, 0xb1, 0x61, 0x49, 0x8d, 0x90, 0x58, 0x76, 0xc9, 0x12, 0xf9, 0x8c, 0x65,
	0x3b, 0x4a, 0x5f, 0x2c, 0xd8, 0xcd, 0x1c, 0xcf, 0xff, 0x77, 0x5e, 0xfa, 0xcb, 0xf0, 0xd4, 0xf3,
	0x85, 0x14, 0xbb, 0x43, 0xb7, 0x25, 0x19, 0x0f, 0x84, 0xef, 0xbe, 0x13, 0x07, 0x2d, 0x5b, 0xf8,
	0xac, 0xe5, 0xfa, 0xd6, 0x80, 0x1d, 0x08, 0x7f, 0xbf, 0xd5, 0xf3, 0x2d, 0x6f, 0xcf, 0x94, 0xbe,
	0xc5, 0x03, 0x97, 0xf9, 0x66, 0x9f, 0xbb, 0xa2, 0x89, 0x32, 0x0a, 0xa9, 0x48, 0xbb, 0x7d, 0x3e,
	0x40, 0x8e, 0x3c, 0x16, 0x28, 0xc9, 0xd2, 0x8f, 0x2a, 0xfc, 0xbb, 0x19, 0x01, 0x77, 0x62, 0xde,
	0x16, 0x77, 0x05, 0x5d, 0x83, 0x0a, 0x17, 0x0e, 0x43, 0x76, 0x83, 0x2c, 0x16, 0x96, 0xab, 0x2b,
	0x77, 0x9a, 0x29, 0xb0, 0x39, 0xa1, 0x68, 0xb6, 0x85, 0xc3, 0xa2, 0x83, 0x31, 0xcd, 0xe3, 0x13,
	0xdd, 0x86, 0x7f, 0x6c, 0xc1, 0x03, 0x69, 0xa6, 0xa8, 0x3c, 0xa2, 0x1e, 0x5c, 0x8c, 0x5a, 0x8b,
	0x44, 0x09, 0xaf, 0x66, 0x67, 0xaf, 0x11, 0x34, 0xc6, 0x79, 0x43, 0xa9, 0xa0, 0x85, 0xab, 0x40,
	0x15, 0xc0, 0x1b, 0x4a, 0x05, 0xe5, 0xd9, 0x2b, 0x7d, 0x0d, 0xb3, 0x08, 0x15, 0x43, 0x99, 0x50,
	0xa7, 0x90, 0xfa, 0xf0, 0x72, 0x6a, 0x07, 0x45, 0x88, 0xad, 0xf3, 0xb1, 0x3b, 0xb5, 0xe1, 0x3f,
	0xb5, 0x2c, 0x55, 0x6d, 0x3a, 0x87, 0x22, 0xc2, 0x1f, 0x5d, 0x0c, 0xc7, 0x08, 0x16, 0x99, 0x0c,
	0x83, 0xf6, 0x26, 0x62, 0xd4, 0x85, 0x05, 0x95, 0x24, 0xae, 0x3e, 0xcd, 0x52, 0xc2, 0x2c, 0x8f,
	0xaf, 0x90, 0x45, 0xd5, 0x9c, 0xa4, 0x99, 0xeb, 0x4d, 0x06, 0xe9, 0x4b, 0xa8, 0x3a, 0x2c, 0x90,
	0x7d, 0x6e, 0xc9, 0xbe, 0xe0, 0x8d, 0xf2, 0x22, 0x59, 0xae, 0xaf, 0xdc, 0xbb, 0x18, 0xbe, 0x9e,
	0x0a, 0x8c, 0xac, 0x5a, 0xdb, 0x80, 0x4a, 0xb2, 0x11, 0xfa, 0x3f, 0x94, 0x55, 0xd1, 0x4e, 0x83,
	0x2c, 0x92, 0xe5, 0xa2, 0x51, 0xc2, 0xf5, 0x38, 0xf4, 0x06, 0x54, 0xe3, 0xa6, 0x3c, 0xe1, 0xcb,
	0x46, 0x1e, 0x3f, 0x82, 0x0a, 0x75, 0x85, 0x2f, 0xb5, 0x2f, 0x04, 0xa6, 0x93, 0x02, 0x29, 0x4c,
	0x71, 0x6b, 0xc0, 0x90, 0x51, 0x31, 0xf0, 0x9c, 0x45, 0xe7, 0xc7, 0xd0, 0xd7, 0xa0, 0x12, 0xd9,
	0xc0, 0x44, 0x45, 0x01, 0x15, 0xd3, 0x51, 0xa0, 0x1d, 0xa9, 0x34, 0xa8, 0x04, 0xc2, 0x36, 0x85,
	0x17, 0xe9, 0xa6, 0x50, 0x57, 0x0e, 0x84, 0xdd, 0xf1, 0xb6, 0x1c, 0x7a, 0x1d, 0xc0, 0xb3, 0x1c,
	0xa7, 0xcf, 0x7b, 0xd1, 0xc7, 0x22, 0x7e, 0xac, 0xc4, 0x11, 0x55, 0xb2, 0x5a, 0xb6, 0x2d, 0x86,
	0x5c, 0x36, 0x4a, 0xaa, 0x64, 0x0c, 0xad, 0x45, 0x11, 0x7a, 0x13, 0x66, 0xe2, 0x9e, 0xd4, 0x8b,
	0x32, 0xbe, 0x88, 0xfb, 0xc4, 0x27, 0xda, 0x47, 0x02, 0xb5, 0x31, 0x13, 0xfc, 0x59, 0x6b, 0xf3,
	0x50, 0x0c, 0xf6, 0x2c, 0x8f, 0xa1, 0x31, 0x0a, 0x86, 0xba, 0x44, 0x08, 0xc7, 0x92, 0x16, 0xb6,
	0x33, 0x63, 0xe0, 0x99, 0xde, 0x87, 0xa2, 0x13, 0x35, 0x8d, 0x6d, 0xd4, 0x57, 0xe6, 0xb3, 0xcb,
	0x5c, 0xb7, 0xa4, 0xb5, 0x33, 0xf2, 0x98, 0xa1, 0x9e, 0x68, 0x1e, 0xd4, 0xc6, 0x3c, 0x74, 0xfe,
	0xd6, 0x9e, 0x03, 0xa4, 0x16, 0x8d, 0x2d, 0x7f, 0xf7, 0x8a, 0xee, 0x34, 0x2a, 0x89, 0x33, 0xb5,
	0x57, 0x50, 0x1f, 0xf7, 0xd7, 0xf9, 0x29, 0x97, 0xa0, 0x36, 0xb0, 0x0e, 0xcd, 0xdd, 0x91, 0x64,
	0x66, 0xd0, 0x3f, 0x62, 0x98, 0xb5, 0x68, 0x54, 0x07, 0xd6, 0xe1, 0xea, 0x48, 0xb2, 0xed, 0xfe,
	0x11, 0xd3, 0xde, 0x02, 0x9d, 0x74, 0xd4, 0x99, 0x93, 0x4d, 0x06, 0x98, 0xcf, 0x0e, 0x30, 0x19,
	0x56, 0xe1, 0xf2, 0x61, 0xed, 0xc3, 0xdc, 0x19, 0xbe, 0xfa, 0x3b, 0xc9, 0x96, 0x6e, 0x41, 0x35,
	0xe3, 0x33, 0x5a, 0x86, 0x42, 0xbb, 0xd3, 0x9d, 0xcd, 0xd1, 0x2a, 0x94, 0x5f, 0x6c, 0xbc, 0x79,
	0xb6, 0xd9, 0x69, 0xcf, 0x92, 0x55, 0xfb, 0xf8, 0x44, 0xcf, 0x7d, 0x3d, 0xd1, 0x73, 0xa7, 0x27,
	0x3a, 0x79, 0x1f, 0xea, 0xe4, 0x53, 0xa8, 0x93, 0xcf, 0xa1, 0x4e, 0x8e, 0x43, 0x9d, 0x7c, 0x0b,
	0x75, 0xf2, 0x33, 0xd4, 0x73, 0xa7, 0xa1, 0x4e, 0x3e, 0x7c, 0xd7, 0x73, 0xd0, 0x10, 0x7e, 0x2f,
	0x9b, 0x32, 0xf9, 0x77, 0xac, 0x2e, 0x4c, 0x2c, 0xaf, 0x1b, 0xfd, 0x47, 0xba, 0xe4, 0x17, 0x21,
	0xbb, 0x25, 0xfc, 0xa7, 0x3c, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x73, 0xdd, 0xc2, 0xd0, 0xc6,
	0x06, 0x00, 0x00,
}
