// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/core/framework/remote_fused_graph_execute_info.proto

/*
	Package tensorflow is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/core/framework/remote_fused_graph_execute_info.proto

	It has these top-level messages:
		RemoteFusedGraphExecuteInfo
*/
package tensorflow

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow10 "github.com/d4l3k/pok/tensorflow/core/framework"
import tensorflow2 "github.com/d4l3k/pok/tensorflow/core/framework"
import tensorflow3 "github.com/d4l3k/pok/tensorflow/core/framework"

import strconv "strconv"

import bytes "bytes"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RemoteFusedGraphExecuteInfo_NodeType int32

const (
	UNUSED        RemoteFusedGraphExecuteInfo_NodeType = 0
	GRAPH_INPUT   RemoteFusedGraphExecuteInfo_NodeType = 1
	GRAPH_OUTPUT  RemoteFusedGraphExecuteInfo_NodeType = 2
	FUSED_NODE    RemoteFusedGraphExecuteInfo_NodeType = 3
	BORDER_INPUT  RemoteFusedGraphExecuteInfo_NodeType = 4
	BORDER_OUTPUT RemoteFusedGraphExecuteInfo_NodeType = 5
)

var RemoteFusedGraphExecuteInfo_NodeType_name = map[int32]string{
	0: "UNUSED",
	1: "GRAPH_INPUT",
	2: "GRAPH_OUTPUT",
	3: "FUSED_NODE",
	4: "BORDER_INPUT",
	5: "BORDER_OUTPUT",
}
var RemoteFusedGraphExecuteInfo_NodeType_value = map[string]int32{
	"UNUSED":        0,
	"GRAPH_INPUT":   1,
	"GRAPH_OUTPUT":  2,
	"FUSED_NODE":    3,
	"BORDER_INPUT":  4,
	"BORDER_OUTPUT": 5,
}

func (RemoteFusedGraphExecuteInfo_NodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorRemoteFusedGraphExecuteInfo, []int{0, 0}
}

// Protocol buffer representing a handle to a tensorflow resource. Handles are
// not valid across executions, but can be serialized back and forth from within
// a single run.
type RemoteFusedGraphExecuteInfo struct {
	// Definition of remote graph
	RemoteGraph *tensorflow10.GraphDef `protobuf:"bytes,1,opt,name=remote_graph,json=remoteGraph" json:"remote_graph,omitempty"`
	// Remote fused graph input node name
	GraphInputNodeName []string `protobuf:"bytes,2,rep,name=graph_input_node_name,json=graphInputNodeName" json:"graph_input_node_name,omitempty"`
	// Remote fused graph output node name
	GraphOutputNodeName []string `protobuf:"bytes,3,rep,name=graph_output_node_name,json=graphOutputNodeName" json:"graph_output_node_name,omitempty"`
	// Executor's name
	ExecutorName string `protobuf:"bytes,4,opt,name=executor_name,json=executorName,proto3" json:"executor_name,omitempty"`
	// Optional: Parameters given to the executor
	SerializedExecutorParameters []byte `protobuf:"bytes,5,opt,name=serialized_executor_parameters,json=serializedExecutorParameters,proto3" json:"serialized_executor_parameters,omitempty"`
	// Optional: Default graph input tensor shape used to allocate memory
	// before executing op
	DefaultGraphInputTensorShape []*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto `protobuf:"bytes,6,rep,name=default_graph_input_tensor_shape,json=defaultGraphInputTensorShape" json:"default_graph_input_tensor_shape,omitempty"`
	// Optional: Default graph input tensor shape used to allocate memory
	// before executing op
	// TODO(satok): Remote output tensor shape once shape information is stored
	// in NodeDef
	DefaultGraphOutputTensorShape []*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto `protobuf:"bytes,7,rep,name=default_graph_output_tensor_shape,json=defaultGraphOutputTensorShape" json:"default_graph_output_tensor_shape,omitempty"`
}

func (m *RemoteFusedGraphExecuteInfo) Reset()      { *m = RemoteFusedGraphExecuteInfo{} }
func (*RemoteFusedGraphExecuteInfo) ProtoMessage() {}
func (*RemoteFusedGraphExecuteInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorRemoteFusedGraphExecuteInfo, []int{0}
}

func (m *RemoteFusedGraphExecuteInfo) GetRemoteGraph() *tensorflow10.GraphDef {
	if m != nil {
		return m.RemoteGraph
	}
	return nil
}

func (m *RemoteFusedGraphExecuteInfo) GetGraphInputNodeName() []string {
	if m != nil {
		return m.GraphInputNodeName
	}
	return nil
}

func (m *RemoteFusedGraphExecuteInfo) GetGraphOutputNodeName() []string {
	if m != nil {
		return m.GraphOutputNodeName
	}
	return nil
}

func (m *RemoteFusedGraphExecuteInfo) GetExecutorName() string {
	if m != nil {
		return m.ExecutorName
	}
	return ""
}

func (m *RemoteFusedGraphExecuteInfo) GetSerializedExecutorParameters() []byte {
	if m != nil {
		return m.SerializedExecutorParameters
	}
	return nil
}

func (m *RemoteFusedGraphExecuteInfo) GetDefaultGraphInputTensorShape() []*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto {
	if m != nil {
		return m.DefaultGraphInputTensorShape
	}
	return nil
}

func (m *RemoteFusedGraphExecuteInfo) GetDefaultGraphOutputTensorShape() []*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto {
	if m != nil {
		return m.DefaultGraphOutputTensorShape
	}
	return nil
}

type RemoteFusedGraphExecuteInfo_TensorShapeTypeProto struct {
	Dtype tensorflow3.DataType          `protobuf:"varint,1,opt,name=dtype,proto3,enum=tensorflow.DataType" json:"dtype,omitempty"`
	Shape *tensorflow2.TensorShapeProto `protobuf:"bytes,2,opt,name=shape" json:"shape,omitempty"`
}

func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) Reset() {
	*m = RemoteFusedGraphExecuteInfo_TensorShapeTypeProto{}
}
func (*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) ProtoMessage() {}
func (*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRemoteFusedGraphExecuteInfo, []int{0, 0}
}

func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) GetDtype() tensorflow3.DataType {
	if m != nil {
		return m.Dtype
	}
	return tensorflow3.DT_INVALID
}

func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) GetShape() *tensorflow2.TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func init() {
	proto.RegisterType((*RemoteFusedGraphExecuteInfo)(nil), "tensorflow.RemoteFusedGraphExecuteInfo")
	proto.RegisterType((*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto)(nil), "tensorflow.RemoteFusedGraphExecuteInfo.TensorShapeTypeProto")
	proto.RegisterEnum("tensorflow.RemoteFusedGraphExecuteInfo_NodeType", RemoteFusedGraphExecuteInfo_NodeType_name, RemoteFusedGraphExecuteInfo_NodeType_value)
}
func (x RemoteFusedGraphExecuteInfo_NodeType) String() string {
	s, ok := RemoteFusedGraphExecuteInfo_NodeType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RemoteFusedGraphExecuteInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RemoteFusedGraphExecuteInfo)
	if !ok {
		that2, ok := that.(RemoteFusedGraphExecuteInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.RemoteGraph.Equal(that1.RemoteGraph) {
		return false
	}
	if len(this.GraphInputNodeName) != len(that1.GraphInputNodeName) {
		return false
	}
	for i := range this.GraphInputNodeName {
		if this.GraphInputNodeName[i] != that1.GraphInputNodeName[i] {
			return false
		}
	}
	if len(this.GraphOutputNodeName) != len(that1.GraphOutputNodeName) {
		return false
	}
	for i := range this.GraphOutputNodeName {
		if this.GraphOutputNodeName[i] != that1.GraphOutputNodeName[i] {
			return false
		}
	}
	if this.ExecutorName != that1.ExecutorName {
		return false
	}
	if !bytes.Equal(this.SerializedExecutorParameters, that1.SerializedExecutorParameters) {
		return false
	}
	if len(this.DefaultGraphInputTensorShape) != len(that1.DefaultGraphInputTensorShape) {
		return false
	}
	for i := range this.DefaultGraphInputTensorShape {
		if !this.DefaultGraphInputTensorShape[i].Equal(that1.DefaultGraphInputTensorShape[i]) {
			return false
		}
	}
	if len(this.DefaultGraphOutputTensorShape) != len(that1.DefaultGraphOutputTensorShape) {
		return false
	}
	for i := range this.DefaultGraphOutputTensorShape {
		if !this.DefaultGraphOutputTensorShape[i].Equal(that1.DefaultGraphOutputTensorShape[i]) {
			return false
		}
	}
	return true
}
func (this *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RemoteFusedGraphExecuteInfo_TensorShapeTypeProto)
	if !ok {
		that2, ok := that.(RemoteFusedGraphExecuteInfo_TensorShapeTypeProto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Dtype != that1.Dtype {
		return false
	}
	if !this.Shape.Equal(that1.Shape) {
		return false
	}
	return true
}
func (this *RemoteFusedGraphExecuteInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&tensorflow.RemoteFusedGraphExecuteInfo{")
	if this.RemoteGraph != nil {
		s = append(s, "RemoteGraph: "+fmt.Sprintf("%#v", this.RemoteGraph)+",\n")
	}
	s = append(s, "GraphInputNodeName: "+fmt.Sprintf("%#v", this.GraphInputNodeName)+",\n")
	s = append(s, "GraphOutputNodeName: "+fmt.Sprintf("%#v", this.GraphOutputNodeName)+",\n")
	s = append(s, "ExecutorName: "+fmt.Sprintf("%#v", this.ExecutorName)+",\n")
	s = append(s, "SerializedExecutorParameters: "+fmt.Sprintf("%#v", this.SerializedExecutorParameters)+",\n")
	if this.DefaultGraphInputTensorShape != nil {
		s = append(s, "DefaultGraphInputTensorShape: "+fmt.Sprintf("%#v", this.DefaultGraphInputTensorShape)+",\n")
	}
	if this.DefaultGraphOutputTensorShape != nil {
		s = append(s, "DefaultGraphOutputTensorShape: "+fmt.Sprintf("%#v", this.DefaultGraphOutputTensorShape)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow.RemoteFusedGraphExecuteInfo_TensorShapeTypeProto{")
	s = append(s, "Dtype: "+fmt.Sprintf("%#v", this.Dtype)+",\n")
	if this.Shape != nil {
		s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRemoteFusedGraphExecuteInfo(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RemoteFusedGraphExecuteInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoteFusedGraphExecuteInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RemoteGraph != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(m.RemoteGraph.Size()))
		n1, err := m.RemoteGraph.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.GraphInputNodeName) > 0 {
		for _, s := range m.GraphInputNodeName {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.GraphOutputNodeName) > 0 {
		for _, s := range m.GraphOutputNodeName {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ExecutorName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(len(m.ExecutorName)))
		i += copy(dAtA[i:], m.ExecutorName)
	}
	if len(m.SerializedExecutorParameters) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(len(m.SerializedExecutorParameters)))
		i += copy(dAtA[i:], m.SerializedExecutorParameters)
	}
	if len(m.DefaultGraphInputTensorShape) > 0 {
		for _, msg := range m.DefaultGraphInputTensorShape {
			dAtA[i] = 0x32
			i++
			i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DefaultGraphOutputTensorShape) > 0 {
		for _, msg := range m.DefaultGraphOutputTensorShape {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Dtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(m.Dtype))
	}
	if m.Shape != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRemoteFusedGraphExecuteInfo(dAtA, i, uint64(m.Shape.Size()))
		n2, err := m.Shape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeFixed64RemoteFusedGraphExecuteInfo(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32RemoteFusedGraphExecuteInfo(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRemoteFusedGraphExecuteInfo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RemoteFusedGraphExecuteInfo) Size() (n int) {
	var l int
	_ = l
	if m.RemoteGraph != nil {
		l = m.RemoteGraph.Size()
		n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
	}
	if len(m.GraphInputNodeName) > 0 {
		for _, s := range m.GraphInputNodeName {
			l = len(s)
			n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
		}
	}
	if len(m.GraphOutputNodeName) > 0 {
		for _, s := range m.GraphOutputNodeName {
			l = len(s)
			n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
		}
	}
	l = len(m.ExecutorName)
	if l > 0 {
		n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
	}
	l = len(m.SerializedExecutorParameters)
	if l > 0 {
		n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
	}
	if len(m.DefaultGraphInputTensorShape) > 0 {
		for _, e := range m.DefaultGraphInputTensorShape {
			l = e.Size()
			n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
		}
	}
	if len(m.DefaultGraphOutputTensorShape) > 0 {
		for _, e := range m.DefaultGraphOutputTensorShape {
			l = e.Size()
			n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
		}
	}
	return n
}

func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) Size() (n int) {
	var l int
	_ = l
	if m.Dtype != 0 {
		n += 1 + sovRemoteFusedGraphExecuteInfo(uint64(m.Dtype))
	}
	if m.Shape != nil {
		l = m.Shape.Size()
		n += 1 + l + sovRemoteFusedGraphExecuteInfo(uint64(l))
	}
	return n
}

func sovRemoteFusedGraphExecuteInfo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRemoteFusedGraphExecuteInfo(x uint64) (n int) {
	return sovRemoteFusedGraphExecuteInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RemoteFusedGraphExecuteInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoteFusedGraphExecuteInfo{`,
		`RemoteGraph:` + strings.Replace(fmt.Sprintf("%v", this.RemoteGraph), "GraphDef", "tensorflow10.GraphDef", 1) + `,`,
		`GraphInputNodeName:` + fmt.Sprintf("%v", this.GraphInputNodeName) + `,`,
		`GraphOutputNodeName:` + fmt.Sprintf("%v", this.GraphOutputNodeName) + `,`,
		`ExecutorName:` + fmt.Sprintf("%v", this.ExecutorName) + `,`,
		`SerializedExecutorParameters:` + fmt.Sprintf("%v", this.SerializedExecutorParameters) + `,`,
		`DefaultGraphInputTensorShape:` + strings.Replace(fmt.Sprintf("%v", this.DefaultGraphInputTensorShape), "RemoteFusedGraphExecuteInfo_TensorShapeTypeProto", "RemoteFusedGraphExecuteInfo_TensorShapeTypeProto", 1) + `,`,
		`DefaultGraphOutputTensorShape:` + strings.Replace(fmt.Sprintf("%v", this.DefaultGraphOutputTensorShape), "RemoteFusedGraphExecuteInfo_TensorShapeTypeProto", "RemoteFusedGraphExecuteInfo_TensorShapeTypeProto", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoteFusedGraphExecuteInfo_TensorShapeTypeProto{`,
		`Dtype:` + fmt.Sprintf("%v", this.Dtype) + `,`,
		`Shape:` + strings.Replace(fmt.Sprintf("%v", this.Shape), "TensorShapeProto", "tensorflow2.TensorShapeProto", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRemoteFusedGraphExecuteInfo(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RemoteFusedGraphExecuteInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemoteFusedGraphExecuteInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteFusedGraphExecuteInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteFusedGraphExecuteInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteGraph", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemoteGraph == nil {
				m.RemoteGraph = &tensorflow10.GraphDef{}
			}
			if err := m.RemoteGraph.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphInputNodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphInputNodeName = append(m.GraphInputNodeName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphOutputNodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GraphOutputNodeName = append(m.GraphOutputNodeName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedExecutorParameters", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerializedExecutorParameters = append(m.SerializedExecutorParameters[:0], dAtA[iNdEx:postIndex]...)
			if m.SerializedExecutorParameters == nil {
				m.SerializedExecutorParameters = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultGraphInputTensorShape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultGraphInputTensorShape = append(m.DefaultGraphInputTensorShape, &RemoteFusedGraphExecuteInfo_TensorShapeTypeProto{})
			if err := m.DefaultGraphInputTensorShape[len(m.DefaultGraphInputTensorShape)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultGraphOutputTensorShape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultGraphOutputTensorShape = append(m.DefaultGraphOutputTensorShape, &RemoteFusedGraphExecuteInfo_TensorShapeTypeProto{})
			if err := m.DefaultGraphOutputTensorShape[len(m.DefaultGraphOutputTensorShape)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRemoteFusedGraphExecuteInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoteFusedGraphExecuteInfo_TensorShapeTypeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemoteFusedGraphExecuteInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TensorShapeTypeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TensorShapeTypeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtype", wireType)
			}
			m.Dtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dtype |= (tensorflow3.DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shape == nil {
				m.Shape = &tensorflow2.TensorShapeProto{}
			}
			if err := m.Shape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRemoteFusedGraphExecuteInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRemoteFusedGraphExecuteInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRemoteFusedGraphExecuteInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRemoteFusedGraphExecuteInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRemoteFusedGraphExecuteInfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRemoteFusedGraphExecuteInfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRemoteFusedGraphExecuteInfo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRemoteFusedGraphExecuteInfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRemoteFusedGraphExecuteInfo   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/core/framework/remote_fused_graph_execute_info.proto", fileDescriptorRemoteFusedGraphExecuteInfo)
}

var fileDescriptorRemoteFusedGraphExecuteInfo = []byte{
	// 562 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xb1, 0x6f, 0xd3, 0x40,
	0x14, 0xc6, 0x73, 0x49, 0x13, 0xe8, 0x4b, 0x5a, 0xc2, 0x51, 0x50, 0x14, 0xc2, 0xc9, 0x14, 0x21,
	0x45, 0x08, 0x25, 0x22, 0x1d, 0x58, 0x58, 0x88, 0x9c, 0xa6, 0x59, 0x92, 0xc8, 0x4d, 0xe6, 0x93,
	0x5b, 0x9f, 0xdb, 0x88, 0xc4, 0x67, 0x9d, 0x6d, 0x4a, 0x99, 0x18, 0x10, 0x33, 0xff, 0x02, 0x1b,
	0x7f, 0x0a, 0x63, 0x47, 0x46, 0x62, 0x16, 0xc6, 0x8e, 0x8c, 0xe8, 0xee, 0x8c, 0xe3, 0x48, 0x34,
	0x13, 0xa3, 0xef, 0xfd, 0xbe, 0xe7, 0xef, 0x7d, 0xf7, 0x0e, 0x8e, 0x7c, 0xc1, 0x43, 0x7e, 0x12,
	0xb9, 0xed, 0x90, 0x79, 0x01, 0x17, 0xee, 0x9c, 0x5f, 0xb4, 0x4f, 0xb9, 0x60, 0x6d, 0x57, 0xd8,
	0x0b, 0x76, 0xc1, 0xc5, 0x9b, 0xb6, 0x60, 0x0b, 0x1e, 0x32, 0xea, 0x46, 0x01, 0x73, 0xe8, 0x99,
	0xb0, 0xfd, 0x73, 0xca, 0xde, 0xb1, 0xd3, 0x28, 0x64, 0x74, 0xe6, 0xb9, 0xbc, 0xa5, 0x5a, 0x60,
	0x58, 0x35, 0xa8, 0x3f, 0xbd, 0xb9, 0x99, 0xd2, 0x6b, 0x49, 0xfd, 0xf9, 0xcd, 0x98, 0xae, 0xd0,
	0xe0, 0xdc, 0xf6, 0x59, 0x42, 0x6f, 0x68, 0x1a, 0x5e, 0xfa, 0x2c, 0xd0, 0xd8, 0xfe, 0x97, 0x12,
	0x3c, 0xb4, 0x94, 0xe3, 0x43, 0x69, 0xb8, 0x2f, 0xff, 0xd7, 0xd3, 0x76, 0x07, 0x9e, 0xcb, 0xf1,
	0x4b, 0xa8, 0x24, 0x03, 0x29, 0x2b, 0x35, 0x64, 0xa0, 0x66, 0xb9, 0xb3, 0xd7, 0x5a, 0x75, 0x6f,
	0x29, 0x8d, 0xc9, 0x5c, 0xab, 0xac, 0x49, 0xf5, 0x8d, 0x5f, 0xc0, 0x7d, 0x3d, 0xfc, 0xcc, 0xf3,
	0xa3, 0x90, 0x7a, 0xdc, 0x61, 0xd4, 0xb3, 0x17, 0xac, 0x96, 0x37, 0x0a, 0xcd, 0x6d, 0x0b, 0xab,
	0xe2, 0x40, 0xd6, 0x86, 0xdc, 0x61, 0x43, 0x7b, 0xc1, 0xf0, 0x01, 0x3c, 0xd0, 0x12, 0x1e, 0x85,
	0xeb, 0x9a, 0x82, 0xd2, 0xdc, 0x53, 0xd5, 0x91, 0x2a, 0xa6, 0xa2, 0x27, 0xb0, 0xa3, 0xe3, 0xe5,
	0x42, 0xb3, 0x5b, 0x06, 0x6a, 0x6e, 0x5b, 0x95, 0xbf, 0x87, 0x0a, 0x32, 0x81, 0x04, 0x4c, 0xcc,
	0xec, 0xf9, 0xec, 0x3d, 0x73, 0x68, 0xca, 0xfb, 0xb6, 0xcc, 0x24, 0x64, 0x22, 0xa8, 0x15, 0x0d,
	0xd4, 0xac, 0x58, 0x8d, 0x15, 0xd5, 0x4b, 0xa0, 0x71, 0xca, 0xe0, 0x8f, 0x08, 0x0c, 0x87, 0xb9,
	0x76, 0x34, 0x0f, 0x69, 0x76, 0xb6, 0x6c, 0xfa, 0xb5, 0x92, 0x51, 0x68, 0x96, 0x3b, 0xaf, 0xb2,
	0x01, 0x6d, 0xc8, 0xb7, 0x35, 0x51, 0xd8, 0xb1, 0x94, 0x4e, 0x2e, 0x7d, 0x36, 0x96, 0x97, 0x62,
	0x35, 0x92, 0xbf, 0xf4, 0xd3, 0x8c, 0x32, 0x18, 0xfe, 0x84, 0xe0, 0xf1, 0xba, 0x8d, 0x24, 0xaf,
	0x35, 0x1f, 0xb7, 0xfe, 0x83, 0x8f, 0x47, 0x59, 0x1f, 0x3a, 0xf7, 0x0c, 0x57, 0x7f, 0x0b, 0x7b,
	0xff, 0x92, 0xe1, 0x67, 0x50, 0x74, 0xe4, 0x8e, 0xa9, 0x65, 0xd9, 0x5d, 0x5f, 0x16, 0xd3, 0x0e,
	0x6d, 0x49, 0x5a, 0x1a, 0xc1, 0x1d, 0x28, 0x6a, 0xbf, 0x79, 0xb5, 0x58, 0x8d, 0x2c, 0x9b, 0x69,
	0xae, 0xfd, 0x68, 0x74, 0xdf, 0x83, 0xdb, 0xf2, 0xfa, 0x65, 0x1b, 0x0c, 0x50, 0x9a, 0x0e, 0xa7,
	0xc7, 0x3d, 0xb3, 0x9a, 0xc3, 0x77, 0xa0, 0xdc, 0xb7, 0x5e, 0x8f, 0x8f, 0xe8, 0x60, 0x38, 0x9e,
	0x4e, 0xaa, 0x08, 0x57, 0xa1, 0xa2, 0x0f, 0x46, 0xd3, 0x89, 0x3c, 0xc9, 0xe3, 0x5d, 0x80, 0x43,
	0x49, 0xd3, 0xe1, 0xc8, 0xec, 0x55, 0x0b, 0x92, 0xe8, 0x8e, 0x2c, 0xb3, 0x67, 0x25, 0x9a, 0x2d,
	0x7c, 0x17, 0x76, 0x92, 0x93, 0x44, 0x54, 0xec, 0x2e, 0xae, 0x96, 0x24, 0xf7, 0x7d, 0x49, 0x72,
	0xd7, 0x4b, 0x82, 0x3e, 0xc4, 0x04, 0x7d, 0x8d, 0x09, 0xfa, 0x16, 0x13, 0x74, 0x15, 0x13, 0xf4,
	0x23, 0x26, 0xe8, 0x57, 0x4c, 0x72, 0xd7, 0x31, 0x41, 0x9f, 0x7f, 0x92, 0x1c, 0xd4, 0xb8, 0x38,
	0xcb, 0x4e, 0x91, 0xbe, 0xbb, 0xae, 0xb1, 0xe1, 0x02, 0xd4, 0x80, 0x63, 0xf4, 0x1b, 0xa1, 0x93,
	0x92, 0x7a, 0x99, 0x07, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x76, 0x36, 0x59, 0x4e, 0x6d, 0x04,
	0x00, 0x00,
}
