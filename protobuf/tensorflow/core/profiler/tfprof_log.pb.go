// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/core/profiler/tfprof_log.proto

/*
	Package tensorflow_tfprof is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/core/profiler/tfprof_log.proto

	It has these top-level messages:
		CodeDef
		OpLogEntry
		OpLogProto
*/
package tensorflow_tfprof

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// It specifies the Python callstack that creates an op.
type CodeDef struct {
	Traces []*CodeDef_Trace `protobuf:"bytes,1,rep,name=traces" json:"traces,omitempty"`
}

func (m *CodeDef) Reset()                    { *m = CodeDef{} }
func (*CodeDef) ProtoMessage()               {}
func (*CodeDef) Descriptor() ([]byte, []int) { return fileDescriptorTfprofLog, []int{0} }

func (m *CodeDef) GetTraces() []*CodeDef_Trace {
	if m != nil {
		return m.Traces
	}
	return nil
}

type CodeDef_Trace struct {
	File          string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Lineno        int32  `protobuf:"varint,2,opt,name=lineno,proto3" json:"lineno,omitempty"`
	Function      string `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
	Line          string `protobuf:"bytes,4,opt,name=line,proto3" json:"line,omitempty"`
	FuncStartLine int32  `protobuf:"varint,5,opt,name=func_start_line,json=funcStartLine,proto3" json:"func_start_line,omitempty"`
}

func (m *CodeDef_Trace) Reset()                    { *m = CodeDef_Trace{} }
func (*CodeDef_Trace) ProtoMessage()               {}
func (*CodeDef_Trace) Descriptor() ([]byte, []int) { return fileDescriptorTfprofLog, []int{0, 0} }

func (m *CodeDef_Trace) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *CodeDef_Trace) GetLineno() int32 {
	if m != nil {
		return m.Lineno
	}
	return 0
}

func (m *CodeDef_Trace) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

func (m *CodeDef_Trace) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

func (m *CodeDef_Trace) GetFuncStartLine() int32 {
	if m != nil {
		return m.FuncStartLine
	}
	return 0
}

type OpLogEntry struct {
	// op name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// float_ops is filled by tfprof Python API when called. It requires the
	// op has RegisterStatistics defined. Currently, Conv2D, MatMul, etc, are
	// implemented.
	FloatOps int64 `protobuf:"varint,2,opt,name=float_ops,json=floatOps,proto3" json:"float_ops,omitempty"`
	// User can define extra op type information for an op. This allows the user
	// to select a group of ops precisely using op_type as a key.
	Types []string `protobuf:"bytes,3,rep,name=types" json:"types,omitempty"`
	// Used to support tfprof "code" view.
	CodeDef *CodeDef `protobuf:"bytes,4,opt,name=code_def,json=codeDef" json:"code_def,omitempty"`
}

func (m *OpLogEntry) Reset()                    { *m = OpLogEntry{} }
func (*OpLogEntry) ProtoMessage()               {}
func (*OpLogEntry) Descriptor() ([]byte, []int) { return fileDescriptorTfprofLog, []int{1} }

func (m *OpLogEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OpLogEntry) GetFloatOps() int64 {
	if m != nil {
		return m.FloatOps
	}
	return 0
}

func (m *OpLogEntry) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *OpLogEntry) GetCodeDef() *CodeDef {
	if m != nil {
		return m.CodeDef
	}
	return nil
}

type OpLogProto struct {
	LogEntries []*OpLogEntry `protobuf:"bytes,1,rep,name=log_entries,json=logEntries" json:"log_entries,omitempty"`
}

func (m *OpLogProto) Reset()                    { *m = OpLogProto{} }
func (*OpLogProto) ProtoMessage()               {}
func (*OpLogProto) Descriptor() ([]byte, []int) { return fileDescriptorTfprofLog, []int{2} }

func (m *OpLogProto) GetLogEntries() []*OpLogEntry {
	if m != nil {
		return m.LogEntries
	}
	return nil
}

func init() {
	proto.RegisterType((*CodeDef)(nil), "tensorflow.tfprof.CodeDef")
	proto.RegisterType((*CodeDef_Trace)(nil), "tensorflow.tfprof.CodeDef.Trace")
	proto.RegisterType((*OpLogEntry)(nil), "tensorflow.tfprof.OpLogEntry")
	proto.RegisterType((*OpLogProto)(nil), "tensorflow.tfprof.OpLogProto")
}
func (this *CodeDef) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CodeDef)
	if !ok {
		that2, ok := that.(CodeDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Traces) != len(that1.Traces) {
		return false
	}
	for i := range this.Traces {
		if !this.Traces[i].Equal(that1.Traces[i]) {
			return false
		}
	}
	return true
}
func (this *CodeDef_Trace) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CodeDef_Trace)
	if !ok {
		that2, ok := that.(CodeDef_Trace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.File != that1.File {
		return false
	}
	if this.Lineno != that1.Lineno {
		return false
	}
	if this.Function != that1.Function {
		return false
	}
	if this.Line != that1.Line {
		return false
	}
	if this.FuncStartLine != that1.FuncStartLine {
		return false
	}
	return true
}
func (this *OpLogEntry) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpLogEntry)
	if !ok {
		that2, ok := that.(OpLogEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.FloatOps != that1.FloatOps {
		return false
	}
	if len(this.Types) != len(that1.Types) {
		return false
	}
	for i := range this.Types {
		if this.Types[i] != that1.Types[i] {
			return false
		}
	}
	if !this.CodeDef.Equal(that1.CodeDef) {
		return false
	}
	return true
}
func (this *OpLogProto) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OpLogProto)
	if !ok {
		that2, ok := that.(OpLogProto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.LogEntries) != len(that1.LogEntries) {
		return false
	}
	for i := range this.LogEntries {
		if !this.LogEntries[i].Equal(that1.LogEntries[i]) {
			return false
		}
	}
	return true
}
func (this *CodeDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow_tfprof.CodeDef{")
	if this.Traces != nil {
		s = append(s, "Traces: "+fmt.Sprintf("%#v", this.Traces)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CodeDef_Trace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&tensorflow_tfprof.CodeDef_Trace{")
	s = append(s, "File: "+fmt.Sprintf("%#v", this.File)+",\n")
	s = append(s, "Lineno: "+fmt.Sprintf("%#v", this.Lineno)+",\n")
	s = append(s, "Function: "+fmt.Sprintf("%#v", this.Function)+",\n")
	s = append(s, "Line: "+fmt.Sprintf("%#v", this.Line)+",\n")
	s = append(s, "FuncStartLine: "+fmt.Sprintf("%#v", this.FuncStartLine)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpLogEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tensorflow_tfprof.OpLogEntry{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "FloatOps: "+fmt.Sprintf("%#v", this.FloatOps)+",\n")
	s = append(s, "Types: "+fmt.Sprintf("%#v", this.Types)+",\n")
	if this.CodeDef != nil {
		s = append(s, "CodeDef: "+fmt.Sprintf("%#v", this.CodeDef)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpLogProto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow_tfprof.OpLogProto{")
	if this.LogEntries != nil {
		s = append(s, "LogEntries: "+fmt.Sprintf("%#v", this.LogEntries)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTfprofLog(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CodeDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodeDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Traces) > 0 {
		for _, msg := range m.Traces {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTfprofLog(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CodeDef_Trace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodeDef_Trace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.File) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTfprofLog(dAtA, i, uint64(len(m.File)))
		i += copy(dAtA[i:], m.File)
	}
	if m.Lineno != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTfprofLog(dAtA, i, uint64(m.Lineno))
	}
	if len(m.Function) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTfprofLog(dAtA, i, uint64(len(m.Function)))
		i += copy(dAtA[i:], m.Function)
	}
	if len(m.Line) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTfprofLog(dAtA, i, uint64(len(m.Line)))
		i += copy(dAtA[i:], m.Line)
	}
	if m.FuncStartLine != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTfprofLog(dAtA, i, uint64(m.FuncStartLine))
	}
	return i, nil
}

func (m *OpLogEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpLogEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTfprofLog(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.FloatOps != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTfprofLog(dAtA, i, uint64(m.FloatOps))
	}
	if len(m.Types) > 0 {
		for _, s := range m.Types {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.CodeDef != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTfprofLog(dAtA, i, uint64(m.CodeDef.Size()))
		n1, err := m.CodeDef.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *OpLogProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpLogProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LogEntries) > 0 {
		for _, msg := range m.LogEntries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTfprofLog(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64TfprofLog(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32TfprofLog(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTfprofLog(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CodeDef) Size() (n int) {
	var l int
	_ = l
	if len(m.Traces) > 0 {
		for _, e := range m.Traces {
			l = e.Size()
			n += 1 + l + sovTfprofLog(uint64(l))
		}
	}
	return n
}

func (m *CodeDef_Trace) Size() (n int) {
	var l int
	_ = l
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovTfprofLog(uint64(l))
	}
	if m.Lineno != 0 {
		n += 1 + sovTfprofLog(uint64(m.Lineno))
	}
	l = len(m.Function)
	if l > 0 {
		n += 1 + l + sovTfprofLog(uint64(l))
	}
	l = len(m.Line)
	if l > 0 {
		n += 1 + l + sovTfprofLog(uint64(l))
	}
	if m.FuncStartLine != 0 {
		n += 1 + sovTfprofLog(uint64(m.FuncStartLine))
	}
	return n
}

func (m *OpLogEntry) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTfprofLog(uint64(l))
	}
	if m.FloatOps != 0 {
		n += 1 + sovTfprofLog(uint64(m.FloatOps))
	}
	if len(m.Types) > 0 {
		for _, s := range m.Types {
			l = len(s)
			n += 1 + l + sovTfprofLog(uint64(l))
		}
	}
	if m.CodeDef != nil {
		l = m.CodeDef.Size()
		n += 1 + l + sovTfprofLog(uint64(l))
	}
	return n
}

func (m *OpLogProto) Size() (n int) {
	var l int
	_ = l
	if len(m.LogEntries) > 0 {
		for _, e := range m.LogEntries {
			l = e.Size()
			n += 1 + l + sovTfprofLog(uint64(l))
		}
	}
	return n
}

func sovTfprofLog(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTfprofLog(x uint64) (n int) {
	return sovTfprofLog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CodeDef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CodeDef{`,
		`Traces:` + strings.Replace(fmt.Sprintf("%v", this.Traces), "CodeDef_Trace", "CodeDef_Trace", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CodeDef_Trace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CodeDef_Trace{`,
		`File:` + fmt.Sprintf("%v", this.File) + `,`,
		`Lineno:` + fmt.Sprintf("%v", this.Lineno) + `,`,
		`Function:` + fmt.Sprintf("%v", this.Function) + `,`,
		`Line:` + fmt.Sprintf("%v", this.Line) + `,`,
		`FuncStartLine:` + fmt.Sprintf("%v", this.FuncStartLine) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpLogEntry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpLogEntry{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`FloatOps:` + fmt.Sprintf("%v", this.FloatOps) + `,`,
		`Types:` + fmt.Sprintf("%v", this.Types) + `,`,
		`CodeDef:` + strings.Replace(fmt.Sprintf("%v", this.CodeDef), "CodeDef", "CodeDef", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpLogProto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpLogProto{`,
		`LogEntries:` + strings.Replace(fmt.Sprintf("%v", this.LogEntries), "OpLogEntry", "OpLogEntry", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTfprofLog(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CodeDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTfprofLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodeDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodeDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Traces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTfprofLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Traces = append(m.Traces, &CodeDef_Trace{})
			if err := m.Traces[len(m.Traces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTfprofLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTfprofLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CodeDef_Trace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTfprofLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTfprofLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lineno", wireType)
			}
			m.Lineno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lineno |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTfprofLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Function = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTfprofLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Line = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuncStartLine", wireType)
			}
			m.FuncStartLine = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FuncStartLine |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTfprofLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTfprofLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpLogEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTfprofLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpLogEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpLogEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTfprofLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatOps", wireType)
			}
			m.FloatOps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FloatOps |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTfprofLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = append(m.Types, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeDef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTfprofLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CodeDef == nil {
				m.CodeDef = &CodeDef{}
			}
			if err := m.CodeDef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTfprofLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTfprofLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpLogProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTfprofLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpLogProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpLogProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTfprofLog
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogEntries = append(m.LogEntries, &OpLogEntry{})
			if err := m.LogEntries[len(m.LogEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTfprofLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTfprofLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTfprofLog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTfprofLog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTfprofLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTfprofLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTfprofLog
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTfprofLog
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTfprofLog(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTfprofLog = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTfprofLog   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/core/profiler/tfprof_log.proto", fileDescriptorTfprofLog)
}

var fileDescriptorTfprofLog = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xbd, 0x6a, 0xe3, 0x40,
	0x14, 0x85, 0x35, 0x2b, 0xcb, 0x3f, 0x63, 0x96, 0x65, 0x87, 0x65, 0x11, 0x5e, 0x76, 0x10, 0x2e,
	0x82, 0x8a, 0x20, 0x81, 0x43, 0x20, 0x55, 0x8a, 0xfc, 0x74, 0x06, 0x07, 0x25, 0xbd, 0x90, 0xe5,
	0x19, 0x23, 0x50, 0xe6, 0x8a, 0xd1, 0x98, 0xe0, 0x2e, 0x75, 0xd2, 0xe4, 0x31, 0xf2, 0x28, 0x29,
	0x9d, 0x2e, 0x65, 0xac, 0x34, 0x29, 0xfd, 0x08, 0x61, 0x46, 0xc2, 0x2e, 0x92, 0x74, 0xe7, 0x9e,
	0xfb, 0x71, 0xe6, 0x30, 0x17, 0x8f, 0x0a, 0x09, 0x0a, 0xa6, 0x0b, 0x1e, 0x2a, 0x26, 0x4a, 0x90,
	0x3c, 0x87, 0x9b, 0x30, 0x05, 0xc9, 0xc2, 0x42, 0x02, 0xcf, 0x72, 0x26, 0x43, 0xc5, 0xb5, 0x8c,
	0x73, 0x98, 0x07, 0x06, 0x26, 0xbf, 0x77, 0x68, 0x50, 0x2f, 0x87, 0xcf, 0x08, 0x77, 0x4e, 0x61,
	0xc6, 0xce, 0x18, 0x27, 0x47, 0xb8, 0xad, 0x64, 0x92, 0xb2, 0xd2, 0x45, 0x9e, 0xed, 0xf7, 0x47,
	0x5e, 0xf0, 0x89, 0x0f, 0x1a, 0x36, 0xb8, 0xd2, 0x60, 0xd4, 0xf0, 0x83, 0x7b, 0x84, 0x1d, 0xe3,
	0x10, 0x82, 0x5b, 0xfa, 0x71, 0x17, 0x79, 0xc8, 0xef, 0x45, 0x46, 0x93, 0xbf, 0xb8, 0x9d, 0x67,
	0x82, 0x09, 0x70, 0x7f, 0x78, 0xc8, 0x77, 0xa2, 0x66, 0x22, 0x03, 0xdc, 0xe5, 0x0b, 0x91, 0xaa,
	0x0c, 0x84, 0x6b, 0x1b, 0x7e, 0x3b, 0xeb, 0x1c, 0x4d, 0xb9, 0xad, 0x3a, 0x47, 0x6b, 0xb2, 0x87,
	0x7f, 0xe9, 0x7d, 0x5c, 0xaa, 0x44, 0xaa, 0xd8, 0xac, 0x1d, 0x13, 0xf8, 0x53, 0xdb, 0x97, 0xda,
	0x1d, 0x67, 0x82, 0x0d, 0xef, 0x10, 0xc6, 0x93, 0x62, 0x0c, 0xf3, 0x73, 0xa1, 0xe4, 0x52, 0x47,
	0x89, 0xe4, 0x7a, 0x5b, 0x49, 0x6b, 0xf2, 0x0f, 0xf7, 0x78, 0x0e, 0x89, 0x8a, 0xa1, 0x28, 0x4d,
	0x2b, 0x3b, 0xea, 0x1a, 0x63, 0x52, 0x94, 0xe4, 0x0f, 0x76, 0xd4, 0xb2, 0x60, 0xa5, 0x6b, 0x7b,
	0xb6, 0xdf, 0x8b, 0xea, 0x81, 0x1c, 0xe2, 0x6e, 0x0a, 0x33, 0x16, 0xcf, 0x18, 0x37, 0xad, 0xfa,
	0xa3, 0xc1, 0xf7, 0xff, 0x13, 0x75, 0xd2, 0x5a, 0x0c, 0xc7, 0x4d, 0x97, 0x0b, 0x73, 0x81, 0x63,
	0xdc, 0xcf, 0x61, 0x1e, 0x33, 0xa1, 0x64, 0xb6, 0xfd, 0xe7, 0xff, 0x5f, 0xe4, 0xec, 0xfa, 0x47,
	0x38, 0xaf, 0x55, 0xc6, 0xca, 0x93, 0xfd, 0xd5, 0x9a, 0x5a, 0x2f, 0x6b, 0x6a, 0x6d, 0xd6, 0x14,
	0xdd, 0x56, 0x14, 0x3d, 0x56, 0x14, 0x3d, 0x55, 0x14, 0xad, 0x2a, 0x8a, 0x5e, 0x2b, 0x8a, 0xde,
	0x2b, 0x6a, 0x6d, 0x2a, 0x8a, 0x1e, 0xde, 0xa8, 0x35, 0x6d, 0x9b, 0xb3, 0x1f, 0x7c, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x4e, 0x03, 0x94, 0xf2, 0x2c, 0x02, 0x00, 0x00,
}
