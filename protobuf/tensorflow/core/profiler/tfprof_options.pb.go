// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/core/profiler/tfprof_options.proto

/*
	Package tensorflow_tfprof is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/core/profiler/tfprof_options.proto

	It has these top-level messages:
		OptionsProto
		AdvisorOptionsProto
*/
package tensorflow_tfprof

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import fmt "fmt"
import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Refers to tfprof_options.h/cc for documentation.
// Only used to pass tfprof options from Python to C++.
type OptionsProto struct {
	MaxDepth               int64    `protobuf:"varint,1,opt,name=max_depth,json=maxDepth,proto3" json:"max_depth,omitempty"`
	MinBytes               int64    `protobuf:"varint,2,opt,name=min_bytes,json=minBytes,proto3" json:"min_bytes,omitempty"`
	MinPeakBytes           int64    `protobuf:"varint,19,opt,name=min_peak_bytes,json=minPeakBytes,proto3" json:"min_peak_bytes,omitempty"`
	MinResidualBytes       int64    `protobuf:"varint,20,opt,name=min_residual_bytes,json=minResidualBytes,proto3" json:"min_residual_bytes,omitempty"`
	MinOutputBytes         int64    `protobuf:"varint,21,opt,name=min_output_bytes,json=minOutputBytes,proto3" json:"min_output_bytes,omitempty"`
	MinMicros              int64    `protobuf:"varint,3,opt,name=min_micros,json=minMicros,proto3" json:"min_micros,omitempty"`
	MinAcceleratorMicros   int64    `protobuf:"varint,22,opt,name=min_accelerator_micros,json=minAcceleratorMicros,proto3" json:"min_accelerator_micros,omitempty"`
	MinCpuMicros           int64    `protobuf:"varint,23,opt,name=min_cpu_micros,json=minCpuMicros,proto3" json:"min_cpu_micros,omitempty"`
	MinParams              int64    `protobuf:"varint,4,opt,name=min_params,json=minParams,proto3" json:"min_params,omitempty"`
	MinFloatOps            int64    `protobuf:"varint,5,opt,name=min_float_ops,json=minFloatOps,proto3" json:"min_float_ops,omitempty"`
	MinOccurrence          int64    `protobuf:"varint,17,opt,name=min_occurrence,json=minOccurrence,proto3" json:"min_occurrence,omitempty"`
	Step                   int64    `protobuf:"varint,18,opt,name=step,proto3" json:"step,omitempty"`
	OrderBy                string   `protobuf:"bytes,7,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	AccountTypeRegexes     []string `protobuf:"bytes,8,rep,name=account_type_regexes,json=accountTypeRegexes" json:"account_type_regexes,omitempty"`
	StartNameRegexes       []string `protobuf:"bytes,9,rep,name=start_name_regexes,json=startNameRegexes" json:"start_name_regexes,omitempty"`
	TrimNameRegexes        []string `protobuf:"bytes,10,rep,name=trim_name_regexes,json=trimNameRegexes" json:"trim_name_regexes,omitempty"`
	ShowNameRegexes        []string `protobuf:"bytes,11,rep,name=show_name_regexes,json=showNameRegexes" json:"show_name_regexes,omitempty"`
	HideNameRegexes        []string `protobuf:"bytes,12,rep,name=hide_name_regexes,json=hideNameRegexes" json:"hide_name_regexes,omitempty"`
	AccountDisplayedOpOnly bool     `protobuf:"varint,13,opt,name=account_displayed_op_only,json=accountDisplayedOpOnly,proto3" json:"account_displayed_op_only,omitempty"`
	Select                 []string `protobuf:"bytes,14,rep,name=select" json:"select,omitempty"`
	Output                 string   `protobuf:"bytes,15,opt,name=output,proto3" json:"output,omitempty"`
	DumpToFile             string   `protobuf:"bytes,16,opt,name=dump_to_file,json=dumpToFile,proto3" json:"dump_to_file,omitempty"`
}

func (m *OptionsProto) Reset()                    { *m = OptionsProto{} }
func (*OptionsProto) ProtoMessage()               {}
func (*OptionsProto) Descriptor() ([]byte, []int) { return fileDescriptorTfprofOptions, []int{0} }

func (m *OptionsProto) GetMaxDepth() int64 {
	if m != nil {
		return m.MaxDepth
	}
	return 0
}

func (m *OptionsProto) GetMinBytes() int64 {
	if m != nil {
		return m.MinBytes
	}
	return 0
}

func (m *OptionsProto) GetMinPeakBytes() int64 {
	if m != nil {
		return m.MinPeakBytes
	}
	return 0
}

func (m *OptionsProto) GetMinResidualBytes() int64 {
	if m != nil {
		return m.MinResidualBytes
	}
	return 0
}

func (m *OptionsProto) GetMinOutputBytes() int64 {
	if m != nil {
		return m.MinOutputBytes
	}
	return 0
}

func (m *OptionsProto) GetMinMicros() int64 {
	if m != nil {
		return m.MinMicros
	}
	return 0
}

func (m *OptionsProto) GetMinAcceleratorMicros() int64 {
	if m != nil {
		return m.MinAcceleratorMicros
	}
	return 0
}

func (m *OptionsProto) GetMinCpuMicros() int64 {
	if m != nil {
		return m.MinCpuMicros
	}
	return 0
}

func (m *OptionsProto) GetMinParams() int64 {
	if m != nil {
		return m.MinParams
	}
	return 0
}

func (m *OptionsProto) GetMinFloatOps() int64 {
	if m != nil {
		return m.MinFloatOps
	}
	return 0
}

func (m *OptionsProto) GetMinOccurrence() int64 {
	if m != nil {
		return m.MinOccurrence
	}
	return 0
}

func (m *OptionsProto) GetStep() int64 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *OptionsProto) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func (m *OptionsProto) GetAccountTypeRegexes() []string {
	if m != nil {
		return m.AccountTypeRegexes
	}
	return nil
}

func (m *OptionsProto) GetStartNameRegexes() []string {
	if m != nil {
		return m.StartNameRegexes
	}
	return nil
}

func (m *OptionsProto) GetTrimNameRegexes() []string {
	if m != nil {
		return m.TrimNameRegexes
	}
	return nil
}

func (m *OptionsProto) GetShowNameRegexes() []string {
	if m != nil {
		return m.ShowNameRegexes
	}
	return nil
}

func (m *OptionsProto) GetHideNameRegexes() []string {
	if m != nil {
		return m.HideNameRegexes
	}
	return nil
}

func (m *OptionsProto) GetAccountDisplayedOpOnly() bool {
	if m != nil {
		return m.AccountDisplayedOpOnly
	}
	return false
}

func (m *OptionsProto) GetSelect() []string {
	if m != nil {
		return m.Select
	}
	return nil
}

func (m *OptionsProto) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *OptionsProto) GetDumpToFile() string {
	if m != nil {
		return m.DumpToFile
	}
	return ""
}

type AdvisorOptionsProto struct {
	// checker name -> a dict of key-value options.
	Checkers map[string]*AdvisorOptionsProto_CheckerOption `protobuf:"bytes,1,rep,name=checkers" json:"checkers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AdvisorOptionsProto) Reset()                    { *m = AdvisorOptionsProto{} }
func (*AdvisorOptionsProto) ProtoMessage()               {}
func (*AdvisorOptionsProto) Descriptor() ([]byte, []int) { return fileDescriptorTfprofOptions, []int{1} }

func (m *AdvisorOptionsProto) GetCheckers() map[string]*AdvisorOptionsProto_CheckerOption {
	if m != nil {
		return m.Checkers
	}
	return nil
}

type AdvisorOptionsProto_CheckerOption struct {
	Options map[string]string `protobuf:"bytes,1,rep,name=options" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *AdvisorOptionsProto_CheckerOption) Reset()      { *m = AdvisorOptionsProto_CheckerOption{} }
func (*AdvisorOptionsProto_CheckerOption) ProtoMessage() {}
func (*AdvisorOptionsProto_CheckerOption) Descriptor() ([]byte, []int) {
	return fileDescriptorTfprofOptions, []int{1, 1}
}

func (m *AdvisorOptionsProto_CheckerOption) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

func init() {
	proto.RegisterType((*OptionsProto)(nil), "tensorflow.tfprof.OptionsProto")
	proto.RegisterType((*AdvisorOptionsProto)(nil), "tensorflow.tfprof.AdvisorOptionsProto")
	proto.RegisterType((*AdvisorOptionsProto_CheckerOption)(nil), "tensorflow.tfprof.AdvisorOptionsProto.CheckerOption")
}
func (this *OptionsProto) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OptionsProto)
	if !ok {
		that2, ok := that.(OptionsProto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MaxDepth != that1.MaxDepth {
		return false
	}
	if this.MinBytes != that1.MinBytes {
		return false
	}
	if this.MinPeakBytes != that1.MinPeakBytes {
		return false
	}
	if this.MinResidualBytes != that1.MinResidualBytes {
		return false
	}
	if this.MinOutputBytes != that1.MinOutputBytes {
		return false
	}
	if this.MinMicros != that1.MinMicros {
		return false
	}
	if this.MinAcceleratorMicros != that1.MinAcceleratorMicros {
		return false
	}
	if this.MinCpuMicros != that1.MinCpuMicros {
		return false
	}
	if this.MinParams != that1.MinParams {
		return false
	}
	if this.MinFloatOps != that1.MinFloatOps {
		return false
	}
	if this.MinOccurrence != that1.MinOccurrence {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	if this.OrderBy != that1.OrderBy {
		return false
	}
	if len(this.AccountTypeRegexes) != len(that1.AccountTypeRegexes) {
		return false
	}
	for i := range this.AccountTypeRegexes {
		if this.AccountTypeRegexes[i] != that1.AccountTypeRegexes[i] {
			return false
		}
	}
	if len(this.StartNameRegexes) != len(that1.StartNameRegexes) {
		return false
	}
	for i := range this.StartNameRegexes {
		if this.StartNameRegexes[i] != that1.StartNameRegexes[i] {
			return false
		}
	}
	if len(this.TrimNameRegexes) != len(that1.TrimNameRegexes) {
		return false
	}
	for i := range this.TrimNameRegexes {
		if this.TrimNameRegexes[i] != that1.TrimNameRegexes[i] {
			return false
		}
	}
	if len(this.ShowNameRegexes) != len(that1.ShowNameRegexes) {
		return false
	}
	for i := range this.ShowNameRegexes {
		if this.ShowNameRegexes[i] != that1.ShowNameRegexes[i] {
			return false
		}
	}
	if len(this.HideNameRegexes) != len(that1.HideNameRegexes) {
		return false
	}
	for i := range this.HideNameRegexes {
		if this.HideNameRegexes[i] != that1.HideNameRegexes[i] {
			return false
		}
	}
	if this.AccountDisplayedOpOnly != that1.AccountDisplayedOpOnly {
		return false
	}
	if len(this.Select) != len(that1.Select) {
		return false
	}
	for i := range this.Select {
		if this.Select[i] != that1.Select[i] {
			return false
		}
	}
	if this.Output != that1.Output {
		return false
	}
	if this.DumpToFile != that1.DumpToFile {
		return false
	}
	return true
}
func (this *AdvisorOptionsProto) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AdvisorOptionsProto)
	if !ok {
		that2, ok := that.(AdvisorOptionsProto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Checkers) != len(that1.Checkers) {
		return false
	}
	for i := range this.Checkers {
		if !this.Checkers[i].Equal(that1.Checkers[i]) {
			return false
		}
	}
	return true
}
func (this *AdvisorOptionsProto_CheckerOption) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AdvisorOptionsProto_CheckerOption)
	if !ok {
		that2, ok := that.(AdvisorOptionsProto_CheckerOption)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Options) != len(that1.Options) {
		return false
	}
	for i := range this.Options {
		if this.Options[i] != that1.Options[i] {
			return false
		}
	}
	return true
}
func (this *OptionsProto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 26)
	s = append(s, "&tensorflow_tfprof.OptionsProto{")
	s = append(s, "MaxDepth: "+fmt.Sprintf("%#v", this.MaxDepth)+",\n")
	s = append(s, "MinBytes: "+fmt.Sprintf("%#v", this.MinBytes)+",\n")
	s = append(s, "MinPeakBytes: "+fmt.Sprintf("%#v", this.MinPeakBytes)+",\n")
	s = append(s, "MinResidualBytes: "+fmt.Sprintf("%#v", this.MinResidualBytes)+",\n")
	s = append(s, "MinOutputBytes: "+fmt.Sprintf("%#v", this.MinOutputBytes)+",\n")
	s = append(s, "MinMicros: "+fmt.Sprintf("%#v", this.MinMicros)+",\n")
	s = append(s, "MinAcceleratorMicros: "+fmt.Sprintf("%#v", this.MinAcceleratorMicros)+",\n")
	s = append(s, "MinCpuMicros: "+fmt.Sprintf("%#v", this.MinCpuMicros)+",\n")
	s = append(s, "MinParams: "+fmt.Sprintf("%#v", this.MinParams)+",\n")
	s = append(s, "MinFloatOps: "+fmt.Sprintf("%#v", this.MinFloatOps)+",\n")
	s = append(s, "MinOccurrence: "+fmt.Sprintf("%#v", this.MinOccurrence)+",\n")
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	s = append(s, "OrderBy: "+fmt.Sprintf("%#v", this.OrderBy)+",\n")
	s = append(s, "AccountTypeRegexes: "+fmt.Sprintf("%#v", this.AccountTypeRegexes)+",\n")
	s = append(s, "StartNameRegexes: "+fmt.Sprintf("%#v", this.StartNameRegexes)+",\n")
	s = append(s, "TrimNameRegexes: "+fmt.Sprintf("%#v", this.TrimNameRegexes)+",\n")
	s = append(s, "ShowNameRegexes: "+fmt.Sprintf("%#v", this.ShowNameRegexes)+",\n")
	s = append(s, "HideNameRegexes: "+fmt.Sprintf("%#v", this.HideNameRegexes)+",\n")
	s = append(s, "AccountDisplayedOpOnly: "+fmt.Sprintf("%#v", this.AccountDisplayedOpOnly)+",\n")
	s = append(s, "Select: "+fmt.Sprintf("%#v", this.Select)+",\n")
	s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	s = append(s, "DumpToFile: "+fmt.Sprintf("%#v", this.DumpToFile)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdvisorOptionsProto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow_tfprof.AdvisorOptionsProto{")
	keysForCheckers := make([]string, 0, len(this.Checkers))
	for k, _ := range this.Checkers {
		keysForCheckers = append(keysForCheckers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForCheckers)
	mapStringForCheckers := "map[string]*AdvisorOptionsProto_CheckerOption{"
	for _, k := range keysForCheckers {
		mapStringForCheckers += fmt.Sprintf("%#v: %#v,", k, this.Checkers[k])
	}
	mapStringForCheckers += "}"
	if this.Checkers != nil {
		s = append(s, "Checkers: "+mapStringForCheckers+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdvisorOptionsProto_CheckerOption) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow_tfprof.AdvisorOptionsProto_CheckerOption{")
	keysForOptions := make([]string, 0, len(this.Options))
	for k, _ := range this.Options {
		keysForOptions = append(keysForOptions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
	mapStringForOptions := "map[string]string{"
	for _, k := range keysForOptions {
		mapStringForOptions += fmt.Sprintf("%#v: %#v,", k, this.Options[k])
	}
	mapStringForOptions += "}"
	if this.Options != nil {
		s = append(s, "Options: "+mapStringForOptions+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTfprofOptions(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *OptionsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OptionsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxDepth != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTfprofOptions(dAtA, i, uint64(m.MaxDepth))
	}
	if m.MinBytes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTfprofOptions(dAtA, i, uint64(m.MinBytes))
	}
	if m.MinMicros != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTfprofOptions(dAtA, i, uint64(m.MinMicros))
	}
	if m.MinParams != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTfprofOptions(dAtA, i, uint64(m.MinParams))
	}
	if m.MinFloatOps != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTfprofOptions(dAtA, i, uint64(m.MinFloatOps))
	}
	if len(m.OrderBy) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTfprofOptions(dAtA, i, uint64(len(m.OrderBy)))
		i += copy(dAtA[i:], m.OrderBy)
	}
	if len(m.AccountTypeRegexes) > 0 {
		for _, s := range m.AccountTypeRegexes {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.StartNameRegexes) > 0 {
		for _, s := range m.StartNameRegexes {
			dAtA[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.TrimNameRegexes) > 0 {
		for _, s := range m.TrimNameRegexes {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ShowNameRegexes) > 0 {
		for _, s := range m.ShowNameRegexes {
			dAtA[i] = 0x5a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.HideNameRegexes) > 0 {
		for _, s := range m.HideNameRegexes {
			dAtA[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.AccountDisplayedOpOnly {
		dAtA[i] = 0x68
		i++
		if m.AccountDisplayedOpOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Select) > 0 {
		for _, s := range m.Select {
			dAtA[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Output) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTfprofOptions(dAtA, i, uint64(len(m.Output)))
		i += copy(dAtA[i:], m.Output)
	}
	if len(m.DumpToFile) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTfprofOptions(dAtA, i, uint64(len(m.DumpToFile)))
		i += copy(dAtA[i:], m.DumpToFile)
	}
	if m.MinOccurrence != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTfprofOptions(dAtA, i, uint64(m.MinOccurrence))
	}
	if m.Step != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTfprofOptions(dAtA, i, uint64(m.Step))
	}
	if m.MinPeakBytes != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTfprofOptions(dAtA, i, uint64(m.MinPeakBytes))
	}
	if m.MinResidualBytes != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTfprofOptions(dAtA, i, uint64(m.MinResidualBytes))
	}
	if m.MinOutputBytes != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTfprofOptions(dAtA, i, uint64(m.MinOutputBytes))
	}
	if m.MinAcceleratorMicros != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTfprofOptions(dAtA, i, uint64(m.MinAcceleratorMicros))
	}
	if m.MinCpuMicros != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTfprofOptions(dAtA, i, uint64(m.MinCpuMicros))
	}
	return i, nil
}

func (m *AdvisorOptionsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvisorOptionsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Checkers) > 0 {
		for k, _ := range m.Checkers {
			dAtA[i] = 0xa
			i++
			v := m.Checkers[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTfprofOptions(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTfprofOptions(uint64(len(k))) + msgSize
			i = encodeVarintTfprofOptions(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTfprofOptions(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTfprofOptions(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *AdvisorOptionsProto_CheckerOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvisorOptionsProto_CheckerOption) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		for k, _ := range m.Options {
			dAtA[i] = 0xa
			i++
			v := m.Options[k]
			mapSize := 1 + len(k) + sovTfprofOptions(uint64(len(k))) + 1 + len(v) + sovTfprofOptions(uint64(len(v)))
			i = encodeVarintTfprofOptions(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTfprofOptions(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTfprofOptions(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func encodeFixed64TfprofOptions(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32TfprofOptions(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTfprofOptions(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OptionsProto) Size() (n int) {
	var l int
	_ = l
	if m.MaxDepth != 0 {
		n += 1 + sovTfprofOptions(uint64(m.MaxDepth))
	}
	if m.MinBytes != 0 {
		n += 1 + sovTfprofOptions(uint64(m.MinBytes))
	}
	if m.MinMicros != 0 {
		n += 1 + sovTfprofOptions(uint64(m.MinMicros))
	}
	if m.MinParams != 0 {
		n += 1 + sovTfprofOptions(uint64(m.MinParams))
	}
	if m.MinFloatOps != 0 {
		n += 1 + sovTfprofOptions(uint64(m.MinFloatOps))
	}
	l = len(m.OrderBy)
	if l > 0 {
		n += 1 + l + sovTfprofOptions(uint64(l))
	}
	if len(m.AccountTypeRegexes) > 0 {
		for _, s := range m.AccountTypeRegexes {
			l = len(s)
			n += 1 + l + sovTfprofOptions(uint64(l))
		}
	}
	if len(m.StartNameRegexes) > 0 {
		for _, s := range m.StartNameRegexes {
			l = len(s)
			n += 1 + l + sovTfprofOptions(uint64(l))
		}
	}
	if len(m.TrimNameRegexes) > 0 {
		for _, s := range m.TrimNameRegexes {
			l = len(s)
			n += 1 + l + sovTfprofOptions(uint64(l))
		}
	}
	if len(m.ShowNameRegexes) > 0 {
		for _, s := range m.ShowNameRegexes {
			l = len(s)
			n += 1 + l + sovTfprofOptions(uint64(l))
		}
	}
	if len(m.HideNameRegexes) > 0 {
		for _, s := range m.HideNameRegexes {
			l = len(s)
			n += 1 + l + sovTfprofOptions(uint64(l))
		}
	}
	if m.AccountDisplayedOpOnly {
		n += 2
	}
	if len(m.Select) > 0 {
		for _, s := range m.Select {
			l = len(s)
			n += 1 + l + sovTfprofOptions(uint64(l))
		}
	}
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovTfprofOptions(uint64(l))
	}
	l = len(m.DumpToFile)
	if l > 0 {
		n += 2 + l + sovTfprofOptions(uint64(l))
	}
	if m.MinOccurrence != 0 {
		n += 2 + sovTfprofOptions(uint64(m.MinOccurrence))
	}
	if m.Step != 0 {
		n += 2 + sovTfprofOptions(uint64(m.Step))
	}
	if m.MinPeakBytes != 0 {
		n += 2 + sovTfprofOptions(uint64(m.MinPeakBytes))
	}
	if m.MinResidualBytes != 0 {
		n += 2 + sovTfprofOptions(uint64(m.MinResidualBytes))
	}
	if m.MinOutputBytes != 0 {
		n += 2 + sovTfprofOptions(uint64(m.MinOutputBytes))
	}
	if m.MinAcceleratorMicros != 0 {
		n += 2 + sovTfprofOptions(uint64(m.MinAcceleratorMicros))
	}
	if m.MinCpuMicros != 0 {
		n += 2 + sovTfprofOptions(uint64(m.MinCpuMicros))
	}
	return n
}

func (m *AdvisorOptionsProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Checkers) > 0 {
		for k, v := range m.Checkers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTfprofOptions(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTfprofOptions(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTfprofOptions(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AdvisorOptionsProto_CheckerOption) Size() (n int) {
	var l int
	_ = l
	if len(m.Options) > 0 {
		for k, v := range m.Options {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTfprofOptions(uint64(len(k))) + 1 + len(v) + sovTfprofOptions(uint64(len(v)))
			n += mapEntrySize + 1 + sovTfprofOptions(uint64(mapEntrySize))
		}
	}
	return n
}

func sovTfprofOptions(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTfprofOptions(x uint64) (n int) {
	return sovTfprofOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *OptionsProto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OptionsProto{`,
		`MaxDepth:` + fmt.Sprintf("%v", this.MaxDepth) + `,`,
		`MinBytes:` + fmt.Sprintf("%v", this.MinBytes) + `,`,
		`MinMicros:` + fmt.Sprintf("%v", this.MinMicros) + `,`,
		`MinParams:` + fmt.Sprintf("%v", this.MinParams) + `,`,
		`MinFloatOps:` + fmt.Sprintf("%v", this.MinFloatOps) + `,`,
		`OrderBy:` + fmt.Sprintf("%v", this.OrderBy) + `,`,
		`AccountTypeRegexes:` + fmt.Sprintf("%v", this.AccountTypeRegexes) + `,`,
		`StartNameRegexes:` + fmt.Sprintf("%v", this.StartNameRegexes) + `,`,
		`TrimNameRegexes:` + fmt.Sprintf("%v", this.TrimNameRegexes) + `,`,
		`ShowNameRegexes:` + fmt.Sprintf("%v", this.ShowNameRegexes) + `,`,
		`HideNameRegexes:` + fmt.Sprintf("%v", this.HideNameRegexes) + `,`,
		`AccountDisplayedOpOnly:` + fmt.Sprintf("%v", this.AccountDisplayedOpOnly) + `,`,
		`Select:` + fmt.Sprintf("%v", this.Select) + `,`,
		`Output:` + fmt.Sprintf("%v", this.Output) + `,`,
		`DumpToFile:` + fmt.Sprintf("%v", this.DumpToFile) + `,`,
		`MinOccurrence:` + fmt.Sprintf("%v", this.MinOccurrence) + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`MinPeakBytes:` + fmt.Sprintf("%v", this.MinPeakBytes) + `,`,
		`MinResidualBytes:` + fmt.Sprintf("%v", this.MinResidualBytes) + `,`,
		`MinOutputBytes:` + fmt.Sprintf("%v", this.MinOutputBytes) + `,`,
		`MinAcceleratorMicros:` + fmt.Sprintf("%v", this.MinAcceleratorMicros) + `,`,
		`MinCpuMicros:` + fmt.Sprintf("%v", this.MinCpuMicros) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvisorOptionsProto) String() string {
	if this == nil {
		return "nil"
	}
	keysForCheckers := make([]string, 0, len(this.Checkers))
	for k, _ := range this.Checkers {
		keysForCheckers = append(keysForCheckers, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForCheckers)
	mapStringForCheckers := "map[string]*AdvisorOptionsProto_CheckerOption{"
	for _, k := range keysForCheckers {
		mapStringForCheckers += fmt.Sprintf("%v: %v,", k, this.Checkers[k])
	}
	mapStringForCheckers += "}"
	s := strings.Join([]string{`&AdvisorOptionsProto{`,
		`Checkers:` + mapStringForCheckers + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvisorOptionsProto_CheckerOption) String() string {
	if this == nil {
		return "nil"
	}
	keysForOptions := make([]string, 0, len(this.Options))
	for k, _ := range this.Options {
		keysForOptions = append(keysForOptions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForOptions)
	mapStringForOptions := "map[string]string{"
	for _, k := range keysForOptions {
		mapStringForOptions += fmt.Sprintf("%v: %v,", k, this.Options[k])
	}
	mapStringForOptions += "}"
	s := strings.Join([]string{`&AdvisorOptionsProto_CheckerOption{`,
		`Options:` + mapStringForOptions + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTfprofOptions(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *OptionsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTfprofOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OptionsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OptionsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDepth", wireType)
			}
			m.MaxDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDepth |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBytes", wireType)
			}
			m.MinBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinBytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinMicros", wireType)
			}
			m.MinMicros = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinMicros |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinParams", wireType)
			}
			m.MinParams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinParams |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinFloatOps", wireType)
			}
			m.MinFloatOps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinFloatOps |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTfprofOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountTypeRegexes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTfprofOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountTypeRegexes = append(m.AccountTypeRegexes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartNameRegexes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTfprofOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartNameRegexes = append(m.StartNameRegexes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrimNameRegexes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTfprofOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrimNameRegexes = append(m.TrimNameRegexes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowNameRegexes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTfprofOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShowNameRegexes = append(m.ShowNameRegexes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HideNameRegexes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTfprofOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HideNameRegexes = append(m.HideNameRegexes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountDisplayedOpOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AccountDisplayedOpOnly = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Select", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTfprofOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Select = append(m.Select, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTfprofOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DumpToFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTfprofOptions
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DumpToFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOccurrence", wireType)
			}
			m.MinOccurrence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinOccurrence |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPeakBytes", wireType)
			}
			m.MinPeakBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinPeakBytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinResidualBytes", wireType)
			}
			m.MinResidualBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinResidualBytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOutputBytes", wireType)
			}
			m.MinOutputBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinOutputBytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAcceleratorMicros", wireType)
			}
			m.MinAcceleratorMicros = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinAcceleratorMicros |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCpuMicros", wireType)
			}
			m.MinCpuMicros = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCpuMicros |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTfprofOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTfprofOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvisorOptionsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTfprofOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvisorOptionsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvisorOptionsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTfprofOptions
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Checkers == nil {
				m.Checkers = make(map[string]*AdvisorOptionsProto_CheckerOption)
			}
			var mapkey string
			var mapvalue *AdvisorOptionsProto_CheckerOption
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTfprofOptions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTfprofOptions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTfprofOptions
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTfprofOptions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTfprofOptions
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTfprofOptions
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AdvisorOptionsProto_CheckerOption{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTfprofOptions(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTfprofOptions
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Checkers[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTfprofOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTfprofOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvisorOptionsProto_CheckerOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTfprofOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckerOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckerOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTfprofOptions
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTfprofOptions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTfprofOptions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTfprofOptions
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTfprofOptions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTfprofOptions
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTfprofOptions(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTfprofOptions
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Options[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTfprofOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTfprofOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTfprofOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTfprofOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTfprofOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTfprofOptions
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTfprofOptions
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTfprofOptions(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTfprofOptions = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTfprofOptions   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/core/profiler/tfprof_options.proto", fileDescriptorTfprofOptions)
}

var fileDescriptorTfprofOptions = []byte{
	// 702 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcd, 0x6e, 0x13, 0x3b,
	0x14, 0x80, 0x33, 0x4d, 0x7f, 0x12, 0x37, 0x6d, 0x53, 0x37, 0x37, 0x77, 0xda, 0xab, 0x3b, 0x8a,
	0xaa, 0x7b, 0xa5, 0x08, 0x55, 0x09, 0x82, 0x0a, 0x41, 0x77, 0xfd, 0xa1, 0x0b, 0x24, 0x48, 0x35,
	0xea, 0x8e, 0xc5, 0xc8, 0x99, 0x39, 0x21, 0xa3, 0xcc, 0x8c, 0x8d, 0xed, 0x69, 0x3b, 0x3b, 0x36,
	0xec, 0x79, 0x8c, 0x3e, 0x0a, 0x12, 0x9b, 0x2e, 0x59, 0xd2, 0xb0, 0x61, 0xd9, 0x47, 0x40, 0xfe,
	0x49, 0xda, 0x14, 0x58, 0xc0, 0x6e, 0x7c, 0xbe, 0xcf, 0xf6, 0x39, 0xe3, 0x63, 0xa3, 0x27, 0x8c,
	0x53, 0x49, 0xfb, 0xf9, 0xa0, 0x2b, 0x21, 0x13, 0x94, 0x0f, 0x12, 0x7a, 0xde, 0x0d, 0x29, 0x87,
	0x2e, 0xe3, 0x74, 0x10, 0x27, 0xc0, 0xbb, 0x72, 0xa0, 0x3e, 0x03, 0xca, 0x64, 0x4c, 0x33, 0xd1,
	0xd1, 0x13, 0xf0, 0xfa, 0xad, 0xde, 0x31, 0xc2, 0xf6, 0xa7, 0x45, 0x54, 0xeb, 0x19, 0xe9, 0x44,
	0x3b, 0xff, 0xa0, 0x6a, 0x4a, 0x2e, 0x82, 0x08, 0x98, 0x1c, 0xba, 0x4e, 0xcb, 0x69, 0x97, 0xfd,
	0x4a, 0x4a, 0x2e, 0x8e, 0xd4, 0x58, 0xc3, 0x38, 0x0b, 0xfa, 0x85, 0x04, 0xe1, 0xce, 0x59, 0x18,
	0x67, 0x07, 0x6a, 0x8c, 0xff, 0x45, 0x48, 0xc1, 0x34, 0x0e, 0x39, 0x15, 0x6e, 0x59, 0x53, 0xa5,
	0xbf, 0xd4, 0x81, 0x09, 0x66, 0x84, 0x93, 0x54, 0xb8, 0xf3, 0x53, 0x7c, 0xa2, 0x03, 0x78, 0x1b,
	0xad, 0x28, 0x3c, 0x48, 0x28, 0x91, 0x01, 0x65, 0xc2, 0x5d, 0xd0, 0xc6, 0x72, 0x1a, 0x67, 0xc7,
	0x2a, 0xd6, 0x63, 0x02, 0x6f, 0xa2, 0x0a, 0xe5, 0x11, 0xf0, 0xa0, 0x5f, 0xb8, 0x4b, 0x2d, 0xa7,
	0x5d, 0xf5, 0x97, 0xf4, 0xf8, 0xa0, 0xc0, 0x0f, 0x51, 0x83, 0x84, 0x21, 0xcd, 0x33, 0x19, 0xc8,
	0x82, 0x41, 0xc0, 0xe1, 0x0d, 0x5c, 0x80, 0x70, 0x2b, 0xad, 0x72, 0xbb, 0xea, 0x63, 0xcb, 0x4e,
	0x0b, 0x06, 0xbe, 0x21, 0x78, 0x07, 0x61, 0x21, 0x09, 0x97, 0x41, 0x46, 0xd2, 0x5b, 0xbf, 0xaa,
	0xfd, 0xba, 0x26, 0xaf, 0x48, 0x3a, 0xb5, 0x1f, 0xa0, 0x75, 0xc9, 0xe3, 0x74, 0x56, 0x46, 0x5a,
	0x5e, 0x53, 0xe0, 0x9e, 0x2b, 0x86, 0xf4, 0x7c, 0xd6, 0x5d, 0x36, 0xae, 0x02, 0xf7, 0xdc, 0x61,
	0x1c, 0xc1, 0xac, 0x5b, 0x33, 0xae, 0x02, 0x77, 0xdd, 0x67, 0x68, 0x73, 0x52, 0x63, 0x14, 0x0b,
	0x96, 0x90, 0x02, 0xa2, 0x80, 0xb2, 0x80, 0x66, 0x49, 0xe1, 0xae, 0xb4, 0x9c, 0x76, 0xc5, 0x6f,
	0x5a, 0xe1, 0x68, 0xc2, 0x7b, 0xac, 0x97, 0x25, 0x05, 0x6e, 0xa2, 0x45, 0x01, 0x09, 0x84, 0xd2,
	0x5d, 0xd5, 0x6b, 0xdb, 0x91, 0x8a, 0xd3, 0x5c, 0xb2, 0x5c, 0xba, 0x6b, 0xfa, 0x7f, 0xda, 0x11,
	0x6e, 0xa1, 0x5a, 0x94, 0xa7, 0x2c, 0x90, 0x34, 0x50, 0xfd, 0xe4, 0xd6, 0x35, 0x45, 0x2a, 0x76,
	0x4a, 0x8f, 0xe3, 0x04, 0xf0, 0xff, 0x68, 0x55, 0x9d, 0x17, 0x0d, 0xc3, 0x9c, 0x73, 0xc8, 0x42,
	0x70, 0xd7, 0xf5, 0x81, 0xa9, 0x53, 0xec, 0x4d, 0x83, 0x18, 0xa3, 0x79, 0x21, 0x81, 0xb9, 0x58,
	0x43, 0xfd, 0x8d, 0xff, 0x33, 0x53, 0x19, 0x90, 0x91, 0x6d, 0xa5, 0x0d, 0x4d, 0x6b, 0xaa, 0x1b,
	0x80, 0x8c, 0x4c, 0x3b, 0xed, 0x20, 0xac, 0x2c, 0x0e, 0x22, 0x8e, 0x72, 0x92, 0x58, 0xb3, 0xa1,
	0xcd, 0x7a, 0x1a, 0x67, 0xbe, 0x05, 0xc6, 0x6e, 0xa3, 0xba, 0x4e, 0x47, 0xa7, 0x6f, 0xdd, 0xbf,
	0xb4, 0xab, 0xf6, 0xea, 0xe9, 0xb0, 0x31, 0x77, 0x51, 0x53, 0x99, 0x24, 0x0c, 0x21, 0x01, 0x4e,
	0x24, 0xe5, 0x93, 0x96, 0x6d, 0x6a, 0xbf, 0x91, 0xc6, 0xd9, 0xfe, 0x2d, 0xb4, 0xdd, 0x6b, 0x73,
	0x0e, 0x59, 0x3e, 0xb1, 0xff, 0x9e, 0xe6, 0x7c, 0xc8, 0x72, 0x63, 0x6d, 0xbf, 0x2f, 0xa3, 0x8d,
	0xfd, 0xe8, 0x2c, 0x16, 0x94, 0xcf, 0x5c, 0xaa, 0x13, 0x54, 0x09, 0x87, 0x10, 0x8e, 0x80, 0x0b,
	0xd7, 0x69, 0x95, 0xdb, 0xcb, 0x8f, 0x76, 0x3b, 0x3f, 0xdc, 0xc5, 0xce, 0x4f, 0x66, 0x76, 0x0e,
	0xed, 0xb4, 0xe7, 0x99, 0xe4, 0x85, 0x3f, 0x5d, 0x65, 0xeb, 0x2d, 0x5a, 0x99, 0x41, 0xb8, 0x8e,
	0xca, 0x23, 0x28, 0xf4, 0x8d, 0xad, 0xfa, 0xea, 0x13, 0xbf, 0x40, 0x0b, 0x67, 0x24, 0xc9, 0x41,
	0x5f, 0xd4, 0xdf, 0xde, 0xd1, 0xc4, 0x7c, 0xb3, 0xc4, 0xde, 0xdc, 0x53, 0x67, 0xeb, 0xd2, 0x99,
	0xee, 0x69, 0x20, 0x7e, 0x8d, 0x96, 0xec, 0x03, 0x63, 0xab, 0xda, 0xff, 0x93, 0x3d, 0x3a, 0x16,
	0x99, 0x12, 0x27, 0x2b, 0x6e, 0xed, 0x4d, 0x1f, 0xa6, 0x5f, 0x15, 0xd8, 0xb8, 0x5b, 0x60, 0xf5,
	0x4e, 0xaa, 0x07, 0x3b, 0x57, 0xd7, 0x5e, 0xe9, 0xf3, 0xb5, 0x57, 0xba, 0xb9, 0xf6, 0x9c, 0x77,
	0x63, 0xcf, 0xb9, 0x1c, 0x7b, 0xce, 0xc7, 0xb1, 0xe7, 0x5c, 0x8d, 0x3d, 0xe7, 0xcb, 0xd8, 0x73,
	0xbe, 0x8d, 0xbd, 0xd2, 0xcd, 0xd8, 0x73, 0x3e, 0x7c, 0xf5, 0x4a, 0xfd, 0x45, 0xfd, 0x3a, 0x3e,
	0xfe, 0x1e, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x5a, 0xee, 0xe3, 0x57, 0x05, 0x00, 0x00,
}
