// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/core/debug/debugger_event_metadata.proto

/*
	Package third_party_tensorflow_core_debug is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/core/debug/debugger_event_metadata.proto

	It has these top-level messages:
		DebuggerEventMetadata
*/
package third_party_tensorflow_core_debug

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Encapsulates per-event data related to debugging.
type DebuggerEventMetadata struct {
	Device     string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	OutputSlot int32  `protobuf:"varint,2,opt,name=output_slot,json=outputSlot,proto3" json:"output_slot,omitempty"`
	NumChunks  int32  `protobuf:"varint,3,opt,name=num_chunks,json=numChunks,proto3" json:"num_chunks,omitempty"`
	ChunkIndex int32  `protobuf:"varint,4,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
}

func (m *DebuggerEventMetadata) Reset()      { *m = DebuggerEventMetadata{} }
func (*DebuggerEventMetadata) ProtoMessage() {}
func (*DebuggerEventMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptorDebuggerEventMetadata, []int{0}
}

func (m *DebuggerEventMetadata) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *DebuggerEventMetadata) GetOutputSlot() int32 {
	if m != nil {
		return m.OutputSlot
	}
	return 0
}

func (m *DebuggerEventMetadata) GetNumChunks() int32 {
	if m != nil {
		return m.NumChunks
	}
	return 0
}

func (m *DebuggerEventMetadata) GetChunkIndex() int32 {
	if m != nil {
		return m.ChunkIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*DebuggerEventMetadata)(nil), "third_party.tensorflow.core.debug.DebuggerEventMetadata")
}
func (this *DebuggerEventMetadata) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DebuggerEventMetadata)
	if !ok {
		that2, ok := that.(DebuggerEventMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Device != that1.Device {
		return false
	}
	if this.OutputSlot != that1.OutputSlot {
		return false
	}
	if this.NumChunks != that1.NumChunks {
		return false
	}
	if this.ChunkIndex != that1.ChunkIndex {
		return false
	}
	return true
}
func (this *DebuggerEventMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&third_party_tensorflow_core_debug.DebuggerEventMetadata{")
	s = append(s, "Device: "+fmt.Sprintf("%#v", this.Device)+",\n")
	s = append(s, "OutputSlot: "+fmt.Sprintf("%#v", this.OutputSlot)+",\n")
	s = append(s, "NumChunks: "+fmt.Sprintf("%#v", this.NumChunks)+",\n")
	s = append(s, "ChunkIndex: "+fmt.Sprintf("%#v", this.ChunkIndex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDebuggerEventMetadata(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DebuggerEventMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebuggerEventMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Device) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebuggerEventMetadata(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	if m.OutputSlot != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebuggerEventMetadata(dAtA, i, uint64(m.OutputSlot))
	}
	if m.NumChunks != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDebuggerEventMetadata(dAtA, i, uint64(m.NumChunks))
	}
	if m.ChunkIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDebuggerEventMetadata(dAtA, i, uint64(m.ChunkIndex))
	}
	return i, nil
}

func encodeFixed64DebuggerEventMetadata(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32DebuggerEventMetadata(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDebuggerEventMetadata(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DebuggerEventMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovDebuggerEventMetadata(uint64(l))
	}
	if m.OutputSlot != 0 {
		n += 1 + sovDebuggerEventMetadata(uint64(m.OutputSlot))
	}
	if m.NumChunks != 0 {
		n += 1 + sovDebuggerEventMetadata(uint64(m.NumChunks))
	}
	if m.ChunkIndex != 0 {
		n += 1 + sovDebuggerEventMetadata(uint64(m.ChunkIndex))
	}
	return n
}

func sovDebuggerEventMetadata(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDebuggerEventMetadata(x uint64) (n int) {
	return sovDebuggerEventMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DebuggerEventMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DebuggerEventMetadata{`,
		`Device:` + fmt.Sprintf("%v", this.Device) + `,`,
		`OutputSlot:` + fmt.Sprintf("%v", this.OutputSlot) + `,`,
		`NumChunks:` + fmt.Sprintf("%v", this.NumChunks) + `,`,
		`ChunkIndex:` + fmt.Sprintf("%v", this.ChunkIndex) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDebuggerEventMetadata(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DebuggerEventMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebuggerEventMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebuggerEventMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebuggerEventMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebuggerEventMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebuggerEventMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputSlot", wireType)
			}
			m.OutputSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebuggerEventMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputSlot |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumChunks", wireType)
			}
			m.NumChunks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebuggerEventMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumChunks |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkIndex", wireType)
			}
			m.ChunkIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebuggerEventMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebuggerEventMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebuggerEventMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDebuggerEventMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDebuggerEventMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebuggerEventMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebuggerEventMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDebuggerEventMetadata
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDebuggerEventMetadata
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDebuggerEventMetadata(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDebuggerEventMetadata = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDebuggerEventMetadata   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/core/debug/debugger_event_metadata.proto", fileDescriptorDebuggerEventMetadata)
}

var fileDescriptorDebuggerEventMetadata = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8f, 0xbb, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0x73, 0xb8, 0x54, 0xaa, 0xd9, 0x22, 0x81, 0xb2, 0x70, 0x28, 0x4c, 0x1d, 0x50, 0x3a,
	0xb0, 0x32, 0x71, 0x19, 0x18, 0x58, 0xca, 0x03, 0x58, 0xb9, 0x9c, 0xb6, 0x11, 0x89, 0x1d, 0x39,
	0xc7, 0x05, 0x36, 0x1e, 0xa1, 0x8f, 0xc1, 0xa3, 0x30, 0x76, 0x64, 0x24, 0x66, 0x61, 0xec, 0x23,
	0xa0, 0x38, 0x91, 0x58, 0x2c, 0xf9, 0xfb, 0xf5, 0x7d, 0xd2, 0x11, 0xd7, 0xb5, 0xd1, 0xac, 0x53,
	0xbb, 0x98, 0x31, 0xa9, 0x46, 0x9b, 0x45, 0xa9, 0x5f, 0x66, 0x99, 0x36, 0x34, 0xcb, 0x29, 0xb5,
	0xcb, 0xfe, 0x5d, 0x92, 0x91, 0xb4, 0x26, 0xc5, 0xb2, 0x22, 0x4e, 0xf2, 0x84, 0x93, 0xd8, 0x6b,
	0xe1, 0x39, 0xaf, 0x0a, 0x93, 0xcb, 0x3a, 0x31, 0xfc, 0x16, 0xff, 0x07, 0xe2, 0x2e, 0x10, 0x7b,
	0xf5, 0x62, 0x03, 0xe2, 0xf8, 0x6e, 0x88, 0xdc, 0x77, 0x8d, 0xc7, 0x21, 0x11, 0x9e, 0x88, 0x51,
	0x4e, 0xeb, 0x22, 0xa3, 0x08, 0x26, 0x30, 0x1d, 0xcf, 0x87, 0x5f, 0x78, 0x26, 0x8e, 0xb4, 0xe5,
	0xda, 0xb2, 0x6c, 0x4a, 0xcd, 0xd1, 0xde, 0x04, 0xa6, 0x87, 0x73, 0xd1, 0xa3, 0xa7, 0x52, 0x73,
	0x78, 0x2a, 0x84, 0xb2, 0x95, 0xcc, 0x56, 0x56, 0x3d, 0x37, 0xd1, 0xbe, 0xdf, 0xc7, 0xca, 0x56,
	0xb7, 0x1e, 0x74, 0xbe, 0x9f, 0x64, 0xa1, 0x72, 0x7a, 0x8d, 0x0e, 0x7a, 0xdf, 0xa3, 0x87, 0x8e,
	0xdc, 0x5c, 0x6e, 0x5b, 0x0c, 0xbe, 0x5a, 0x0c, 0x76, 0x2d, 0xc2, 0xbb, 0x43, 0xf8, 0x70, 0x08,
	0x9f, 0x0e, 0x61, 0xeb, 0x10, 0xbe, 0x1d, 0xc2, 0xaf, 0xc3, 0x60, 0xe7, 0x10, 0x36, 0x3f, 0x18,
	0xa4, 0x23, 0x7f, 0xea, 0xd5, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x7f, 0x38, 0x2f, 0x2a,
	0x01, 0x00, 0x00,
}
