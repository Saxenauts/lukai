// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/core/protobuf/master.proto

/*
	Package tensorflow is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/core/protobuf/master.proto

	It has these top-level messages:
		CreateSessionRequest
		CreateSessionResponse
		ExtendSessionRequest
		ExtendSessionResponse
		RunStepRequest
		RunStepResponse
		PartialRunSetupRequest
		PartialRunSetupResponse
		CloseSessionRequest
		CloseSessionResponse
		ResetRequest
		ResetResponse
		ListDevicesRequest
		ListDevicesResponse
*/
package tensorflow

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow1 "github.com/d4l3k/pok/protobuf/tensorflow/core/framework"
import tensorflow11 "github.com/d4l3k/pok/protobuf/tensorflow/core/framework"
import tensorflow19 "github.com/d4l3k/pok/protobuf/tensorflow/core/protobuf"
import tensorflow20 "github.com/d4l3k/pok/protobuf/tensorflow/core/protobuf"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CreateSessionRequest struct {
	// The initial graph definition.
	GraphDef *tensorflow11.GraphDef `protobuf:"bytes,1,opt,name=graph_def,json=graphDef" json:"graph_def,omitempty"`
	// Configuration options.
	Config *tensorflow19.ConfigProto `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
	// The target string used from the client's perspective.
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *CreateSessionRequest) Reset()                    { *m = CreateSessionRequest{} }
func (*CreateSessionRequest) ProtoMessage()               {}
func (*CreateSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{0} }

func (m *CreateSessionRequest) GetGraphDef() *tensorflow11.GraphDef {
	if m != nil {
		return m.GraphDef
	}
	return nil
}

func (m *CreateSessionRequest) GetConfig() *tensorflow19.ConfigProto {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *CreateSessionRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type CreateSessionResponse struct {
	// The session handle to be used in subsequent calls for the created session.
	//
	// The client must arrange to call CloseSession with this returned
	// session handle to close the session.
	SessionHandle string `protobuf:"bytes,1,opt,name=session_handle,json=sessionHandle,proto3" json:"session_handle,omitempty"`
	// The initial version number for the graph, to be used in the next call
	// to ExtendSession.
	GraphVersion int64 `protobuf:"varint,2,opt,name=graph_version,json=graphVersion,proto3" json:"graph_version,omitempty"`
}

func (m *CreateSessionResponse) Reset()                    { *m = CreateSessionResponse{} }
func (*CreateSessionResponse) ProtoMessage()               {}
func (*CreateSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{1} }

func (m *CreateSessionResponse) GetSessionHandle() string {
	if m != nil {
		return m.SessionHandle
	}
	return ""
}

func (m *CreateSessionResponse) GetGraphVersion() int64 {
	if m != nil {
		return m.GraphVersion
	}
	return 0
}

type ExtendSessionRequest struct {
	// REQUIRED: session_handle must be returned by a CreateSession call
	// to the same master service.
	SessionHandle string `protobuf:"bytes,1,opt,name=session_handle,json=sessionHandle,proto3" json:"session_handle,omitempty"`
	// REQUIRED: The nodes to be added to the session's graph. If any node has
	// the same name as an existing node, the operation will fail with
	// ILLEGAL_ARGUMENT.
	GraphDef *tensorflow11.GraphDef `protobuf:"bytes,2,opt,name=graph_def,json=graphDef" json:"graph_def,omitempty"`
	// REQUIRED: The version number of the graph to be extended. This will be
	// tested against the current server-side version number, and the operation
	// will fail with FAILED_PRECONDITION if they do not match.
	CurrentGraphVersion int64 `protobuf:"varint,3,opt,name=current_graph_version,json=currentGraphVersion,proto3" json:"current_graph_version,omitempty"`
}

func (m *ExtendSessionRequest) Reset()                    { *m = ExtendSessionRequest{} }
func (*ExtendSessionRequest) ProtoMessage()               {}
func (*ExtendSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{2} }

func (m *ExtendSessionRequest) GetSessionHandle() string {
	if m != nil {
		return m.SessionHandle
	}
	return ""
}

func (m *ExtendSessionRequest) GetGraphDef() *tensorflow11.GraphDef {
	if m != nil {
		return m.GraphDef
	}
	return nil
}

func (m *ExtendSessionRequest) GetCurrentGraphVersion() int64 {
	if m != nil {
		return m.CurrentGraphVersion
	}
	return 0
}

type ExtendSessionResponse struct {
	// The new version number for the extended graph, to be used in the next call
	// to ExtendSession.
	NewGraphVersion int64 `protobuf:"varint,4,opt,name=new_graph_version,json=newGraphVersion,proto3" json:"new_graph_version,omitempty"`
}

func (m *ExtendSessionResponse) Reset()                    { *m = ExtendSessionResponse{} }
func (*ExtendSessionResponse) ProtoMessage()               {}
func (*ExtendSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{3} }

func (m *ExtendSessionResponse) GetNewGraphVersion() int64 {
	if m != nil {
		return m.NewGraphVersion
	}
	return 0
}

type RunStepRequest struct {
	// REQUIRED: session_handle must be returned by a CreateSession call
	// to the same master service.
	SessionHandle string `protobuf:"bytes,1,opt,name=session_handle,json=sessionHandle,proto3" json:"session_handle,omitempty"`
	// Tensors to be fed in the step. Each feed is a named tensor.
	Feed []*tensorflow20.NamedTensorProto `protobuf:"bytes,2,rep,name=feed" json:"feed,omitempty"`
	// Fetches. A list of tensor names. The caller expects a tensor to
	// be returned for each fetch[i] (see RunStepResponse.tensor). The
	// order of specified fetches does not change the execution order.
	Fetch []string `protobuf:"bytes,3,rep,name=fetch" json:"fetch,omitempty"`
	// Target Nodes. A list of node names. The named nodes will be run
	// to but their outputs will not be fetched.
	Target []string `protobuf:"bytes,4,rep,name=target" json:"target,omitempty"`
	// Options for the run call.
	Options *tensorflow19.RunOptions `protobuf:"bytes,5,opt,name=options" json:"options,omitempty"`
	// Partial run handle (optional). If specified, this will be a partial run
	// execution, run up to the specified fetches.
	PartialRunHandle string `protobuf:"bytes,6,opt,name=partial_run_handle,json=partialRunHandle,proto3" json:"partial_run_handle,omitempty"`
}

func (m *RunStepRequest) Reset()                    { *m = RunStepRequest{} }
func (*RunStepRequest) ProtoMessage()               {}
func (*RunStepRequest) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{4} }

func (m *RunStepRequest) GetSessionHandle() string {
	if m != nil {
		return m.SessionHandle
	}
	return ""
}

func (m *RunStepRequest) GetFeed() []*tensorflow20.NamedTensorProto {
	if m != nil {
		return m.Feed
	}
	return nil
}

func (m *RunStepRequest) GetFetch() []string {
	if m != nil {
		return m.Fetch
	}
	return nil
}

func (m *RunStepRequest) GetTarget() []string {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *RunStepRequest) GetOptions() *tensorflow19.RunOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *RunStepRequest) GetPartialRunHandle() string {
	if m != nil {
		return m.PartialRunHandle
	}
	return ""
}

type RunStepResponse struct {
	// NOTE: The order of the returned tensors may or may not match
	// the fetch order specified in RunStepRequest.
	Tensor []*tensorflow20.NamedTensorProto `protobuf:"bytes,1,rep,name=tensor" json:"tensor,omitempty"`
	// Returned metadata if requested in the options.
	Metadata *tensorflow19.RunMetadata `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *RunStepResponse) Reset()                    { *m = RunStepResponse{} }
func (*RunStepResponse) ProtoMessage()               {}
func (*RunStepResponse) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{5} }

func (m *RunStepResponse) GetTensor() []*tensorflow20.NamedTensorProto {
	if m != nil {
		return m.Tensor
	}
	return nil
}

func (m *RunStepResponse) GetMetadata() *tensorflow19.RunMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type PartialRunSetupRequest struct {
	// REQUIRED: session_handle must be returned by a CreateSession call
	// to the same master service.
	SessionHandle string `protobuf:"bytes,1,opt,name=session_handle,json=sessionHandle,proto3" json:"session_handle,omitempty"`
	// Tensors to be fed in future steps.
	Feed []string `protobuf:"bytes,2,rep,name=feed" json:"feed,omitempty"`
	// Fetches. A list of tensor names. The caller expects a tensor to be returned
	// for each fetch[i] (see RunStepResponse.tensor), for corresponding partial
	// RunStepRequests. The order of specified fetches does not change the
	// execution order.
	Fetch []string `protobuf:"bytes,3,rep,name=fetch" json:"fetch,omitempty"`
	// Target Nodes. A list of node names. The named nodes will be run in future
	// steps, but their outputs will not be fetched.
	Target []string `protobuf:"bytes,4,rep,name=target" json:"target,omitempty"`
}

func (m *PartialRunSetupRequest) Reset()                    { *m = PartialRunSetupRequest{} }
func (*PartialRunSetupRequest) ProtoMessage()               {}
func (*PartialRunSetupRequest) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{6} }

func (m *PartialRunSetupRequest) GetSessionHandle() string {
	if m != nil {
		return m.SessionHandle
	}
	return ""
}

func (m *PartialRunSetupRequest) GetFeed() []string {
	if m != nil {
		return m.Feed
	}
	return nil
}

func (m *PartialRunSetupRequest) GetFetch() []string {
	if m != nil {
		return m.Fetch
	}
	return nil
}

func (m *PartialRunSetupRequest) GetTarget() []string {
	if m != nil {
		return m.Target
	}
	return nil
}

type PartialRunSetupResponse struct {
	// The unique handle corresponding to the ongoing partial run call setup by
	// the invocation to PartialRunSetup. This handle may be passed to
	// RunStepRequest to send and receive tensors for this partial run.
	PartialRunHandle string `protobuf:"bytes,1,opt,name=partial_run_handle,json=partialRunHandle,proto3" json:"partial_run_handle,omitempty"`
}

func (m *PartialRunSetupResponse) Reset()                    { *m = PartialRunSetupResponse{} }
func (*PartialRunSetupResponse) ProtoMessage()               {}
func (*PartialRunSetupResponse) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{7} }

func (m *PartialRunSetupResponse) GetPartialRunHandle() string {
	if m != nil {
		return m.PartialRunHandle
	}
	return ""
}

type CloseSessionRequest struct {
	// REQUIRED: session_handle must be returned by a CreateSession call
	// to the same master service.
	SessionHandle string `protobuf:"bytes,1,opt,name=session_handle,json=sessionHandle,proto3" json:"session_handle,omitempty"`
}

func (m *CloseSessionRequest) Reset()                    { *m = CloseSessionRequest{} }
func (*CloseSessionRequest) ProtoMessage()               {}
func (*CloseSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{8} }

func (m *CloseSessionRequest) GetSessionHandle() string {
	if m != nil {
		return m.SessionHandle
	}
	return ""
}

type CloseSessionResponse struct {
}

func (m *CloseSessionResponse) Reset()                    { *m = CloseSessionResponse{} }
func (*CloseSessionResponse) ProtoMessage()               {}
func (*CloseSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{9} }

// Reset() allows misbehaving or slow sessions to be aborted and closed, and
// causes their resources eventually to be released.  Reset() does not wait
// for the computations in old sessions to cease; it merely starts the
// process of tearing them down.  However, if a new session is started after
// a Reset(), the new session is isolated from changes that old sessions
// (started prior to the Reset()) may continue to make to resources, provided
// all those resources are in containers listed in "containers".
//
// Old sessions may continue to have side-effects on resources not in
// containers listed in "containers", and thus may affect future
// sessions' results in ways that are hard to predict.  Thus, if well-defined
// behavior is desired, is it recommended that all containers be listed in
// "containers".  Similarly, if a device_filter is specified, results may be
// hard to predict.
type ResetRequest struct {
	// A list of container names, which may be empty.
	//
	// If 'container' is not empty, releases resoures in the given
	// containers in all devices.
	//
	// If 'container' is empty, releases resources in the default
	// container in all devices.
	Container []string `protobuf:"bytes,1,rep,name=container" json:"container,omitempty"`
	// When any filters are present, only devices that match the filters
	// will be reset. Each filter can be partially specified,
	// e.g. "/job:ps" "/job:worker/replica:3", etc.
	DeviceFilters []string `protobuf:"bytes,2,rep,name=device_filters,json=deviceFilters" json:"device_filters,omitempty"`
}

func (m *ResetRequest) Reset()                    { *m = ResetRequest{} }
func (*ResetRequest) ProtoMessage()               {}
func (*ResetRequest) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{10} }

func (m *ResetRequest) GetContainer() []string {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *ResetRequest) GetDeviceFilters() []string {
	if m != nil {
		return m.DeviceFilters
	}
	return nil
}

type ResetResponse struct {
}

func (m *ResetResponse) Reset()                    { *m = ResetResponse{} }
func (*ResetResponse) ProtoMessage()               {}
func (*ResetResponse) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{11} }

type ListDevicesRequest struct {
	// Optional: session_handle must be returned by a CreateSession call to the
	// same master service.
	//
	// When session_handle is empty, the ClusterSpec provided when the master was
	// started is used to compute the available devices. If the session_handle is
	// provided but not recognized, an error is returned. Finally, if a valid
	// session_handle is provided, the cluster configuration for that session is
	// used when computing the response.
	SessionHandle string `protobuf:"bytes,1,opt,name=session_handle,json=sessionHandle,proto3" json:"session_handle,omitempty"`
}

func (m *ListDevicesRequest) Reset()                    { *m = ListDevicesRequest{} }
func (*ListDevicesRequest) ProtoMessage()               {}
func (*ListDevicesRequest) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{12} }

func (m *ListDevicesRequest) GetSessionHandle() string {
	if m != nil {
		return m.SessionHandle
	}
	return ""
}

type ListDevicesResponse struct {
	LocalDevice  []*tensorflow1.DeviceAttributes `protobuf:"bytes,1,rep,name=local_device,json=localDevice" json:"local_device,omitempty"`
	RemoteDevice []*tensorflow1.DeviceAttributes `protobuf:"bytes,2,rep,name=remote_device,json=remoteDevice" json:"remote_device,omitempty"`
}

func (m *ListDevicesResponse) Reset()                    { *m = ListDevicesResponse{} }
func (*ListDevicesResponse) ProtoMessage()               {}
func (*ListDevicesResponse) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{13} }

func (m *ListDevicesResponse) GetLocalDevice() []*tensorflow1.DeviceAttributes {
	if m != nil {
		return m.LocalDevice
	}
	return nil
}

func (m *ListDevicesResponse) GetRemoteDevice() []*tensorflow1.DeviceAttributes {
	if m != nil {
		return m.RemoteDevice
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateSessionRequest)(nil), "tensorflow.CreateSessionRequest")
	proto.RegisterType((*CreateSessionResponse)(nil), "tensorflow.CreateSessionResponse")
	proto.RegisterType((*ExtendSessionRequest)(nil), "tensorflow.ExtendSessionRequest")
	proto.RegisterType((*ExtendSessionResponse)(nil), "tensorflow.ExtendSessionResponse")
	proto.RegisterType((*RunStepRequest)(nil), "tensorflow.RunStepRequest")
	proto.RegisterType((*RunStepResponse)(nil), "tensorflow.RunStepResponse")
	proto.RegisterType((*PartialRunSetupRequest)(nil), "tensorflow.PartialRunSetupRequest")
	proto.RegisterType((*PartialRunSetupResponse)(nil), "tensorflow.PartialRunSetupResponse")
	proto.RegisterType((*CloseSessionRequest)(nil), "tensorflow.CloseSessionRequest")
	proto.RegisterType((*CloseSessionResponse)(nil), "tensorflow.CloseSessionResponse")
	proto.RegisterType((*ResetRequest)(nil), "tensorflow.ResetRequest")
	proto.RegisterType((*ResetResponse)(nil), "tensorflow.ResetResponse")
	proto.RegisterType((*ListDevicesRequest)(nil), "tensorflow.ListDevicesRequest")
	proto.RegisterType((*ListDevicesResponse)(nil), "tensorflow.ListDevicesResponse")
}
func (this *CreateSessionRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateSessionRequest)
	if !ok {
		that2, ok := that.(CreateSessionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.GraphDef.Equal(that1.GraphDef) {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	return true
}
func (this *CreateSessionResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateSessionResponse)
	if !ok {
		that2, ok := that.(CreateSessionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SessionHandle != that1.SessionHandle {
		return false
	}
	if this.GraphVersion != that1.GraphVersion {
		return false
	}
	return true
}
func (this *ExtendSessionRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExtendSessionRequest)
	if !ok {
		that2, ok := that.(ExtendSessionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SessionHandle != that1.SessionHandle {
		return false
	}
	if !this.GraphDef.Equal(that1.GraphDef) {
		return false
	}
	if this.CurrentGraphVersion != that1.CurrentGraphVersion {
		return false
	}
	return true
}
func (this *ExtendSessionResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExtendSessionResponse)
	if !ok {
		that2, ok := that.(ExtendSessionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.NewGraphVersion != that1.NewGraphVersion {
		return false
	}
	return true
}
func (this *RunStepRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RunStepRequest)
	if !ok {
		that2, ok := that.(RunStepRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SessionHandle != that1.SessionHandle {
		return false
	}
	if len(this.Feed) != len(that1.Feed) {
		return false
	}
	for i := range this.Feed {
		if !this.Feed[i].Equal(that1.Feed[i]) {
			return false
		}
	}
	if len(this.Fetch) != len(that1.Fetch) {
		return false
	}
	for i := range this.Fetch {
		if this.Fetch[i] != that1.Fetch[i] {
			return false
		}
	}
	if len(this.Target) != len(that1.Target) {
		return false
	}
	for i := range this.Target {
		if this.Target[i] != that1.Target[i] {
			return false
		}
	}
	if !this.Options.Equal(that1.Options) {
		return false
	}
	if this.PartialRunHandle != that1.PartialRunHandle {
		return false
	}
	return true
}
func (this *RunStepResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RunStepResponse)
	if !ok {
		that2, ok := that.(RunStepResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Tensor) != len(that1.Tensor) {
		return false
	}
	for i := range this.Tensor {
		if !this.Tensor[i].Equal(that1.Tensor[i]) {
			return false
		}
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}
func (this *PartialRunSetupRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PartialRunSetupRequest)
	if !ok {
		that2, ok := that.(PartialRunSetupRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SessionHandle != that1.SessionHandle {
		return false
	}
	if len(this.Feed) != len(that1.Feed) {
		return false
	}
	for i := range this.Feed {
		if this.Feed[i] != that1.Feed[i] {
			return false
		}
	}
	if len(this.Fetch) != len(that1.Fetch) {
		return false
	}
	for i := range this.Fetch {
		if this.Fetch[i] != that1.Fetch[i] {
			return false
		}
	}
	if len(this.Target) != len(that1.Target) {
		return false
	}
	for i := range this.Target {
		if this.Target[i] != that1.Target[i] {
			return false
		}
	}
	return true
}
func (this *PartialRunSetupResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PartialRunSetupResponse)
	if !ok {
		that2, ok := that.(PartialRunSetupResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.PartialRunHandle != that1.PartialRunHandle {
		return false
	}
	return true
}
func (this *CloseSessionRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CloseSessionRequest)
	if !ok {
		that2, ok := that.(CloseSessionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SessionHandle != that1.SessionHandle {
		return false
	}
	return true
}
func (this *CloseSessionResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CloseSessionResponse)
	if !ok {
		that2, ok := that.(CloseSessionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResetRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResetRequest)
	if !ok {
		that2, ok := that.(ResetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Container) != len(that1.Container) {
		return false
	}
	for i := range this.Container {
		if this.Container[i] != that1.Container[i] {
			return false
		}
	}
	if len(this.DeviceFilters) != len(that1.DeviceFilters) {
		return false
	}
	for i := range this.DeviceFilters {
		if this.DeviceFilters[i] != that1.DeviceFilters[i] {
			return false
		}
	}
	return true
}
func (this *ResetResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResetResponse)
	if !ok {
		that2, ok := that.(ResetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListDevicesRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListDevicesRequest)
	if !ok {
		that2, ok := that.(ListDevicesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SessionHandle != that1.SessionHandle {
		return false
	}
	return true
}
func (this *ListDevicesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListDevicesResponse)
	if !ok {
		that2, ok := that.(ListDevicesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.LocalDevice) != len(that1.LocalDevice) {
		return false
	}
	for i := range this.LocalDevice {
		if !this.LocalDevice[i].Equal(that1.LocalDevice[i]) {
			return false
		}
	}
	if len(this.RemoteDevice) != len(that1.RemoteDevice) {
		return false
	}
	for i := range this.RemoteDevice {
		if !this.RemoteDevice[i].Equal(that1.RemoteDevice[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSessionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensorflow.CreateSessionRequest{")
	if this.GraphDef != nil {
		s = append(s, "GraphDef: "+fmt.Sprintf("%#v", this.GraphDef)+",\n")
	}
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSessionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow.CreateSessionResponse{")
	s = append(s, "SessionHandle: "+fmt.Sprintf("%#v", this.SessionHandle)+",\n")
	s = append(s, "GraphVersion: "+fmt.Sprintf("%#v", this.GraphVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExtendSessionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensorflow.ExtendSessionRequest{")
	s = append(s, "SessionHandle: "+fmt.Sprintf("%#v", this.SessionHandle)+",\n")
	if this.GraphDef != nil {
		s = append(s, "GraphDef: "+fmt.Sprintf("%#v", this.GraphDef)+",\n")
	}
	s = append(s, "CurrentGraphVersion: "+fmt.Sprintf("%#v", this.CurrentGraphVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExtendSessionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow.ExtendSessionResponse{")
	s = append(s, "NewGraphVersion: "+fmt.Sprintf("%#v", this.NewGraphVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RunStepRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&tensorflow.RunStepRequest{")
	s = append(s, "SessionHandle: "+fmt.Sprintf("%#v", this.SessionHandle)+",\n")
	if this.Feed != nil {
		s = append(s, "Feed: "+fmt.Sprintf("%#v", this.Feed)+",\n")
	}
	s = append(s, "Fetch: "+fmt.Sprintf("%#v", this.Fetch)+",\n")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "PartialRunHandle: "+fmt.Sprintf("%#v", this.PartialRunHandle)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RunStepResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow.RunStepResponse{")
	if this.Tensor != nil {
		s = append(s, "Tensor: "+fmt.Sprintf("%#v", this.Tensor)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PartialRunSetupRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tensorflow.PartialRunSetupRequest{")
	s = append(s, "SessionHandle: "+fmt.Sprintf("%#v", this.SessionHandle)+",\n")
	s = append(s, "Feed: "+fmt.Sprintf("%#v", this.Feed)+",\n")
	s = append(s, "Fetch: "+fmt.Sprintf("%#v", this.Fetch)+",\n")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PartialRunSetupResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow.PartialRunSetupResponse{")
	s = append(s, "PartialRunHandle: "+fmt.Sprintf("%#v", this.PartialRunHandle)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloseSessionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow.CloseSessionRequest{")
	s = append(s, "SessionHandle: "+fmt.Sprintf("%#v", this.SessionHandle)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloseSessionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tensorflow.CloseSessionResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow.ResetRequest{")
	s = append(s, "Container: "+fmt.Sprintf("%#v", this.Container)+",\n")
	s = append(s, "DeviceFilters: "+fmt.Sprintf("%#v", this.DeviceFilters)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tensorflow.ResetResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListDevicesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow.ListDevicesRequest{")
	s = append(s, "SessionHandle: "+fmt.Sprintf("%#v", this.SessionHandle)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListDevicesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow.ListDevicesResponse{")
	if this.LocalDevice != nil {
		s = append(s, "LocalDevice: "+fmt.Sprintf("%#v", this.LocalDevice)+",\n")
	}
	if this.RemoteDevice != nil {
		s = append(s, "RemoteDevice: "+fmt.Sprintf("%#v", this.RemoteDevice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMaster(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CreateSessionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSessionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GraphDef != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.GraphDef.Size()))
		n1, err := m.GraphDef.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Config != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.Config.Size()))
		n2, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Target) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMaster(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	return i, nil
}

func (m *CreateSessionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSessionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionHandle) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMaster(dAtA, i, uint64(len(m.SessionHandle)))
		i += copy(dAtA[i:], m.SessionHandle)
	}
	if m.GraphVersion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.GraphVersion))
	}
	return i, nil
}

func (m *ExtendSessionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendSessionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionHandle) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMaster(dAtA, i, uint64(len(m.SessionHandle)))
		i += copy(dAtA[i:], m.SessionHandle)
	}
	if m.GraphDef != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.GraphDef.Size()))
		n3, err := m.GraphDef.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.CurrentGraphVersion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.CurrentGraphVersion))
	}
	return i, nil
}

func (m *ExtendSessionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendSessionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewGraphVersion != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.NewGraphVersion))
	}
	return i, nil
}

func (m *RunStepRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunStepRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionHandle) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMaster(dAtA, i, uint64(len(m.SessionHandle)))
		i += copy(dAtA[i:], m.SessionHandle)
	}
	if len(m.Feed) > 0 {
		for _, msg := range m.Feed {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMaster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Fetch) > 0 {
		for _, s := range m.Fetch {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Target) > 0 {
		for _, s := range m.Target {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Options != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.Options.Size()))
		n4, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.PartialRunHandle) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMaster(dAtA, i, uint64(len(m.PartialRunHandle)))
		i += copy(dAtA[i:], m.PartialRunHandle)
	}
	return i, nil
}

func (m *RunStepResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RunStepResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tensor) > 0 {
		for _, msg := range m.Tensor {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMaster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Metadata != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.Metadata.Size()))
		n5, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *PartialRunSetupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartialRunSetupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionHandle) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMaster(dAtA, i, uint64(len(m.SessionHandle)))
		i += copy(dAtA[i:], m.SessionHandle)
	}
	if len(m.Feed) > 0 {
		for _, s := range m.Feed {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Fetch) > 0 {
		for _, s := range m.Fetch {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Target) > 0 {
		for _, s := range m.Target {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *PartialRunSetupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartialRunSetupResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PartialRunHandle) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMaster(dAtA, i, uint64(len(m.PartialRunHandle)))
		i += copy(dAtA[i:], m.PartialRunHandle)
	}
	return i, nil
}

func (m *CloseSessionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseSessionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionHandle) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMaster(dAtA, i, uint64(len(m.SessionHandle)))
		i += copy(dAtA[i:], m.SessionHandle)
	}
	return i, nil
}

func (m *CloseSessionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseSessionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Container) > 0 {
		for _, s := range m.Container {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.DeviceFilters) > 0 {
		for _, s := range m.DeviceFilters {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ResetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ListDevicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDevicesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionHandle) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMaster(dAtA, i, uint64(len(m.SessionHandle)))
		i += copy(dAtA[i:], m.SessionHandle)
	}
	return i, nil
}

func (m *ListDevicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDevicesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LocalDevice) > 0 {
		for _, msg := range m.LocalDevice {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMaster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RemoteDevice) > 0 {
		for _, msg := range m.RemoteDevice {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMaster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Master(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Master(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMaster(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateSessionRequest) Size() (n int) {
	var l int
	_ = l
	if m.GraphDef != nil {
		l = m.GraphDef.Size()
		n += 1 + l + sovMaster(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovMaster(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovMaster(uint64(l))
	}
	return n
}

func (m *CreateSessionResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.SessionHandle)
	if l > 0 {
		n += 1 + l + sovMaster(uint64(l))
	}
	if m.GraphVersion != 0 {
		n += 1 + sovMaster(uint64(m.GraphVersion))
	}
	return n
}

func (m *ExtendSessionRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SessionHandle)
	if l > 0 {
		n += 1 + l + sovMaster(uint64(l))
	}
	if m.GraphDef != nil {
		l = m.GraphDef.Size()
		n += 1 + l + sovMaster(uint64(l))
	}
	if m.CurrentGraphVersion != 0 {
		n += 1 + sovMaster(uint64(m.CurrentGraphVersion))
	}
	return n
}

func (m *ExtendSessionResponse) Size() (n int) {
	var l int
	_ = l
	if m.NewGraphVersion != 0 {
		n += 1 + sovMaster(uint64(m.NewGraphVersion))
	}
	return n
}

func (m *RunStepRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SessionHandle)
	if l > 0 {
		n += 1 + l + sovMaster(uint64(l))
	}
	if len(m.Feed) > 0 {
		for _, e := range m.Feed {
			l = e.Size()
			n += 1 + l + sovMaster(uint64(l))
		}
	}
	if len(m.Fetch) > 0 {
		for _, s := range m.Fetch {
			l = len(s)
			n += 1 + l + sovMaster(uint64(l))
		}
	}
	if len(m.Target) > 0 {
		for _, s := range m.Target {
			l = len(s)
			n += 1 + l + sovMaster(uint64(l))
		}
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovMaster(uint64(l))
	}
	l = len(m.PartialRunHandle)
	if l > 0 {
		n += 1 + l + sovMaster(uint64(l))
	}
	return n
}

func (m *RunStepResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Tensor) > 0 {
		for _, e := range m.Tensor {
			l = e.Size()
			n += 1 + l + sovMaster(uint64(l))
		}
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovMaster(uint64(l))
	}
	return n
}

func (m *PartialRunSetupRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SessionHandle)
	if l > 0 {
		n += 1 + l + sovMaster(uint64(l))
	}
	if len(m.Feed) > 0 {
		for _, s := range m.Feed {
			l = len(s)
			n += 1 + l + sovMaster(uint64(l))
		}
	}
	if len(m.Fetch) > 0 {
		for _, s := range m.Fetch {
			l = len(s)
			n += 1 + l + sovMaster(uint64(l))
		}
	}
	if len(m.Target) > 0 {
		for _, s := range m.Target {
			l = len(s)
			n += 1 + l + sovMaster(uint64(l))
		}
	}
	return n
}

func (m *PartialRunSetupResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.PartialRunHandle)
	if l > 0 {
		n += 1 + l + sovMaster(uint64(l))
	}
	return n
}

func (m *CloseSessionRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SessionHandle)
	if l > 0 {
		n += 1 + l + sovMaster(uint64(l))
	}
	return n
}

func (m *CloseSessionResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ResetRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Container) > 0 {
		for _, s := range m.Container {
			l = len(s)
			n += 1 + l + sovMaster(uint64(l))
		}
	}
	if len(m.DeviceFilters) > 0 {
		for _, s := range m.DeviceFilters {
			l = len(s)
			n += 1 + l + sovMaster(uint64(l))
		}
	}
	return n
}

func (m *ResetResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ListDevicesRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.SessionHandle)
	if l > 0 {
		n += 1 + l + sovMaster(uint64(l))
	}
	return n
}

func (m *ListDevicesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.LocalDevice) > 0 {
		for _, e := range m.LocalDevice {
			l = e.Size()
			n += 1 + l + sovMaster(uint64(l))
		}
	}
	if len(m.RemoteDevice) > 0 {
		for _, e := range m.RemoteDevice {
			l = e.Size()
			n += 1 + l + sovMaster(uint64(l))
		}
	}
	return n
}

func sovMaster(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMaster(x uint64) (n int) {
	return sovMaster(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateSessionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSessionRequest{`,
		`GraphDef:` + strings.Replace(fmt.Sprintf("%v", this.GraphDef), "GraphDef", "tensorflow11.GraphDef", 1) + `,`,
		`Config:` + strings.Replace(fmt.Sprintf("%v", this.Config), "ConfigProto", "tensorflow19.ConfigProto", 1) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSessionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSessionResponse{`,
		`SessionHandle:` + fmt.Sprintf("%v", this.SessionHandle) + `,`,
		`GraphVersion:` + fmt.Sprintf("%v", this.GraphVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExtendSessionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExtendSessionRequest{`,
		`SessionHandle:` + fmt.Sprintf("%v", this.SessionHandle) + `,`,
		`GraphDef:` + strings.Replace(fmt.Sprintf("%v", this.GraphDef), "GraphDef", "tensorflow11.GraphDef", 1) + `,`,
		`CurrentGraphVersion:` + fmt.Sprintf("%v", this.CurrentGraphVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExtendSessionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExtendSessionResponse{`,
		`NewGraphVersion:` + fmt.Sprintf("%v", this.NewGraphVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RunStepRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RunStepRequest{`,
		`SessionHandle:` + fmt.Sprintf("%v", this.SessionHandle) + `,`,
		`Feed:` + strings.Replace(fmt.Sprintf("%v", this.Feed), "NamedTensorProto", "tensorflow20.NamedTensorProto", 1) + `,`,
		`Fetch:` + fmt.Sprintf("%v", this.Fetch) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`Options:` + strings.Replace(fmt.Sprintf("%v", this.Options), "RunOptions", "tensorflow19.RunOptions", 1) + `,`,
		`PartialRunHandle:` + fmt.Sprintf("%v", this.PartialRunHandle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RunStepResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RunStepResponse{`,
		`Tensor:` + strings.Replace(fmt.Sprintf("%v", this.Tensor), "NamedTensorProto", "tensorflow20.NamedTensorProto", 1) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "RunMetadata", "tensorflow19.RunMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartialRunSetupRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PartialRunSetupRequest{`,
		`SessionHandle:` + fmt.Sprintf("%v", this.SessionHandle) + `,`,
		`Feed:` + fmt.Sprintf("%v", this.Feed) + `,`,
		`Fetch:` + fmt.Sprintf("%v", this.Fetch) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartialRunSetupResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PartialRunSetupResponse{`,
		`PartialRunHandle:` + fmt.Sprintf("%v", this.PartialRunHandle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloseSessionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloseSessionRequest{`,
		`SessionHandle:` + fmt.Sprintf("%v", this.SessionHandle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloseSessionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloseSessionResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ResetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResetRequest{`,
		`Container:` + fmt.Sprintf("%v", this.Container) + `,`,
		`DeviceFilters:` + fmt.Sprintf("%v", this.DeviceFilters) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResetResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ListDevicesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListDevicesRequest{`,
		`SessionHandle:` + fmt.Sprintf("%v", this.SessionHandle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListDevicesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListDevicesResponse{`,
		`LocalDevice:` + strings.Replace(fmt.Sprintf("%v", this.LocalDevice), "DeviceAttributes", "tensorflow1.DeviceAttributes", 1) + `,`,
		`RemoteDevice:` + strings.Replace(fmt.Sprintf("%v", this.RemoteDevice), "DeviceAttributes", "tensorflow1.DeviceAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMaster(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateSessionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSessionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSessionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphDef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GraphDef == nil {
				m.GraphDef = &tensorflow11.GraphDef{}
			}
			if err := m.GraphDef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &tensorflow19.ConfigProto{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSessionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSessionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSessionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHandle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionHandle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphVersion", wireType)
			}
			m.GraphVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GraphVersion |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtendSessionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendSessionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendSessionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHandle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionHandle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphDef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GraphDef == nil {
				m.GraphDef = &tensorflow11.GraphDef{}
			}
			if err := m.GraphDef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentGraphVersion", wireType)
			}
			m.CurrentGraphVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentGraphVersion |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtendSessionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendSessionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendSessionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGraphVersion", wireType)
			}
			m.NewGraphVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewGraphVersion |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunStepRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunStepRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunStepRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHandle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionHandle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feed = append(m.Feed, &tensorflow20.NamedTensorProto{})
			if err := m.Feed[len(m.Feed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fetch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fetch = append(m.Fetch, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &tensorflow19.RunOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialRunHandle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartialRunHandle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RunStepResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunStepResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunStepResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tensor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tensor = append(m.Tensor, &tensorflow20.NamedTensorProto{})
			if err := m.Tensor[len(m.Tensor)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &tensorflow19.RunMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartialRunSetupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartialRunSetupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartialRunSetupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHandle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionHandle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feed = append(m.Feed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fetch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fetch = append(m.Fetch, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartialRunSetupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartialRunSetupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartialRunSetupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartialRunHandle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartialRunHandle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseSessionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseSessionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseSessionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHandle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionHandle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseSessionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseSessionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseSessionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Container = append(m.Container, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceFilters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceFilters = append(m.DeviceFilters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDevicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDevicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDevicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionHandle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionHandle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDevicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDevicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDevicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalDevice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalDevice = append(m.LocalDevice, &tensorflow1.DeviceAttributes{})
			if err := m.LocalDevice[len(m.LocalDevice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteDevice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteDevice = append(m.RemoteDevice, &tensorflow1.DeviceAttributes{})
			if err := m.RemoteDevice[len(m.RemoteDevice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMaster(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMaster
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMaster
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMaster(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMaster = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMaster   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/core/protobuf/master.proto", fileDescriptorMaster)
}

var fileDescriptorMaster = []byte{
	// 733 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x3d, 0x6f, 0x1b, 0x47,
	0x10, 0xe5, 0x92, 0x12, 0x23, 0x8e, 0x48, 0x29, 0x39, 0x51, 0xd4, 0x41, 0x10, 0x0e, 0xc4, 0x05,
	0x02, 0x88, 0x24, 0x10, 0xf5, 0x91, 0x2e, 0x01, 0x02, 0x89, 0x4a, 0x94, 0x22, 0x1f, 0xc2, 0x32,
	0x48, 0x4b, 0x9c, 0xee, 0xe6, 0xa8, 0x83, 0xc9, 0x5d, 0x7a, 0x77, 0x4f, 0x74, 0xe1, 0xc2, 0xfe,
	0x07, 0x86, 0x3b, 0xf7, 0x2e, 0xfc, 0x53, 0x5c, 0xaa, 0x74, 0x69, 0xd1, 0x8d, 0x4b, 0x75, 0x76,
	0x69, 0x70, 0x77, 0x45, 0x91, 0xb4, 0x08, 0x50, 0xea, 0x38, 0x6f, 0xde, 0xcc, 0xbc, 0x79, 0xbb,
	0xb7, 0x84, 0x9d, 0x9e, 0xe0, 0x8a, 0x9f, 0xa5, 0x71, 0x5d, 0x21, 0x93, 0x5c, 0xc4, 0x1d, 0xde,
	0xaf, 0x87, 0x5c, 0x60, 0x7d, 0x94, 0xe8, 0x06, 0x52, 0xa1, 0x30, 0x44, 0x07, 0x6e, 0x69, 0x9b,
	0x7b, 0xd3, 0x25, 0xb1, 0x08, 0xba, 0xd8, 0xe7, 0xe2, 0x51, 0x3d, 0xc2, 0x8b, 0x24, 0xc4, 0x56,
	0xa0, 0x94, 0x48, 0xce, 0x52, 0x85, 0xd2, 0x94, 0x6f, 0x6e, 0xcf, 0x2e, 0x69, 0x8b, 0xa0, 0x77,
	0x3e, 0x8b, 0x36, 0x12, 0x13, 0x72, 0x16, 0x27, 0x6d, 0x4b, 0xfb, 0x71, 0x26, 0x8d, 0x05, 0x5d,
	0x8c, 0x5a, 0x26, 0x6d, 0xc8, 0xfe, 0x4b, 0x02, 0xe5, 0x86, 0xc0, 0x40, 0x61, 0x13, 0xa5, 0x4c,
	0x38, 0xa3, 0xf8, 0x38, 0x45, 0xa9, 0x9c, 0x3d, 0x28, 0xe8, 0xd9, 0xad, 0x08, 0x63, 0x97, 0x54,
	0x49, 0x6d, 0x79, 0xbf, 0xbc, 0x73, 0xdb, 0x79, 0xe7, 0x64, 0x98, 0x3c, 0xc6, 0x98, 0x2e, 0xb5,
	0xed, 0x2f, 0xa7, 0x0e, 0x79, 0x23, 0xc4, 0xcd, 0x6a, 0xfe, 0xc6, 0x38, 0xbf, 0xa1, 0x33, 0xa7,
	0xc3, 0xa1, 0xd4, 0xd2, 0x9c, 0x0a, 0xe4, 0x55, 0x20, 0xda, 0xa8, 0xdc, 0x5c, 0x95, 0xd4, 0x0a,
	0xd4, 0x46, 0x7e, 0x08, 0xeb, 0x53, 0x9a, 0x64, 0x8f, 0x33, 0x89, 0xce, 0x36, 0xac, 0x48, 0x03,
	0xb5, 0xce, 0x03, 0x16, 0x75, 0x50, 0x2b, 0x2b, 0xd0, 0x92, 0x45, 0xff, 0xd4, 0xa0, 0xf3, 0x3d,
	0x94, 0x8c, 0xf6, 0x0b, 0x14, 0x43, 0x58, 0xeb, 0xc9, 0xd1, 0xa2, 0x06, 0xff, 0x37, 0x98, 0xff,
	0x9a, 0x40, 0xf9, 0xf7, 0x27, 0x0a, 0x59, 0x34, 0xb5, 0xf9, 0x9c, 0x43, 0x26, 0x0c, 0xca, 0xce,
	0x65, 0xd0, 0x3e, 0xac, 0x87, 0xa9, 0x10, 0xc8, 0x54, 0x6b, 0x52, 0x5f, 0x4e, 0xeb, 0x5b, 0xb3,
	0xc9, 0x93, 0x71, 0x99, 0x0d, 0x58, 0x9f, 0x52, 0x69, 0xbd, 0xf8, 0x01, 0xbe, 0x63, 0xd8, 0x9f,
	0x6a, 0xb4, 0xa0, 0x1b, 0xad, 0x32, 0xec, 0x4f, 0x34, 0xf9, 0x44, 0x60, 0x85, 0xa6, 0xac, 0xa9,
	0xb0, 0x77, 0xcf, 0x2d, 0x77, 0x61, 0x21, 0x46, 0x8c, 0xdc, 0x6c, 0x35, 0x57, 0x5b, 0xde, 0xdf,
	0x1a, 0x5f, 0xf0, 0x9f, 0xe1, 0x6d, 0xfa, 0x4f, 0xc7, 0xe6, 0x58, 0x35, 0xd3, 0x29, 0xc3, 0x62,
	0x8c, 0x2a, 0x3c, 0x77, 0x73, 0xd5, 0x5c, 0xad, 0x40, 0x4d, 0x30, 0x76, 0xd4, 0x0b, 0x1a, 0xb6,
	0x91, 0xb3, 0x0b, 0xdf, 0xf0, 0x9e, 0x4a, 0x38, 0x93, 0xee, 0xa2, 0xf6, 0xb0, 0x32, 0x3e, 0x82,
	0xa6, 0xec, 0x5f, 0x93, 0xa5, 0x37, 0x34, 0xe7, 0x27, 0x70, 0x7a, 0x81, 0x50, 0x49, 0xd0, 0x69,
	0x89, 0x74, 0x24, 0x3e, 0xaf, 0xc5, 0x7f, 0x6b, 0x33, 0x34, 0xb5, 0xfa, 0xfd, 0xa7, 0xb0, 0x3a,
	0x5a, 0xdc, 0x1a, 0xf7, 0x33, 0xe4, 0xcd, 0x08, 0x97, 0xcc, 0xb1, 0x94, 0xe5, 0x3a, 0x07, 0xb0,
	0xd4, 0x45, 0x15, 0x44, 0x81, 0x0a, 0xee, 0xba, 0xde, 0x34, 0x65, 0x7f, 0xdb, 0x34, 0x1d, 0x11,
	0xfd, 0xe7, 0x04, 0x2a, 0xa7, 0x23, 0x49, 0x4d, 0x54, 0xe9, 0x7d, 0xfd, 0x77, 0xc6, 0xfc, 0x2f,
	0x3c, 0xc4, 0x61, 0xff, 0x04, 0x36, 0xbe, 0x92, 0x60, 0x9d, 0xb8, 0xdb, 0x4a, 0x32, 0xc3, 0xca,
	0x5f, 0x61, 0xad, 0xd1, 0xe1, 0x12, 0x1f, 0xf4, 0xb9, 0xf8, 0x15, 0x28, 0x4f, 0x56, 0x1b, 0x0d,
	0x7e, 0x13, 0x8a, 0x14, 0x25, 0xaa, 0x9b, 0x76, 0x5b, 0x50, 0x08, 0x39, 0x53, 0x41, 0xc2, 0xd0,
	0x1c, 0x50, 0x81, 0xde, 0x02, 0xc3, 0x61, 0xf6, 0x11, 0x8d, 0x93, 0x8e, 0x42, 0x21, 0xad, 0x31,
	0x25, 0x83, 0xfe, 0x61, 0x40, 0x7f, 0x15, 0x4a, 0xb6, 0xa9, 0x9d, 0xf2, 0x0b, 0x38, 0x7f, 0x25,
	0x52, 0x1d, 0x6b, 0x96, 0xbc, 0xa7, 0xf4, 0x57, 0x04, 0xd6, 0x26, 0xaa, 0xad, 0x7d, 0xbf, 0x41,
	0xb1, 0xc3, 0xc3, 0xa0, 0xd3, 0x32, 0xc3, 0xef, 0xba, 0x4e, 0xa6, 0xe4, 0x70, 0xf4, 0xe0, 0xd3,
	0x65, 0x5d, 0x61, 0x60, 0xe7, 0x10, 0x4a, 0x02, 0xbb, 0x5c, 0xe1, 0x4d, 0x87, 0xec, 0x1c, 0x1d,
	0x8a, 0xa6, 0xc4, 0xe0, 0x47, 0xed, 0xcb, 0x2b, 0x2f, 0xf3, 0xee, 0xca, 0xcb, 0x5c, 0x5f, 0x79,
	0xe4, 0xd9, 0xc0, 0x23, 0x6f, 0x06, 0x1e, 0x79, 0x3b, 0xf0, 0xc8, 0xe5, 0xc0, 0x23, 0xef, 0x07,
	0x1e, 0xf9, 0x38, 0xf0, 0x32, 0xd7, 0x03, 0x8f, 0xbc, 0xf8, 0xe0, 0x65, 0x60, 0x93, 0x8b, 0xf6,
	0x78, 0xf3, 0x28, 0x91, 0x4a, 0xa4, 0x4c, 0x25, 0x5d, 0x3c, 0x72, 0x8f, 0x87, 0x81, 0x1e, 0x12,
	0x51, 0x83, 0xe9, 0x2f, 0x40, 0x9e, 0x92, 0xcf, 0x84, 0x9c, 0xe5, 0xf5, 0xff, 0xc5, 0xc1, 0x97,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x49, 0xa3, 0xde, 0x0f, 0x1b, 0x07, 0x00, 0x00,
}
