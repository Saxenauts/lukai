// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/core/protobuf/debug.proto

/*
	Package tensorflow is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/core/protobuf/debug.proto

	It has these top-level messages:
		DebugTensorWatch
		DebugOptions
*/
package tensorflow

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// EXPERIMENTAL. Option for watching a node.
type DebugTensorWatch struct {
	// Name of the node to watch.
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Output slot to watch.
	// The semantics of output_slot == -1 is that the node is only watched for
	// completion, but not for any output tensors. See NodeCompletionCallback
	// in debug_gateway.h.
	// TODO(cais): Implement this semantics.
	OutputSlot int32 `protobuf:"varint,2,opt,name=output_slot,json=outputSlot,proto3" json:"output_slot,omitempty"`
	// Name(s) of the debugging op(s).
	// One or more than one probes on a tensor.
	// e.g., {"DebugIdentity", "DebugNanCount"}
	DebugOps []string `protobuf:"bytes,3,rep,name=debug_ops,json=debugOps" json:"debug_ops,omitempty"`
	// URL(s) for debug targets(s).
	//   E.g., "file:///foo/tfdbg_dump", "grpc://localhost:11011"
	// Each debug op listed in debug_ops will publish its output tensor (debug
	// signal) to all URLs in debug_urls.
	//
	// N.B. Session::Run() supports concurrent invocations of the same inputs
	// (feed keys), outputs and target nodes. If such concurrent invocations
	// are to be debugged, the callers of Session::Run() must use distinct
	// debug_urls to make sure that the streamed or dumped events do not overlap
	// among the invocations.
	// TODO(cais): More visible documentation of this in g3docs.
	DebugUrls []string `protobuf:"bytes,4,rep,name=debug_urls,json=debugUrls" json:"debug_urls,omitempty"`
	// Do not error out if debug op creation fails (e.g., due to dtype
	// incompatibility). Instead, just log the failure.
	TolerateDebugOpCreationFailures bool `protobuf:"varint,5,opt,name=tolerate_debug_op_creation_failures,json=tolerateDebugOpCreationFailures,proto3" json:"tolerate_debug_op_creation_failures,omitempty"`
}

func (m *DebugTensorWatch) Reset()                    { *m = DebugTensorWatch{} }
func (*DebugTensorWatch) ProtoMessage()               {}
func (*DebugTensorWatch) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{0} }

func (m *DebugTensorWatch) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *DebugTensorWatch) GetOutputSlot() int32 {
	if m != nil {
		return m.OutputSlot
	}
	return 0
}

func (m *DebugTensorWatch) GetDebugOps() []string {
	if m != nil {
		return m.DebugOps
	}
	return nil
}

func (m *DebugTensorWatch) GetDebugUrls() []string {
	if m != nil {
		return m.DebugUrls
	}
	return nil
}

func (m *DebugTensorWatch) GetTolerateDebugOpCreationFailures() bool {
	if m != nil {
		return m.TolerateDebugOpCreationFailures
	}
	return false
}

// EXPERIMENTAL. Options for initializing DebuggerState.
type DebugOptions struct {
	// Debugging options
	DebugTensorWatchOpts []*DebugTensorWatch `protobuf:"bytes,4,rep,name=debug_tensor_watch_opts,json=debugTensorWatchOpts" json:"debug_tensor_watch_opts,omitempty"`
	// Caller-specified global step count.
	// Note that this is distinct from the session run count and the executor
	// step count.
	GlobalStep int64 `protobuf:"varint,10,opt,name=global_step,json=globalStep,proto3" json:"global_step,omitempty"`
}

func (m *DebugOptions) Reset()                    { *m = DebugOptions{} }
func (*DebugOptions) ProtoMessage()               {}
func (*DebugOptions) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{1} }

func (m *DebugOptions) GetDebugTensorWatchOpts() []*DebugTensorWatch {
	if m != nil {
		return m.DebugTensorWatchOpts
	}
	return nil
}

func (m *DebugOptions) GetGlobalStep() int64 {
	if m != nil {
		return m.GlobalStep
	}
	return 0
}

func init() {
	proto.RegisterType((*DebugTensorWatch)(nil), "tensorflow.DebugTensorWatch")
	proto.RegisterType((*DebugOptions)(nil), "tensorflow.DebugOptions")
}
func (this *DebugTensorWatch) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DebugTensorWatch)
	if !ok {
		that2, ok := that.(DebugTensorWatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.NodeName != that1.NodeName {
		return false
	}
	if this.OutputSlot != that1.OutputSlot {
		return false
	}
	if len(this.DebugOps) != len(that1.DebugOps) {
		return false
	}
	for i := range this.DebugOps {
		if this.DebugOps[i] != that1.DebugOps[i] {
			return false
		}
	}
	if len(this.DebugUrls) != len(that1.DebugUrls) {
		return false
	}
	for i := range this.DebugUrls {
		if this.DebugUrls[i] != that1.DebugUrls[i] {
			return false
		}
	}
	if this.TolerateDebugOpCreationFailures != that1.TolerateDebugOpCreationFailures {
		return false
	}
	return true
}
func (this *DebugOptions) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DebugOptions)
	if !ok {
		that2, ok := that.(DebugOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.DebugTensorWatchOpts) != len(that1.DebugTensorWatchOpts) {
		return false
	}
	for i := range this.DebugTensorWatchOpts {
		if !this.DebugTensorWatchOpts[i].Equal(that1.DebugTensorWatchOpts[i]) {
			return false
		}
	}
	if this.GlobalStep != that1.GlobalStep {
		return false
	}
	return true
}
func (this *DebugTensorWatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&tensorflow.DebugTensorWatch{")
	s = append(s, "NodeName: "+fmt.Sprintf("%#v", this.NodeName)+",\n")
	s = append(s, "OutputSlot: "+fmt.Sprintf("%#v", this.OutputSlot)+",\n")
	s = append(s, "DebugOps: "+fmt.Sprintf("%#v", this.DebugOps)+",\n")
	s = append(s, "DebugUrls: "+fmt.Sprintf("%#v", this.DebugUrls)+",\n")
	s = append(s, "TolerateDebugOpCreationFailures: "+fmt.Sprintf("%#v", this.TolerateDebugOpCreationFailures)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DebugOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow.DebugOptions{")
	if this.DebugTensorWatchOpts != nil {
		s = append(s, "DebugTensorWatchOpts: "+fmt.Sprintf("%#v", this.DebugTensorWatchOpts)+",\n")
	}
	s = append(s, "GlobalStep: "+fmt.Sprintf("%#v", this.GlobalStep)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDebug(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DebugTensorWatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugTensorWatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDebug(dAtA, i, uint64(len(m.NodeName)))
		i += copy(dAtA[i:], m.NodeName)
	}
	if m.OutputSlot != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.OutputSlot))
	}
	if len(m.DebugOps) > 0 {
		for _, s := range m.DebugOps {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.DebugUrls) > 0 {
		for _, s := range m.DebugUrls {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.TolerateDebugOpCreationFailures {
		dAtA[i] = 0x28
		i++
		if m.TolerateDebugOpCreationFailures {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DebugOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DebugTensorWatchOpts) > 0 {
		for _, msg := range m.DebugTensorWatchOpts {
			dAtA[i] = 0x22
			i++
			i = encodeVarintDebug(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.GlobalStep != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintDebug(dAtA, i, uint64(m.GlobalStep))
	}
	return i, nil
}

func encodeFixed64Debug(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Debug(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDebug(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DebugTensorWatch) Size() (n int) {
	var l int
	_ = l
	l = len(m.NodeName)
	if l > 0 {
		n += 1 + l + sovDebug(uint64(l))
	}
	if m.OutputSlot != 0 {
		n += 1 + sovDebug(uint64(m.OutputSlot))
	}
	if len(m.DebugOps) > 0 {
		for _, s := range m.DebugOps {
			l = len(s)
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	if len(m.DebugUrls) > 0 {
		for _, s := range m.DebugUrls {
			l = len(s)
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	if m.TolerateDebugOpCreationFailures {
		n += 2
	}
	return n
}

func (m *DebugOptions) Size() (n int) {
	var l int
	_ = l
	if len(m.DebugTensorWatchOpts) > 0 {
		for _, e := range m.DebugTensorWatchOpts {
			l = e.Size()
			n += 1 + l + sovDebug(uint64(l))
		}
	}
	if m.GlobalStep != 0 {
		n += 1 + sovDebug(uint64(m.GlobalStep))
	}
	return n
}

func sovDebug(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDebug(x uint64) (n int) {
	return sovDebug(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DebugTensorWatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DebugTensorWatch{`,
		`NodeName:` + fmt.Sprintf("%v", this.NodeName) + `,`,
		`OutputSlot:` + fmt.Sprintf("%v", this.OutputSlot) + `,`,
		`DebugOps:` + fmt.Sprintf("%v", this.DebugOps) + `,`,
		`DebugUrls:` + fmt.Sprintf("%v", this.DebugUrls) + `,`,
		`TolerateDebugOpCreationFailures:` + fmt.Sprintf("%v", this.TolerateDebugOpCreationFailures) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DebugOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DebugOptions{`,
		`DebugTensorWatchOpts:` + strings.Replace(fmt.Sprintf("%v", this.DebugTensorWatchOpts), "DebugTensorWatch", "DebugTensorWatch", 1) + `,`,
		`GlobalStep:` + fmt.Sprintf("%v", this.GlobalStep) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDebug(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DebugTensorWatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugTensorWatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugTensorWatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputSlot", wireType)
			}
			m.OutputSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputSlot |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugOps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DebugOps = append(m.DebugOps, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DebugUrls = append(m.DebugUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TolerateDebugOpCreationFailures", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TolerateDebugOpCreationFailures = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugTensorWatchOpts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDebug
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DebugTensorWatchOpts = append(m.DebugTensorWatchOpts, &DebugTensorWatch{})
			if err := m.DebugTensorWatchOpts[len(m.DebugTensorWatchOpts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalStep", wireType)
			}
			m.GlobalStep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalStep |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDebug(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDebug
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDebug(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDebug
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDebug
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDebug
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDebug
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDebug(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDebug = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDebug   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("protobuf/tensorflow/core/protobuf/debug.proto", fileDescriptorDebug) }

var fileDescriptorDebug = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x31, 0x6f, 0xda, 0x40,
	0x14, 0xc7, 0xfd, 0x4a, 0xa9, 0xe0, 0xe8, 0x50, 0x59, 0x95, 0x6a, 0xa9, 0xed, 0x61, 0xd1, 0xc5,
	0x4b, 0x41, 0x6a, 0xbf, 0x01, 0x45, 0x9d, 0xaa, 0x82, 0x4c, 0xab, 0x76, 0x3b, 0x9d, 0xe1, 0x4c,
	0x51, 0x0f, 0xbf, 0xd3, 0xdd, 0x59, 0xac, 0x19, 0xf2, 0x01, 0xf2, 0x31, 0xf2, 0x51, 0x32, 0x32,
	0x46, 0x99, 0x82, 0xb3, 0x64, 0x64, 0xcc, 0x18, 0x9d, 0x0f, 0x42, 0xc4, 0xe8, 0xdf, 0xff, 0xff,
	0x9e, 0xff, 0xf7, 0x7f, 0xe4, 0xb3, 0xd2, 0x68, 0x31, 0x2b, 0xf3, 0x81, 0x15, 0x85, 0x41, 0x9d,
	0x4b, 0x5c, 0x0f, 0x66, 0xa8, 0xc5, 0xe0, 0x49, 0x98, 0x8b, 0xac, 0x5c, 0xf4, 0xeb, 0xcf, 0x90,
	0x1c, 0x5d, 0xbd, 0x1b, 0x20, 0x6f, 0x46, 0x4e, 0xfb, 0x55, 0xb3, 0x3f, 0xdc, 0xce, 0xfe, 0x85,
	0xef, 0x49, 0xbb, 0xc0, 0xb9, 0x60, 0x05, 0x5f, 0x89, 0x08, 0x62, 0x48, 0xda, 0x69, 0xcb, 0x81,
	0x9f, 0x7c, 0x25, 0xc2, 0x2e, 0xe9, 0x60, 0x69, 0x55, 0x69, 0x99, 0x91, 0x68, 0xa3, 0x17, 0x31,
	0x24, 0xcd, 0x94, 0x78, 0x34, 0x95, 0x68, 0xdd, 0x74, 0xfd, 0x37, 0x86, 0xca, 0x44, 0x8d, 0xb8,
	0xe1, 0xa6, 0x6b, 0x30, 0x56, 0x26, 0xfc, 0x48, 0x88, 0x17, 0x4b, 0x2d, 0x4d, 0xf4, 0xb2, 0x56,
	0xbd, 0xfd, 0xb7, 0x96, 0x26, 0xfc, 0x41, 0x3e, 0x59, 0x94, 0x42, 0x73, 0x2b, 0xd8, 0x61, 0x09,
	0x9b, 0x69, 0xc1, 0xed, 0x12, 0x0b, 0x96, 0xf3, 0xa5, 0x2c, 0xb5, 0x30, 0x51, 0x33, 0x86, 0xa4,
	0x95, 0x76, 0x0f, 0xd6, 0x91, 0xdf, 0xfe, 0x6d, 0xef, 0xfb, 0xbe, 0xb7, 0xf5, 0xce, 0x81, 0xbc,
	0xde, 0x6b, 0x8e, 0x9b, 0x70, 0x4a, 0xde, 0xf9, 0xad, 0xbe, 0x01, 0xb6, 0x76, 0xcf, 0x65, 0xa8,
	0xac, 0x8f, 0xd2, 0xf9, 0xf2, 0xa1, 0x7f, 0xec, 0xa6, 0x7f, 0xda, 0x4b, 0xfa, 0x76, 0x7e, 0x42,
	0xc6, 0xca, 0x1a, 0x57, 0xc8, 0x42, 0x62, 0xc6, 0x25, 0x33, 0x56, 0xa8, 0x88, 0xc4, 0x90, 0x34,
	0x52, 0xe2, 0xd1, 0xd4, 0x0a, 0x35, 0xfc, 0xbb, 0xd9, 0xd2, 0xe0, 0x7a, 0x4b, 0x83, 0xdd, 0x96,
	0xc2, 0x59, 0x45, 0xe1, 0xb2, 0xa2, 0x70, 0x55, 0x51, 0xd8, 0x54, 0x14, 0x6e, 0x2b, 0x0a, 0xf7,
	0x15, 0x0d, 0x76, 0x15, 0x85, 0x8b, 0x3b, 0x1a, 0x90, 0x08, 0xf5, 0xe2, 0x79, 0x8a, 0x5c, 0xf3,
	0x95, 0x58, 0xa3, 0xfe, 0x3f, 0xec, 0xd4, 0x81, 0x26, 0xee, 0x86, 0x66, 0x02, 0x0f, 0x00, 0xd9,
	0xab, 0xfa, 0xa0, 0x5f, 0x1f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xbf, 0x04, 0x33, 0x01, 0x02,
	0x00, 0x00,
}
