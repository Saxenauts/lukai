// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/core/protobuf/worker_service.proto

/*
	Package tensorflow_grpc is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/core/protobuf/worker_service.proto

	It has these top-level messages:
*/
package tensorflow_grpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow21 "github.com/d4l3k/pok/protobuf/tensorflow/core/protobuf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WorkerService service

type WorkerServiceClient interface {
	// See worker.proto for details.
	GetStatus(ctx context.Context, in *tensorflow21.GetStatusRequest, opts ...grpc.CallOption) (*tensorflow21.GetStatusResponse, error)
	// See worker.proto for details.
	CreateWorkerSession(ctx context.Context, in *tensorflow21.CreateWorkerSessionRequest, opts ...grpc.CallOption) (*tensorflow21.CreateWorkerSessionResponse, error)
	// See worker.proto for details.
	RegisterGraph(ctx context.Context, in *tensorflow21.RegisterGraphRequest, opts ...grpc.CallOption) (*tensorflow21.RegisterGraphResponse, error)
	// See worker.proto for details.
	DeregisterGraph(ctx context.Context, in *tensorflow21.DeregisterGraphRequest, opts ...grpc.CallOption) (*tensorflow21.DeregisterGraphResponse, error)
	// See worker.proto for details.
	RunGraph(ctx context.Context, in *tensorflow21.RunGraphRequest, opts ...grpc.CallOption) (*tensorflow21.RunGraphResponse, error)
	// See worker.proto for details.
	CleanupGraph(ctx context.Context, in *tensorflow21.CleanupGraphRequest, opts ...grpc.CallOption) (*tensorflow21.CleanupGraphResponse, error)
	// See worker.proto for details.
	CleanupAll(ctx context.Context, in *tensorflow21.CleanupAllRequest, opts ...grpc.CallOption) (*tensorflow21.CleanupAllResponse, error)
	// See worker.proto for details.
	RecvTensor(ctx context.Context, in *tensorflow21.RecvTensorRequest, opts ...grpc.CallOption) (*tensorflow21.RecvTensorResponse, error)
	// See worker.proto for details.
	Logging(ctx context.Context, in *tensorflow21.LoggingRequest, opts ...grpc.CallOption) (*tensorflow21.LoggingResponse, error)
	// See worker.proto for details.
	Tracing(ctx context.Context, in *tensorflow21.TracingRequest, opts ...grpc.CallOption) (*tensorflow21.TracingResponse, error)
}

type workerServiceClient struct {
	cc *grpc.ClientConn
}

func NewWorkerServiceClient(cc *grpc.ClientConn) WorkerServiceClient {
	return &workerServiceClient{cc}
}

func (c *workerServiceClient) GetStatus(ctx context.Context, in *tensorflow21.GetStatusRequest, opts ...grpc.CallOption) (*tensorflow21.GetStatusResponse, error) {
	out := new(tensorflow21.GetStatusResponse)
	err := grpc.Invoke(ctx, "/tensorflow.grpc.WorkerService/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) CreateWorkerSession(ctx context.Context, in *tensorflow21.CreateWorkerSessionRequest, opts ...grpc.CallOption) (*tensorflow21.CreateWorkerSessionResponse, error) {
	out := new(tensorflow21.CreateWorkerSessionResponse)
	err := grpc.Invoke(ctx, "/tensorflow.grpc.WorkerService/CreateWorkerSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) RegisterGraph(ctx context.Context, in *tensorflow21.RegisterGraphRequest, opts ...grpc.CallOption) (*tensorflow21.RegisterGraphResponse, error) {
	out := new(tensorflow21.RegisterGraphResponse)
	err := grpc.Invoke(ctx, "/tensorflow.grpc.WorkerService/RegisterGraph", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) DeregisterGraph(ctx context.Context, in *tensorflow21.DeregisterGraphRequest, opts ...grpc.CallOption) (*tensorflow21.DeregisterGraphResponse, error) {
	out := new(tensorflow21.DeregisterGraphResponse)
	err := grpc.Invoke(ctx, "/tensorflow.grpc.WorkerService/DeregisterGraph", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) RunGraph(ctx context.Context, in *tensorflow21.RunGraphRequest, opts ...grpc.CallOption) (*tensorflow21.RunGraphResponse, error) {
	out := new(tensorflow21.RunGraphResponse)
	err := grpc.Invoke(ctx, "/tensorflow.grpc.WorkerService/RunGraph", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) CleanupGraph(ctx context.Context, in *tensorflow21.CleanupGraphRequest, opts ...grpc.CallOption) (*tensorflow21.CleanupGraphResponse, error) {
	out := new(tensorflow21.CleanupGraphResponse)
	err := grpc.Invoke(ctx, "/tensorflow.grpc.WorkerService/CleanupGraph", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) CleanupAll(ctx context.Context, in *tensorflow21.CleanupAllRequest, opts ...grpc.CallOption) (*tensorflow21.CleanupAllResponse, error) {
	out := new(tensorflow21.CleanupAllResponse)
	err := grpc.Invoke(ctx, "/tensorflow.grpc.WorkerService/CleanupAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) RecvTensor(ctx context.Context, in *tensorflow21.RecvTensorRequest, opts ...grpc.CallOption) (*tensorflow21.RecvTensorResponse, error) {
	out := new(tensorflow21.RecvTensorResponse)
	err := grpc.Invoke(ctx, "/tensorflow.grpc.WorkerService/RecvTensor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) Logging(ctx context.Context, in *tensorflow21.LoggingRequest, opts ...grpc.CallOption) (*tensorflow21.LoggingResponse, error) {
	out := new(tensorflow21.LoggingResponse)
	err := grpc.Invoke(ctx, "/tensorflow.grpc.WorkerService/Logging", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) Tracing(ctx context.Context, in *tensorflow21.TracingRequest, opts ...grpc.CallOption) (*tensorflow21.TracingResponse, error) {
	out := new(tensorflow21.TracingResponse)
	err := grpc.Invoke(ctx, "/tensorflow.grpc.WorkerService/Tracing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WorkerService service

type WorkerServiceServer interface {
	// See worker.proto for details.
	GetStatus(context.Context, *tensorflow21.GetStatusRequest) (*tensorflow21.GetStatusResponse, error)
	// See worker.proto for details.
	CreateWorkerSession(context.Context, *tensorflow21.CreateWorkerSessionRequest) (*tensorflow21.CreateWorkerSessionResponse, error)
	// See worker.proto for details.
	RegisterGraph(context.Context, *tensorflow21.RegisterGraphRequest) (*tensorflow21.RegisterGraphResponse, error)
	// See worker.proto for details.
	DeregisterGraph(context.Context, *tensorflow21.DeregisterGraphRequest) (*tensorflow21.DeregisterGraphResponse, error)
	// See worker.proto for details.
	RunGraph(context.Context, *tensorflow21.RunGraphRequest) (*tensorflow21.RunGraphResponse, error)
	// See worker.proto for details.
	CleanupGraph(context.Context, *tensorflow21.CleanupGraphRequest) (*tensorflow21.CleanupGraphResponse, error)
	// See worker.proto for details.
	CleanupAll(context.Context, *tensorflow21.CleanupAllRequest) (*tensorflow21.CleanupAllResponse, error)
	// See worker.proto for details.
	RecvTensor(context.Context, *tensorflow21.RecvTensorRequest) (*tensorflow21.RecvTensorResponse, error)
	// See worker.proto for details.
	Logging(context.Context, *tensorflow21.LoggingRequest) (*tensorflow21.LoggingResponse, error)
	// See worker.proto for details.
	Tracing(context.Context, *tensorflow21.TracingRequest) (*tensorflow21.TracingResponse, error)
}

func RegisterWorkerServiceServer(s *grpc.Server, srv WorkerServiceServer) {
	s.RegisterService(&_WorkerService_serviceDesc, srv)
}

func _WorkerService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tensorflow21.GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).GetStatus(ctx, req.(*tensorflow21.GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_CreateWorkerSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tensorflow21.CreateWorkerSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).CreateWorkerSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/CreateWorkerSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).CreateWorkerSession(ctx, req.(*tensorflow21.CreateWorkerSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_RegisterGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tensorflow21.RegisterGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).RegisterGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/RegisterGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).RegisterGraph(ctx, req.(*tensorflow21.RegisterGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_DeregisterGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tensorflow21.DeregisterGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).DeregisterGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/DeregisterGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).DeregisterGraph(ctx, req.(*tensorflow21.DeregisterGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_RunGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tensorflow21.RunGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).RunGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/RunGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).RunGraph(ctx, req.(*tensorflow21.RunGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_CleanupGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tensorflow21.CleanupGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).CleanupGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/CleanupGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).CleanupGraph(ctx, req.(*tensorflow21.CleanupGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_CleanupAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tensorflow21.CleanupAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).CleanupAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/CleanupAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).CleanupAll(ctx, req.(*tensorflow21.CleanupAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_RecvTensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tensorflow21.RecvTensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).RecvTensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/RecvTensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).RecvTensor(ctx, req.(*tensorflow21.RecvTensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_Logging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tensorflow21.LoggingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).Logging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/Logging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).Logging(ctx, req.(*tensorflow21.LoggingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_Tracing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tensorflow21.TracingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).Tracing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/Tracing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).Tracing(ctx, req.(*tensorflow21.TracingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tensorflow.grpc.WorkerService",
	HandlerType: (*WorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _WorkerService_GetStatus_Handler,
		},
		{
			MethodName: "CreateWorkerSession",
			Handler:    _WorkerService_CreateWorkerSession_Handler,
		},
		{
			MethodName: "RegisterGraph",
			Handler:    _WorkerService_RegisterGraph_Handler,
		},
		{
			MethodName: "DeregisterGraph",
			Handler:    _WorkerService_DeregisterGraph_Handler,
		},
		{
			MethodName: "RunGraph",
			Handler:    _WorkerService_RunGraph_Handler,
		},
		{
			MethodName: "CleanupGraph",
			Handler:    _WorkerService_CleanupGraph_Handler,
		},
		{
			MethodName: "CleanupAll",
			Handler:    _WorkerService_CleanupAll_Handler,
		},
		{
			MethodName: "RecvTensor",
			Handler:    _WorkerService_RecvTensor_Handler,
		},
		{
			MethodName: "Logging",
			Handler:    _WorkerService_Logging_Handler,
		},
		{
			MethodName: "Tracing",
			Handler:    _WorkerService_Tracing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/tensorflow/core/protobuf/worker_service.proto",
}

func init() {
	proto.RegisterFile("protobuf/tensorflow/core/protobuf/worker_service.proto", fileDescriptorWorkerService)
}

var fileDescriptorWorkerService = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0xd3, 0xc1, 0xae, 0xd2, 0x40,
	0x18, 0x05, 0xe0, 0xce, 0x06, 0x74, 0x22, 0x21, 0x19, 0x76, 0x05, 0x46, 0xc4, 0xa8, 0x3b, 0x48,
	0x34, 0x71, 0x4f, 0xd1, 0x60, 0xa2, 0x26, 0x58, 0x48, 0x4c, 0xdc, 0x90, 0x52, 0x7f, 0x6a, 0x63,
	0xed, 0xd4, 0x99, 0x29, 0x6c, 0x7d, 0x04, 0x1f, 0xc3, 0xad, 0x6f, 0xe1, 0x92, 0xa5, 0x4b, 0xa9,
	0x9b, 0xbb, 0xe4, 0x11, 0x6e, 0x6e, 0x3b, 0x03, 0xd3, 0x7b, 0x0b, 0x6c, 0xcf, 0x39, 0xff, 0x47,
	0x43, 0x32, 0xf8, 0x65, 0xc2, 0x99, 0x64, 0xcb, 0x74, 0x35, 0x94, 0x10, 0x0b, 0xc6, 0x57, 0x11,
	0xdb, 0x0c, 0x7d, 0xc6, 0x61, 0x78, 0x28, 0x36, 0x8c, 0x7f, 0x05, 0xbe, 0x10, 0xc0, 0xd7, 0xa1,
	0x0f, 0x83, 0x3c, 0x27, 0xcd, 0xe3, 0x7c, 0x10, 0xf0, 0xc4, 0xb7, 0x9f, 0x5c, 0xb8, 0x2f, 0xee,
	0x9e, 0xff, 0xae, 0xe1, 0xc6, 0xc7, 0x3c, 0x98, 0x15, 0x1e, 0x79, 0x83, 0xef, 0x4f, 0x40, 0xce,
	0xa4, 0x27, 0x53, 0x41, 0x3a, 0x03, 0xc3, 0x3d, 0xc4, 0x2e, 0x7c, 0x4f, 0x41, 0x48, 0xbb, 0x7b,
	0xa2, 0x15, 0x09, 0x8b, 0x05, 0x90, 0x15, 0x6e, 0x8d, 0x39, 0x78, 0x12, 0xf4, 0x0f, 0x08, 0x11,
	0xb2, 0x98, 0x3c, 0x35, 0xaf, 0x2a, 0x06, 0x5a, 0x7f, 0x76, 0x71, 0xa7, 0x7e, 0x67, 0x8e, 0x1b,
	0x2e, 0x04, 0xa1, 0x90, 0xc0, 0x27, 0xdc, 0x4b, 0xbe, 0x90, 0x9e, 0x79, 0x59, 0xaa, 0xb4, 0xfd,
	0xe8, 0xcc, 0x42, 0xa9, 0x9f, 0x70, 0xf3, 0x15, 0xf0, 0x92, 0xdb, 0x37, 0xaf, 0x6e, 0x95, 0x5a,
	0x7e, 0x7c, 0x76, 0xa3, 0xec, 0xd7, 0xf8, 0x9e, 0x9b, 0xc6, 0x05, 0xda, 0x2e, 0x7d, 0x8a, 0x4a,
	0xb5, 0xd6, 0xa9, 0x2e, 0x15, 0xf3, 0x01, 0x3f, 0x18, 0x47, 0xe0, 0xc5, 0x69, 0x52, 0x50, 0x0f,
	0x4b, 0xff, 0x98, 0xd1, 0x68, 0xae, 0x77, 0x7a, 0xa0, 0xc8, 0xb7, 0x18, 0xab, 0x7c, 0x14, 0x45,
	0xa4, 0x5b, 0xb1, 0x1f, 0x45, 0x91, 0xe6, 0xe8, 0xa9, 0x5a, 0x61, 0xef, 0x31, 0x76, 0xc1, 0x5f,
	0xcf, 0xf3, 0x51, 0x19, 0x3b, 0xe6, 0x95, 0x98, 0x59, 0x17, 0x58, 0xdf, 0x22, 0x0e, 0xae, 0xbf,
	0x63, 0x41, 0x10, 0xc6, 0x01, 0xb1, 0xcd, 0xb1, 0x0a, 0x35, 0xd4, 0xae, 0xec, 0xd4, 0x27, 0x39,
	0xb8, 0x3e, 0xe7, 0x9e, 0x7f, 0xc7, 0x50, 0x61, 0xa5, 0x71, 0xe8, 0x0a, 0xc3, 0x59, 0x6c, 0x77,
	0xd4, 0xfa, 0xbb, 0xa3, 0xd6, 0x7e, 0x47, 0xd1, 0x8f, 0x8c, 0xa2, 0x5f, 0x19, 0x45, 0x7f, 0x32,
	0x8a, 0xb6, 0x19, 0x45, 0xff, 0x32, 0x8a, 0xae, 0x32, 0x6a, 0xed, 0x33, 0x8a, 0x7e, 0xfe, 0xa7,
	0x16, 0xb6, 0x19, 0x0f, 0x4c, 0xed, 0x73, 0x28, 0x24, 0x4f, 0x63, 0x19, 0x7e, 0x03, 0xa7, 0x55,
	0x7a, 0x7a, 0xd3, 0x9b, 0x17, 0x29, 0xa6, 0x68, 0x59, 0xcb, 0xdf, 0xe6, 0x8b, 0xeb, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x3d, 0xc6, 0xc3, 0x0c, 0x0d, 0x04, 0x00, 0x00,
}
