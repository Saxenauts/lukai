// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/core/protobuf/device_properties.proto

/*
	Package tensorflow is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/core/protobuf/device_properties.proto

	It has these top-level messages:
		DeviceProperties
*/
package tensorflow

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import fmt "fmt"
import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DeviceProperties struct {
	// Device type (CPU, GPU, ...)
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Vendor (Intel, nvidia, ...)
	Vendor string `protobuf:"bytes,2,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// Model (Haswell, K40, ...)
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// Core Frequency in Mhz
	Frequency int64 `protobuf:"varint,4,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Number of cores
	NumCores int64 `protobuf:"varint,5,opt,name=num_cores,json=numCores,proto3" json:"num_cores,omitempty"`
	// Version of the tools and libraries used with this device (e.g. gcc 4.9,
	// cudnn 5.1)
	Environment map[string]string `protobuf:"bytes,6,rep,name=environment" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Number of registers per core.
	NumRegisters int64 `protobuf:"varint,7,opt,name=num_registers,json=numRegisters,proto3" json:"num_registers,omitempty"`
	// L1 cache size in bytes
	L1CacheSize int64 `protobuf:"varint,8,opt,name=l1_cache_size,json=l1CacheSize,proto3" json:"l1_cache_size,omitempty"`
	// L2 cache size in bytes
	L2CacheSize int64 `protobuf:"varint,9,opt,name=l2_cache_size,json=l2CacheSize,proto3" json:"l2_cache_size,omitempty"`
	// L3 cache size in bytes
	L3CacheSize int64 `protobuf:"varint,10,opt,name=l3_cache_size,json=l3CacheSize,proto3" json:"l3_cache_size,omitempty"`
	// Shared memory size per multiprocessor in bytes. This field is
	// applicable to GPUs only.
	SharedMemorySizePerMultiprocessor int64 `protobuf:"varint,11,opt,name=shared_memory_size_per_multiprocessor,json=sharedMemorySizePerMultiprocessor,proto3" json:"shared_memory_size_per_multiprocessor,omitempty"`
	// Memory size in bytes
	MemorySize int64 `protobuf:"varint,12,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	// Memory bandwidth in KB/s
	Bandwidth int64 `protobuf:"varint,13,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
}

func (m *DeviceProperties) Reset()                    { *m = DeviceProperties{} }
func (*DeviceProperties) ProtoMessage()               {}
func (*DeviceProperties) Descriptor() ([]byte, []int) { return fileDescriptorDeviceProperties, []int{0} }

func (m *DeviceProperties) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DeviceProperties) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *DeviceProperties) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *DeviceProperties) GetFrequency() int64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *DeviceProperties) GetNumCores() int64 {
	if m != nil {
		return m.NumCores
	}
	return 0
}

func (m *DeviceProperties) GetEnvironment() map[string]string {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *DeviceProperties) GetNumRegisters() int64 {
	if m != nil {
		return m.NumRegisters
	}
	return 0
}

func (m *DeviceProperties) GetL1CacheSize() int64 {
	if m != nil {
		return m.L1CacheSize
	}
	return 0
}

func (m *DeviceProperties) GetL2CacheSize() int64 {
	if m != nil {
		return m.L2CacheSize
	}
	return 0
}

func (m *DeviceProperties) GetL3CacheSize() int64 {
	if m != nil {
		return m.L3CacheSize
	}
	return 0
}

func (m *DeviceProperties) GetSharedMemorySizePerMultiprocessor() int64 {
	if m != nil {
		return m.SharedMemorySizePerMultiprocessor
	}
	return 0
}

func (m *DeviceProperties) GetMemorySize() int64 {
	if m != nil {
		return m.MemorySize
	}
	return 0
}

func (m *DeviceProperties) GetBandwidth() int64 {
	if m != nil {
		return m.Bandwidth
	}
	return 0
}

func init() {
	proto.RegisterType((*DeviceProperties)(nil), "tensorflow.DeviceProperties")
}
func (this *DeviceProperties) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DeviceProperties)
	if !ok {
		that2, ok := that.(DeviceProperties)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Vendor != that1.Vendor {
		return false
	}
	if this.Model != that1.Model {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	if this.NumCores != that1.NumCores {
		return false
	}
	if len(this.Environment) != len(that1.Environment) {
		return false
	}
	for i := range this.Environment {
		if this.Environment[i] != that1.Environment[i] {
			return false
		}
	}
	if this.NumRegisters != that1.NumRegisters {
		return false
	}
	if this.L1CacheSize != that1.L1CacheSize {
		return false
	}
	if this.L2CacheSize != that1.L2CacheSize {
		return false
	}
	if this.L3CacheSize != that1.L3CacheSize {
		return false
	}
	if this.SharedMemorySizePerMultiprocessor != that1.SharedMemorySizePerMultiprocessor {
		return false
	}
	if this.MemorySize != that1.MemorySize {
		return false
	}
	if this.Bandwidth != that1.Bandwidth {
		return false
	}
	return true
}
func (this *DeviceProperties) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&tensorflow.DeviceProperties{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Vendor: "+fmt.Sprintf("%#v", this.Vendor)+",\n")
	s = append(s, "Model: "+fmt.Sprintf("%#v", this.Model)+",\n")
	s = append(s, "Frequency: "+fmt.Sprintf("%#v", this.Frequency)+",\n")
	s = append(s, "NumCores: "+fmt.Sprintf("%#v", this.NumCores)+",\n")
	keysForEnvironment := make([]string, 0, len(this.Environment))
	for k, _ := range this.Environment {
		keysForEnvironment = append(keysForEnvironment, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEnvironment)
	mapStringForEnvironment := "map[string]string{"
	for _, k := range keysForEnvironment {
		mapStringForEnvironment += fmt.Sprintf("%#v: %#v,", k, this.Environment[k])
	}
	mapStringForEnvironment += "}"
	if this.Environment != nil {
		s = append(s, "Environment: "+mapStringForEnvironment+",\n")
	}
	s = append(s, "NumRegisters: "+fmt.Sprintf("%#v", this.NumRegisters)+",\n")
	s = append(s, "L1CacheSize: "+fmt.Sprintf("%#v", this.L1CacheSize)+",\n")
	s = append(s, "L2CacheSize: "+fmt.Sprintf("%#v", this.L2CacheSize)+",\n")
	s = append(s, "L3CacheSize: "+fmt.Sprintf("%#v", this.L3CacheSize)+",\n")
	s = append(s, "SharedMemorySizePerMultiprocessor: "+fmt.Sprintf("%#v", this.SharedMemorySizePerMultiprocessor)+",\n")
	s = append(s, "MemorySize: "+fmt.Sprintf("%#v", this.MemorySize)+",\n")
	s = append(s, "Bandwidth: "+fmt.Sprintf("%#v", this.Bandwidth)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDeviceProperties(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DeviceProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceProperties) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDeviceProperties(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Vendor) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDeviceProperties(dAtA, i, uint64(len(m.Vendor)))
		i += copy(dAtA[i:], m.Vendor)
	}
	if len(m.Model) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDeviceProperties(dAtA, i, uint64(len(m.Model)))
		i += copy(dAtA[i:], m.Model)
	}
	if m.Frequency != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDeviceProperties(dAtA, i, uint64(m.Frequency))
	}
	if m.NumCores != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDeviceProperties(dAtA, i, uint64(m.NumCores))
	}
	if len(m.Environment) > 0 {
		for k, _ := range m.Environment {
			dAtA[i] = 0x32
			i++
			v := m.Environment[k]
			mapSize := 1 + len(k) + sovDeviceProperties(uint64(len(k))) + 1 + len(v) + sovDeviceProperties(uint64(len(v)))
			i = encodeVarintDeviceProperties(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDeviceProperties(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintDeviceProperties(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.NumRegisters != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDeviceProperties(dAtA, i, uint64(m.NumRegisters))
	}
	if m.L1CacheSize != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDeviceProperties(dAtA, i, uint64(m.L1CacheSize))
	}
	if m.L2CacheSize != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDeviceProperties(dAtA, i, uint64(m.L2CacheSize))
	}
	if m.L3CacheSize != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintDeviceProperties(dAtA, i, uint64(m.L3CacheSize))
	}
	if m.SharedMemorySizePerMultiprocessor != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintDeviceProperties(dAtA, i, uint64(m.SharedMemorySizePerMultiprocessor))
	}
	if m.MemorySize != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintDeviceProperties(dAtA, i, uint64(m.MemorySize))
	}
	if m.Bandwidth != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintDeviceProperties(dAtA, i, uint64(m.Bandwidth))
	}
	return i, nil
}

func encodeFixed64DeviceProperties(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32DeviceProperties(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDeviceProperties(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DeviceProperties) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovDeviceProperties(uint64(l))
	}
	l = len(m.Vendor)
	if l > 0 {
		n += 1 + l + sovDeviceProperties(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovDeviceProperties(uint64(l))
	}
	if m.Frequency != 0 {
		n += 1 + sovDeviceProperties(uint64(m.Frequency))
	}
	if m.NumCores != 0 {
		n += 1 + sovDeviceProperties(uint64(m.NumCores))
	}
	if len(m.Environment) > 0 {
		for k, v := range m.Environment {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDeviceProperties(uint64(len(k))) + 1 + len(v) + sovDeviceProperties(uint64(len(v)))
			n += mapEntrySize + 1 + sovDeviceProperties(uint64(mapEntrySize))
		}
	}
	if m.NumRegisters != 0 {
		n += 1 + sovDeviceProperties(uint64(m.NumRegisters))
	}
	if m.L1CacheSize != 0 {
		n += 1 + sovDeviceProperties(uint64(m.L1CacheSize))
	}
	if m.L2CacheSize != 0 {
		n += 1 + sovDeviceProperties(uint64(m.L2CacheSize))
	}
	if m.L3CacheSize != 0 {
		n += 1 + sovDeviceProperties(uint64(m.L3CacheSize))
	}
	if m.SharedMemorySizePerMultiprocessor != 0 {
		n += 1 + sovDeviceProperties(uint64(m.SharedMemorySizePerMultiprocessor))
	}
	if m.MemorySize != 0 {
		n += 1 + sovDeviceProperties(uint64(m.MemorySize))
	}
	if m.Bandwidth != 0 {
		n += 1 + sovDeviceProperties(uint64(m.Bandwidth))
	}
	return n
}

func sovDeviceProperties(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDeviceProperties(x uint64) (n int) {
	return sovDeviceProperties(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DeviceProperties) String() string {
	if this == nil {
		return "nil"
	}
	keysForEnvironment := make([]string, 0, len(this.Environment))
	for k, _ := range this.Environment {
		keysForEnvironment = append(keysForEnvironment, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForEnvironment)
	mapStringForEnvironment := "map[string]string{"
	for _, k := range keysForEnvironment {
		mapStringForEnvironment += fmt.Sprintf("%v: %v,", k, this.Environment[k])
	}
	mapStringForEnvironment += "}"
	s := strings.Join([]string{`&DeviceProperties{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Vendor:` + fmt.Sprintf("%v", this.Vendor) + `,`,
		`Model:` + fmt.Sprintf("%v", this.Model) + `,`,
		`Frequency:` + fmt.Sprintf("%v", this.Frequency) + `,`,
		`NumCores:` + fmt.Sprintf("%v", this.NumCores) + `,`,
		`Environment:` + mapStringForEnvironment + `,`,
		`NumRegisters:` + fmt.Sprintf("%v", this.NumRegisters) + `,`,
		`L1CacheSize:` + fmt.Sprintf("%v", this.L1CacheSize) + `,`,
		`L2CacheSize:` + fmt.Sprintf("%v", this.L2CacheSize) + `,`,
		`L3CacheSize:` + fmt.Sprintf("%v", this.L3CacheSize) + `,`,
		`SharedMemorySizePerMultiprocessor:` + fmt.Sprintf("%v", this.SharedMemorySizePerMultiprocessor) + `,`,
		`MemorySize:` + fmt.Sprintf("%v", this.MemorySize) + `,`,
		`Bandwidth:` + fmt.Sprintf("%v", this.Bandwidth) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDeviceProperties(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DeviceProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceProperties
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vendor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vendor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumCores", wireType)
			}
			m.NumCores = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumCores |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceProperties
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Environment == nil {
				m.Environment = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDeviceProperties
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDeviceProperties
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDeviceProperties
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDeviceProperties
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthDeviceProperties
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDeviceProperties(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthDeviceProperties
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Environment[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRegisters", wireType)
			}
			m.NumRegisters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRegisters |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1CacheSize", wireType)
			}
			m.L1CacheSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L1CacheSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2CacheSize", wireType)
			}
			m.L2CacheSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L2CacheSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L3CacheSize", wireType)
			}
			m.L3CacheSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L3CacheSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedMemorySizePerMultiprocessor", wireType)
			}
			m.SharedMemorySizePerMultiprocessor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SharedMemorySizePerMultiprocessor |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemorySize", wireType)
			}
			m.MemorySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemorySize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			m.Bandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bandwidth |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceProperties(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDeviceProperties
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeviceProperties(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeviceProperties
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeviceProperties
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeviceProperties
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDeviceProperties
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDeviceProperties
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDeviceProperties(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDeviceProperties = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeviceProperties   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/core/protobuf/device_properties.proto", fileDescriptorDeviceProperties)
}

var fileDescriptorDeviceProperties = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xbf, 0x6e, 0x13, 0x41,
	0x10, 0xc6, 0xbd, 0xb1, 0x63, 0xe2, 0xbd, 0x58, 0xb2, 0x56, 0x28, 0x5a, 0x01, 0x5a, 0x4c, 0x10,
	0x92, 0x1b, 0x6c, 0xc5, 0x6e, 0x80, 0x82, 0x22, 0x21, 0xa2, 0x8a, 0xb0, 0xcc, 0x03, 0x9c, 0xec,
	0xbb, 0x31, 0x3e, 0x71, 0xb7, 0x7b, 0xcc, 0xee, 0x39, 0xba, 0x54, 0x3c, 0x02, 0x8f, 0xc1, 0x73,
	0x50, 0x51, 0xa6, 0xa4, 0xc4, 0x47, 0x43, 0x99, 0x92, 0x12, 0xed, 0xfa, 0xe2, 0xb3, 0xdd, 0xed,
	0x7c, 0xf3, 0x9b, 0x3f, 0xda, 0xf9, 0xe8, 0xeb, 0x14, 0x95, 0x51, 0xb3, 0x6c, 0x3e, 0x30, 0x20,
	0xb5, 0xc2, 0x79, 0xac, 0xae, 0x07, 0x81, 0x42, 0x18, 0x6c, 0x12, 0x21, 0x2c, 0xa3, 0x00, 0xfc,
	0x14, 0x55, 0x0a, 0x68, 0x22, 0xd0, 0x7d, 0x97, 0x62, 0xb4, 0xaa, 0x38, 0xfd, 0xd1, 0xa0, 0x9d,
	0x77, 0x8e, 0x1b, 0x6f, 0x30, 0xc6, 0x68, 0xc3, 0xe4, 0x29, 0x70, 0xd2, 0x25, 0xbd, 0xd6, 0xc4,
	0xbd, 0xd9, 0x09, 0x6d, 0x2e, 0x41, 0x86, 0x0a, 0xf9, 0x81, 0x53, 0xcb, 0x88, 0x3d, 0xa4, 0x87,
	0x89, 0x0a, 0x21, 0xe6, 0x75, 0x27, 0xaf, 0x03, 0xf6, 0x84, 0xb6, 0xe6, 0x08, 0x5f, 0x32, 0x90,
	0x41, 0xce, 0x1b, 0x5d, 0xd2, 0xab, 0x4f, 0x2a, 0x81, 0x3d, 0xa6, 0x2d, 0x99, 0x25, 0xbe, 0xdd,
	0x56, 0xf3, 0x43, 0x97, 0x3d, 0x92, 0x59, 0x72, 0x61, 0x63, 0xf6, 0x81, 0x7a, 0x20, 0x97, 0x11,
	0x2a, 0x99, 0x80, 0x34, 0xbc, 0xd9, 0xad, 0xf7, 0xbc, 0xe1, 0xcb, 0x7e, 0xb5, 0x73, 0x7f, 0x7f,
	0xdf, 0xfe, 0x65, 0xc5, 0x5f, 0x4a, 0x83, 0xf9, 0x64, 0xbb, 0x03, 0x7b, 0x4e, 0xdb, 0x76, 0x1a,
	0xc2, 0xa7, 0x48, 0x1b, 0x40, 0xcd, 0x1f, 0xb8, 0x89, 0xc7, 0x32, 0x4b, 0x26, 0xf7, 0x1a, 0x3b,
	0xa5, 0xed, 0xf8, 0xcc, 0x0f, 0xa6, 0xc1, 0x02, 0x7c, 0x1d, 0xdd, 0x00, 0x3f, 0x72, 0x90, 0x17,
	0x9f, 0x5d, 0x58, 0xed, 0x63, 0x74, 0x03, 0x8e, 0x19, 0x6e, 0x33, 0xad, 0x92, 0x19, 0xee, 0x32,
	0xa3, 0x6d, 0x86, 0x96, 0xcc, 0xa8, 0x62, 0xc6, 0xf4, 0x85, 0x5e, 0x4c, 0x11, 0x42, 0x3f, 0x81,
	0x44, 0x61, 0xee, 0x40, 0x3f, 0x05, 0xf4, 0x93, 0x2c, 0x36, 0x51, 0x8a, 0x2a, 0x00, 0xad, 0x15,
	0x72, 0xcf, 0xd5, 0x3e, 0x5b, 0xc3, 0x57, 0x8e, 0xb5, 0x0d, 0xc6, 0x80, 0x57, 0x3b, 0x20, 0x7b,
	0x4a, 0xbd, 0xad, 0x56, 0xfc, 0xd8, 0xd5, 0xd1, 0x64, 0x53, 0x61, 0xef, 0x31, 0x9b, 0xca, 0xf0,
	0x3a, 0x0a, 0xcd, 0x82, 0xb7, 0xd7, 0xf7, 0xd8, 0x08, 0x8f, 0xde, 0xd2, 0xce, 0xfe, 0x17, 0xb2,
	0x0e, 0xad, 0x7f, 0x86, 0xbc, 0xb4, 0x80, 0x7d, 0xda, 0x4b, 0x2f, 0xa7, 0x71, 0x06, 0xa5, 0x01,
	0xd6, 0xc1, 0x9b, 0x83, 0x57, 0xe4, 0xfc, 0xfd, 0xed, 0x4a, 0xd4, 0x7e, 0xad, 0x44, 0xed, 0x6e,
	0x25, 0xc8, 0xd7, 0x42, 0x90, 0xef, 0x85, 0x20, 0x3f, 0x0b, 0x41, 0x6e, 0x0b, 0x41, 0x7e, 0x17,
	0x82, 0xfc, 0x2d, 0x44, 0xed, 0xae, 0x10, 0xe4, 0xdb, 0x1f, 0x51, 0x3b, 0x3f, 0xd9, 0xbf, 0xdf,
	0xd8, 0xba, 0x52, 0xff, 0x23, 0x64, 0xd6, 0x74, 0x06, 0x1d, 0xfd, 0x0f, 0x00, 0x00, 0xff, 0xff,
	0x02, 0x3b, 0xf4, 0x0d, 0xdd, 0x02, 0x00, 0x00,
}
