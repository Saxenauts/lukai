// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/core/protobuf/rewriter_config.proto

/*
	Package tensorflow is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/core/protobuf/rewriter_config.proto

	It has these top-level messages:
		AutoParallelOptions
		RewriterConfig
*/
package tensorflow

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RewriterConfig_Toggle int32

const (
	DEFAULT RewriterConfig_Toggle = 0
	ON      RewriterConfig_Toggle = 1
	OFF     RewriterConfig_Toggle = 2
)

var RewriterConfig_Toggle_name = map[int32]string{
	0: "DEFAULT",
	1: "ON",
	2: "OFF",
}
var RewriterConfig_Toggle_value = map[string]int32{
	"DEFAULT": 0,
	"ON":      1,
	"OFF":     2,
}

func (RewriterConfig_Toggle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorRewriterConfig, []int{1, 0}
}

type RewriterConfig_MemOptType int32

const (
	// The default setting (currently disabled)
	DEFAULT_MEM_OPT RewriterConfig_MemOptType = 0
	// Disabled in the meta-optimizer.
	NO_MEM_OPT RewriterConfig_MemOptType = 1
	// Driven by manual op-level annotations.
	MANUAL RewriterConfig_MemOptType = 2
	// Driven by heuristics. The behavior of these heuristics is subject to
	// change. Currently includes an experimental recomputation
	// heuristic. Manual annotations are respected, but additional nodes are
	// selected automatically.
	HEURISTICS RewriterConfig_MemOptType = 3
)

var RewriterConfig_MemOptType_name = map[int32]string{
	0: "DEFAULT_MEM_OPT",
	1: "NO_MEM_OPT",
	2: "MANUAL",
	3: "HEURISTICS",
}
var RewriterConfig_MemOptType_value = map[string]int32{
	"DEFAULT_MEM_OPT": 0,
	"NO_MEM_OPT":      1,
	"MANUAL":          2,
	"HEURISTICS":      3,
}

func (RewriterConfig_MemOptType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorRewriterConfig, []int{1, 1}
}

type AutoParallelOptions struct {
	Enable      bool  `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	NumReplicas int32 `protobuf:"varint,2,opt,name=num_replicas,json=numReplicas,proto3" json:"num_replicas,omitempty"`
}

func (m *AutoParallelOptions) Reset()      { *m = AutoParallelOptions{} }
func (*AutoParallelOptions) ProtoMessage() {}
func (*AutoParallelOptions) Descriptor() ([]byte, []int) {
	return fileDescriptorRewriterConfig, []int{0}
}

func (m *AutoParallelOptions) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *AutoParallelOptions) GetNumReplicas() int32 {
	if m != nil {
		return m.NumReplicas
	}
	return 0
}

type RewriterConfig struct {
	// Optimize tensor layouts
	OptimizeTensorLayout bool `protobuf:"varint,1,opt,name=optimize_tensor_layout,json=optimizeTensorLayout,proto3" json:"optimize_tensor_layout,omitempty"`
	// Fold constants (default is OFF)
	ConstantFolding RewriterConfig_Toggle `protobuf:"varint,3,opt,name=constant_folding,json=constantFolding,proto3,enum=tensorflow.RewriterConfig_Toggle" json:"constant_folding,omitempty"`
	// If true, don't remove unecessary ops from the graph
	DisableModelPruning bool `protobuf:"varint,2,opt,name=disable_model_pruning,json=disableModelPruning,proto3" json:"disable_model_pruning,omitempty"`
	// Configures memory optimization passes through the meta-optimizer. Has no
	// effect on manually requested memory optimization passes in the optimizers
	// field.
	MemoryOptimization RewriterConfig_MemOptType `protobuf:"varint,4,opt,name=memory_optimization,json=memoryOptimization,proto3,enum=tensorflow.RewriterConfig_MemOptType" json:"memory_optimization,omitempty"`
	// The prefix for nodes which are valid outputs of recomputations. Inputs to
	// nodes with this name prefix may be recomputed (subject either to manual
	// annotation of those input nodes or to manual annotation and heuristics
	// depending on memory_optimization), but the prefixed nodes themselves will
	// not be recomputed. Typically this will be "gradients/", indicating that
	// activations from the forward pass of a graph may be recomputed as inputs to
	// gradients, but may be adjusted if gradients are inside a name scope or if
	// inputs to non-gradients should be recomputed. Defaults to "gradients/" if
	// empty or not set.
	MemoryOptimizerTargetNodeNamePrefix string `protobuf:"bytes,6,opt,name=memory_optimizer_target_node_name_prefix,json=memoryOptimizerTargetNodeNamePrefix,proto3" json:"memory_optimizer_target_node_name_prefix,omitempty"`
	// Configures AutoParallel optimization passes either through the
	// meta-optimizer or when manually specified through the optimizers field.
	AutoParallel *AutoParallelOptions `protobuf:"bytes,5,opt,name=auto_parallel,json=autoParallel" json:"auto_parallel,omitempty"`
	// If non-empty, will use this as an alternative way to specify a list of
	// optimizations to turn on and the order of the optimizations (replacing the
	// meta-optimizer).
	//
	// Of the RewriterConfig options, only the AutoParallel configuration options
	// (the auto_parallel field) apply to manually requested optimization passes
	// ("autoparallel"). Memory optimization passes ("memory") invoked here are
	// not configurable (in contrast to memory optimization passes through the
	// meta-optimizer) and act only on manual op annotations.
	Optimizers []string `protobuf:"bytes,100,rep,name=optimizers" json:"optimizers,omitempty"`
}

func (m *RewriterConfig) Reset()                    { *m = RewriterConfig{} }
func (*RewriterConfig) ProtoMessage()               {}
func (*RewriterConfig) Descriptor() ([]byte, []int) { return fileDescriptorRewriterConfig, []int{1} }

func (m *RewriterConfig) GetOptimizeTensorLayout() bool {
	if m != nil {
		return m.OptimizeTensorLayout
	}
	return false
}

func (m *RewriterConfig) GetConstantFolding() RewriterConfig_Toggle {
	if m != nil {
		return m.ConstantFolding
	}
	return DEFAULT
}

func (m *RewriterConfig) GetDisableModelPruning() bool {
	if m != nil {
		return m.DisableModelPruning
	}
	return false
}

func (m *RewriterConfig) GetMemoryOptimization() RewriterConfig_MemOptType {
	if m != nil {
		return m.MemoryOptimization
	}
	return DEFAULT_MEM_OPT
}

func (m *RewriterConfig) GetMemoryOptimizerTargetNodeNamePrefix() string {
	if m != nil {
		return m.MemoryOptimizerTargetNodeNamePrefix
	}
	return ""
}

func (m *RewriterConfig) GetAutoParallel() *AutoParallelOptions {
	if m != nil {
		return m.AutoParallel
	}
	return nil
}

func (m *RewriterConfig) GetOptimizers() []string {
	if m != nil {
		return m.Optimizers
	}
	return nil
}

func init() {
	proto.RegisterType((*AutoParallelOptions)(nil), "tensorflow.AutoParallelOptions")
	proto.RegisterType((*RewriterConfig)(nil), "tensorflow.RewriterConfig")
	proto.RegisterEnum("tensorflow.RewriterConfig_Toggle", RewriterConfig_Toggle_name, RewriterConfig_Toggle_value)
	proto.RegisterEnum("tensorflow.RewriterConfig_MemOptType", RewriterConfig_MemOptType_name, RewriterConfig_MemOptType_value)
}
func (x RewriterConfig_Toggle) String() string {
	s, ok := RewriterConfig_Toggle_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RewriterConfig_MemOptType) String() string {
	s, ok := RewriterConfig_MemOptType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *AutoParallelOptions) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AutoParallelOptions)
	if !ok {
		that2, ok := that.(AutoParallelOptions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Enable != that1.Enable {
		return false
	}
	if this.NumReplicas != that1.NumReplicas {
		return false
	}
	return true
}
func (this *RewriterConfig) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RewriterConfig)
	if !ok {
		that2, ok := that.(RewriterConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OptimizeTensorLayout != that1.OptimizeTensorLayout {
		return false
	}
	if this.ConstantFolding != that1.ConstantFolding {
		return false
	}
	if this.DisableModelPruning != that1.DisableModelPruning {
		return false
	}
	if this.MemoryOptimization != that1.MemoryOptimization {
		return false
	}
	if this.MemoryOptimizerTargetNodeNamePrefix != that1.MemoryOptimizerTargetNodeNamePrefix {
		return false
	}
	if !this.AutoParallel.Equal(that1.AutoParallel) {
		return false
	}
	if len(this.Optimizers) != len(that1.Optimizers) {
		return false
	}
	for i := range this.Optimizers {
		if this.Optimizers[i] != that1.Optimizers[i] {
			return false
		}
	}
	return true
}
func (this *AutoParallelOptions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow.AutoParallelOptions{")
	s = append(s, "Enable: "+fmt.Sprintf("%#v", this.Enable)+",\n")
	s = append(s, "NumReplicas: "+fmt.Sprintf("%#v", this.NumReplicas)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RewriterConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&tensorflow.RewriterConfig{")
	s = append(s, "OptimizeTensorLayout: "+fmt.Sprintf("%#v", this.OptimizeTensorLayout)+",\n")
	s = append(s, "ConstantFolding: "+fmt.Sprintf("%#v", this.ConstantFolding)+",\n")
	s = append(s, "DisableModelPruning: "+fmt.Sprintf("%#v", this.DisableModelPruning)+",\n")
	s = append(s, "MemoryOptimization: "+fmt.Sprintf("%#v", this.MemoryOptimization)+",\n")
	s = append(s, "MemoryOptimizerTargetNodeNamePrefix: "+fmt.Sprintf("%#v", this.MemoryOptimizerTargetNodeNamePrefix)+",\n")
	if this.AutoParallel != nil {
		s = append(s, "AutoParallel: "+fmt.Sprintf("%#v", this.AutoParallel)+",\n")
	}
	s = append(s, "Optimizers: "+fmt.Sprintf("%#v", this.Optimizers)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRewriterConfig(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *AutoParallelOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoParallelOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enable {
		dAtA[i] = 0x8
		i++
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NumReplicas != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRewriterConfig(dAtA, i, uint64(m.NumReplicas))
	}
	return i, nil
}

func (m *RewriterConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewriterConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OptimizeTensorLayout {
		dAtA[i] = 0x8
		i++
		if m.OptimizeTensorLayout {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DisableModelPruning {
		dAtA[i] = 0x10
		i++
		if m.DisableModelPruning {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ConstantFolding != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRewriterConfig(dAtA, i, uint64(m.ConstantFolding))
	}
	if m.MemoryOptimization != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRewriterConfig(dAtA, i, uint64(m.MemoryOptimization))
	}
	if m.AutoParallel != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRewriterConfig(dAtA, i, uint64(m.AutoParallel.Size()))
		n1, err := m.AutoParallel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.MemoryOptimizerTargetNodeNamePrefix) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRewriterConfig(dAtA, i, uint64(len(m.MemoryOptimizerTargetNodeNamePrefix)))
		i += copy(dAtA[i:], m.MemoryOptimizerTargetNodeNamePrefix)
	}
	if len(m.Optimizers) > 0 {
		for _, s := range m.Optimizers {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x6
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeFixed64RewriterConfig(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32RewriterConfig(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRewriterConfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AutoParallelOptions) Size() (n int) {
	var l int
	_ = l
	if m.Enable {
		n += 2
	}
	if m.NumReplicas != 0 {
		n += 1 + sovRewriterConfig(uint64(m.NumReplicas))
	}
	return n
}

func (m *RewriterConfig) Size() (n int) {
	var l int
	_ = l
	if m.OptimizeTensorLayout {
		n += 2
	}
	if m.DisableModelPruning {
		n += 2
	}
	if m.ConstantFolding != 0 {
		n += 1 + sovRewriterConfig(uint64(m.ConstantFolding))
	}
	if m.MemoryOptimization != 0 {
		n += 1 + sovRewriterConfig(uint64(m.MemoryOptimization))
	}
	if m.AutoParallel != nil {
		l = m.AutoParallel.Size()
		n += 1 + l + sovRewriterConfig(uint64(l))
	}
	l = len(m.MemoryOptimizerTargetNodeNamePrefix)
	if l > 0 {
		n += 1 + l + sovRewriterConfig(uint64(l))
	}
	if len(m.Optimizers) > 0 {
		for _, s := range m.Optimizers {
			l = len(s)
			n += 2 + l + sovRewriterConfig(uint64(l))
		}
	}
	return n
}

func sovRewriterConfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRewriterConfig(x uint64) (n int) {
	return sovRewriterConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AutoParallelOptions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AutoParallelOptions{`,
		`Enable:` + fmt.Sprintf("%v", this.Enable) + `,`,
		`NumReplicas:` + fmt.Sprintf("%v", this.NumReplicas) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RewriterConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RewriterConfig{`,
		`OptimizeTensorLayout:` + fmt.Sprintf("%v", this.OptimizeTensorLayout) + `,`,
		`DisableModelPruning:` + fmt.Sprintf("%v", this.DisableModelPruning) + `,`,
		`ConstantFolding:` + fmt.Sprintf("%v", this.ConstantFolding) + `,`,
		`MemoryOptimization:` + fmt.Sprintf("%v", this.MemoryOptimization) + `,`,
		`AutoParallel:` + strings.Replace(fmt.Sprintf("%v", this.AutoParallel), "AutoParallelOptions", "AutoParallelOptions", 1) + `,`,
		`MemoryOptimizerTargetNodeNamePrefix:` + fmt.Sprintf("%v", this.MemoryOptimizerTargetNodeNamePrefix) + `,`,
		`Optimizers:` + fmt.Sprintf("%v", this.Optimizers) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRewriterConfig(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AutoParallelOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewriterConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoParallelOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoParallelOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewriterConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumReplicas", wireType)
			}
			m.NumReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewriterConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumReplicas |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRewriterConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRewriterConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewriterConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewriterConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewriterConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewriterConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizeTensorLayout", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewriterConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptimizeTensorLayout = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableModelPruning", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewriterConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableModelPruning = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstantFolding", wireType)
			}
			m.ConstantFolding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewriterConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConstantFolding |= (RewriterConfig_Toggle(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryOptimization", wireType)
			}
			m.MemoryOptimization = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewriterConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryOptimization |= (RewriterConfig_MemOptType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoParallel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewriterConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewriterConfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AutoParallel == nil {
				m.AutoParallel = &AutoParallelOptions{}
			}
			if err := m.AutoParallel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryOptimizerTargetNodeNamePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewriterConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRewriterConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemoryOptimizerTargetNodeNamePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewriterConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRewriterConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Optimizers = append(m.Optimizers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRewriterConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRewriterConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRewriterConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRewriterConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewriterConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewriterConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRewriterConfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRewriterConfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRewriterConfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRewriterConfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRewriterConfig   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/core/protobuf/rewriter_config.proto", fileDescriptorRewriterConfig)
}

var fileDescriptorRewriterConfig = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xbf, 0x6e, 0xdb, 0x3c,
	0x14, 0xc5, 0x4d, 0x3b, 0x71, 0x92, 0x9b, 0x7c, 0x89, 0x41, 0xe7, 0x0b, 0x34, 0xb1, 0x8a, 0x8b,
	0x16, 0x9a, 0x1c, 0x20, 0x2d, 0xd0, 0xd9, 0xf9, 0x63, 0x34, 0x80, 0x65, 0x09, 0x8a, 0xdc, 0x95,
	0x60, 0x2c, 0x4a, 0x10, 0x2a, 0x91, 0x02, 0x45, 0x21, 0x4d, 0xa7, 0x3e, 0x42, 0x1f, 0xa3, 0x8f,
	0xd2, 0x31, 0x43, 0x87, 0x8e, 0x8d, 0xba, 0x74, 0xcc, 0xd8, 0xb1, 0x90, 0xac, 0x24, 0x36, 0x50,
	0x74, 0xe4, 0xfd, 0xdd, 0x7b, 0xce, 0xe5, 0x21, 0x08, 0x6f, 0x32, 0x25, 0xb5, 0xbc, 0x2a, 0xc2,
	0x23, 0xcd, 0x45, 0x2e, 0x55, 0x98, 0xc8, 0xeb, 0xa3, 0xb9, 0x54, 0xfc, 0xe8, 0x11, 0x28, 0x7e,
	0xad, 0x62, 0xcd, 0x15, 0x9d, 0x4b, 0x11, 0xc6, 0xd1, 0xb0, 0x06, 0x18, 0x9e, 0xfa, 0x07, 0x2e,
	0xf4, 0x47, 0x85, 0x96, 0x2e, 0x53, 0x2c, 0x49, 0x78, 0xe2, 0x64, 0x3a, 0x96, 0x22, 0xc7, 0x07,
	0xd0, 0xe5, 0x82, 0x5d, 0x25, 0xdc, 0x40, 0x26, 0xb2, 0x36, 0xbd, 0xe6, 0x84, 0x0f, 0x61, 0x47,
	0x14, 0x29, 0x55, 0x3c, 0x4b, 0xe2, 0x39, 0xcb, 0x8d, 0xb6, 0x89, 0xac, 0x75, 0x6f, 0x5b, 0x14,
	0xa9, 0xd7, 0x94, 0x06, 0xdf, 0xd6, 0x60, 0xd7, 0x6b, 0x7c, 0x4f, 0x6b, 0x5b, 0xfc, 0x1a, 0x0e,
	0x64, 0xa6, 0xe3, 0x34, 0xfe, 0xc8, 0xe9, 0xc2, 0x9b, 0x26, 0xec, 0x46, 0x16, 0xba, 0x51, 0xdf,
	0x7f, 0xa0, 0x7e, 0x0d, 0x27, 0x35, 0xc3, 0xc7, 0xf0, 0x7f, 0x10, 0xe7, 0x95, 0x2d, 0x4d, 0x65,
	0xc0, 0x13, 0x9a, 0xa9, 0x42, 0xc4, 0x22, 0xaa, 0x4d, 0x37, 0xbd, 0x7e, 0x03, 0xed, 0x8a, 0xb9,
	0x0b, 0x84, 0x27, 0xd0, 0x9b, 0x4b, 0x91, 0x6b, 0x26, 0x34, 0x0d, 0x65, 0x12, 0x54, 0xed, 0x1d,
	0x13, 0x59, 0xbb, 0xc7, 0x87, 0xc3, 0xa7, 0x5b, 0x0f, 0x57, 0xf7, 0x1b, 0xfa, 0x32, 0x8a, 0x12,
	0xee, 0xed, 0x3d, 0x8c, 0x8e, 0x17, 0x93, 0xf8, 0x1d, 0xf4, 0x53, 0x9e, 0x4a, 0x75, 0x43, 0x9b,
	0x05, 0x59, 0x95, 0x8e, 0xb1, 0x56, 0x0b, 0xbe, 0xf8, 0x87, 0xa0, 0xcd, 0x53, 0x27, 0xd3, 0xfe,
	0x4d, 0xc6, 0x3d, 0xbc, 0x50, 0x70, 0x96, 0x04, 0xf0, 0x19, 0xfc, 0xc7, 0x0a, 0x2d, 0x69, 0xd6,
	0xa4, 0x6e, 0xac, 0x9b, 0xc8, 0xda, 0x3e, 0x7e, 0xb6, 0xac, 0xf8, 0x97, 0x57, 0xf1, 0x76, 0xd8,
	0x52, 0x11, 0xcf, 0xc0, 0x5a, 0xdd, 0x8e, 0x2b, 0xaa, 0x99, 0x8a, 0xb8, 0xa6, 0x42, 0x06, 0x9c,
	0x0a, 0x96, 0x72, 0x9a, 0x29, 0x1e, 0xc6, 0x1f, 0x8c, 0xae, 0x89, 0xac, 0x2d, 0xef, 0xf9, 0xca,
	0x2e, 0x5c, 0xf9, 0x75, 0xf7, 0x54, 0x06, 0x7c, 0xca, 0x52, 0xee, 0xd6, 0xad, 0x98, 0x00, 0x3c,
	0xea, 0xe5, 0x46, 0x60, 0x76, 0xac, 0x2d, 0x6f, 0xa9, 0x32, 0x78, 0x09, 0xdd, 0x45, 0x5e, 0x78,
	0x1b, 0x36, 0xce, 0xce, 0xc7, 0xa3, 0xd9, 0xc4, 0xef, 0xb5, 0x70, 0x17, 0xda, 0xce, 0xb4, 0x87,
	0xf0, 0x06, 0x74, 0x9c, 0xf1, 0xb8, 0xd7, 0x1e, 0xd8, 0x00, 0x4f, 0x31, 0xe0, 0x3e, 0xec, 0x35,
	0xbd, 0xd4, 0x3e, 0xb7, 0xa9, 0xe3, 0x56, 0x33, 0xbb, 0x00, 0x53, 0xe7, 0xf1, 0x8c, 0x30, 0x40,
	0xd7, 0x1e, 0x4d, 0x67, 0xa3, 0x49, 0xaf, 0x5d, 0xb1, 0xb7, 0xe7, 0x33, 0xef, 0xe2, 0xd2, 0xbf,
	0x38, 0xbd, 0xec, 0x75, 0x4e, 0xd8, 0xed, 0x1d, 0x69, 0x7d, 0xbf, 0x23, 0xad, 0xfb, 0x3b, 0x82,
	0x3e, 0x95, 0x04, 0x7d, 0x29, 0x09, 0xfa, 0x5a, 0x12, 0x74, 0x5b, 0x12, 0xf4, 0xa3, 0x24, 0xe8,
	0x57, 0x49, 0x5a, 0xf7, 0x25, 0x41, 0x9f, 0x7f, 0x92, 0x16, 0x18, 0x52, 0x45, 0xcb, 0x69, 0x86,
	0x8a, 0xa5, 0xfc, 0x5a, 0xaa, 0xf7, 0x27, 0xfb, 0xab, 0x4f, 0xe5, 0x56, 0x3f, 0x22, 0x77, 0xd1,
	0x6f, 0x84, 0xae, 0xba, 0xf5, 0xf7, 0x78, 0xf5, 0x27, 0x00, 0x00, 0xff, 0xff, 0x24, 0x5d, 0xce,
	0x66, 0x59, 0x03, 0x00, 0x00,
}
