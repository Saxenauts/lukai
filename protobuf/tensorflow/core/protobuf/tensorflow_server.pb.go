// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/core/protobuf/tensorflow_server.proto

/*
	Package tensorflow is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/core/protobuf/tensorflow_server.proto

	It has these top-level messages:
		ServerDef
*/
package tensorflow

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow18 "github.com/d4l3k/pok/protobuf/tensorflow/core/protobuf"
import tensorflow16 "github.com/d4l3k/pok/protobuf/tensorflow/core/protobuf"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Defines the configuration of a single TensorFlow server.
type ServerDef struct {
	// The cluster of which this server is a member.
	Cluster *tensorflow16.ClusterDef `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	// The name of the job of which this server is a member.
	//
	// NOTE(mrry): The `cluster` field must contain a `JobDef` with a `name` field
	// that matches this name.
	JobName string `protobuf:"bytes,2,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	// The task index of this server in its job.
	//
	// NOTE: The `cluster` field must contain a `JobDef` with a matching `name`
	// and a mapping in its `tasks` field for this index.
	TaskIndex int32 `protobuf:"varint,3,opt,name=task_index,json=taskIndex,proto3" json:"task_index,omitempty"`
	// The default configuration for sessions that run on this server.
	DefaultSessionConfig *tensorflow18.ConfigProto `protobuf:"bytes,4,opt,name=default_session_config,json=defaultSessionConfig" json:"default_session_config,omitempty"`
	// The protocol to be used by this server.
	//
	// Acceptable values include: "grpc".
	Protocol string `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *ServerDef) Reset()                    { *m = ServerDef{} }
func (*ServerDef) ProtoMessage()               {}
func (*ServerDef) Descriptor() ([]byte, []int) { return fileDescriptorTensorflowServer, []int{0} }

func (m *ServerDef) GetCluster() *tensorflow16.ClusterDef {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *ServerDef) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *ServerDef) GetTaskIndex() int32 {
	if m != nil {
		return m.TaskIndex
	}
	return 0
}

func (m *ServerDef) GetDefaultSessionConfig() *tensorflow18.ConfigProto {
	if m != nil {
		return m.DefaultSessionConfig
	}
	return nil
}

func (m *ServerDef) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func init() {
	proto.RegisterType((*ServerDef)(nil), "tensorflow.ServerDef")
}
func (this *ServerDef) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ServerDef)
	if !ok {
		that2, ok := that.(ServerDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Cluster.Equal(that1.Cluster) {
		return false
	}
	if this.JobName != that1.JobName {
		return false
	}
	if this.TaskIndex != that1.TaskIndex {
		return false
	}
	if !this.DefaultSessionConfig.Equal(that1.DefaultSessionConfig) {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	return true
}
func (this *ServerDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&tensorflow.ServerDef{")
	if this.Cluster != nil {
		s = append(s, "Cluster: "+fmt.Sprintf("%#v", this.Cluster)+",\n")
	}
	s = append(s, "JobName: "+fmt.Sprintf("%#v", this.JobName)+",\n")
	s = append(s, "TaskIndex: "+fmt.Sprintf("%#v", this.TaskIndex)+",\n")
	if this.DefaultSessionConfig != nil {
		s = append(s, "DefaultSessionConfig: "+fmt.Sprintf("%#v", this.DefaultSessionConfig)+",\n")
	}
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTensorflowServer(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ServerDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cluster != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTensorflowServer(dAtA, i, uint64(m.Cluster.Size()))
		n1, err := m.Cluster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.JobName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTensorflowServer(dAtA, i, uint64(len(m.JobName)))
		i += copy(dAtA[i:], m.JobName)
	}
	if m.TaskIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTensorflowServer(dAtA, i, uint64(m.TaskIndex))
	}
	if m.DefaultSessionConfig != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTensorflowServer(dAtA, i, uint64(m.DefaultSessionConfig.Size()))
		n2, err := m.DefaultSessionConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Protocol) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTensorflowServer(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	return i, nil
}

func encodeFixed64TensorflowServer(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32TensorflowServer(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTensorflowServer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ServerDef) Size() (n int) {
	var l int
	_ = l
	if m.Cluster != nil {
		l = m.Cluster.Size()
		n += 1 + l + sovTensorflowServer(uint64(l))
	}
	l = len(m.JobName)
	if l > 0 {
		n += 1 + l + sovTensorflowServer(uint64(l))
	}
	if m.TaskIndex != 0 {
		n += 1 + sovTensorflowServer(uint64(m.TaskIndex))
	}
	if m.DefaultSessionConfig != nil {
		l = m.DefaultSessionConfig.Size()
		n += 1 + l + sovTensorflowServer(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovTensorflowServer(uint64(l))
	}
	return n
}

func sovTensorflowServer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTensorflowServer(x uint64) (n int) {
	return sovTensorflowServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ServerDef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerDef{`,
		`Cluster:` + strings.Replace(fmt.Sprintf("%v", this.Cluster), "ClusterDef", "tensorflow16.ClusterDef", 1) + `,`,
		`JobName:` + fmt.Sprintf("%v", this.JobName) + `,`,
		`TaskIndex:` + fmt.Sprintf("%v", this.TaskIndex) + `,`,
		`DefaultSessionConfig:` + strings.Replace(fmt.Sprintf("%v", this.DefaultSessionConfig), "ConfigProto", "tensorflow18.ConfigProto", 1) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTensorflowServer(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ServerDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTensorflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTensorflowServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cluster == nil {
				m.Cluster = &tensorflow16.ClusterDef{}
			}
			if err := m.Cluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTensorflowServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskIndex", wireType)
			}
			m.TaskIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSessionConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTensorflowServer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultSessionConfig == nil {
				m.DefaultSessionConfig = &tensorflow18.ConfigProto{}
			}
			if err := m.DefaultSessionConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTensorflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTensorflowServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTensorflowServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTensorflowServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTensorflowServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTensorflowServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTensorflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTensorflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTensorflowServer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTensorflowServer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTensorflowServer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTensorflowServer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTensorflowServer   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/core/protobuf/tensorflow_server.proto", fileDescriptorTensorflowServer)
}

var fileDescriptorTensorflowServer = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xb1, 0x4e, 0x32, 0x41,
	0x10, 0xc7, 0x6f, 0xbe, 0x4f, 0x04, 0x56, 0xab, 0x8b, 0xc1, 0xf3, 0x12, 0x37, 0xc4, 0x44, 0x43,
	0x05, 0x46, 0x2b, 0x5b, 0xa4, 0xb1, 0xd0, 0x90, 0xa3, 0xb4, 0xb8, 0xdc, 0xc1, 0x2c, 0x39, 0x3c,
	0x76, 0xcd, 0xee, 0x9e, 0x5a, 0xfa, 0x08, 0x3e, 0x86, 0x8f, 0x62, 0x49, 0x69, 0x29, 0x6b, 0x63,
	0x49, 0x69, 0x69, 0xd8, 0x05, 0xd1, 0x44, 0xca, 0x9d, 0xdf, 0xfc, 0xe7, 0x37, 0xb3, 0xe4, 0xec,
	0x56, 0x0a, 0x2d, 0xd2, 0x82, 0xb5, 0x34, 0x72, 0x25, 0x24, 0xcb, 0xc5, 0x7d, 0xab, 0x2f, 0x24,
	0xb6, 0xfe, 0x00, 0xb1, 0x42, 0x79, 0x87, 0xb2, 0x69, 0x91, 0x4f, 0x56, 0x20, 0x3c, 0x5c, 0x9b,
	0xee, 0x0b, 0xce, 0xb2, 0xa1, 0x8b, 0x84, 0x47, 0xeb, 0xdb, 0xf2, 0x42, 0xe9, 0xe5, 0xe8, 0x03,
	0x03, 0xa4, 0xda, 0xb3, 0xae, 0x0e, 0x32, 0xff, 0x98, 0x94, 0x17, 0x38, 0x80, 0x3a, 0x34, 0xb6,
	0x4e, 0x6a, 0xcd, 0xd5, 0x9c, 0xe6, 0xb9, 0x43, 0x1d, 0x64, 0xd1, 0xb2, 0xcd, 0xdf, 0x23, 0x95,
	0x91, 0x48, 0x63, 0x9e, 0x8c, 0x31, 0xf8, 0x57, 0x87, 0x46, 0x35, 0x2a, 0x8f, 0x44, 0x7a, 0x95,
	0x8c, 0xd1, 0xdf, 0x27, 0x44, 0x27, 0xea, 0x26, 0xce, 0xf8, 0x00, 0x1f, 0x82, 0xff, 0x75, 0x68,
	0x94, 0xa2, 0xea, 0xbc, 0x72, 0x31, 0x2f, 0xf8, 0x97, 0xa4, 0x36, 0x40, 0x96, 0x14, 0xb9, 0x8e,
	0x15, 0x2a, 0x95, 0x09, 0x1e, 0xbb, 0x0b, 0x82, 0x0d, 0xab, 0xde, 0xfd, 0xa5, 0xb6, 0xa4, 0x3b,
	0x5f, 0x39, 0xda, 0x59, 0xc4, 0x7a, 0x2e, 0xe5, 0x90, 0x1f, 0x92, 0x8a, 0xbd, 0xa8, 0x2f, 0xf2,
	0xa0, 0x64, 0x17, 0xf9, 0x7e, 0xb7, 0xaf, 0x27, 0x53, 0xea, 0xbd, 0x4e, 0xa9, 0x37, 0x9b, 0x52,
	0x78, 0x34, 0x14, 0x9e, 0x0d, 0x85, 0x17, 0x43, 0x61, 0x62, 0x28, 0xbc, 0x19, 0x0a, 0x1f, 0x86,
	0x7a, 0x33, 0x43, 0xe1, 0xe9, 0x9d, 0x7a, 0x24, 0x14, 0x72, 0xf8, 0xd3, 0x3d, 0xc8, 0x94, 0x96,
	0x05, 0xd7, 0xd9, 0x18, 0xdb, 0xdb, 0xee, 0xaf, 0xec, 0x22, 0xaa, 0x0b, 0x9f, 0x00, 0xe9, 0xa6,
	0xd5, 0x9c, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x51, 0x4d, 0xe6, 0xde, 0xe0, 0x01, 0x00, 0x00,
}
