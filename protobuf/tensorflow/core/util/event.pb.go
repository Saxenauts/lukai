// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/core/util/event.proto

/*
	Package tensorflow is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/core/util/event.proto

	It has these top-level messages:
		Event
		LogMessage
		SessionLog
		TaggedRunMetadata
*/
package tensorflow

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow5 "github.com/d4l3k/pok/tensorflow/core/framework"

import strconv "strconv"

import bytes "bytes"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LogMessage_Level int32

const (
	UNKNOWN LogMessage_Level = 0
	// Note: The logging level 10 cannot be named DEBUG. Some software
	// projects compile their C/C++ code with -DDEBUG in debug builds. So the
	// C++ code generated from this file should not have an identifier named
	// DEBUG.
	DEBUGGING LogMessage_Level = 10
	INFO      LogMessage_Level = 20
	WARN      LogMessage_Level = 30
	ERROR     LogMessage_Level = 40
	FATAL     LogMessage_Level = 50
)

var LogMessage_Level_name = map[int32]string{
	0:  "UNKNOWN",
	10: "DEBUGGING",
	20: "INFO",
	30: "WARN",
	40: "ERROR",
	50: "FATAL",
}
var LogMessage_Level_value = map[string]int32{
	"UNKNOWN":   0,
	"DEBUGGING": 10,
	"INFO":      20,
	"WARN":      30,
	"ERROR":     40,
	"FATAL":     50,
}

func (LogMessage_Level) EnumDescriptor() ([]byte, []int) { return fileDescriptorEvent, []int{1, 0} }

type SessionLog_SessionStatus int32

const (
	STATUS_UNSPECIFIED SessionLog_SessionStatus = 0
	START              SessionLog_SessionStatus = 1
	STOP               SessionLog_SessionStatus = 2
	CHECKPOINT         SessionLog_SessionStatus = 3
)

var SessionLog_SessionStatus_name = map[int32]string{
	0: "STATUS_UNSPECIFIED",
	1: "START",
	2: "STOP",
	3: "CHECKPOINT",
}
var SessionLog_SessionStatus_value = map[string]int32{
	"STATUS_UNSPECIFIED": 0,
	"START":              1,
	"STOP":               2,
	"CHECKPOINT":         3,
}

func (SessionLog_SessionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorEvent, []int{2, 0}
}

// Protocol buffer representing an event that happened during
// the execution of a Brain model.
type Event struct {
	// Timestamp of the event.
	WallTime float64 `protobuf:"fixed64,1,opt,name=wall_time,json=wallTime,proto3" json:"wall_time,omitempty"`
	// Global step of the event.
	Step int64 `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
	// Types that are valid to be assigned to What:
	//	*Event_FileVersion
	//	*Event_GraphDef
	//	*Event_Summary
	//	*Event_LogMessage
	//	*Event_SessionLog
	//	*Event_TaggedRunMetadata
	//	*Event_MetaGraphDef
	What isEvent_What `protobuf_oneof:"what"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{0} }

type isEvent_What interface {
	isEvent_What()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_FileVersion struct {
	FileVersion string `protobuf:"bytes,3,opt,name=file_version,json=fileVersion,proto3,oneof"`
}
type Event_GraphDef struct {
	GraphDef []byte `protobuf:"bytes,4,opt,name=graph_def,json=graphDef,proto3,oneof"`
}
type Event_Summary struct {
	Summary *tensorflow5.Summary `protobuf:"bytes,5,opt,name=summary,oneof"`
}
type Event_LogMessage struct {
	LogMessage *LogMessage `protobuf:"bytes,6,opt,name=log_message,json=logMessage,oneof"`
}
type Event_SessionLog struct {
	SessionLog *SessionLog `protobuf:"bytes,7,opt,name=session_log,json=sessionLog,oneof"`
}
type Event_TaggedRunMetadata struct {
	TaggedRunMetadata *TaggedRunMetadata `protobuf:"bytes,8,opt,name=tagged_run_metadata,json=taggedRunMetadata,oneof"`
}
type Event_MetaGraphDef struct {
	MetaGraphDef []byte `protobuf:"bytes,9,opt,name=meta_graph_def,json=metaGraphDef,proto3,oneof"`
}

func (*Event_FileVersion) isEvent_What()       {}
func (*Event_GraphDef) isEvent_What()          {}
func (*Event_Summary) isEvent_What()           {}
func (*Event_LogMessage) isEvent_What()        {}
func (*Event_SessionLog) isEvent_What()        {}
func (*Event_TaggedRunMetadata) isEvent_What() {}
func (*Event_MetaGraphDef) isEvent_What()      {}

func (m *Event) GetWhat() isEvent_What {
	if m != nil {
		return m.What
	}
	return nil
}

func (m *Event) GetWallTime() float64 {
	if m != nil {
		return m.WallTime
	}
	return 0
}

func (m *Event) GetStep() int64 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *Event) GetFileVersion() string {
	if x, ok := m.GetWhat().(*Event_FileVersion); ok {
		return x.FileVersion
	}
	return ""
}

func (m *Event) GetGraphDef() []byte {
	if x, ok := m.GetWhat().(*Event_GraphDef); ok {
		return x.GraphDef
	}
	return nil
}

func (m *Event) GetSummary() *tensorflow5.Summary {
	if x, ok := m.GetWhat().(*Event_Summary); ok {
		return x.Summary
	}
	return nil
}

func (m *Event) GetLogMessage() *LogMessage {
	if x, ok := m.GetWhat().(*Event_LogMessage); ok {
		return x.LogMessage
	}
	return nil
}

func (m *Event) GetSessionLog() *SessionLog {
	if x, ok := m.GetWhat().(*Event_SessionLog); ok {
		return x.SessionLog
	}
	return nil
}

func (m *Event) GetTaggedRunMetadata() *TaggedRunMetadata {
	if x, ok := m.GetWhat().(*Event_TaggedRunMetadata); ok {
		return x.TaggedRunMetadata
	}
	return nil
}

func (m *Event) GetMetaGraphDef() []byte {
	if x, ok := m.GetWhat().(*Event_MetaGraphDef); ok {
		return x.MetaGraphDef
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_FileVersion)(nil),
		(*Event_GraphDef)(nil),
		(*Event_Summary)(nil),
		(*Event_LogMessage)(nil),
		(*Event_SessionLog)(nil),
		(*Event_TaggedRunMetadata)(nil),
		(*Event_MetaGraphDef)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// what
	switch x := m.What.(type) {
	case *Event_FileVersion:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.FileVersion)
	case *Event_GraphDef:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.GraphDef)
	case *Event_Summary:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Summary); err != nil {
			return err
		}
	case *Event_LogMessage:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LogMessage); err != nil {
			return err
		}
	case *Event_SessionLog:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SessionLog); err != nil {
			return err
		}
	case *Event_TaggedRunMetadata:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TaggedRunMetadata); err != nil {
			return err
		}
	case *Event_MetaGraphDef:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.MetaGraphDef)
	case nil:
	default:
		return fmt.Errorf("Event.What has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 3: // what.file_version
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.What = &Event_FileVersion{x}
		return true, err
	case 4: // what.graph_def
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.What = &Event_GraphDef{x}
		return true, err
	case 5: // what.summary
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(tensorflow5.Summary)
		err := b.DecodeMessage(msg)
		m.What = &Event_Summary{msg}
		return true, err
	case 6: // what.log_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LogMessage)
		err := b.DecodeMessage(msg)
		m.What = &Event_LogMessage{msg}
		return true, err
	case 7: // what.session_log
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessionLog)
		err := b.DecodeMessage(msg)
		m.What = &Event_SessionLog{msg}
		return true, err
	case 8: // what.tagged_run_metadata
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TaggedRunMetadata)
		err := b.DecodeMessage(msg)
		m.What = &Event_TaggedRunMetadata{msg}
		return true, err
	case 9: // what.meta_graph_def
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.What = &Event_MetaGraphDef{x}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// what
	switch x := m.What.(type) {
	case *Event_FileVersion:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.FileVersion)))
		n += len(x.FileVersion)
	case *Event_GraphDef:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.GraphDef)))
		n += len(x.GraphDef)
	case *Event_Summary:
		s := proto.Size(x.Summary)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_LogMessage:
		s := proto.Size(x.LogMessage)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_SessionLog:
		s := proto.Size(x.SessionLog)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_TaggedRunMetadata:
		s := proto.Size(x.TaggedRunMetadata)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_MetaGraphDef:
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.MetaGraphDef)))
		n += len(x.MetaGraphDef)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Protocol buffer used for logging messages to the events file.
type LogMessage struct {
	Level   LogMessage_Level `protobuf:"varint,1,opt,name=level,proto3,enum=tensorflow.LogMessage_Level" json:"level,omitempty"`
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *LogMessage) Reset()                    { *m = LogMessage{} }
func (*LogMessage) ProtoMessage()               {}
func (*LogMessage) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{1} }

func (m *LogMessage) GetLevel() LogMessage_Level {
	if m != nil {
		return m.Level
	}
	return UNKNOWN
}

func (m *LogMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Protocol buffer used for logging session state.
type SessionLog struct {
	Status SessionLog_SessionStatus `protobuf:"varint,1,opt,name=status,proto3,enum=tensorflow.SessionLog_SessionStatus" json:"status,omitempty"`
	// This checkpoint_path contains both the path and filename.
	CheckpointPath string `protobuf:"bytes,2,opt,name=checkpoint_path,json=checkpointPath,proto3" json:"checkpoint_path,omitempty"`
	Msg            string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *SessionLog) Reset()                    { *m = SessionLog{} }
func (*SessionLog) ProtoMessage()               {}
func (*SessionLog) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{2} }

func (m *SessionLog) GetStatus() SessionLog_SessionStatus {
	if m != nil {
		return m.Status
	}
	return STATUS_UNSPECIFIED
}

func (m *SessionLog) GetCheckpointPath() string {
	if m != nil {
		return m.CheckpointPath
	}
	return ""
}

func (m *SessionLog) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// For logging the metadata output for a single session.run() call.
type TaggedRunMetadata struct {
	// Tag name associated with this metadata.
	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// Byte-encoded version of the `RunMetadata` proto in order to allow lazy
	// deserialization.
	RunMetadata []byte `protobuf:"bytes,2,opt,name=run_metadata,json=runMetadata,proto3" json:"run_metadata,omitempty"`
}

func (m *TaggedRunMetadata) Reset()                    { *m = TaggedRunMetadata{} }
func (*TaggedRunMetadata) ProtoMessage()               {}
func (*TaggedRunMetadata) Descriptor() ([]byte, []int) { return fileDescriptorEvent, []int{3} }

func (m *TaggedRunMetadata) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *TaggedRunMetadata) GetRunMetadata() []byte {
	if m != nil {
		return m.RunMetadata
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "tensorflow.Event")
	proto.RegisterType((*LogMessage)(nil), "tensorflow.LogMessage")
	proto.RegisterType((*SessionLog)(nil), "tensorflow.SessionLog")
	proto.RegisterType((*TaggedRunMetadata)(nil), "tensorflow.TaggedRunMetadata")
	proto.RegisterEnum("tensorflow.LogMessage_Level", LogMessage_Level_name, LogMessage_Level_value)
	proto.RegisterEnum("tensorflow.SessionLog_SessionStatus", SessionLog_SessionStatus_name, SessionLog_SessionStatus_value)
}
func (x LogMessage_Level) String() string {
	s, ok := LogMessage_Level_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SessionLog_SessionStatus) String() string {
	s, ok := SessionLog_SessionStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Event) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Event)
	if !ok {
		that2, ok := that.(Event)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.WallTime != that1.WallTime {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	if that1.What == nil {
		if this.What != nil {
			return false
		}
	} else if this.What == nil {
		return false
	} else if !this.What.Equal(that1.What) {
		return false
	}
	return true
}
func (this *Event_FileVersion) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Event_FileVersion)
	if !ok {
		that2, ok := that.(Event_FileVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FileVersion != that1.FileVersion {
		return false
	}
	return true
}
func (this *Event_GraphDef) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Event_GraphDef)
	if !ok {
		that2, ok := that.(Event_GraphDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.GraphDef, that1.GraphDef) {
		return false
	}
	return true
}
func (this *Event_Summary) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Event_Summary)
	if !ok {
		that2, ok := that.(Event_Summary)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Summary.Equal(that1.Summary) {
		return false
	}
	return true
}
func (this *Event_LogMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Event_LogMessage)
	if !ok {
		that2, ok := that.(Event_LogMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.LogMessage.Equal(that1.LogMessage) {
		return false
	}
	return true
}
func (this *Event_SessionLog) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Event_SessionLog)
	if !ok {
		that2, ok := that.(Event_SessionLog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.SessionLog.Equal(that1.SessionLog) {
		return false
	}
	return true
}
func (this *Event_TaggedRunMetadata) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Event_TaggedRunMetadata)
	if !ok {
		that2, ok := that.(Event_TaggedRunMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.TaggedRunMetadata.Equal(that1.TaggedRunMetadata) {
		return false
	}
	return true
}
func (this *Event_MetaGraphDef) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Event_MetaGraphDef)
	if !ok {
		that2, ok := that.(Event_MetaGraphDef)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.MetaGraphDef, that1.MetaGraphDef) {
		return false
	}
	return true
}
func (this *LogMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LogMessage)
	if !ok {
		that2, ok := that.(LogMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *SessionLog) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SessionLog)
	if !ok {
		that2, ok := that.(SessionLog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.CheckpointPath != that1.CheckpointPath {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	return true
}
func (this *TaggedRunMetadata) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TaggedRunMetadata)
	if !ok {
		that2, ok := that.(TaggedRunMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Tag != that1.Tag {
		return false
	}
	if !bytes.Equal(this.RunMetadata, that1.RunMetadata) {
		return false
	}
	return true
}
func (this *Event) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&tensorflow.Event{")
	s = append(s, "WallTime: "+fmt.Sprintf("%#v", this.WallTime)+",\n")
	s = append(s, "Step: "+fmt.Sprintf("%#v", this.Step)+",\n")
	if this.What != nil {
		s = append(s, "What: "+fmt.Sprintf("%#v", this.What)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Event_FileVersion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow.Event_FileVersion{` +
		`FileVersion:` + fmt.Sprintf("%#v", this.FileVersion) + `}`}, ", ")
	return s
}
func (this *Event_GraphDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow.Event_GraphDef{` +
		`GraphDef:` + fmt.Sprintf("%#v", this.GraphDef) + `}`}, ", ")
	return s
}
func (this *Event_Summary) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow.Event_Summary{` +
		`Summary:` + fmt.Sprintf("%#v", this.Summary) + `}`}, ", ")
	return s
}
func (this *Event_LogMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow.Event_LogMessage{` +
		`LogMessage:` + fmt.Sprintf("%#v", this.LogMessage) + `}`}, ", ")
	return s
}
func (this *Event_SessionLog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow.Event_SessionLog{` +
		`SessionLog:` + fmt.Sprintf("%#v", this.SessionLog) + `}`}, ", ")
	return s
}
func (this *Event_TaggedRunMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow.Event_TaggedRunMetadata{` +
		`TaggedRunMetadata:` + fmt.Sprintf("%#v", this.TaggedRunMetadata) + `}`}, ", ")
	return s
}
func (this *Event_MetaGraphDef) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tensorflow.Event_MetaGraphDef{` +
		`MetaGraphDef:` + fmt.Sprintf("%#v", this.MetaGraphDef) + `}`}, ", ")
	return s
}
func (this *LogMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow.LogMessage{")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SessionLog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensorflow.SessionLog{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "CheckpointPath: "+fmt.Sprintf("%#v", this.CheckpointPath)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaggedRunMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow.TaggedRunMetadata{")
	s = append(s, "Tag: "+fmt.Sprintf("%#v", this.Tag)+",\n")
	s = append(s, "RunMetadata: "+fmt.Sprintf("%#v", this.RunMetadata)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEvent(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WallTime != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Event(dAtA, i, uint64(math.Float64bits(float64(m.WallTime))))
	}
	if m.Step != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Step))
	}
	if m.What != nil {
		nn1, err := m.What.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Event_FileVersion) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvent(dAtA, i, uint64(len(m.FileVersion)))
	i += copy(dAtA[i:], m.FileVersion)
	return i, nil
}
func (m *Event_GraphDef) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GraphDef != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.GraphDef)))
		i += copy(dAtA[i:], m.GraphDef)
	}
	return i, nil
}
func (m *Event_Summary) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Summary != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Summary.Size()))
		n2, err := m.Summary.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Event_LogMessage) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LogMessage != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.LogMessage.Size()))
		n3, err := m.LogMessage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Event_SessionLog) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SessionLog != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.SessionLog.Size()))
		n4, err := m.SessionLog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Event_TaggedRunMetadata) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TaggedRunMetadata != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.TaggedRunMetadata.Size()))
		n5, err := m.TaggedRunMetadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Event_MetaGraphDef) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MetaGraphDef != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.MetaGraphDef)))
		i += copy(dAtA[i:], m.MetaGraphDef)
	}
	return i, nil
}
func (m *LogMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Level))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *SessionLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvent(dAtA, i, uint64(m.Status))
	}
	if len(m.CheckpointPath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.CheckpointPath)))
		i += copy(dAtA[i:], m.CheckpointPath)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *TaggedRunMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaggedRunMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tag) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Tag)))
		i += copy(dAtA[i:], m.Tag)
	}
	if len(m.RunMetadata) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RunMetadata)))
		i += copy(dAtA[i:], m.RunMetadata)
	}
	return i, nil
}

func encodeFixed64Event(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Event(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Event) Size() (n int) {
	var l int
	_ = l
	if m.WallTime != 0 {
		n += 9
	}
	if m.Step != 0 {
		n += 1 + sovEvent(uint64(m.Step))
	}
	if m.What != nil {
		n += m.What.Size()
	}
	return n
}

func (m *Event_FileVersion) Size() (n int) {
	var l int
	_ = l
	l = len(m.FileVersion)
	n += 1 + l + sovEvent(uint64(l))
	return n
}
func (m *Event_GraphDef) Size() (n int) {
	var l int
	_ = l
	if m.GraphDef != nil {
		l = len(m.GraphDef)
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *Event_Summary) Size() (n int) {
	var l int
	_ = l
	if m.Summary != nil {
		l = m.Summary.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *Event_LogMessage) Size() (n int) {
	var l int
	_ = l
	if m.LogMessage != nil {
		l = m.LogMessage.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *Event_SessionLog) Size() (n int) {
	var l int
	_ = l
	if m.SessionLog != nil {
		l = m.SessionLog.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *Event_TaggedRunMetadata) Size() (n int) {
	var l int
	_ = l
	if m.TaggedRunMetadata != nil {
		l = m.TaggedRunMetadata.Size()
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *Event_MetaGraphDef) Size() (n int) {
	var l int
	_ = l
	if m.MetaGraphDef != nil {
		l = len(m.MetaGraphDef)
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}
func (m *LogMessage) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovEvent(uint64(m.Level))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *SessionLog) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovEvent(uint64(m.Status))
	}
	l = len(m.CheckpointPath)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func (m *TaggedRunMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.RunMetadata)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Event) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event{`,
		`WallTime:` + fmt.Sprintf("%v", this.WallTime) + `,`,
		`Step:` + fmt.Sprintf("%v", this.Step) + `,`,
		`What:` + fmt.Sprintf("%v", this.What) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_FileVersion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event_FileVersion{`,
		`FileVersion:` + fmt.Sprintf("%v", this.FileVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_GraphDef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event_GraphDef{`,
		`GraphDef:` + fmt.Sprintf("%v", this.GraphDef) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_Summary) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event_Summary{`,
		`Summary:` + strings.Replace(fmt.Sprintf("%v", this.Summary), "Summary", "tensorflow5.Summary", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_LogMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event_LogMessage{`,
		`LogMessage:` + strings.Replace(fmt.Sprintf("%v", this.LogMessage), "LogMessage", "LogMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_SessionLog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event_SessionLog{`,
		`SessionLog:` + strings.Replace(fmt.Sprintf("%v", this.SessionLog), "SessionLog", "SessionLog", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_TaggedRunMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event_TaggedRunMetadata{`,
		`TaggedRunMetadata:` + strings.Replace(fmt.Sprintf("%v", this.TaggedRunMetadata), "TaggedRunMetadata", "TaggedRunMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_MetaGraphDef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event_MetaGraphDef{`,
		`MetaGraphDef:` + fmt.Sprintf("%v", this.MetaGraphDef) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogMessage{`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SessionLog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SessionLog{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`CheckpointPath:` + fmt.Sprintf("%v", this.CheckpointPath) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaggedRunMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaggedRunMetadata{`,
		`Tag:` + fmt.Sprintf("%v", this.Tag) + `,`,
		`RunMetadata:` + fmt.Sprintf("%v", this.RunMetadata) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEvent(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field WallTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.WallTime = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.What = &Event_FileVersion{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraphDef", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.What = &Event_GraphDef{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &tensorflow5.Summary{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.What = &Event_Summary{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LogMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.What = &Event_LogMessage{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SessionLog{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.What = &Event_SessionLog{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaggedRunMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TaggedRunMetadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.What = &Event_TaggedRunMetadata{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaGraphDef", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.What = &Event_MetaGraphDef{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (LogMessage_Level(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (SessionLog_SessionStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckpointPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaggedRunMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaggedRunMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaggedRunMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunMetadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunMetadata = append(m.RunMetadata[:0], dAtA[iNdEx:postIndex]...)
			if m.RunMetadata == nil {
				m.RunMetadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("protobuf/tensorflow/core/util/event.proto", fileDescriptorEvent) }

var fileDescriptorEvent = []byte{
	// 665 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x4d, 0x6f, 0xda, 0x4a,
	0x14, 0xf5, 0x84, 0x4f, 0x5f, 0x08, 0xcf, 0x99, 0x3c, 0x45, 0xd6, 0x7b, 0x8d, 0x45, 0x69, 0xd5,
	0xd0, 0x0d, 0x48, 0x74, 0x55, 0xa9, 0x1b, 0x48, 0x08, 0xa0, 0x10, 0x83, 0xc6, 0xa6, 0x59, 0x5a,
	0x93, 0x64, 0x30, 0x28, 0x36, 0x46, 0xf6, 0x10, 0xd4, 0x5d, 0x7f, 0x42, 0x7f, 0x44, 0x17, 0xed,
	0x3f, 0xe9, 0x32, 0x52, 0x37, 0x5d, 0x36, 0x74, 0xd3, 0x65, 0x96, 0x5d, 0x56, 0x63, 0x9b, 0x38,
	0x5f, 0xbb, 0x3b, 0x67, 0xce, 0xb9, 0x3e, 0xf7, 0x8c, 0x2f, 0xbc, 0x9e, 0xfb, 0x1e, 0xf7, 0x4e,
	0x17, 0xe3, 0x3a, 0x67, 0xb3, 0xc0, 0xf3, 0xc7, 0x8e, 0xb7, 0xac, 0x9f, 0x79, 0x3e, 0xab, 0x2f,
	0xf8, 0xd4, 0xa9, 0xb3, 0x4b, 0x36, 0xe3, 0xb5, 0x90, 0x83, 0x21, 0x61, 0xfc, 0xb7, 0xf7, 0x90,
	0x3d, 0xf6, 0xa9, 0xcb, 0x96, 0x9e, 0x7f, 0x51, 0x0f, 0x16, 0xae, 0x4b, 0xfd, 0x0f, 0x91, 0xa8,
	0xf2, 0x39, 0x05, 0x99, 0xb6, 0x68, 0x82, 0xff, 0x07, 0x79, 0x49, 0x1d, 0xc7, 0xe2, 0x53, 0x97,
	0xa9, 0xa8, 0x8c, 0xaa, 0x88, 0xe4, 0x05, 0x60, 0x4e, 0x5d, 0x86, 0x31, 0xa4, 0x03, 0xce, 0xe6,
	0xea, 0x46, 0x19, 0x55, 0x53, 0x24, 0xac, 0xf1, 0x0b, 0x28, 0x8e, 0xa7, 0x0e, 0xb3, 0x2e, 0x99,
	0x1f, 0x4c, 0xbd, 0x99, 0x9a, 0x2a, 0xa3, 0xaa, 0xdc, 0x95, 0x48, 0x41, 0xa0, 0xef, 0x23, 0x10,
	0xef, 0x82, 0x6c, 0xfb, 0x74, 0x3e, 0xb1, 0xce, 0xd9, 0x58, 0x4d, 0x97, 0x51, 0xb5, 0xd8, 0x95,
	0x48, 0x3e, 0x84, 0x0e, 0xd8, 0x18, 0xd7, 0x21, 0x17, 0xfb, 0x51, 0x33, 0x65, 0x54, 0x2d, 0x34,
	0xb6, 0x6b, 0x89, 0xf3, 0x9a, 0x11, 0x5d, 0x75, 0x25, 0xb2, 0x66, 0xe1, 0xb7, 0x50, 0x70, 0x3c,
	0xdb, 0x72, 0x59, 0x10, 0x50, 0x9b, 0xa9, 0xd9, 0x50, 0xb4, 0x73, 0x57, 0xd4, 0xf7, 0xec, 0xe3,
	0xe8, 0xb6, 0x2b, 0x11, 0x70, 0x6e, 0x4f, 0x42, 0x1a, 0xb0, 0x40, 0xb8, 0xb2, 0x1c, 0xcf, 0x56,
	0x73, 0x8f, 0xa5, 0x46, 0x74, 0xdd, 0xf7, 0x6c, 0x21, 0x0d, 0x6e, 0x4f, 0x78, 0x00, 0xdb, 0x9c,
	0xda, 0x36, 0x3b, 0xb7, 0xfc, 0xc5, 0xcc, 0x72, 0x19, 0xa7, 0xe7, 0x94, 0x53, 0x35, 0x1f, 0xb6,
	0xd8, 0xbd, 0xdb, 0xc2, 0x0c, 0x69, 0x64, 0x31, 0x3b, 0x8e, 0x49, 0x5d, 0x89, 0x6c, 0xf1, 0x87,
	0x20, 0x7e, 0x05, 0x25, 0xd1, 0xc5, 0x4a, 0xb2, 0x91, 0xe3, 0x6c, 0x8a, 0x02, 0xef, 0xc4, 0xf9,
	0xb4, 0xb2, 0x90, 0x5e, 0x4e, 0x28, 0xaf, 0x7c, 0x45, 0x00, 0xc9, 0x60, 0xb8, 0x01, 0x19, 0x87,
	0x5d, 0x32, 0x27, 0x7c, 0xa7, 0x52, 0xe3, 0xd9, 0xd3, 0xf3, 0xd7, 0xfa, 0x82, 0x43, 0x22, 0x2a,
	0x56, 0x21, 0xb7, 0x4e, 0x4d, 0xbc, 0xa2, 0x4c, 0xd6, 0xc7, 0xca, 0x31, 0x64, 0x42, 0x26, 0x2e,
	0x40, 0x6e, 0xa4, 0x1f, 0xe9, 0x83, 0x13, 0x5d, 0x91, 0xf0, 0x26, 0xc8, 0x07, 0xed, 0xd6, 0xa8,
	0xd3, 0xe9, 0xe9, 0x1d, 0x05, 0x70, 0x1e, 0xd2, 0x3d, 0xfd, 0x70, 0xa0, 0xfc, 0x2b, 0xaa, 0x93,
	0x26, 0xd1, 0x15, 0x0d, 0xcb, 0x90, 0x69, 0x13, 0x32, 0x20, 0x4a, 0x55, 0x94, 0x87, 0x4d, 0xb3,
	0xd9, 0x57, 0x1a, 0x95, 0xef, 0x08, 0x20, 0x49, 0x12, 0xbf, 0x83, 0x6c, 0xc0, 0x29, 0x5f, 0x04,
	0xb1, 0xd9, 0x97, 0x4f, 0x27, 0xbe, 0x2e, 0x8d, 0x90, 0x4b, 0x62, 0x0d, 0xde, 0x83, 0x7f, 0xce,
	0x26, 0xec, 0xec, 0x62, 0xee, 0x4d, 0x67, 0xdc, 0x9a, 0x53, 0x3e, 0x89, 0xdd, 0x97, 0x12, 0x78,
	0x48, 0xf9, 0x04, 0x2b, 0x90, 0x72, 0x03, 0x3b, 0xfa, 0x09, 0x89, 0x28, 0x2b, 0x7d, 0xd8, 0xbc,
	0xd7, 0x13, 0xef, 0x00, 0x36, 0xcc, 0xa6, 0x39, 0x32, 0xac, 0x91, 0x6e, 0x0c, 0xdb, 0xfb, 0xbd,
	0xc3, 0x5e, 0xfb, 0x40, 0x91, 0x84, 0x77, 0xc3, 0x6c, 0x12, 0x53, 0x41, 0x62, 0x36, 0xc3, 0x1c,
	0x0c, 0x95, 0x0d, 0x5c, 0x02, 0xd8, 0xef, 0xb6, 0xf7, 0x8f, 0x86, 0x83, 0x9e, 0x6e, 0x2a, 0xa9,
	0x4a, 0x17, 0xb6, 0x1e, 0xbd, 0xad, 0xf8, 0x28, 0xa7, 0x76, 0x38, 0x98, 0x4c, 0x44, 0x89, 0x9f,
	0x43, 0xf1, 0xde, 0x2f, 0x22, 0xcc, 0x16, 0x49, 0xc1, 0x4f, 0x44, 0x2d, 0xe3, 0xea, 0x5a, 0x93,
	0x7e, 0x5c, 0x6b, 0xd2, 0xcd, 0xb5, 0x86, 0x3e, 0xae, 0x34, 0xf4, 0x65, 0xa5, 0xa1, 0x6f, 0x2b,
	0x0d, 0x5d, 0xad, 0x34, 0xf4, 0x73, 0xa5, 0xa1, 0xdf, 0x2b, 0x4d, 0xba, 0x59, 0x69, 0xe8, 0xd3,
	0x2f, 0x4d, 0x82, 0x6d, 0xcf, 0xb7, 0xef, 0x26, 0x26, 0xd6, 0xbe, 0x55, 0x08, 0x57, 0x76, 0x28,
	0x36, 0x38, 0x18, 0xa2, 0x3f, 0x08, 0x9d, 0x66, 0xc3, 0x75, 0x7e, 0xf3, 0x37, 0x00, 0x00, 0xff,
	0xff, 0x8a, 0x32, 0x43, 0x74, 0x30, 0x04, 0x00, 0x00,
}
