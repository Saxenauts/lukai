// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/core/util/saved_tensor_slice.proto

/*
	Package tensorflow is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/core/util/saved_tensor_slice.proto

	It has these top-level messages:
		SavedSliceMeta
		SavedTensorSliceMeta
		SavedSlice
		SavedTensorSlices
*/
package tensorflow

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import tensorflow1 "github.com/d4l3k/pok/tensorflow/core/framework"
import tensorflow2 "github.com/d4l3k/pok/tensorflow/core/framework"
import tensorflow5 "github.com/d4l3k/pok/tensorflow/core/framework"
import tensorflow4 "github.com/d4l3k/pok/tensorflow/core/framework"
import tensorflow6 "github.com/d4l3k/pok/tensorflow/core/framework"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Metadata describing the set of slices of the same tensor saved in a
// checkpoint file.
type SavedSliceMeta struct {
	// Name of the tensor.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Shape of the tensor
	Shape *tensorflow1.TensorShapeProto `protobuf:"bytes,2,opt,name=shape" json:"shape,omitempty"`
	// Type of the tensor
	Type tensorflow4.DataType `protobuf:"varint,3,opt,name=type,proto3,enum=tensorflow.DataType" json:"type,omitempty"`
	// Explicit list of slices saved in the checkpoint file.
	Slice []*tensorflow2.TensorSliceProto `protobuf:"bytes,4,rep,name=slice" json:"slice,omitempty"`
}

func (m *SavedSliceMeta) Reset()                    { *m = SavedSliceMeta{} }
func (*SavedSliceMeta) ProtoMessage()               {}
func (*SavedSliceMeta) Descriptor() ([]byte, []int) { return fileDescriptorSavedTensorSlice, []int{0} }

func (m *SavedSliceMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SavedSliceMeta) GetShape() *tensorflow1.TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func (m *SavedSliceMeta) GetType() tensorflow4.DataType {
	if m != nil {
		return m.Type
	}
	return tensorflow4.DT_INVALID
}

func (m *SavedSliceMeta) GetSlice() []*tensorflow2.TensorSliceProto {
	if m != nil {
		return m.Slice
	}
	return nil
}

// Metadata describing the set of tensor slices saved in a checkpoint file.
// It is always stored at the beginning of each checkpoint file.
type SavedTensorSliceMeta struct {
	// Each SavedSliceMeta describes the slices for one tensor.
	Tensor []*SavedSliceMeta `protobuf:"bytes,1,rep,name=tensor" json:"tensor,omitempty"`
	// Compatibility version of this checkpoint.  See core/public/version.h
	// for version history.
	Versions *tensorflow6.VersionDef `protobuf:"bytes,2,opt,name=versions" json:"versions,omitempty"`
}

func (m *SavedTensorSliceMeta) Reset()      { *m = SavedTensorSliceMeta{} }
func (*SavedTensorSliceMeta) ProtoMessage() {}
func (*SavedTensorSliceMeta) Descriptor() ([]byte, []int) {
	return fileDescriptorSavedTensorSlice, []int{1}
}

func (m *SavedTensorSliceMeta) GetTensor() []*SavedSliceMeta {
	if m != nil {
		return m.Tensor
	}
	return nil
}

func (m *SavedTensorSliceMeta) GetVersions() *tensorflow6.VersionDef {
	if m != nil {
		return m.Versions
	}
	return nil
}

// Saved tensor slice: it stores the name of the tensors, the slice, and the
// raw data.
type SavedSlice struct {
	// Name of the tensor that this slice belongs to. This must be identical to
	// the name used to encode the key for this record.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Extent of the slice.  Must have one entry for each of the dimension of the
	// tensor that this slice belongs to.
	Slice *tensorflow2.TensorSliceProto `protobuf:"bytes,2,opt,name=slice" json:"slice,omitempty"`
	// The raw data of the slice is stored as a TensorProto. Only raw data are
	// stored (we don't fill in fields such as dtype or tensor_shape).
	Data *tensorflow5.TensorProto `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *SavedSlice) Reset()                    { *m = SavedSlice{} }
func (*SavedSlice) ProtoMessage()               {}
func (*SavedSlice) Descriptor() ([]byte, []int) { return fileDescriptorSavedTensorSlice, []int{2} }

func (m *SavedSlice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SavedSlice) GetSlice() *tensorflow2.TensorSliceProto {
	if m != nil {
		return m.Slice
	}
	return nil
}

func (m *SavedSlice) GetData() *tensorflow5.TensorProto {
	if m != nil {
		return m.Data
	}
	return nil
}

// Each record in a v3 checkpoint file is a serialized SavedTensorSlices
// message.
type SavedTensorSlices struct {
	// This is only present at the first item of each checkpoint file and serves
	// as a table of contents, listing all the tensor slices saved in this file.
	Meta *SavedTensorSliceMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	// This exists in all but the first item of each checkpoint file.
	Data *SavedSlice `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *SavedTensorSlices) Reset()      { *m = SavedTensorSlices{} }
func (*SavedTensorSlices) ProtoMessage() {}
func (*SavedTensorSlices) Descriptor() ([]byte, []int) {
	return fileDescriptorSavedTensorSlice, []int{3}
}

func (m *SavedTensorSlices) GetMeta() *SavedTensorSliceMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *SavedTensorSlices) GetData() *SavedSlice {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*SavedSliceMeta)(nil), "tensorflow.SavedSliceMeta")
	proto.RegisterType((*SavedTensorSliceMeta)(nil), "tensorflow.SavedTensorSliceMeta")
	proto.RegisterType((*SavedSlice)(nil), "tensorflow.SavedSlice")
	proto.RegisterType((*SavedTensorSlices)(nil), "tensorflow.SavedTensorSlices")
}
func (this *SavedSliceMeta) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedSliceMeta)
	if !ok {
		that2, ok := that.(SavedSliceMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Shape.Equal(that1.Shape) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Slice) != len(that1.Slice) {
		return false
	}
	for i := range this.Slice {
		if !this.Slice[i].Equal(that1.Slice[i]) {
			return false
		}
	}
	return true
}
func (this *SavedTensorSliceMeta) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedTensorSliceMeta)
	if !ok {
		that2, ok := that.(SavedTensorSliceMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Tensor) != len(that1.Tensor) {
		return false
	}
	for i := range this.Tensor {
		if !this.Tensor[i].Equal(that1.Tensor[i]) {
			return false
		}
	}
	if !this.Versions.Equal(that1.Versions) {
		return false
	}
	return true
}
func (this *SavedSlice) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedSlice)
	if !ok {
		that2, ok := that.(SavedSlice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Slice.Equal(that1.Slice) {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *SavedTensorSlices) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SavedTensorSlices)
	if !ok {
		that2, ok := that.(SavedTensorSlices)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Meta.Equal(that1.Meta) {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *SavedSliceMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tensorflow.SavedSliceMeta{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Shape != nil {
		s = append(s, "Shape: "+fmt.Sprintf("%#v", this.Shape)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Slice != nil {
		s = append(s, "Slice: "+fmt.Sprintf("%#v", this.Slice)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedTensorSliceMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow.SavedTensorSliceMeta{")
	if this.Tensor != nil {
		s = append(s, "Tensor: "+fmt.Sprintf("%#v", this.Tensor)+",\n")
	}
	if this.Versions != nil {
		s = append(s, "Versions: "+fmt.Sprintf("%#v", this.Versions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedSlice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tensorflow.SavedSlice{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Slice != nil {
		s = append(s, "Slice: "+fmt.Sprintf("%#v", this.Slice)+",\n")
	}
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SavedTensorSlices) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow.SavedTensorSlices{")
	if this.Meta != nil {
		s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	}
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSavedTensorSlice(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SavedSliceMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedSliceMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSavedTensorSlice(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Shape != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSavedTensorSlice(dAtA, i, uint64(m.Shape.Size()))
		n1, err := m.Shape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSavedTensorSlice(dAtA, i, uint64(m.Type))
	}
	if len(m.Slice) > 0 {
		for _, msg := range m.Slice {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSavedTensorSlice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SavedTensorSliceMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedTensorSliceMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tensor) > 0 {
		for _, msg := range m.Tensor {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSavedTensorSlice(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Versions != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSavedTensorSlice(dAtA, i, uint64(m.Versions.Size()))
		n2, err := m.Versions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *SavedSlice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedSlice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSavedTensorSlice(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Slice != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSavedTensorSlice(dAtA, i, uint64(m.Slice.Size()))
		n3, err := m.Slice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSavedTensorSlice(dAtA, i, uint64(m.Data.Size()))
		n4, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *SavedTensorSlices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SavedTensorSlices) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSavedTensorSlice(dAtA, i, uint64(m.Meta.Size()))
		n5, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSavedTensorSlice(dAtA, i, uint64(m.Data.Size()))
		n6, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func encodeFixed64SavedTensorSlice(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32SavedTensorSlice(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSavedTensorSlice(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SavedSliceMeta) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSavedTensorSlice(uint64(l))
	}
	if m.Shape != nil {
		l = m.Shape.Size()
		n += 1 + l + sovSavedTensorSlice(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSavedTensorSlice(uint64(m.Type))
	}
	if len(m.Slice) > 0 {
		for _, e := range m.Slice {
			l = e.Size()
			n += 1 + l + sovSavedTensorSlice(uint64(l))
		}
	}
	return n
}

func (m *SavedTensorSliceMeta) Size() (n int) {
	var l int
	_ = l
	if len(m.Tensor) > 0 {
		for _, e := range m.Tensor {
			l = e.Size()
			n += 1 + l + sovSavedTensorSlice(uint64(l))
		}
	}
	if m.Versions != nil {
		l = m.Versions.Size()
		n += 1 + l + sovSavedTensorSlice(uint64(l))
	}
	return n
}

func (m *SavedSlice) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSavedTensorSlice(uint64(l))
	}
	if m.Slice != nil {
		l = m.Slice.Size()
		n += 1 + l + sovSavedTensorSlice(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovSavedTensorSlice(uint64(l))
	}
	return n
}

func (m *SavedTensorSlices) Size() (n int) {
	var l int
	_ = l
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovSavedTensorSlice(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovSavedTensorSlice(uint64(l))
	}
	return n
}

func sovSavedTensorSlice(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSavedTensorSlice(x uint64) (n int) {
	return sovSavedTensorSlice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SavedSliceMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedSliceMeta{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Shape:` + strings.Replace(fmt.Sprintf("%v", this.Shape), "TensorShapeProto", "tensorflow1.TensorShapeProto", 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Slice:` + strings.Replace(fmt.Sprintf("%v", this.Slice), "TensorSliceProto", "tensorflow2.TensorSliceProto", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedTensorSliceMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedTensorSliceMeta{`,
		`Tensor:` + strings.Replace(fmt.Sprintf("%v", this.Tensor), "SavedSliceMeta", "SavedSliceMeta", 1) + `,`,
		`Versions:` + strings.Replace(fmt.Sprintf("%v", this.Versions), "VersionDef", "tensorflow6.VersionDef", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedSlice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedSlice{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Slice:` + strings.Replace(fmt.Sprintf("%v", this.Slice), "TensorSliceProto", "tensorflow2.TensorSliceProto", 1) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "TensorProto", "tensorflow5.TensorProto", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SavedTensorSlices) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SavedTensorSlices{`,
		`Meta:` + strings.Replace(fmt.Sprintf("%v", this.Meta), "SavedTensorSliceMeta", "SavedTensorSliceMeta", 1) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "SavedSlice", "SavedSlice", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSavedTensorSlice(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SavedSliceMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSavedTensorSlice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedSliceMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedSliceMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shape == nil {
				m.Shape = &tensorflow1.TensorShapeProto{}
			}
			if err := m.Shape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (tensorflow4.DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slice = append(m.Slice, &tensorflow2.TensorSliceProto{})
			if err := m.Slice[len(m.Slice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSavedTensorSlice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedTensorSliceMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSavedTensorSlice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedTensorSliceMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedTensorSliceMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tensor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tensor = append(m.Tensor, &SavedSliceMeta{})
			if err := m.Tensor[len(m.Tensor)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Versions == nil {
				m.Versions = &tensorflow6.VersionDef{}
			}
			if err := m.Versions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSavedTensorSlice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedSlice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSavedTensorSlice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedSlice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedSlice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Slice == nil {
				m.Slice = &tensorflow2.TensorSliceProto{}
			}
			if err := m.Slice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &tensorflow5.TensorProto{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSavedTensorSlice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SavedTensorSlices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSavedTensorSlice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SavedTensorSlices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SavedTensorSlices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &SavedTensorSliceMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &SavedSlice{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSavedTensorSlice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSavedTensorSlice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSavedTensorSlice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSavedTensorSlice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSavedTensorSlice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSavedTensorSlice
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSavedTensorSlice
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSavedTensorSlice(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSavedTensorSlice = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSavedTensorSlice   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/core/util/saved_tensor_slice.proto", fileDescriptorSavedTensorSlice)
}

var fileDescriptorSavedTensorSlice = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0xaa, 0xd3, 0x40,
	0x14, 0x86, 0x73, 0x6c, 0x2c, 0x3a, 0x85, 0x82, 0x63, 0xa9, 0xa1, 0xc8, 0x10, 0x02, 0x4a, 0x50,
	0x69, 0x20, 0x8a, 0x0f, 0x50, 0xba, 0x15, 0x4a, 0x5a, 0x5c, 0x5a, 0xa6, 0xed, 0x44, 0x8b, 0x6d,
	0x27, 0x24, 0x69, 0x4b, 0x37, 0xa2, 0x6f, 0xe0, 0x63, 0xf8, 0x04, 0x3e, 0x83, 0xcb, 0x2e, 0x5d,
	0xda, 0xb8, 0x71, 0xd9, 0xa5, 0xcb, 0xcb, 0x9c, 0xa4, 0x37, 0xb9, 0xe9, 0xcd, 0xbd, 0x77, 0x37,
	0x70, 0xbe, 0xff, 0x3f, 0xe7, 0xff, 0x49, 0xc8, 0xdb, 0x20, 0x94, 0xb1, 0x9c, 0xac, 0x7d, 0x27,
	0x16, 0xab, 0x48, 0x86, 0xfe, 0x42, 0x6e, 0x9d, 0xa9, 0x0c, 0x85, 0xb3, 0x8e, 0xe7, 0x0b, 0x27,
	0xe2, 0x1b, 0x31, 0x1b, 0xa7, 0xa3, 0x71, 0xb4, 0x98, 0x4f, 0x45, 0x17, 0x05, 0x94, 0xe4, 0x78,
	0xe7, 0x55, 0x59, 0xea, 0x87, 0x7c, 0x29, 0xb6, 0x32, 0xfc, 0xec, 0x9c, 0x94, 0x9f, 0x78, 0x90,
	0x29, 0xef, 0x42, 0xe7, 0x7b, 0x3a, 0xcf, 0x6f, 0xa3, 0x33, 0xee, 0xd9, 0x0d, 0xdc, 0x2e, 0x10,
	0x51, 0x86, 0xd9, 0xd5, 0xd8, 0x46, 0x84, 0xd1, 0x5c, 0xae, 0x32, 0xd2, 0xfa, 0x09, 0xa4, 0x39,
	0x54, 0xe9, 0x87, 0xea, 0x9a, 0x77, 0x22, 0xe6, 0x94, 0x12, 0x7d, 0xc5, 0x97, 0xc2, 0x00, 0x13,
	0xec, 0x87, 0x1e, 0xbe, 0xa9, 0x4b, 0xee, 0x63, 0x38, 0xe3, 0x9e, 0x09, 0x76, 0xc3, 0x7d, 0xda,
	0xcd, 0x17, 0x74, 0x47, 0xf8, 0x1c, 0xaa, 0xf1, 0x40, 0x79, 0x7a, 0x29, 0x4a, 0x6d, 0xa2, 0xab,
	0x9b, 0x8c, 0x9a, 0x09, 0x76, 0xd3, 0x6d, 0x15, 0x25, 0x7d, 0x1e, 0xf3, 0xd1, 0x2e, 0x10, 0x1e,
	0x12, 0xe8, 0xae, 0xd6, 0x1b, 0xba, 0x59, 0xab, 0x70, 0x57, 0xe3, 0x93, 0xbb, 0x7a, 0x5b, 0x5f,
	0x48, 0x0b, 0xef, 0x2e, 0xcc, 0xf1, 0x7a, 0x97, 0xd4, 0x53, 0xb5, 0x01, 0x68, 0xd6, 0x29, 0x9a,
	0x5d, 0x4d, 0xea, 0x65, 0x24, 0x75, 0xc9, 0x83, 0x53, 0x2d, 0x59, 0xc0, 0x76, 0x51, 0xf5, 0x3e,
	0x9d, 0xf5, 0x85, 0xef, 0x5d, 0x72, 0xd6, 0x37, 0x20, 0x24, 0xb7, 0xab, 0x2c, 0x0d, 0x63, 0x55,
	0x97, 0x56, 0x8e, 0x45, 0x5f, 0x12, 0x7d, 0xc6, 0x63, 0x8e, 0xa5, 0x35, 0xdc, 0x27, 0xe7, 0x92,
	0x94, 0x46, 0xc8, 0x5a, 0x93, 0x47, 0xe5, 0x0e, 0x22, 0xfa, 0x86, 0xe8, 0x4b, 0x11, 0x73, 0xbc,
	0xa4, 0xe1, 0x9a, 0x67, 0xf1, 0x4b, 0x85, 0x79, 0x48, 0xd3, 0x17, 0xd9, 0xde, 0x6b, 0xe2, 0xe7,
	0x29, 0xd3, 0xb5, 0xbd, 0x0f, 0xfb, 0x03, 0xd3, 0x7e, 0x1f, 0x98, 0x76, 0x3c, 0x30, 0xf8, 0x9a,
	0x30, 0xf8, 0x91, 0x30, 0xf8, 0x95, 0x30, 0xd8, 0x27, 0x0c, 0xfe, 0x24, 0x0c, 0xfe, 0x25, 0x4c,
	0x3b, 0x26, 0x0c, 0xbe, 0xff, 0x65, 0x1a, 0x79, 0x2c, 0xc3, 0x8f, 0x45, 0x3b, 0xf5, 0xc3, 0xf5,
	0xda, 0xe5, 0x53, 0x30, 0x56, 0x34, 0x80, 0xff, 0x00, 0x93, 0x3a, 0x7e, 0x9a, 0xaf, 0x2f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xe2, 0x1a, 0x06, 0x9d, 0xb5, 0x03, 0x00, 0x00,
}
