// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/core/util/memmapped_file_system.proto

/*
	Package tensorflow is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/core/util/memmapped_file_system.proto

	It has these top-level messages:
		MemmappedFileSystemDirectoryElement
		MemmappedFileSystemDirectory
*/
package tensorflow

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// A message that describes one region of memmapped file.
type MemmappedFileSystemDirectoryElement struct {
	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *MemmappedFileSystemDirectoryElement) Reset()      { *m = MemmappedFileSystemDirectoryElement{} }
func (*MemmappedFileSystemDirectoryElement) ProtoMessage() {}
func (*MemmappedFileSystemDirectoryElement) Descriptor() ([]byte, []int) {
	return fileDescriptorMemmappedFileSystem, []int{0}
}

func (m *MemmappedFileSystemDirectoryElement) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *MemmappedFileSystemDirectoryElement) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// A directory of regions in a memmapped file.
type MemmappedFileSystemDirectory struct {
	Element []*MemmappedFileSystemDirectoryElement `protobuf:"bytes,1,rep,name=element" json:"element,omitempty"`
}

func (m *MemmappedFileSystemDirectory) Reset()      { *m = MemmappedFileSystemDirectory{} }
func (*MemmappedFileSystemDirectory) ProtoMessage() {}
func (*MemmappedFileSystemDirectory) Descriptor() ([]byte, []int) {
	return fileDescriptorMemmappedFileSystem, []int{1}
}

func (m *MemmappedFileSystemDirectory) GetElement() []*MemmappedFileSystemDirectoryElement {
	if m != nil {
		return m.Element
	}
	return nil
}

func init() {
	proto.RegisterType((*MemmappedFileSystemDirectoryElement)(nil), "tensorflow.MemmappedFileSystemDirectoryElement")
	proto.RegisterType((*MemmappedFileSystemDirectory)(nil), "tensorflow.MemmappedFileSystemDirectory")
}
func (this *MemmappedFileSystemDirectoryElement) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MemmappedFileSystemDirectoryElement)
	if !ok {
		that2, ok := that.(MemmappedFileSystemDirectoryElement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *MemmappedFileSystemDirectory) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MemmappedFileSystemDirectory)
	if !ok {
		that2, ok := that.(MemmappedFileSystemDirectory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Element) != len(that1.Element) {
		return false
	}
	for i := range this.Element {
		if !this.Element[i].Equal(that1.Element[i]) {
			return false
		}
	}
	return true
}
func (this *MemmappedFileSystemDirectoryElement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tensorflow.MemmappedFileSystemDirectoryElement{")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MemmappedFileSystemDirectory) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tensorflow.MemmappedFileSystemDirectory{")
	if this.Element != nil {
		s = append(s, "Element: "+fmt.Sprintf("%#v", this.Element)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMemmappedFileSystem(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MemmappedFileSystemDirectoryElement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemmappedFileSystemDirectoryElement) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMemmappedFileSystem(dAtA, i, uint64(m.Offset))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMemmappedFileSystem(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *MemmappedFileSystemDirectory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemmappedFileSystemDirectory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Element) > 0 {
		for _, msg := range m.Element {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMemmappedFileSystem(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64MemmappedFileSystem(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32MemmappedFileSystem(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMemmappedFileSystem(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MemmappedFileSystemDirectoryElement) Size() (n int) {
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovMemmappedFileSystem(uint64(m.Offset))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMemmappedFileSystem(uint64(l))
	}
	return n
}

func (m *MemmappedFileSystemDirectory) Size() (n int) {
	var l int
	_ = l
	if len(m.Element) > 0 {
		for _, e := range m.Element {
			l = e.Size()
			n += 1 + l + sovMemmappedFileSystem(uint64(l))
		}
	}
	return n
}

func sovMemmappedFileSystem(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMemmappedFileSystem(x uint64) (n int) {
	return sovMemmappedFileSystem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MemmappedFileSystemDirectoryElement) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MemmappedFileSystemDirectoryElement{`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MemmappedFileSystemDirectory) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MemmappedFileSystemDirectory{`,
		`Element:` + strings.Replace(fmt.Sprintf("%v", this.Element), "MemmappedFileSystemDirectoryElement", "MemmappedFileSystemDirectoryElement", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMemmappedFileSystem(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MemmappedFileSystemDirectoryElement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemmappedFileSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemmappedFileSystemDirectoryElement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemmappedFileSystemDirectoryElement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemmappedFileSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemmappedFileSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMemmappedFileSystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMemmappedFileSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemmappedFileSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemmappedFileSystemDirectory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMemmappedFileSystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemmappedFileSystemDirectory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemmappedFileSystemDirectory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Element", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMemmappedFileSystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMemmappedFileSystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Element = append(m.Element, &MemmappedFileSystemDirectoryElement{})
			if err := m.Element[len(m.Element)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMemmappedFileSystem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMemmappedFileSystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMemmappedFileSystem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMemmappedFileSystem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMemmappedFileSystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMemmappedFileSystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMemmappedFileSystem
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMemmappedFileSystem
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMemmappedFileSystem(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMemmappedFileSystem = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMemmappedFileSystem   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/core/util/memmapped_file_system.proto", fileDescriptorMemmappedFileSystem)
}

var fileDescriptorMemmappedFileSystem = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0x49, 0xcd, 0x2b, 0xce, 0x2f, 0x4a, 0xcb, 0xc9, 0x2f, 0xd7,
	0x4f, 0xce, 0x2f, 0x4a, 0xd5, 0x2f, 0x2d, 0xc9, 0xcc, 0xd1, 0xcf, 0x4d, 0xcd, 0xcd, 0x4d, 0x2c,
	0x28, 0x48, 0x4d, 0x89, 0x4f, 0xcb, 0xcc, 0x49, 0x8d, 0x2f, 0xae, 0x2c, 0x2e, 0x49, 0xcd, 0xd5,
	0x03, 0xeb, 0x11, 0xe2, 0x42, 0xe8, 0x50, 0x0a, 0xe4, 0x52, 0xf6, 0x85, 0x29, 0x75, 0xcb, 0xcc,
	0x49, 0x0d, 0x06, 0x2b, 0x74, 0xc9, 0x2c, 0x4a, 0x4d, 0x2e, 0xc9, 0x2f, 0xaa, 0x74, 0xcd, 0x49,
	0xcd, 0x4d, 0xcd, 0x2b, 0x11, 0x12, 0xe3, 0x62, 0xcb, 0x4f, 0x4b, 0x2b, 0x4e, 0x2d, 0x91, 0x60,
	0x54, 0x60, 0xd4, 0x60, 0x09, 0x82, 0xf2, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25,
	0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0xa5, 0x4c, 0x2e, 0x19, 0x7c, 0x46, 0x0a, 0x79,
	0x72, 0xb1, 0xa7, 0x42, 0x8c, 0x95, 0x60, 0x54, 0x60, 0xd6, 0xe0, 0x36, 0xd2, 0xd7, 0x43, 0x38,
	0x48, 0x8f, 0x08, 0xd7, 0x04, 0xc1, 0xf4, 0x3b, 0xe9, 0x5f, 0x78, 0x28, 0xc7, 0x70, 0xe3, 0xa1,
	0x1c, 0xc3, 0x87, 0x87, 0x72, 0x8c, 0x0d, 0x8f, 0xe4, 0x18, 0x57, 0x3c, 0x92, 0x63, 0x3c, 0xf1,
	0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x5f, 0x3c, 0x92, 0x63, 0xf8,
	0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x1f, 0x8c, 0x8c, 0x49, 0x6c, 0xe0, 0x10, 0x30,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x60, 0x3d, 0x69, 0x3e, 0x01, 0x00, 0x00,
}
