// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/tensorflow/tools/api/lib/api_objects.proto

/*
	Package third_party_tensorflow_tools_api is a generated protocol buffer package.

	It is generated from these files:
		protobuf/tensorflow/tools/api/lib/api_objects.proto

	It has these top-level messages:
		TFAPIMember
		TFAPIMethod
		TFAPIModule
		TFAPIClass
		TFAPIObject
*/
package third_party_tensorflow_tools_api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import fmt "fmt"
import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TFAPIMember struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name"`
	Mtype string `protobuf:"bytes,2,opt,name=mtype" json:"mtype"`
}

func (m *TFAPIMember) Reset()                    { *m = TFAPIMember{} }
func (*TFAPIMember) ProtoMessage()               {}
func (*TFAPIMember) Descriptor() ([]byte, []int) { return fileDescriptorApiObjects, []int{0} }

func (m *TFAPIMember) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TFAPIMember) GetMtype() string {
	if m != nil {
		return m.Mtype
	}
	return ""
}

type TFAPIMethod struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name"`
	Path    string `protobuf:"bytes,2,opt,name=path" json:"path"`
	Argspec string `protobuf:"bytes,3,opt,name=argspec" json:"argspec"`
}

func (m *TFAPIMethod) Reset()                    { *m = TFAPIMethod{} }
func (*TFAPIMethod) ProtoMessage()               {}
func (*TFAPIMethod) Descriptor() ([]byte, []int) { return fileDescriptorApiObjects, []int{1} }

func (m *TFAPIMethod) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TFAPIMethod) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *TFAPIMethod) GetArgspec() string {
	if m != nil {
		return m.Argspec
	}
	return ""
}

type TFAPIModule struct {
	Member       []*TFAPIMember `protobuf:"bytes,1,rep,name=member" json:"member,omitempty"`
	MemberMethod []*TFAPIMethod `protobuf:"bytes,2,rep,name=member_method,json=memberMethod" json:"member_method,omitempty"`
}

func (m *TFAPIModule) Reset()                    { *m = TFAPIModule{} }
func (*TFAPIModule) ProtoMessage()               {}
func (*TFAPIModule) Descriptor() ([]byte, []int) { return fileDescriptorApiObjects, []int{2} }

func (m *TFAPIModule) GetMember() []*TFAPIMember {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *TFAPIModule) GetMemberMethod() []*TFAPIMethod {
	if m != nil {
		return m.MemberMethod
	}
	return nil
}

type TFAPIClass struct {
	IsInstance   []string       `protobuf:"bytes,1,rep,name=is_instance,json=isInstance" json:"is_instance,omitempty"`
	Member       []*TFAPIMember `protobuf:"bytes,2,rep,name=member" json:"member,omitempty"`
	MemberMethod []*TFAPIMethod `protobuf:"bytes,3,rep,name=member_method,json=memberMethod" json:"member_method,omitempty"`
}

func (m *TFAPIClass) Reset()                    { *m = TFAPIClass{} }
func (*TFAPIClass) ProtoMessage()               {}
func (*TFAPIClass) Descriptor() ([]byte, []int) { return fileDescriptorApiObjects, []int{3} }

func (m *TFAPIClass) GetIsInstance() []string {
	if m != nil {
		return m.IsInstance
	}
	return nil
}

func (m *TFAPIClass) GetMember() []*TFAPIMember {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *TFAPIClass) GetMemberMethod() []*TFAPIMethod {
	if m != nil {
		return m.MemberMethod
	}
	return nil
}

type TFAPIObject struct {
	Path     string       `protobuf:"bytes,1,opt,name=path" json:"path"`
	TfModule *TFAPIModule `protobuf:"bytes,2,opt,name=tf_module,json=tfModule" json:"tf_module,omitempty"`
	TfClass  *TFAPIClass  `protobuf:"bytes,3,opt,name=tf_class,json=tfClass" json:"tf_class,omitempty"`
}

func (m *TFAPIObject) Reset()                    { *m = TFAPIObject{} }
func (*TFAPIObject) ProtoMessage()               {}
func (*TFAPIObject) Descriptor() ([]byte, []int) { return fileDescriptorApiObjects, []int{4} }

func (m *TFAPIObject) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *TFAPIObject) GetTfModule() *TFAPIModule {
	if m != nil {
		return m.TfModule
	}
	return nil
}

func (m *TFAPIObject) GetTfClass() *TFAPIClass {
	if m != nil {
		return m.TfClass
	}
	return nil
}

func init() {
	proto.RegisterType((*TFAPIMember)(nil), "third_party.tensorflow.tools.api.TFAPIMember")
	proto.RegisterType((*TFAPIMethod)(nil), "third_party.tensorflow.tools.api.TFAPIMethod")
	proto.RegisterType((*TFAPIModule)(nil), "third_party.tensorflow.tools.api.TFAPIModule")
	proto.RegisterType((*TFAPIClass)(nil), "third_party.tensorflow.tools.api.TFAPIClass")
	proto.RegisterType((*TFAPIObject)(nil), "third_party.tensorflow.tools.api.TFAPIObject")
}
func (this *TFAPIMember) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TFAPIMember)
	if !ok {
		that2, ok := that.(TFAPIMember)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Mtype != that1.Mtype {
		return false
	}
	return true
}
func (this *TFAPIMethod) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TFAPIMethod)
	if !ok {
		that2, ok := that.(TFAPIMethod)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.Argspec != that1.Argspec {
		return false
	}
	return true
}
func (this *TFAPIModule) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TFAPIModule)
	if !ok {
		that2, ok := that.(TFAPIModule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Member) != len(that1.Member) {
		return false
	}
	for i := range this.Member {
		if !this.Member[i].Equal(that1.Member[i]) {
			return false
		}
	}
	if len(this.MemberMethod) != len(that1.MemberMethod) {
		return false
	}
	for i := range this.MemberMethod {
		if !this.MemberMethod[i].Equal(that1.MemberMethod[i]) {
			return false
		}
	}
	return true
}
func (this *TFAPIClass) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TFAPIClass)
	if !ok {
		that2, ok := that.(TFAPIClass)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.IsInstance) != len(that1.IsInstance) {
		return false
	}
	for i := range this.IsInstance {
		if this.IsInstance[i] != that1.IsInstance[i] {
			return false
		}
	}
	if len(this.Member) != len(that1.Member) {
		return false
	}
	for i := range this.Member {
		if !this.Member[i].Equal(that1.Member[i]) {
			return false
		}
	}
	if len(this.MemberMethod) != len(that1.MemberMethod) {
		return false
	}
	for i := range this.MemberMethod {
		if !this.MemberMethod[i].Equal(that1.MemberMethod[i]) {
			return false
		}
	}
	return true
}
func (this *TFAPIObject) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TFAPIObject)
	if !ok {
		that2, ok := that.(TFAPIObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if !this.TfModule.Equal(that1.TfModule) {
		return false
	}
	if !this.TfClass.Equal(that1.TfClass) {
		return false
	}
	return true
}
func (this *TFAPIMember) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&third_party_tensorflow_tools_api.TFAPIMember{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Mtype: "+fmt.Sprintf("%#v", this.Mtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TFAPIMethod) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&third_party_tensorflow_tools_api.TFAPIMethod{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "Argspec: "+fmt.Sprintf("%#v", this.Argspec)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TFAPIModule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&third_party_tensorflow_tools_api.TFAPIModule{")
	if this.Member != nil {
		s = append(s, "Member: "+fmt.Sprintf("%#v", this.Member)+",\n")
	}
	if this.MemberMethod != nil {
		s = append(s, "MemberMethod: "+fmt.Sprintf("%#v", this.MemberMethod)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TFAPIClass) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&third_party_tensorflow_tools_api.TFAPIClass{")
	if this.IsInstance != nil {
		s = append(s, "IsInstance: "+fmt.Sprintf("%#v", this.IsInstance)+",\n")
	}
	if this.Member != nil {
		s = append(s, "Member: "+fmt.Sprintf("%#v", this.Member)+",\n")
	}
	if this.MemberMethod != nil {
		s = append(s, "MemberMethod: "+fmt.Sprintf("%#v", this.MemberMethod)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TFAPIObject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&third_party_tensorflow_tools_api.TFAPIObject{")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	if this.TfModule != nil {
		s = append(s, "TfModule: "+fmt.Sprintf("%#v", this.TfModule)+",\n")
	}
	if this.TfClass != nil {
		s = append(s, "TfClass: "+fmt.Sprintf("%#v", this.TfClass)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApiObjects(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TFAPIMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TFAPIMember) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApiObjects(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x12
	i++
	i = encodeVarintApiObjects(dAtA, i, uint64(len(m.Mtype)))
	i += copy(dAtA[i:], m.Mtype)
	return i, nil
}

func (m *TFAPIMethod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TFAPIMethod) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApiObjects(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x12
	i++
	i = encodeVarintApiObjects(dAtA, i, uint64(len(m.Path)))
	i += copy(dAtA[i:], m.Path)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintApiObjects(dAtA, i, uint64(len(m.Argspec)))
	i += copy(dAtA[i:], m.Argspec)
	return i, nil
}

func (m *TFAPIModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TFAPIModule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Member) > 0 {
		for _, msg := range m.Member {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApiObjects(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MemberMethod) > 0 {
		for _, msg := range m.MemberMethod {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApiObjects(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TFAPIClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TFAPIClass) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IsInstance) > 0 {
		for _, s := range m.IsInstance {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Member) > 0 {
		for _, msg := range m.Member {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApiObjects(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MemberMethod) > 0 {
		for _, msg := range m.MemberMethod {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApiObjects(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TFAPIObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TFAPIObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApiObjects(dAtA, i, uint64(len(m.Path)))
	i += copy(dAtA[i:], m.Path)
	if m.TfModule != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApiObjects(dAtA, i, uint64(m.TfModule.Size()))
		n1, err := m.TfModule.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.TfClass != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApiObjects(dAtA, i, uint64(m.TfClass.Size()))
		n2, err := m.TfClass.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeFixed64ApiObjects(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32ApiObjects(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintApiObjects(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TFAPIMember) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovApiObjects(uint64(l))
	l = len(m.Mtype)
	n += 1 + l + sovApiObjects(uint64(l))
	return n
}

func (m *TFAPIMethod) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovApiObjects(uint64(l))
	l = len(m.Path)
	n += 1 + l + sovApiObjects(uint64(l))
	l = len(m.Argspec)
	n += 1 + l + sovApiObjects(uint64(l))
	return n
}

func (m *TFAPIModule) Size() (n int) {
	var l int
	_ = l
	if len(m.Member) > 0 {
		for _, e := range m.Member {
			l = e.Size()
			n += 1 + l + sovApiObjects(uint64(l))
		}
	}
	if len(m.MemberMethod) > 0 {
		for _, e := range m.MemberMethod {
			l = e.Size()
			n += 1 + l + sovApiObjects(uint64(l))
		}
	}
	return n
}

func (m *TFAPIClass) Size() (n int) {
	var l int
	_ = l
	if len(m.IsInstance) > 0 {
		for _, s := range m.IsInstance {
			l = len(s)
			n += 1 + l + sovApiObjects(uint64(l))
		}
	}
	if len(m.Member) > 0 {
		for _, e := range m.Member {
			l = e.Size()
			n += 1 + l + sovApiObjects(uint64(l))
		}
	}
	if len(m.MemberMethod) > 0 {
		for _, e := range m.MemberMethod {
			l = e.Size()
			n += 1 + l + sovApiObjects(uint64(l))
		}
	}
	return n
}

func (m *TFAPIObject) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	n += 1 + l + sovApiObjects(uint64(l))
	if m.TfModule != nil {
		l = m.TfModule.Size()
		n += 1 + l + sovApiObjects(uint64(l))
	}
	if m.TfClass != nil {
		l = m.TfClass.Size()
		n += 1 + l + sovApiObjects(uint64(l))
	}
	return n
}

func sovApiObjects(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApiObjects(x uint64) (n int) {
	return sovApiObjects(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TFAPIMember) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TFAPIMember{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Mtype:` + fmt.Sprintf("%v", this.Mtype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TFAPIMethod) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TFAPIMethod{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Argspec:` + fmt.Sprintf("%v", this.Argspec) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TFAPIModule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TFAPIModule{`,
		`Member:` + strings.Replace(fmt.Sprintf("%v", this.Member), "TFAPIMember", "TFAPIMember", 1) + `,`,
		`MemberMethod:` + strings.Replace(fmt.Sprintf("%v", this.MemberMethod), "TFAPIMethod", "TFAPIMethod", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TFAPIClass) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TFAPIClass{`,
		`IsInstance:` + fmt.Sprintf("%v", this.IsInstance) + `,`,
		`Member:` + strings.Replace(fmt.Sprintf("%v", this.Member), "TFAPIMember", "TFAPIMember", 1) + `,`,
		`MemberMethod:` + strings.Replace(fmt.Sprintf("%v", this.MemberMethod), "TFAPIMethod", "TFAPIMethod", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TFAPIObject) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TFAPIObject{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`TfModule:` + strings.Replace(fmt.Sprintf("%v", this.TfModule), "TFAPIModule", "TFAPIModule", 1) + `,`,
		`TfClass:` + strings.Replace(fmt.Sprintf("%v", this.TfClass), "TFAPIClass", "TFAPIClass", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApiObjects(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TFAPIMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiObjects
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TFAPIMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TFAPIMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiObjects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiObjects
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiObjects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiObjects
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mtype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiObjects(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiObjects
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TFAPIMethod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiObjects
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TFAPIMethod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TFAPIMethod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiObjects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiObjects
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiObjects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiObjects
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Argspec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiObjects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiObjects
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Argspec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiObjects(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiObjects
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TFAPIModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiObjects
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TFAPIModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TFAPIModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiObjects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiObjects
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Member = append(m.Member, &TFAPIMember{})
			if err := m.Member[len(m.Member)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberMethod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiObjects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiObjects
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberMethod = append(m.MemberMethod, &TFAPIMethod{})
			if err := m.MemberMethod[len(m.MemberMethod)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiObjects(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiObjects
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TFAPIClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiObjects
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TFAPIClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TFAPIClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInstance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiObjects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiObjects
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsInstance = append(m.IsInstance, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiObjects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiObjects
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Member = append(m.Member, &TFAPIMember{})
			if err := m.Member[len(m.Member)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberMethod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiObjects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiObjects
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberMethod = append(m.MemberMethod, &TFAPIMethod{})
			if err := m.MemberMethod[len(m.MemberMethod)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiObjects(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiObjects
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TFAPIObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApiObjects
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TFAPIObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TFAPIObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiObjects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApiObjects
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfModule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiObjects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiObjects
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TfModule == nil {
				m.TfModule = &TFAPIModule{}
			}
			if err := m.TfModule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TfClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApiObjects
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApiObjects
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TfClass == nil {
				m.TfClass = &TFAPIClass{}
			}
			if err := m.TfClass.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApiObjects(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApiObjects
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApiObjects(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApiObjects
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiObjects
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApiObjects
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApiObjects
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApiObjects
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApiObjects(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApiObjects = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApiObjects   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protobuf/tensorflow/tools/api/lib/api_objects.proto", fileDescriptorApiObjects)
}

var fileDescriptorApiObjects = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0x41, 0x4e, 0xc2, 0x40,
	0x14, 0xed, 0x00, 0x0a, 0x4c, 0x75, 0xd3, 0x55, 0xe3, 0x62, 0x20, 0x5d, 0xb1, 0xc0, 0x36, 0xc1,
	0x13, 0x08, 0x51, 0x83, 0x89, 0xd1, 0x34, 0xee, 0x9b, 0x69, 0x99, 0x4a, 0x4d, 0xdb, 0x69, 0x3a,
	0x43, 0x0c, 0x3b, 0x8f, 0xe0, 0x31, 0x38, 0x84, 0x07, 0x60, 0xc9, 0xd2, 0x95, 0x91, 0xba, 0x71,
	0xc9, 0x11, 0x0c, 0xbf, 0x80, 0x35, 0x26, 0x2a, 0xd1, 0x55, 0xa7, 0xef, 0xcf, 0x7b, 0xf3, 0xdf,
	0x7f, 0x1f, 0x1f, 0x25, 0x29, 0x97, 0xdc, 0x1d, 0xf9, 0x96, 0x64, 0xb1, 0xe0, 0xa9, 0x1f, 0xf2,
	0x3b, 0x4b, 0x72, 0x1e, 0x0a, 0x8b, 0x26, 0x81, 0x15, 0x06, 0xee, 0xf2, 0xeb, 0x70, 0xf7, 0x96,
	0x79, 0x52, 0x98, 0x70, 0x5b, 0x6b, 0xca, 0x61, 0x90, 0x0e, 0x9c, 0x84, 0xa6, 0x72, 0x6c, 0x7e,
	0xf0, 0x4c, 0xe0, 0x99, 0x34, 0x09, 0x8c, 0x1e, 0x56, 0xaf, 0x4f, 0x8f, 0xaf, 0xfa, 0x17, 0x2c,
	0x72, 0x59, 0xaa, 0xe9, 0xb8, 0x12, 0xd3, 0x88, 0xe9, 0xa8, 0x89, 0x5a, 0xf5, 0x6e, 0x65, 0xfa,
	0xdc, 0x50, 0x6c, 0x40, 0xb4, 0x03, 0xbc, 0x13, 0xc9, 0x71, 0xc2, 0xf4, 0x52, 0xa1, 0x94, 0x43,
	0x06, 0xdd, 0x88, 0xc8, 0x21, 0x1f, 0x7c, 0x23, 0xa2, 0xe3, 0x4a, 0x42, 0xe5, 0xf0, 0x93, 0x06,
	0x20, 0x1a, 0xc1, 0x55, 0x9a, 0xde, 0x88, 0x84, 0x79, 0x7a, 0xb9, 0x50, 0x5c, 0x83, 0xc6, 0x04,
	0xad, 0xdf, 0xe0, 0x83, 0x51, 0xc8, 0xb4, 0x13, 0xbc, 0x1b, 0x41, 0xcb, 0x3a, 0x6a, 0x96, 0x5b,
	0x6a, 0xe7, 0xd0, 0xfc, 0xc9, 0xaa, 0x59, 0xf0, 0x69, 0xaf, 0xc8, 0x9a, 0x8d, 0xf7, 0xf3, 0x93,
	0x13, 0x41, 0xef, 0x7a, 0x69, 0x4b, 0xb5, 0x25, 0xc9, 0xde, 0xcb, 0x35, 0xf2, 0x3f, 0x63, 0x8a,
	0x30, 0x86, 0x6a, 0x2f, 0xa4, 0x42, 0x68, 0x0d, 0xac, 0x06, 0xc2, 0x09, 0x62, 0x21, 0x69, 0xec,
	0x31, 0x68, 0xb7, 0x6e, 0xe3, 0x40, 0xf4, 0x57, 0x48, 0xc1, 0x4a, 0xe9, 0x5f, 0xad, 0x94, 0xff,
	0x6e, 0xe5, 0x71, 0x3d, 0xf5, 0x4b, 0x58, 0xab, 0x4d, 0x7e, 0xe8, 0x4b, 0x7e, 0xe7, 0xb8, 0x2e,
	0x7d, 0x27, 0x82, 0x70, 0x20, 0xde, 0x2d, 0x5e, 0x06, 0x92, 0x5d, 0x93, 0xfe, 0x2a, 0xdb, 0x33,
	0x5c, 0x93, 0xbe, 0xe3, 0x2d, 0xa7, 0x07, 0xcb, 0xa0, 0x76, 0xda, 0xbf, 0x94, 0x82, 0x89, 0xdb,
	0x55, 0xe9, 0xc3, 0xa1, 0xdb, 0x9e, 0xcd, 0x89, 0xf2, 0x34, 0x27, 0xca, 0x62, 0x4e, 0xd0, 0x7d,
	0x46, 0xd0, 0x24, 0x23, 0x68, 0x9a, 0x11, 0x34, 0xcb, 0x08, 0x7a, 0xc9, 0x08, 0x7a, 0xcb, 0x88,
	0xb2, 0xc8, 0x08, 0x7a, 0x78, 0x25, 0xca, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x53, 0xeb, 0xd7,
	0x98, 0x62, 0x03, 0x00, 0x00,
}
