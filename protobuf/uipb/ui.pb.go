// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/uipb/ui.proto

/*
	Package uipb is a generated protocol buffer package.

	It is generated from these files:
		protobuf/uipb/ui.proto

	It has these top-level messages:
		LoginRequest
		RegisterRequest
		AuthenticationResponse
		ResendEmailRequest
		ResendEmailResponse
		GetUserRequest
		GetUserResponse
		GetDomainsRequest
		GetDomainsResponse
		Domain
		ModelType
		Model
		NewDomainRequest
		NewDomainResponse
		GetDomainRequest
		GetModelsRequest
		GetModelsResponse
		GetModelRequest
		NewAPITokenRequest
*/
package uipb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import aggregatorpb "github.com/d4l3k/pok/protobuf/aggregatorpb"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LoginRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Remember string `protobuf:"bytes,3,opt,name=remember,proto3" json:"remember,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptorUi, []int{0} }

func (m *LoginRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *LoginRequest) GetRemember() string {
	if m != nil {
		return m.Remember
	}
	return ""
}

type RegisterRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Remember string `protobuf:"bytes,3,opt,name=remember,proto3" json:"remember,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptorUi, []int{1} }

func (m *RegisterRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegisterRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RegisterRequest) GetRemember() string {
	if m != nil {
		return m.Remember
	}
	return ""
}

func (m *RegisterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AuthenticationResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *AuthenticationResponse) Reset()                    { *m = AuthenticationResponse{} }
func (*AuthenticationResponse) ProtoMessage()               {}
func (*AuthenticationResponse) Descriptor() ([]byte, []int) { return fileDescriptorUi, []int{2} }

func (m *AuthenticationResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ResendEmailRequest struct {
}

func (m *ResendEmailRequest) Reset()                    { *m = ResendEmailRequest{} }
func (*ResendEmailRequest) ProtoMessage()               {}
func (*ResendEmailRequest) Descriptor() ([]byte, []int) { return fileDescriptorUi, []int{3} }

type ResendEmailResponse struct {
}

func (m *ResendEmailResponse) Reset()                    { *m = ResendEmailResponse{} }
func (*ResendEmailResponse) ProtoMessage()               {}
func (*ResendEmailResponse) Descriptor() ([]byte, []int) { return fileDescriptorUi, []int{4} }

type GetUserRequest struct {
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptorUi, []int{5} }

type GetUserResponse struct {
	Email         string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	VerifiedEmail bool   `protobuf:"varint,3,opt,name=verified_email,json=verifiedEmail,proto3" json:"verified_email,omitempty"`
}

func (m *GetUserResponse) Reset()                    { *m = GetUserResponse{} }
func (*GetUserResponse) ProtoMessage()               {}
func (*GetUserResponse) Descriptor() ([]byte, []int) { return fileDescriptorUi, []int{6} }

func (m *GetUserResponse) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *GetUserResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetUserResponse) GetVerifiedEmail() bool {
	if m != nil {
		return m.VerifiedEmail
	}
	return false
}

type GetDomainsRequest struct {
}

func (m *GetDomainsRequest) Reset()                    { *m = GetDomainsRequest{} }
func (*GetDomainsRequest) ProtoMessage()               {}
func (*GetDomainsRequest) Descriptor() ([]byte, []int) { return fileDescriptorUi, []int{7} }

type GetDomainsResponse struct {
	Domains []Domain `protobuf:"bytes,1,rep,name=domains" json:"domains"`
}

func (m *GetDomainsResponse) Reset()                    { *m = GetDomainsResponse{} }
func (*GetDomainsResponse) ProtoMessage()               {}
func (*GetDomainsResponse) Descriptor() ([]byte, []int) { return fileDescriptorUi, []int{8} }

func (m *GetDomainsResponse) GetDomains() []Domain {
	if m != nil {
		return m.Domains
	}
	return nil
}

type Domain struct {
	Name       string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ModelTypes []ModelType `protobuf:"bytes,2,rep,name=model_types,json=modelTypes" json:"model_types"`
}

func (m *Domain) Reset()                    { *m = Domain{} }
func (*Domain) ProtoMessage()               {}
func (*Domain) Descriptor() ([]byte, []int) { return fileDescriptorUi, []int{9} }

func (m *Domain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Domain) GetModelTypes() []ModelType {
	if m != nil {
		return m.ModelTypes
	}
	return nil
}

type ModelType struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (m *ModelType) Reset()                    { *m = ModelType{} }
func (*ModelType) ProtoMessage()               {}
func (*ModelType) Descriptor() ([]byte, []int) { return fileDescriptorUi, []int{10} }

func (m *ModelType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModelType) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type Model struct {
	Id          uint64                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Domain      string                      `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	ModelType   string                      `protobuf:"bytes,3,opt,name=model_type,json=modelType,proto3" json:"model_type,omitempty"`
	Name        string                      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description string                      `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Status      aggregatorpb.TrainingStatus `protobuf:"varint,6,opt,name=status,proto3,enum=aggregatorpb.TrainingStatus" json:"status,omitempty"`
	OwnerEmail  string                      `protobuf:"bytes,7,opt,name=owner_email,json=ownerEmail,proto3" json:"owner_email,omitempty"`
	HyperParams aggregatorpb.HyperParams    `protobuf:"bytes,8,opt,name=hyper_params,json=hyperParams" json:"hyper_params"`
	ModelUrl    string                      `protobuf:"bytes,9,opt,name=model_url,json=modelUrl,proto3" json:"model_url,omitempty"`
}

func (m *Model) Reset()                    { *m = Model{} }
func (*Model) ProtoMessage()               {}
func (*Model) Descriptor() ([]byte, []int) { return fileDescriptorUi, []int{11} }

func (m *Model) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Model) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Model) GetModelType() string {
	if m != nil {
		return m.ModelType
	}
	return ""
}

func (m *Model) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Model) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Model) GetStatus() aggregatorpb.TrainingStatus {
	if m != nil {
		return m.Status
	}
	return aggregatorpb.SCHEDULED
}

func (m *Model) GetOwnerEmail() string {
	if m != nil {
		return m.OwnerEmail
	}
	return ""
}

func (m *Model) GetHyperParams() aggregatorpb.HyperParams {
	if m != nil {
		return m.HyperParams
	}
	return aggregatorpb.HyperParams{}
}

func (m *Model) GetModelUrl() string {
	if m != nil {
		return m.ModelUrl
	}
	return ""
}

type NewDomainRequest struct {
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (m *NewDomainRequest) Reset()                    { *m = NewDomainRequest{} }
func (*NewDomainRequest) ProtoMessage()               {}
func (*NewDomainRequest) Descriptor() ([]byte, []int) { return fileDescriptorUi, []int{12} }

func (m *NewDomainRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type NewDomainResponse struct {
	Domain Domain `protobuf:"bytes,1,opt,name=domain" json:"domain"`
}

func (m *NewDomainResponse) Reset()                    { *m = NewDomainResponse{} }
func (*NewDomainResponse) ProtoMessage()               {}
func (*NewDomainResponse) Descriptor() ([]byte, []int) { return fileDescriptorUi, []int{13} }

func (m *NewDomainResponse) GetDomain() Domain {
	if m != nil {
		return m.Domain
	}
	return Domain{}
}

type GetDomainRequest struct {
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (m *GetDomainRequest) Reset()                    { *m = GetDomainRequest{} }
func (*GetDomainRequest) ProtoMessage()               {}
func (*GetDomainRequest) Descriptor() ([]byte, []int) { return fileDescriptorUi, []int{14} }

func (m *GetDomainRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type GetModelsRequest struct {
	Domain    string                      `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	ModelType string                      `protobuf:"bytes,2,opt,name=model_type,json=modelType,proto3" json:"model_type,omitempty"`
	Email     string                      `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Status    aggregatorpb.TrainingStatus `protobuf:"varint,4,opt,name=status,proto3,enum=aggregatorpb.TrainingStatus" json:"status,omitempty"`
	Prod      bool                        `protobuf:"varint,5,opt,name=prod,proto3" json:"prod,omitempty"`
	Query     string                      `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
	Count     int64                       `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	Offset    int64                       `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	Order     string                      `protobuf:"bytes,9,opt,name=order,proto3" json:"order,omitempty"`
}

func (m *GetModelsRequest) Reset()                    { *m = GetModelsRequest{} }
func (*GetModelsRequest) ProtoMessage()               {}
func (*GetModelsRequest) Descriptor() ([]byte, []int) { return fileDescriptorUi, []int{15} }

func (m *GetModelsRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *GetModelsRequest) GetModelType() string {
	if m != nil {
		return m.ModelType
	}
	return ""
}

func (m *GetModelsRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *GetModelsRequest) GetStatus() aggregatorpb.TrainingStatus {
	if m != nil {
		return m.Status
	}
	return aggregatorpb.SCHEDULED
}

func (m *GetModelsRequest) GetProd() bool {
	if m != nil {
		return m.Prod
	}
	return false
}

func (m *GetModelsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *GetModelsRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetModelsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetModelsRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

type GetModelsResponse struct {
	Models     []Model `protobuf:"bytes,1,rep,name=models" json:"models"`
	TotalCount int64   `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Count      int64   `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Offset     int64   `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *GetModelsResponse) Reset()                    { *m = GetModelsResponse{} }
func (*GetModelsResponse) ProtoMessage()               {}
func (*GetModelsResponse) Descriptor() ([]byte, []int) { return fileDescriptorUi, []int{16} }

func (m *GetModelsResponse) GetModels() []Model {
	if m != nil {
		return m.Models
	}
	return nil
}

func (m *GetModelsResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *GetModelsResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GetModelsResponse) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetModelRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetModelRequest) Reset()                    { *m = GetModelRequest{} }
func (*GetModelRequest) ProtoMessage()               {}
func (*GetModelRequest) Descriptor() ([]byte, []int) { return fileDescriptorUi, []int{17} }

func (m *GetModelRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type NewAPITokenRequest struct {
	Duration string `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *NewAPITokenRequest) Reset()                    { *m = NewAPITokenRequest{} }
func (*NewAPITokenRequest) ProtoMessage()               {}
func (*NewAPITokenRequest) Descriptor() ([]byte, []int) { return fileDescriptorUi, []int{18} }

func (m *NewAPITokenRequest) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "uipb.LoginRequest")
	proto.RegisterType((*RegisterRequest)(nil), "uipb.RegisterRequest")
	proto.RegisterType((*AuthenticationResponse)(nil), "uipb.AuthenticationResponse")
	proto.RegisterType((*ResendEmailRequest)(nil), "uipb.ResendEmailRequest")
	proto.RegisterType((*ResendEmailResponse)(nil), "uipb.ResendEmailResponse")
	proto.RegisterType((*GetUserRequest)(nil), "uipb.GetUserRequest")
	proto.RegisterType((*GetUserResponse)(nil), "uipb.GetUserResponse")
	proto.RegisterType((*GetDomainsRequest)(nil), "uipb.GetDomainsRequest")
	proto.RegisterType((*GetDomainsResponse)(nil), "uipb.GetDomainsResponse")
	proto.RegisterType((*Domain)(nil), "uipb.Domain")
	proto.RegisterType((*ModelType)(nil), "uipb.ModelType")
	proto.RegisterType((*Model)(nil), "uipb.Model")
	proto.RegisterType((*NewDomainRequest)(nil), "uipb.NewDomainRequest")
	proto.RegisterType((*NewDomainResponse)(nil), "uipb.NewDomainResponse")
	proto.RegisterType((*GetDomainRequest)(nil), "uipb.GetDomainRequest")
	proto.RegisterType((*GetModelsRequest)(nil), "uipb.GetModelsRequest")
	proto.RegisterType((*GetModelsResponse)(nil), "uipb.GetModelsResponse")
	proto.RegisterType((*GetModelRequest)(nil), "uipb.GetModelRequest")
	proto.RegisterType((*NewAPITokenRequest)(nil), "uipb.NewAPITokenRequest")
}
func (this *LoginRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LoginRequest)
	if !ok {
		that2, ok := that.(LoginRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Remember != that1.Remember {
		return false
	}
	return true
}
func (this *RegisterRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RegisterRequest)
	if !ok {
		that2, ok := that.(RegisterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	if this.Remember != that1.Remember {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *AuthenticationResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AuthenticationResponse)
	if !ok {
		that2, ok := that.(AuthenticationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *ResendEmailRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResendEmailRequest)
	if !ok {
		that2, ok := that.(ResendEmailRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResendEmailResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResendEmailResponse)
	if !ok {
		that2, ok := that.(ResendEmailResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetUserRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetUserRequest)
	if !ok {
		that2, ok := that.(GetUserRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetUserResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetUserResponse)
	if !ok {
		that2, ok := that.(GetUserResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.VerifiedEmail != that1.VerifiedEmail {
		return false
	}
	return true
}
func (this *GetDomainsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetDomainsRequest)
	if !ok {
		that2, ok := that.(GetDomainsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetDomainsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetDomainsResponse)
	if !ok {
		that2, ok := that.(GetDomainsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Domains) != len(that1.Domains) {
		return false
	}
	for i := range this.Domains {
		if !this.Domains[i].Equal(&that1.Domains[i]) {
			return false
		}
	}
	return true
}
func (this *Domain) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Domain)
	if !ok {
		that2, ok := that.(Domain)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.ModelTypes) != len(that1.ModelTypes) {
		return false
	}
	for i := range this.ModelTypes {
		if !this.ModelTypes[i].Equal(&that1.ModelTypes[i]) {
			return false
		}
	}
	return true
}
func (this *ModelType) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ModelType)
	if !ok {
		that2, ok := that.(ModelType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	return true
}
func (this *Model) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Model)
	if !ok {
		that2, ok := that.(Model)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.ModelType != that1.ModelType {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.OwnerEmail != that1.OwnerEmail {
		return false
	}
	if !this.HyperParams.Equal(&that1.HyperParams) {
		return false
	}
	if this.ModelUrl != that1.ModelUrl {
		return false
	}
	return true
}
func (this *NewDomainRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NewDomainRequest)
	if !ok {
		that2, ok := that.(NewDomainRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	return true
}
func (this *NewDomainResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NewDomainResponse)
	if !ok {
		that2, ok := that.(NewDomainResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Domain.Equal(&that1.Domain) {
		return false
	}
	return true
}
func (this *GetDomainRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetDomainRequest)
	if !ok {
		that2, ok := that.(GetDomainRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	return true
}
func (this *GetModelsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetModelsRequest)
	if !ok {
		that2, ok := that.(GetModelsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.ModelType != that1.ModelType {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Prod != that1.Prod {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if this.Order != that1.Order {
		return false
	}
	return true
}
func (this *GetModelsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetModelsResponse)
	if !ok {
		that2, ok := that.(GetModelsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Models) != len(that1.Models) {
		return false
	}
	for i := range this.Models {
		if !this.Models[i].Equal(&that1.Models[i]) {
			return false
		}
	}
	if this.TotalCount != that1.TotalCount {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	return true
}
func (this *GetModelRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetModelRequest)
	if !ok {
		that2, ok := that.(GetModelRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *NewAPITokenRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NewAPITokenRequest)
	if !ok {
		that2, ok := that.(NewAPITokenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *LoginRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&uipb.LoginRequest{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Remember: "+fmt.Sprintf("%#v", this.Remember)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&uipb.RegisterRequest{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "Remember: "+fmt.Sprintf("%#v", this.Remember)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthenticationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uipb.AuthenticationResponse{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResendEmailRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&uipb.ResendEmailRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResendEmailResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&uipb.ResendEmailResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&uipb.GetUserRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetUserResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&uipb.GetUserResponse{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "VerifiedEmail: "+fmt.Sprintf("%#v", this.VerifiedEmail)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDomainsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&uipb.GetDomainsRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDomainsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uipb.GetDomainsResponse{")
	if this.Domains != nil {
		vs := make([]*Domain, len(this.Domains))
		for i := range vs {
			vs[i] = &this.Domains[i]
		}
		s = append(s, "Domains: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Domain) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uipb.Domain{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.ModelTypes != nil {
		vs := make([]*ModelType, len(this.ModelTypes))
		for i := range vs {
			vs[i] = &this.ModelTypes[i]
		}
		s = append(s, "ModelTypes: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&uipb.ModelType{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Model) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&uipb.Model{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "ModelType: "+fmt.Sprintf("%#v", this.ModelType)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "OwnerEmail: "+fmt.Sprintf("%#v", this.OwnerEmail)+",\n")
	s = append(s, "HyperParams: "+strings.Replace(this.HyperParams.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "ModelUrl: "+fmt.Sprintf("%#v", this.ModelUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewDomainRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uipb.NewDomainRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewDomainResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uipb.NewDomainResponse{")
	s = append(s, "Domain: "+strings.Replace(this.Domain.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetDomainRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uipb.GetDomainRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetModelsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&uipb.GetModelsRequest{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "ModelType: "+fmt.Sprintf("%#v", this.ModelType)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Prod: "+fmt.Sprintf("%#v", this.Prod)+",\n")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "Order: "+fmt.Sprintf("%#v", this.Order)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetModelsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&uipb.GetModelsResponse{")
	if this.Models != nil {
		vs := make([]*Model, len(this.Models))
		for i := range vs {
			vs[i] = &this.Models[i]
		}
		s = append(s, "Models: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "TotalCount: "+fmt.Sprintf("%#v", this.TotalCount)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetModelRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uipb.GetModelRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewAPITokenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&uipb.NewAPITokenRequest{")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UI service

type UIClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error)
	ResendEmail(ctx context.Context, in *ResendEmailRequest, opts ...grpc.CallOption) (*ResendEmailResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	GetDomains(ctx context.Context, in *GetDomainsRequest, opts ...grpc.CallOption) (*GetDomainsResponse, error)
	NewDomain(ctx context.Context, in *NewDomainRequest, opts ...grpc.CallOption) (*NewDomainResponse, error)
	NewModelType(ctx context.Context, in *ModelType, opts ...grpc.CallOption) (*ModelType, error)
	GetModelType(ctx context.Context, in *ModelType, opts ...grpc.CallOption) (*ModelType, error)
	GetModels(ctx context.Context, in *GetModelsRequest, opts ...grpc.CallOption) (*GetModelsResponse, error)
	GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*Model, error)
	NewAPIToken(ctx context.Context, in *NewAPITokenRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error)
}

type uIClient struct {
	cc *grpc.ClientConn
}

func NewUIClient(cc *grpc.ClientConn) UIClient {
	return &uIClient{cc}
}

func (c *uIClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error) {
	out := new(AuthenticationResponse)
	err := grpc.Invoke(ctx, "/uipb.UI/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error) {
	out := new(AuthenticationResponse)
	err := grpc.Invoke(ctx, "/uipb.UI/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIClient) ResendEmail(ctx context.Context, in *ResendEmailRequest, opts ...grpc.CallOption) (*ResendEmailResponse, error) {
	out := new(ResendEmailResponse)
	err := grpc.Invoke(ctx, "/uipb.UI/ResendEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := grpc.Invoke(ctx, "/uipb.UI/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIClient) GetDomain(ctx context.Context, in *GetDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := grpc.Invoke(ctx, "/uipb.UI/GetDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIClient) GetDomains(ctx context.Context, in *GetDomainsRequest, opts ...grpc.CallOption) (*GetDomainsResponse, error) {
	out := new(GetDomainsResponse)
	err := grpc.Invoke(ctx, "/uipb.UI/GetDomains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIClient) NewDomain(ctx context.Context, in *NewDomainRequest, opts ...grpc.CallOption) (*NewDomainResponse, error) {
	out := new(NewDomainResponse)
	err := grpc.Invoke(ctx, "/uipb.UI/NewDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIClient) NewModelType(ctx context.Context, in *ModelType, opts ...grpc.CallOption) (*ModelType, error) {
	out := new(ModelType)
	err := grpc.Invoke(ctx, "/uipb.UI/NewModelType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIClient) GetModelType(ctx context.Context, in *ModelType, opts ...grpc.CallOption) (*ModelType, error) {
	out := new(ModelType)
	err := grpc.Invoke(ctx, "/uipb.UI/GetModelType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIClient) GetModels(ctx context.Context, in *GetModelsRequest, opts ...grpc.CallOption) (*GetModelsResponse, error) {
	out := new(GetModelsResponse)
	err := grpc.Invoke(ctx, "/uipb.UI/GetModels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIClient) GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*Model, error) {
	out := new(Model)
	err := grpc.Invoke(ctx, "/uipb.UI/GetModel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIClient) NewAPIToken(ctx context.Context, in *NewAPITokenRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error) {
	out := new(AuthenticationResponse)
	err := grpc.Invoke(ctx, "/uipb.UI/NewAPIToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UI service

type UIServer interface {
	Login(context.Context, *LoginRequest) (*AuthenticationResponse, error)
	Register(context.Context, *RegisterRequest) (*AuthenticationResponse, error)
	ResendEmail(context.Context, *ResendEmailRequest) (*ResendEmailResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetDomain(context.Context, *GetDomainRequest) (*Domain, error)
	GetDomains(context.Context, *GetDomainsRequest) (*GetDomainsResponse, error)
	NewDomain(context.Context, *NewDomainRequest) (*NewDomainResponse, error)
	NewModelType(context.Context, *ModelType) (*ModelType, error)
	GetModelType(context.Context, *ModelType) (*ModelType, error)
	GetModels(context.Context, *GetModelsRequest) (*GetModelsResponse, error)
	GetModel(context.Context, *GetModelRequest) (*Model, error)
	NewAPIToken(context.Context, *NewAPITokenRequest) (*AuthenticationResponse, error)
}

func RegisterUIServer(s *grpc.Server, srv UIServer) {
	s.RegisterService(&_UI_serviceDesc, srv)
}

func _UI_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uipb.UI/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UI_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uipb.UI/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UI_ResendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServer).ResendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uipb.UI/ResendEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServer).ResendEmail(ctx, req.(*ResendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UI_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uipb.UI/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UI_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uipb.UI/GetDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServer).GetDomain(ctx, req.(*GetDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UI_GetDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServer).GetDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uipb.UI/GetDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServer).GetDomains(ctx, req.(*GetDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UI_NewDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServer).NewDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uipb.UI/NewDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServer).NewDomain(ctx, req.(*NewDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UI_NewModelType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServer).NewModelType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uipb.UI/NewModelType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServer).NewModelType(ctx, req.(*ModelType))
	}
	return interceptor(ctx, in, info, handler)
}

func _UI_GetModelType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServer).GetModelType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uipb.UI/GetModelType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServer).GetModelType(ctx, req.(*ModelType))
	}
	return interceptor(ctx, in, info, handler)
}

func _UI_GetModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServer).GetModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uipb.UI/GetModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServer).GetModels(ctx, req.(*GetModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UI_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uipb.UI/GetModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServer).GetModel(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UI_NewAPIToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAPITokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServer).NewAPIToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uipb.UI/NewAPIToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServer).NewAPIToken(ctx, req.(*NewAPITokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "uipb.UI",
	HandlerType: (*UIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UI_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UI_Register_Handler,
		},
		{
			MethodName: "ResendEmail",
			Handler:    _UI_ResendEmail_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UI_GetUser_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _UI_GetDomain_Handler,
		},
		{
			MethodName: "GetDomains",
			Handler:    _UI_GetDomains_Handler,
		},
		{
			MethodName: "NewDomain",
			Handler:    _UI_NewDomain_Handler,
		},
		{
			MethodName: "NewModelType",
			Handler:    _UI_NewModelType_Handler,
		},
		{
			MethodName: "GetModelType",
			Handler:    _UI_GetModelType_Handler,
		},
		{
			MethodName: "GetModels",
			Handler:    _UI_GetModels_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _UI_GetModel_Handler,
		},
		{
			MethodName: "NewAPIToken",
			Handler:    _UI_NewAPIToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/uipb/ui.proto",
}

func (m *LoginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Remember) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Remember)))
		i += copy(dAtA[i:], m.Remember)
	}
	return i, nil
}

func (m *RegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Remember) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Remember)))
		i += copy(dAtA[i:], m.Remember)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *AuthenticationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticationResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *ResendEmailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResendEmailRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResendEmailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResendEmailResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.VerifiedEmail {
		dAtA[i] = 0x18
		i++
		if m.VerifiedEmail {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetDomainsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDomainsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetDomainsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDomainsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, msg := range m.Domains {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Domain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Domain) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.ModelTypes) > 0 {
		for _, msg := range m.ModelTypes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintUi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ModelType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Domain) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Domain)))
		i += copy(dAtA[i:], m.Domain)
	}
	return i, nil
}

func (m *Model) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Model) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Id))
	}
	if len(m.Domain) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Domain)))
		i += copy(dAtA[i:], m.Domain)
	}
	if len(m.ModelType) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.ModelType)))
		i += copy(dAtA[i:], m.ModelType)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Status))
	}
	if len(m.OwnerEmail) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.OwnerEmail)))
		i += copy(dAtA[i:], m.OwnerEmail)
	}
	dAtA[i] = 0x42
	i++
	i = encodeVarintUi(dAtA, i, uint64(m.HyperParams.Size()))
	n1, err := m.HyperParams.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.ModelUrl) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.ModelUrl)))
		i += copy(dAtA[i:], m.ModelUrl)
	}
	return i, nil
}

func (m *NewDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domain) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Domain)))
		i += copy(dAtA[i:], m.Domain)
	}
	return i, nil
}

func (m *NewDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintUi(dAtA, i, uint64(m.Domain.Size()))
	n2, err := m.Domain.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *GetDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domain) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Domain)))
		i += copy(dAtA[i:], m.Domain)
	}
	return i, nil
}

func (m *GetModelsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetModelsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domain) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Domain)))
		i += copy(dAtA[i:], m.Domain)
	}
	if len(m.ModelType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.ModelType)))
		i += copy(dAtA[i:], m.ModelType)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Status))
	}
	if m.Prod {
		dAtA[i] = 0x28
		i++
		if m.Prod {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Query) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	if m.Count != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Count))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Offset))
	}
	if len(m.Order) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Order)))
		i += copy(dAtA[i:], m.Order)
	}
	return i, nil
}

func (m *GetModelsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetModelsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Models) > 0 {
		for _, msg := range m.Models {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TotalCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.TotalCount))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Count))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Offset))
	}
	return i, nil
}

func (m *GetModelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetModelRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *NewAPITokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewAPITokenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Duration) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUi(dAtA, i, uint64(len(m.Duration)))
		i += copy(dAtA[i:], m.Duration)
	}
	return i, nil
}

func encodeFixed64Ui(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Ui(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintUi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LoginRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	l = len(m.Remember)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}

func (m *RegisterRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	l = len(m.Remember)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}

func (m *AuthenticationResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}

func (m *ResendEmailRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ResendEmailResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetUserRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetUserResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	if m.VerifiedEmail {
		n += 2
	}
	return n
}

func (m *GetDomainsRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetDomainsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Domains) > 0 {
		for _, e := range m.Domains {
			l = e.Size()
			n += 1 + l + sovUi(uint64(l))
		}
	}
	return n
}

func (m *Domain) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	if len(m.ModelTypes) > 0 {
		for _, e := range m.ModelTypes {
			l = e.Size()
			n += 1 + l + sovUi(uint64(l))
		}
	}
	return n
}

func (m *ModelType) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}

func (m *Model) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUi(uint64(m.Id))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	l = len(m.ModelType)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovUi(uint64(m.Status))
	}
	l = len(m.OwnerEmail)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	l = m.HyperParams.Size()
	n += 1 + l + sovUi(uint64(l))
	l = len(m.ModelUrl)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}

func (m *NewDomainRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}

func (m *NewDomainResponse) Size() (n int) {
	var l int
	_ = l
	l = m.Domain.Size()
	n += 1 + l + sovUi(uint64(l))
	return n
}

func (m *GetDomainRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}

func (m *GetModelsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	l = len(m.ModelType)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovUi(uint64(m.Status))
	}
	if m.Prod {
		n += 2
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovUi(uint64(m.Count))
	}
	if m.Offset != 0 {
		n += 1 + sovUi(uint64(m.Offset))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}

func (m *GetModelsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Models) > 0 {
		for _, e := range m.Models {
			l = e.Size()
			n += 1 + l + sovUi(uint64(l))
		}
	}
	if m.TotalCount != 0 {
		n += 1 + sovUi(uint64(m.TotalCount))
	}
	if m.Count != 0 {
		n += 1 + sovUi(uint64(m.Count))
	}
	if m.Offset != 0 {
		n += 1 + sovUi(uint64(m.Offset))
	}
	return n
}

func (m *GetModelRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUi(uint64(m.Id))
	}
	return n
}

func (m *NewAPITokenRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}

func sovUi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUi(x uint64) (n int) {
	return sovUi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LoginRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginRequest{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Remember:` + fmt.Sprintf("%v", this.Remember) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterRequest{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Remember:` + fmt.Sprintf("%v", this.Remember) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticationResponse{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResendEmailRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResendEmailRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ResendEmailResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResendEmailResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetUserRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetUserResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetUserResponse{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`VerifiedEmail:` + fmt.Sprintf("%v", this.VerifiedEmail) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDomainsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDomainsRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetDomainsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDomainsResponse{`,
		`Domains:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Domains), "Domain", "Domain", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Domain) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Domain{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ModelTypes:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ModelTypes), "ModelType", "ModelType", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelType{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Model) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Model{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`ModelType:` + fmt.Sprintf("%v", this.ModelType) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`OwnerEmail:` + fmt.Sprintf("%v", this.OwnerEmail) + `,`,
		`HyperParams:` + strings.Replace(strings.Replace(this.HyperParams.String(), "HyperParams", "aggregatorpb.HyperParams", 1), `&`, ``, 1) + `,`,
		`ModelUrl:` + fmt.Sprintf("%v", this.ModelUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewDomainRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewDomainRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewDomainResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewDomainResponse{`,
		`Domain:` + strings.Replace(strings.Replace(this.Domain.String(), "Domain", "Domain", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDomainRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDomainRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetModelsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetModelsRequest{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`ModelType:` + fmt.Sprintf("%v", this.ModelType) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Prod:` + fmt.Sprintf("%v", this.Prod) + `,`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Order:` + fmt.Sprintf("%v", this.Order) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetModelsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetModelsResponse{`,
		`Models:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Models), "Model", "Model", 1), `&`, ``, 1) + `,`,
		`TotalCount:` + fmt.Sprintf("%v", this.TotalCount) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetModelRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetModelRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewAPITokenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewAPITokenRequest{`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LoginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remember", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remember = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remember", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remember = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResendEmailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResendEmailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResendEmailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResendEmailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResendEmailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResendEmailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifiedEmail", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VerifiedEmail = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDomainsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDomainsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDomainsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDomainsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDomainsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDomainsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, Domain{})
			if err := m.Domains[len(m.Domains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Domain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Domain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Domain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelTypes = append(m.ModelTypes, ModelType{})
			if err := m.ModelTypes[len(m.ModelTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Model) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (aggregatorpb.TrainingStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HyperParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetModelsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetModelsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetModelsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (aggregatorpb.TrainingStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prod", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Prod = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetModelsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetModelsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetModelsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Models", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Models = append(m.Models, Model{})
			if err := m.Models[len(m.Models)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetModelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetModelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetModelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewAPITokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewAPITokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewAPITokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("protobuf/uipb/ui.proto", fileDescriptorUi) }

var fileDescriptorUi = []byte{
	// 1164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xda, 0x8e, 0x63, 0x3f, 0xa7, 0x49, 0x3a, 0x8d, 0x9d, 0xcd, 0x36, 0x75, 0xcc, 0x48,
	0xa0, 0x34, 0x14, 0x9b, 0xa6, 0x15, 0x48, 0x70, 0x40, 0x0d, 0xa0, 0x52, 0x04, 0x51, 0xb4, 0x4d,
	0x84, 0x04, 0x95, 0xac, 0xb5, 0x77, 0xb2, 0x59, 0xc5, 0xde, 0xd9, 0xee, 0x9f, 0x5a, 0x51, 0x14,
	0x09, 0xc1, 0x19, 0x09, 0x89, 0x2f, 0xc1, 0x87, 0xe0, 0x03, 0xf4, 0x58, 0xa9, 0x17, 0x4e, 0x88,
	0x18, 0x0e, 0x1c, 0xfb, 0x11, 0xd0, 0xbe, 0x99, 0x59, 0xef, 0x3a, 0xae, 0x42, 0x0f, 0x9c, 0xbc,
	0xef, 0xcd, 0x9b, 0xdf, 0xef, 0xcd, 0xfb, 0x6b, 0x68, 0xf8, 0x01, 0x8f, 0x78, 0x2f, 0x3e, 0xea,
	0xc4, 0xae, 0xdf, 0xeb, 0xc4, 0x6e, 0x1b, 0x15, 0xa4, 0x94, 0x88, 0xc6, 0x7b, 0x8e, 0x1b, 0x1d,
	0xc7, 0xbd, 0x76, 0x9f, 0x0f, 0x3b, 0x0e, 0x77, 0x78, 0x27, 0xb5, 0x4e, 0x24, 0x14, 0xf0, 0x4b,
	0x5c, 0x32, 0x36, 0x1c, 0xce, 0x9d, 0x01, 0xeb, 0x58, 0xbe, 0xdb, 0xb1, 0x3c, 0x8f, 0x47, 0x56,
	0xe4, 0x72, 0x2f, 0x94, 0xa7, 0x1f, 0x67, 0xc0, 0xec, 0xfb, 0x83, 0x7b, 0x27, 0x1d, 0x9f, 0x9f,
	0x4c, 0x10, 0x2d, 0xc7, 0x09, 0x98, 0x63, 0x45, 0x3c, 0xf0, 0x7b, 0x19, 0x41, 0x5c, 0xa6, 0x4f,
	0x60, 0xf1, 0x2b, 0xee, 0xb8, 0x9e, 0xc9, 0x9e, 0xc6, 0x2c, 0x8c, 0xc8, 0x2a, 0xcc, 0xb3, 0xa1,
	0xe5, 0x0e, 0x74, 0xad, 0xa5, 0x6d, 0x55, 0x4d, 0x21, 0x10, 0x03, 0x2a, 0xbe, 0x15, 0x86, 0x23,
	0x1e, 0xd8, 0x7a, 0x01, 0x0f, 0x52, 0x39, 0x39, 0x0b, 0xd8, 0x90, 0x0d, 0x7b, 0x2c, 0xd0, 0x8b,
	0xe2, 0x4c, 0xc9, 0x34, 0x84, 0x65, 0x93, 0x39, 0x6e, 0x18, 0xb1, 0xe0, 0x7f, 0x21, 0x20, 0x04,
	0x4a, 0x9e, 0x35, 0x64, 0x7a, 0x09, 0xf5, 0xf8, 0x4d, 0xdb, 0xd0, 0x78, 0x10, 0x47, 0xc7, 0xcc,
	0x8b, 0xdc, 0x3e, 0x06, 0xca, 0x64, 0xa1, 0xcf, 0xbd, 0x90, 0x25, 0xdc, 0x11, 0x3f, 0x61, 0x9e,
	0xe2, 0x46, 0x81, 0xae, 0x02, 0x31, 0x59, 0xc8, 0x3c, 0xfb, 0xf3, 0xc4, 0x15, 0xe9, 0x27, 0xad,
	0xc3, 0x8d, 0x9c, 0x56, 0x40, 0xd0, 0x15, 0x58, 0x7a, 0xc8, 0xa2, 0xc3, 0x30, 0x7d, 0x10, 0xed,
	0xc1, 0x72, 0xaa, 0x99, 0xf0, 0xcc, 0x78, 0xa3, 0xf2, 0xb5, 0x30, 0xf1, 0x95, 0xbc, 0x0d, 0x4b,
	0xcf, 0x58, 0xe0, 0x1e, 0xb9, 0xcc, 0xee, 0x8a, 0x2b, 0xc9, 0x0b, 0x2b, 0xe6, 0x35, 0xa5, 0x45,
	0x76, 0x7a, 0x03, 0xae, 0x3f, 0x64, 0xd1, 0x67, 0x7c, 0x68, 0xb9, 0x5e, 0xa8, 0x88, 0x77, 0x81,
	0x64, 0x95, 0x92, 0xfb, 0x0e, 0x2c, 0xd8, 0x42, 0xa5, 0x6b, 0xad, 0xe2, 0x56, 0x6d, 0x67, 0xb1,
	0x9d, 0x94, 0x5c, 0x5b, 0xd8, 0xed, 0x96, 0x9e, 0xff, 0xb1, 0x39, 0x67, 0x2a, 0x13, 0x7a, 0x00,
	0x65, 0x71, 0x90, 0x7a, 0xa7, 0x65, 0xbc, 0xfb, 0x00, 0x6a, 0x43, 0x6e, 0xb3, 0x41, 0x37, 0x3a,
	0xf5, 0x59, 0xa8, 0x17, 0x10, 0x6f, 0x59, 0xe0, 0x7d, 0x9d, 0x1c, 0x1c, 0x9c, 0xfa, 0x4c, 0x42,
	0xc2, 0x50, 0x29, 0x42, 0xfa, 0x21, 0x54, 0xd3, 0xe3, 0x99, 0xc0, 0x0d, 0x28, 0x0b, 0x0f, 0x64,
	0x30, 0xa4, 0x44, 0x7f, 0x2b, 0xc0, 0x3c, 0xde, 0x24, 0x4b, 0x50, 0x70, 0x6d, 0xbc, 0x53, 0x32,
	0x0b, 0xae, 0xfd, 0xba, 0x1b, 0xe4, 0x16, 0xc0, 0xc4, 0x45, 0x59, 0x1e, 0xd5, 0xe1, 0x25, 0xf2,
	0x4c, 0x7d, 0x90, 0x16, 0xd4, 0x6c, 0x16, 0xf6, 0x03, 0xd7, 0x4f, 0x8a, 0x43, 0x9f, 0xc7, 0xa3,
	0xac, 0x8a, 0xdc, 0x87, 0x72, 0x18, 0x59, 0x51, 0x1c, 0xea, 0xe5, 0x96, 0xb6, 0xb5, 0xb4, 0xb3,
	0xd1, 0xce, 0x36, 0x51, 0xfb, 0x20, 0xb0, 0x5c, 0xcf, 0xf5, 0x9c, 0xc7, 0x68, 0x63, 0x4a, 0x5b,
	0xb2, 0x09, 0x35, 0x3e, 0xf2, 0x58, 0x20, 0x13, 0xb9, 0x80, 0xb8, 0x80, 0x2a, 0xcc, 0x22, 0xd9,
	0x85, 0xc5, 0xe3, 0x53, 0x9f, 0x05, 0x5d, 0xdf, 0x0a, 0xac, 0x61, 0xa8, 0x57, 0x5a, 0xda, 0x56,
	0x6d, 0x67, 0x3d, 0x0f, 0xfe, 0x45, 0x62, 0xb1, 0x8f, 0x06, 0x32, 0xb2, 0xb5, 0xe3, 0x89, 0x8a,
	0xdc, 0x04, 0xf1, 0xba, 0x6e, 0x1c, 0x0c, 0xf4, 0xaa, 0xe8, 0x06, 0x54, 0x1c, 0x06, 0x03, 0xba,
	0x0d, 0x2b, 0x7b, 0x6c, 0x24, 0x12, 0xaa, 0xfa, 0x6d, 0x12, 0x38, 0x2d, 0x17, 0xea, 0x4f, 0xe0,
	0x7a, 0xc6, 0x56, 0x16, 0xcf, 0x76, 0xce, 0x78, 0x76, 0xed, 0x28, 0x80, 0x6d, 0x58, 0x49, 0xcb,
	0xef, 0x2a, 0xb2, 0x1f, 0x0b, 0x68, 0x8c, 0xa9, 0x0d, 0xaf, 0x30, 0x9e, 0x4a, 0x69, 0x61, 0x3a,
	0xa5, 0x69, 0x73, 0x15, 0xb3, 0xcd, 0x35, 0x49, 0x59, 0xe9, 0x0d, 0x52, 0x46, 0xa0, 0xe4, 0x07,
	0xdc, 0xc6, 0x1a, 0xa8, 0x98, 0xf8, 0x9d, 0xe0, 0x3f, 0x8d, 0x59, 0x70, 0x8a, 0xb9, 0xaf, 0x9a,
	0x42, 0x48, 0xb4, 0x7d, 0x1e, 0x7b, 0x11, 0xa6, 0xb5, 0x68, 0x0a, 0x21, 0x79, 0x02, 0x3f, 0x3a,
	0x0a, 0x59, 0x84, 0xb9, 0x2c, 0x9a, 0x52, 0x4a, 0xac, 0x79, 0x60, 0xb3, 0x40, 0x66, 0x48, 0x08,
	0xf4, 0x27, 0x0d, 0xdb, 0x58, 0x45, 0x41, 0xc6, 0xfc, 0x36, 0x94, 0xf1, 0x71, 0xaa, 0x5f, 0x6b,
	0x99, 0xfe, 0x52, 0x21, 0x17, 0x06, 0x49, 0x85, 0x45, 0x3c, 0xb2, 0x06, 0x5d, 0xe1, 0x4a, 0x01,
	0x39, 0x01, 0x55, 0x9f, 0xa2, 0x3f, 0xa9, 0x97, 0xc5, 0xd9, 0x5e, 0x96, 0xb2, 0x5e, 0xd2, 0xb7,
	0x70, 0x72, 0x21, 0x91, 0xca, 0xc9, 0x54, 0xdb, 0xd1, 0xf7, 0x81, 0xec, 0xb1, 0xd1, 0x83, 0xfd,
	0x47, 0x07, 0xc9, 0xa8, 0x54, 0x56, 0x06, 0x54, 0xec, 0x38, 0xc0, 0xd9, 0x2a, 0x73, 0x97, 0xca,
	0x3b, 0x2f, 0x2b, 0x50, 0x38, 0x7c, 0x44, 0x1e, 0xc3, 0x3c, 0xee, 0x15, 0x42, 0xc4, 0x73, 0xb2,
	0x4b, 0xc6, 0xd8, 0x10, 0xba, 0xd9, 0x53, 0x9a, 0xea, 0x3f, 0xbc, 0xfc, 0xfb, 0x97, 0x02, 0xa1,
	0xd7, 0x70, 0xdf, 0x3d, 0xbb, 0xdb, 0x19, 0x24, 0x77, 0x3f, 0xd2, 0xb6, 0xc9, 0x13, 0xa8, 0xa8,
	0x75, 0x42, 0xea, 0x02, 0x63, 0x6a, 0xbd, 0x5c, 0x01, 0x7d, 0x13, 0xa1, 0xeb, 0x74, 0x45, 0x41,
	0x07, 0xf2, 0x7a, 0x82, 0xde, 0x87, 0x5a, 0x66, 0xe2, 0x13, 0x5d, 0x11, 0x4c, 0xaf, 0x06, 0x63,
	0x7d, 0xc6, 0x89, 0x24, 0xd8, 0x44, 0x82, 0x75, 0xba, 0x3a, 0x21, 0x48, 0x8c, 0xc4, 0x48, 0x48,
	0x48, 0xf6, 0x61, 0x41, 0x6e, 0x0b, 0xb2, 0x2a, 0x60, 0xf2, 0xeb, 0xc4, 0xa8, 0x4f, 0x69, 0xf3,
	0x41, 0x21, 0xa9, 0xe7, 0x0e, 0x8b, 0xba, 0x71, 0x02, 0x63, 0x42, 0x35, 0xed, 0x43, 0xd2, 0x48,
	0x6f, 0xe7, 0x1a, 0xd3, 0xc8, 0x35, 0xb2, 0xf2, 0x92, 0xac, 0x29, 0x30, 0xd1, 0x79, 0x9d, 0x33,
	0xf1, 0x7b, 0x4e, 0xbe, 0x01, 0x98, 0xac, 0x16, 0xb2, 0x36, 0x05, 0xaa, 0x3a, 0xd8, 0xd0, 0x2f,
	0x1f, 0x48, 0x77, 0x1b, 0xc8, 0xb0, 0x42, 0x96, 0xf2, 0x0c, 0xe4, 0x3b, 0xa8, 0xa6, 0x53, 0x47,
	0x39, 0x3b, 0x3d, 0xb2, 0x8c, 0xb5, 0x4b, 0x7a, 0x89, 0x7a, 0x0b, 0x51, 0xd7, 0x28, 0x99, 0xf2,
	0xdb, 0x63, 0x23, 0x91, 0xc0, 0xc5, 0x3d, 0x36, 0x9a, 0x6c, 0x9e, 0xe9, 0x4d, 0x65, 0x4c, 0x2b,
	0xe8, 0x5d, 0x04, 0x7c, 0x97, 0xbe, 0xf3, 0x9a, 0x40, 0x74, 0x26, 0x83, 0x28, 0x43, 0xa2, 0x9a,
	0xe6, 0xcd, 0x48, 0xc8, 0xed, 0xff, 0x40, 0x72, 0x96, 0x6c, 0xa8, 0x73, 0xf2, 0x2d, 0xe6, 0x54,
	0x0c, 0x8a, 0x4c, 0x4e, 0x73, 0xf3, 0xd3, 0x58, 0xbb, 0xa4, 0x97, 0x61, 0xda, 0x40, 0xc2, 0x06,
	0x49, 0x8b, 0x50, 0x10, 0x84, 0xcc, 0x0a, 0xfa, 0xc7, 0xe4, 0x4b, 0xa8, 0xa8, 0x2b, 0xa4, 0x9e,
	0x87, 0x50, 0xc8, 0xd9, 0x11, 0x44, 0x0d, 0x44, 0x5b, 0x25, 0x24, 0x87, 0xd6, 0x39, 0x73, 0xed,
	0x73, 0xe2, 0x40, 0x2d, 0x33, 0x1e, 0x54, 0xcb, 0x5c, 0x9e, 0x18, 0x57, 0xb4, 0x65, 0x0b, 0x29,
	0x0c, 0x5a, 0x57, 0x14, 0x96, 0xef, 0x76, 0xf1, 0xcf, 0x99, 0x8c, 0xfa, 0xee, 0x9d, 0x17, 0x17,
	0xcd, 0xb9, 0xdf, 0x2f, 0x9a, 0x73, 0xaf, 0x2e, 0x9a, 0xda, 0xf7, 0xe3, 0xa6, 0xf6, 0xeb, 0xb8,
	0xa9, 0x3d, 0x1f, 0x37, 0xb5, 0x17, 0xe3, 0xa6, 0xf6, 0xe7, 0xb8, 0xa9, 0xfd, 0x33, 0x6e, 0xce,
	0xbd, 0x1a, 0x37, 0xb5, 0x9f, 0xff, 0x6a, 0xce, 0xf5, 0xca, 0xf8, 0xdf, 0xf6, 0xde, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x31, 0x39, 0x33, 0x14, 0x85, 0x0b, 0x00, 0x00,
}
