syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

package aggregatorpb;

enum TrainingStatus {
  SCHEDULED = 0;
  TRAINING = 1;
  SUCCEEDED = 2;
  FAILED = 3;
  CANCELED = 4;
}

message HyperParams {
  double proportion_clients = 1;
  int64 batch_size = 2;
  int64 num_rounds = 3;
  double learning_rate = 4;
  int64 num_local_rounds = 5;
}

message Work {
  ModelID id = 1 [(gogoproto.nullable) = false];
  int64 num_examples = 2;
  int64 num_clients = 3;
  int64 epoch = 4;
  bytes model_weights = 5;
  string model_url = 10;

  // TODO(d4l3k): consider sending a link to GCS instead of the raw model.
  HyperParams hyper_params = 7 [(gogoproto.nullable) = false];

  // time_taken is amount of time in seconds it took to process this work.
  double time_taken = 8;
  // started is when the training job was started.
  google.protobuf.Timestamp started = 11 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

  // metrics are the values produced by the model defined metrics.
  repeated double metrics = 9;
}

message ModelID {
  string domain = 1;
  string model_type = 2;
  uint64 id = 3;
}

message GetWorkRequest {
  ModelID id = 1 [(gogoproto.nullable) = false];
}

message ReportWorkRequest {
  Work work = 1 [(gogoproto.nullable) = false];
}

message ReportWorkResponse {}

message ProdModelRequest {
  ModelID id = 1 [(gogoproto.nullable) = false];
}

message ProdModelResponse {
  string model_url = 2;
}

message ModelTypeAllocation {
  ModelID model_type = 1 [(gogoproto.nullable) = false];
  string addr = 2;
}

message NotifyRequest {
  ModelID id = 1 [(gogoproto.nullable) = false];
}
message NotifyResponse {}

message CancelModelTrainingRequest {
  ModelID id = 1 [(gogoproto.nullable) = false];
}

message CancelModelTrainingResponse {}


service Aggregator {
  rpc GetWork (GetWorkRequest) returns (stream Work) {}
  rpc ReportWork(ReportWorkRequest) returns (ReportWorkResponse) {}

  rpc Notify(NotifyRequest) returns (NotifyResponse) {}
  rpc CancelModelTraining(CancelModelTrainingRequest) returns (CancelModelTrainingResponse) {}
}

service Edge {
  rpc GetWork (GetWorkRequest) returns (stream Work) {}
  rpc ReportWork(ReportWorkRequest) returns (ReportWorkResponse) {}
  rpc ProdModel(ProdModelRequest) returns (ProdModelResponse) {}
}
