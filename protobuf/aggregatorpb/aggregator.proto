syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

package aggregatorpb;

enum TrainingStatus {
  SCHEDULED = 0;
  TRAINING = 1;
  SUCCEEDED = 2;
  FAILED = 3;
  CANCELED = 4;
}

enum Repeat {
  NEVER = 0;
  HOURLY = 1;
  DAILY = 2;
  WEEKLY = 3;
  MONTHLY = 4;
}

message HyperParams {
  double proportion_clients = 1;
  int64 batch_size = 2;
  int64 num_rounds = 3;
  double learning_rate = 4;
  int64 num_local_rounds = 5;
  bool quantized_updates = 6;
}

message SchedulingInfo {
  google.protobuf.Timestamp scheduled = 1 [(gogoproto.stdtime) = true];
  Repeat repeat = 2;
}

message Work {
  ModelID id = 1 [(gogoproto.nullable) = false];
  int64 num_examples = 2;
  int64 num_clients = 3;
  int64 epoch = 4;

  // TODO(d4l3k): consider sending a link to GCS instead of the raw model.
  HyperParams hyper_params = 7 [(gogoproto.nullable) = false];

  // time_taken is amount of time in seconds it took to process this work.
  double time_taken = 8;
  // started is when the training job was started.
  google.protobuf.Timestamp started = 11 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

  // metrics are the values produced by the model defined metrics.
  repeated double metrics = 9;
}

message ModelID {
  string domain = 1;
  string model_type = 2;
  uint64 id = 3;
}

message GetWorkRequest {
  ModelID id = 1 [(gogoproto.nullable) = false];
}

message FindWorkRequest {
  ModelID id = 1 [(gogoproto.nullable) = false];
}

message FindWorkResponse {
  string aggregator_addr = 1;
}

message ModelWeightChunk {
  bytes body = 1;
  bool more = 2;
  // id is the chunk number.
  uint64 id = 3;
}

message GetWorkResponse {
  oneof type {
    Work work = 1;
    ModelWeightChunk weights = 2;
  }
}

message ReportWorkRequest {
  oneof type {
    Work work = 1;
    ModelWeightChunk weights = 2;
  }
}

message ReportWorkResponse {}

message ProdModelRequest {
  ModelID id = 1 [(gogoproto.nullable) = false];
}

message ProdModelResponse {
  ModelID id = 3 [(gogoproto.nullable) = false];
}

message ModelTypeAllocation {
  ModelID model_type = 1 [(gogoproto.nullable) = false];
  string addr = 2;
}

message NotifyRequest {
  ModelID id = 1 [(gogoproto.nullable) = false];
}
message NotifyResponse {}

message CancelModelTrainingRequest {
  ModelID id = 1 [(gogoproto.nullable) = false];
}

message CancelModelTrainingResponse {}

message ModelURLRequest {
  ModelID id = 1 [(gogoproto.nullable) = false];
}
message ModelURLResponse {
  string url = 1;
}

service Aggregator {
  // GetWork sends work to clients to process.
  rpc GetWork (GetWorkRequest) returns (stream GetWorkResponse) {}
  // ReportWork is used to report the trained model/work to the server.
  rpc ReportWork(stream ReportWorkRequest) returns (ReportWorkResponse) {}

  // Internal RPCs.
  rpc Notify(NotifyRequest) returns (NotifyResponse) {}
  rpc CancelModelTraining(CancelModelTrainingRequest) returns (CancelModelTrainingResponse) {}
}

service Edge {
  // ProdModel returns the current production model.
  rpc ProdModel(ProdModelRequest) returns (ProdModelResponse) {}

  // FindWork returns an address of the aggregator that the client should
  // request work from.
  rpc FindWork (FindWorkRequest) returns (FindWorkResponse) {}

  // ModelURL returns a URL that can be used to download the model. For billing
  // purposes, hitting this endpoint will count as one download of the model.
  rpc ModelURL (ModelURLRequest) returns (ModelURLResponse) {}

  // These methods are deprecated. Should call FindWork and then talk directly
  // to the aggregator itself.
  /*
  rpc GetWork (GetWorkRequest) returns (stream GetWorkResponse) {
    option deprecated = true;
  }
  rpc ReportWork(stream ReportWorkRequest) returns (ReportWorkResponse) {
    option deprecated = true;
  }
  */
}
