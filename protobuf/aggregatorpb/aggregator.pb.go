// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/aggregatorpb/aggregator.proto

/*
	Package aggregatorpb is a generated protocol buffer package.

	It is generated from these files:
		protobuf/aggregatorpb/aggregator.proto

	It has these top-level messages:
		HyperParams
		Work
		ModelID
		GetWorkRequest
		GetWorkReply
		ReportWorkRequest
		ReportWorkReply
*/
package aggregatorpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type HyperParams struct {
	ProportionClients float64 `protobuf:"fixed64,1,opt,name=proportion_clients,json=proportionClients,proto3" json:"proportion_clients,omitempty"`
	BatchSize         int64   `protobuf:"varint,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	NumRounds         int64   `protobuf:"varint,3,opt,name=num_rounds,json=numRounds,proto3" json:"num_rounds,omitempty"`
	LearningRate      float64 `protobuf:"fixed64,4,opt,name=learning_rate,json=learningRate,proto3" json:"learning_rate,omitempty"`
}

func (m *HyperParams) Reset()                    { *m = HyperParams{} }
func (*HyperParams) ProtoMessage()               {}
func (*HyperParams) Descriptor() ([]byte, []int) { return fileDescriptorAggregator, []int{0} }

func (m *HyperParams) GetProportionClients() float64 {
	if m != nil {
		return m.ProportionClients
	}
	return 0
}

func (m *HyperParams) GetBatchSize() int64 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

func (m *HyperParams) GetNumRounds() int64 {
	if m != nil {
		return m.NumRounds
	}
	return 0
}

func (m *HyperParams) GetLearningRate() float64 {
	if m != nil {
		return m.LearningRate
	}
	return 0
}

type Work struct {
	Id          *ModelID     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	NumExamples int64        `protobuf:"varint,2,opt,name=num_examples,json=numExamples,proto3" json:"num_examples,omitempty"`
	NumClients  int64        `protobuf:"varint,3,opt,name=num_clients,json=numClients,proto3" json:"num_clients,omitempty"`
	Epoch       int64        `protobuf:"varint,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Model       []byte       `protobuf:"bytes,5,opt,name=model,proto3" json:"model,omitempty"`
	Prod        bool         `protobuf:"varint,6,opt,name=prod,proto3" json:"prod,omitempty"`
	HyperParams *HyperParams `protobuf:"bytes,7,opt,name=hyper_params,json=hyperParams" json:"hyper_params,omitempty"`
}

func (m *Work) Reset()                    { *m = Work{} }
func (*Work) ProtoMessage()               {}
func (*Work) Descriptor() ([]byte, []int) { return fileDescriptorAggregator, []int{1} }

func (m *Work) GetId() *ModelID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Work) GetNumExamples() int64 {
	if m != nil {
		return m.NumExamples
	}
	return 0
}

func (m *Work) GetNumClients() int64 {
	if m != nil {
		return m.NumClients
	}
	return 0
}

func (m *Work) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Work) GetModel() []byte {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *Work) GetProd() bool {
	if m != nil {
		return m.Prod
	}
	return false
}

func (m *Work) GetHyperParams() *HyperParams {
	if m != nil {
		return m.HyperParams
	}
	return nil
}

type ModelID struct {
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ModelID) Reset()                    { *m = ModelID{} }
func (*ModelID) ProtoMessage()               {}
func (*ModelID) Descriptor() ([]byte, []int) { return fileDescriptorAggregator, []int{2} }

func (m *ModelID) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ModelID) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetWorkRequest struct {
	Ids []*ModelID `protobuf:"bytes,2,rep,name=ids" json:"ids,omitempty"`
}

func (m *GetWorkRequest) Reset()                    { *m = GetWorkRequest{} }
func (*GetWorkRequest) ProtoMessage()               {}
func (*GetWorkRequest) Descriptor() ([]byte, []int) { return fileDescriptorAggregator, []int{3} }

func (m *GetWorkRequest) GetIds() []*ModelID {
	if m != nil {
		return m.Ids
	}
	return nil
}

type GetWorkReply struct {
	Work []*Work `protobuf:"bytes,1,rep,name=work" json:"work,omitempty"`
}

func (m *GetWorkReply) Reset()                    { *m = GetWorkReply{} }
func (*GetWorkReply) ProtoMessage()               {}
func (*GetWorkReply) Descriptor() ([]byte, []int) { return fileDescriptorAggregator, []int{4} }

func (m *GetWorkReply) GetWork() []*Work {
	if m != nil {
		return m.Work
	}
	return nil
}

type ReportWorkRequest struct {
	Work []*Work `protobuf:"bytes,1,rep,name=work" json:"work,omitempty"`
}

func (m *ReportWorkRequest) Reset()                    { *m = ReportWorkRequest{} }
func (*ReportWorkRequest) ProtoMessage()               {}
func (*ReportWorkRequest) Descriptor() ([]byte, []int) { return fileDescriptorAggregator, []int{5} }

func (m *ReportWorkRequest) GetWork() []*Work {
	if m != nil {
		return m.Work
	}
	return nil
}

type ReportWorkReply struct {
}

func (m *ReportWorkReply) Reset()                    { *m = ReportWorkReply{} }
func (*ReportWorkReply) ProtoMessage()               {}
func (*ReportWorkReply) Descriptor() ([]byte, []int) { return fileDescriptorAggregator, []int{6} }

func init() {
	proto.RegisterType((*HyperParams)(nil), "aggregatorpb.HyperParams")
	proto.RegisterType((*Work)(nil), "aggregatorpb.Work")
	proto.RegisterType((*ModelID)(nil), "aggregatorpb.ModelID")
	proto.RegisterType((*GetWorkRequest)(nil), "aggregatorpb.GetWorkRequest")
	proto.RegisterType((*GetWorkReply)(nil), "aggregatorpb.GetWorkReply")
	proto.RegisterType((*ReportWorkRequest)(nil), "aggregatorpb.ReportWorkRequest")
	proto.RegisterType((*ReportWorkReply)(nil), "aggregatorpb.ReportWorkReply")
}
func (this *HyperParams) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HyperParams)
	if !ok {
		that2, ok := that.(HyperParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ProportionClients != that1.ProportionClients {
		return false
	}
	if this.BatchSize != that1.BatchSize {
		return false
	}
	if this.NumRounds != that1.NumRounds {
		return false
	}
	if this.LearningRate != that1.LearningRate {
		return false
	}
	return true
}
func (this *Work) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Work)
	if !ok {
		that2, ok := that.(Work)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if this.NumExamples != that1.NumExamples {
		return false
	}
	if this.NumClients != that1.NumClients {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	if !bytes.Equal(this.Model, that1.Model) {
		return false
	}
	if this.Prod != that1.Prod {
		return false
	}
	if !this.HyperParams.Equal(that1.HyperParams) {
		return false
	}
	return true
}
func (this *ModelID) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ModelID)
	if !ok {
		that2, ok := that.(ModelID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetWorkRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetWorkRequest)
	if !ok {
		that2, ok := that.(GetWorkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Ids) != len(that1.Ids) {
		return false
	}
	for i := range this.Ids {
		if !this.Ids[i].Equal(that1.Ids[i]) {
			return false
		}
	}
	return true
}
func (this *GetWorkReply) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*GetWorkReply)
	if !ok {
		that2, ok := that.(GetWorkReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Work) != len(that1.Work) {
		return false
	}
	for i := range this.Work {
		if !this.Work[i].Equal(that1.Work[i]) {
			return false
		}
	}
	return true
}
func (this *ReportWorkRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReportWorkRequest)
	if !ok {
		that2, ok := that.(ReportWorkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Work) != len(that1.Work) {
		return false
	}
	for i := range this.Work {
		if !this.Work[i].Equal(that1.Work[i]) {
			return false
		}
	}
	return true
}
func (this *ReportWorkReply) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReportWorkReply)
	if !ok {
		that2, ok := that.(ReportWorkReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *HyperParams) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&aggregatorpb.HyperParams{")
	s = append(s, "ProportionClients: "+fmt.Sprintf("%#v", this.ProportionClients)+",\n")
	s = append(s, "BatchSize: "+fmt.Sprintf("%#v", this.BatchSize)+",\n")
	s = append(s, "NumRounds: "+fmt.Sprintf("%#v", this.NumRounds)+",\n")
	s = append(s, "LearningRate: "+fmt.Sprintf("%#v", this.LearningRate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Work) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&aggregatorpb.Work{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "NumExamples: "+fmt.Sprintf("%#v", this.NumExamples)+",\n")
	s = append(s, "NumClients: "+fmt.Sprintf("%#v", this.NumClients)+",\n")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "Model: "+fmt.Sprintf("%#v", this.Model)+",\n")
	s = append(s, "Prod: "+fmt.Sprintf("%#v", this.Prod)+",\n")
	if this.HyperParams != nil {
		s = append(s, "HyperParams: "+fmt.Sprintf("%#v", this.HyperParams)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelID) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&aggregatorpb.ModelID{")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetWorkRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aggregatorpb.GetWorkRequest{")
	if this.Ids != nil {
		s = append(s, "Ids: "+fmt.Sprintf("%#v", this.Ids)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetWorkReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aggregatorpb.GetWorkReply{")
	if this.Work != nil {
		s = append(s, "Work: "+fmt.Sprintf("%#v", this.Work)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReportWorkRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&aggregatorpb.ReportWorkRequest{")
	if this.Work != nil {
		s = append(s, "Work: "+fmt.Sprintf("%#v", this.Work)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReportWorkReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&aggregatorpb.ReportWorkReply{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAggregator(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Aggregator service

type AggregatorClient interface {
	GetWork(ctx context.Context, in *GetWorkRequest, opts ...grpc.CallOption) (*GetWorkReply, error)
	ReportWork(ctx context.Context, in *ReportWorkRequest, opts ...grpc.CallOption) (*ReportWorkReply, error)
}

type aggregatorClient struct {
	cc *grpc.ClientConn
}

func NewAggregatorClient(cc *grpc.ClientConn) AggregatorClient {
	return &aggregatorClient{cc}
}

func (c *aggregatorClient) GetWork(ctx context.Context, in *GetWorkRequest, opts ...grpc.CallOption) (*GetWorkReply, error) {
	out := new(GetWorkReply)
	err := grpc.Invoke(ctx, "/aggregatorpb.Aggregator/GetWork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) ReportWork(ctx context.Context, in *ReportWorkRequest, opts ...grpc.CallOption) (*ReportWorkReply, error) {
	out := new(ReportWorkReply)
	err := grpc.Invoke(ctx, "/aggregatorpb.Aggregator/ReportWork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Aggregator service

type AggregatorServer interface {
	GetWork(context.Context, *GetWorkRequest) (*GetWorkReply, error)
	ReportWork(context.Context, *ReportWorkRequest) (*ReportWorkReply, error)
}

func RegisterAggregatorServer(s *grpc.Server, srv AggregatorServer) {
	s.RegisterService(&_Aggregator_serviceDesc, srv)
}

func _Aggregator_GetWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).GetWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregatorpb.Aggregator/GetWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).GetWork(ctx, req.(*GetWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_ReportWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).ReportWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregatorpb.Aggregator/ReportWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).ReportWork(ctx, req.(*ReportWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Aggregator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aggregatorpb.Aggregator",
	HandlerType: (*AggregatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWork",
			Handler:    _Aggregator_GetWork_Handler,
		},
		{
			MethodName: "ReportWork",
			Handler:    _Aggregator_ReportWork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/aggregatorpb/aggregator.proto",
}

func (m *HyperParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HyperParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProportionClients != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Aggregator(dAtA, i, uint64(math.Float64bits(float64(m.ProportionClients))))
	}
	if m.BatchSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAggregator(dAtA, i, uint64(m.BatchSize))
	}
	if m.NumRounds != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAggregator(dAtA, i, uint64(m.NumRounds))
	}
	if m.LearningRate != 0 {
		dAtA[i] = 0x21
		i++
		i = encodeFixed64Aggregator(dAtA, i, uint64(math.Float64bits(float64(m.LearningRate))))
	}
	return i, nil
}

func (m *Work) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Work) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAggregator(dAtA, i, uint64(m.Id.Size()))
		n1, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.NumExamples != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAggregator(dAtA, i, uint64(m.NumExamples))
	}
	if m.NumClients != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAggregator(dAtA, i, uint64(m.NumClients))
	}
	if m.Epoch != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAggregator(dAtA, i, uint64(m.Epoch))
	}
	if len(m.Model) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAggregator(dAtA, i, uint64(len(m.Model)))
		i += copy(dAtA[i:], m.Model)
	}
	if m.Prod {
		dAtA[i] = 0x30
		i++
		if m.Prod {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HyperParams != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAggregator(dAtA, i, uint64(m.HyperParams.Size()))
		n2, err := m.HyperParams.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ModelID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Domain) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAggregator(dAtA, i, uint64(len(m.Domain)))
		i += copy(dAtA[i:], m.Domain)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAggregator(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GetWorkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, msg := range m.Ids {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAggregator(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetWorkReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Work) > 0 {
		for _, msg := range m.Work {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAggregator(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReportWorkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportWorkRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Work) > 0 {
		for _, msg := range m.Work {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAggregator(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReportWorkReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportWorkReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Aggregator(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Aggregator(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAggregator(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HyperParams) Size() (n int) {
	var l int
	_ = l
	if m.ProportionClients != 0 {
		n += 9
	}
	if m.BatchSize != 0 {
		n += 1 + sovAggregator(uint64(m.BatchSize))
	}
	if m.NumRounds != 0 {
		n += 1 + sovAggregator(uint64(m.NumRounds))
	}
	if m.LearningRate != 0 {
		n += 9
	}
	return n
}

func (m *Work) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovAggregator(uint64(l))
	}
	if m.NumExamples != 0 {
		n += 1 + sovAggregator(uint64(m.NumExamples))
	}
	if m.NumClients != 0 {
		n += 1 + sovAggregator(uint64(m.NumClients))
	}
	if m.Epoch != 0 {
		n += 1 + sovAggregator(uint64(m.Epoch))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovAggregator(uint64(l))
	}
	if m.Prod {
		n += 2
	}
	if m.HyperParams != nil {
		l = m.HyperParams.Size()
		n += 1 + l + sovAggregator(uint64(l))
	}
	return n
}

func (m *ModelID) Size() (n int) {
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovAggregator(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAggregator(uint64(l))
	}
	return n
}

func (m *GetWorkRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, e := range m.Ids {
			l = e.Size()
			n += 1 + l + sovAggregator(uint64(l))
		}
	}
	return n
}

func (m *GetWorkReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Work) > 0 {
		for _, e := range m.Work {
			l = e.Size()
			n += 1 + l + sovAggregator(uint64(l))
		}
	}
	return n
}

func (m *ReportWorkRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Work) > 0 {
		for _, e := range m.Work {
			l = e.Size()
			n += 1 + l + sovAggregator(uint64(l))
		}
	}
	return n
}

func (m *ReportWorkReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovAggregator(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAggregator(x uint64) (n int) {
	return sovAggregator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HyperParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HyperParams{`,
		`ProportionClients:` + fmt.Sprintf("%v", this.ProportionClients) + `,`,
		`BatchSize:` + fmt.Sprintf("%v", this.BatchSize) + `,`,
		`NumRounds:` + fmt.Sprintf("%v", this.NumRounds) + `,`,
		`LearningRate:` + fmt.Sprintf("%v", this.LearningRate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Work) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Work{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "ModelID", "ModelID", 1) + `,`,
		`NumExamples:` + fmt.Sprintf("%v", this.NumExamples) + `,`,
		`NumClients:` + fmt.Sprintf("%v", this.NumClients) + `,`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`Model:` + fmt.Sprintf("%v", this.Model) + `,`,
		`Prod:` + fmt.Sprintf("%v", this.Prod) + `,`,
		`HyperParams:` + strings.Replace(fmt.Sprintf("%v", this.HyperParams), "HyperParams", "HyperParams", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModelID{`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetWorkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetWorkRequest{`,
		`Ids:` + strings.Replace(fmt.Sprintf("%v", this.Ids), "ModelID", "ModelID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetWorkReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetWorkReply{`,
		`Work:` + strings.Replace(fmt.Sprintf("%v", this.Work), "Work", "Work", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReportWorkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReportWorkRequest{`,
		`Work:` + strings.Replace(fmt.Sprintf("%v", this.Work), "Work", "Work", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReportWorkReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReportWorkReply{`,
		`}`,
	}, "")
	return s
}
func valueToStringAggregator(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HyperParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggregator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HyperParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HyperParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProportionClients", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.ProportionClients = float64(math.Float64frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchSize", wireType)
			}
			m.BatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRounds", wireType)
			}
			m.NumRounds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRounds |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LearningRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.LearningRate = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipAggregator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAggregator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Work) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggregator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Work: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Work: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAggregator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &ModelID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumExamples", wireType)
			}
			m.NumExamples = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumExamples |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumClients", wireType)
			}
			m.NumClients = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumClients |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAggregator
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = append(m.Model[:0], dAtA[iNdEx:postIndex]...)
			if m.Model == nil {
				m.Model = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prod", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Prod = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyperParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAggregator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HyperParams == nil {
				m.HyperParams = &HyperParams{}
			}
			if err := m.HyperParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAggregator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAggregator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggregator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAggregator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAggregator
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAggregator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAggregator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggregator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAggregator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, &ModelID{})
			if err := m.Ids[len(m.Ids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAggregator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAggregator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggregator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Work", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAggregator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Work = append(m.Work, &Work{})
			if err := m.Work[len(m.Work)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAggregator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAggregator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportWorkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggregator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportWorkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportWorkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Work", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAggregator
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Work = append(m.Work, &Work{})
			if err := m.Work[len(m.Work)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAggregator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAggregator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportWorkReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggregator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportWorkReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportWorkReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAggregator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAggregator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAggregator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAggregator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAggregator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAggregator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAggregator
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAggregator
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAggregator(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAggregator = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAggregator   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("protobuf/aggregatorpb/aggregator.proto", fileDescriptorAggregator) }

var fileDescriptorAggregator = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x3d, 0x8f, 0xd3, 0x30,
	0x18, 0xae, 0xaf, 0xbd, 0x96, 0xbe, 0x0d, 0xa0, 0x5a, 0x80, 0x42, 0xc5, 0xf9, 0x4a, 0x10, 0x47,
	0x07, 0x28, 0xd2, 0x21, 0x90, 0x10, 0x2c, 0x7c, 0x9c, 0x80, 0x01, 0x84, 0xcc, 0xc0, 0x18, 0xb9,
	0x8d, 0x69, 0xa3, 0x4b, 0x6c, 0xe3, 0x24, 0x82, 0xde, 0xc4, 0x4f, 0xe0, 0x1f, 0x30, 0xb0, 0xf0,
	0x53, 0x18, 0x6f, 0x64, 0xa4, 0x61, 0x61, 0xe3, 0x7e, 0x02, 0xb2, 0x93, 0x6b, 0x13, 0xa1, 0x4a,
	0x6c, 0x79, 0xdf, 0xe7, 0x79, 0xfd, 0x7c, 0xa8, 0x85, 0x3d, 0xa5, 0x65, 0x2a, 0x27, 0xd9, 0xbb,
	0xdb, 0x6c, 0x36, 0xd3, 0x7c, 0xc6, 0x52, 0xa9, 0xd5, 0xa4, 0x32, 0x8c, 0x2d, 0x01, 0x3b, 0x55,
	0xd8, 0xfb, 0x82, 0xa0, 0xf7, 0x7c, 0xa1, 0xb8, 0x7e, 0xcd, 0x34, 0x8b, 0x13, 0x7c, 0x0b, 0xb0,
	0xd2, 0x52, 0x49, 0x9d, 0x86, 0x52, 0xf8, 0xd3, 0x28, 0xe4, 0x22, 0x4d, 0x5c, 0x34, 0x44, 0x23,
	0x44, 0xfb, 0x6b, 0xe4, 0x49, 0x01, 0xe0, 0x1d, 0x80, 0x09, 0x4b, 0xa7, 0x73, 0x3f, 0x09, 0x8f,
	0xb8, 0xbb, 0x35, 0x44, 0xa3, 0x26, 0xed, 0xda, 0xcd, 0x9b, 0xf0, 0x88, 0x1b, 0x58, 0x64, 0xb1,
	0xaf, 0x65, 0x26, 0x82, 0xc4, 0x6d, 0x16, 0xb0, 0xc8, 0x62, 0x6a, 0x17, 0xf8, 0x1a, 0x9c, 0x8d,
	0x38, 0xd3, 0x22, 0x14, 0x33, 0x5f, 0xb3, 0x94, 0xbb, 0x2d, 0xab, 0xe3, 0x9c, 0x2e, 0x29, 0x4b,
	0xb9, 0xf7, 0x07, 0x41, 0xeb, 0xad, 0xd4, 0x87, 0xf8, 0x3a, 0x6c, 0x85, 0x81, 0xb5, 0xd2, 0xdb,
	0xbf, 0x38, 0xae, 0xa6, 0x18, 0xbf, 0x94, 0x01, 0x8f, 0x5e, 0x3c, 0xa5, 0x5b, 0x61, 0x80, 0xaf,
	0x82, 0x63, 0x34, 0xf9, 0x47, 0x16, 0xab, 0x88, 0x27, 0xa5, 0xa9, 0x9e, 0xc8, 0xe2, 0x83, 0x72,
	0x85, 0x77, 0xc1, 0x8c, 0xab, 0x74, 0x85, 0x2f, 0xe3, 0xf4, 0x34, 0xd6, 0x05, 0xd8, 0xe6, 0x4a,
	0x4e, 0xe7, 0xd6, 0x50, 0x93, 0x16, 0x83, 0xd9, 0xc6, 0x46, 0xc8, 0xdd, 0x1e, 0xa2, 0x91, 0x43,
	0x8b, 0x01, 0x63, 0x68, 0x29, 0x2d, 0x03, 0xb7, 0x3d, 0x44, 0xa3, 0x33, 0xd4, 0x7e, 0xe3, 0x87,
	0xe0, 0xcc, 0x4d, 0xa9, 0xbe, 0xb2, 0xad, 0xba, 0x1d, 0x6b, 0xfa, 0x72, 0xdd, 0x74, 0xa5, 0x76,
	0xda, 0x9b, 0xaf, 0x07, 0xef, 0x2e, 0x74, 0xca, 0x40, 0xf8, 0x12, 0xb4, 0x03, 0x19, 0xb3, 0x50,
	0xd8, 0xdc, 0x5d, 0x5a, 0x4e, 0x46, 0x54, 0xb0, 0xb8, 0x68, 0xbc, 0x4b, 0xed, 0xb7, 0x77, 0x1f,
	0xce, 0x3d, 0xe3, 0xa9, 0xa9, 0x8a, 0xf2, 0xf7, 0x19, 0x4f, 0x52, 0x7c, 0x03, 0x9a, 0x61, 0x60,
	0x1a, 0x68, 0x6e, 0xae, 0xcc, 0x30, 0xbc, 0x7b, 0xe0, 0xac, 0x4e, 0x55, 0xb4, 0xc0, 0x7b, 0xd0,
	0xfa, 0x20, 0xf5, 0xa1, 0x8b, 0xec, 0x25, 0xae, 0x5f, 0x5a, 0x9a, 0xc5, 0xbd, 0x07, 0xd0, 0xa7,
	0xdc, 0xfc, 0x24, 0xaa, 0xaa, 0xff, 0x7b, 0xdc, 0x87, 0xf3, 0xd5, 0x63, 0x15, 0x2d, 0xf6, 0xbf,
	0x22, 0x80, 0x47, 0x2b, 0x3a, 0x3e, 0x80, 0x4e, 0x69, 0x0b, 0x5f, 0xa9, 0x3f, 0x53, 0x0f, 0x3a,
	0x18, 0x6c, 0x40, 0x55, 0xb4, 0xf0, 0x1a, 0xf8, 0x15, 0xc0, 0x5a, 0x08, 0xef, 0xd6, 0xb9, 0xff,
	0xf8, 0x1f, 0xec, 0x6c, 0x26, 0xd8, 0xf7, 0x1e, 0xdf, 0x3c, 0x5e, 0x92, 0xc6, 0x8f, 0x25, 0x69,
	0x9c, 0x2c, 0x09, 0xfa, 0x94, 0x13, 0xf4, 0x2d, 0x27, 0xe8, 0x7b, 0x4e, 0xd0, 0x71, 0x4e, 0xd0,
	0xcf, 0x9c, 0xa0, 0xdf, 0x39, 0x69, 0x9c, 0xe4, 0x04, 0x7d, 0xfe, 0x45, 0x1a, 0x93, 0xb6, 0xfd,
	0xdb, 0xdd, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x92, 0x8c, 0x01, 0xa0, 0x03, 0x00, 0x00,
}
