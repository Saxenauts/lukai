// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/clientpb/client.proto

/*
	Package clientpb is a generated protocol buffer package.

	It is generated from these files:
		protobuf/clientpb/client.proto

	It has these top-level messages:
		ExampleFile
		ExampleIndex
		Metric
		EventTargets
		ModelMeta
*/
package clientpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/gogo/protobuf/gogoproto"

import time "time"

import strconv "strconv"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MetricReduce int32

const (
	REDUCE_UNKNOWN MetricReduce = 0
	REDUCE_MEAN    MetricReduce = 1
	REDUCE_MIN     MetricReduce = 2
	REDUCE_MAX     MetricReduce = 3
	REDUCE_SUM     MetricReduce = 4
	REDUCE_PROD    MetricReduce = 5
	REDUCE_P1      MetricReduce = 6
	REDUCE_P5      MetricReduce = 7
	REDUCE_P10     MetricReduce = 8
	REDUCE_P25     MetricReduce = 9
	REDUCE_P50     MetricReduce = 10
	REDUCE_P75     MetricReduce = 11
	REDUCE_P90     MetricReduce = 12
	REDUCE_P95     MetricReduce = 13
	REDUCE_P99     MetricReduce = 14
)

var MetricReduce_name = map[int32]string{
	0:  "REDUCE_UNKNOWN",
	1:  "REDUCE_MEAN",
	2:  "REDUCE_MIN",
	3:  "REDUCE_MAX",
	4:  "REDUCE_SUM",
	5:  "REDUCE_PROD",
	6:  "REDUCE_P1",
	7:  "REDUCE_P5",
	8:  "REDUCE_P10",
	9:  "REDUCE_P25",
	10: "REDUCE_P50",
	11: "REDUCE_P75",
	12: "REDUCE_P90",
	13: "REDUCE_P95",
	14: "REDUCE_P99",
}
var MetricReduce_value = map[string]int32{
	"REDUCE_UNKNOWN": 0,
	"REDUCE_MEAN":    1,
	"REDUCE_MIN":     2,
	"REDUCE_MAX":     3,
	"REDUCE_SUM":     4,
	"REDUCE_PROD":    5,
	"REDUCE_P1":      6,
	"REDUCE_P5":      7,
	"REDUCE_P10":     8,
	"REDUCE_P25":     9,
	"REDUCE_P50":     10,
	"REDUCE_P75":     11,
	"REDUCE_P90":     12,
	"REDUCE_P95":     13,
	"REDUCE_P99":     14,
}

func (MetricReduce) EnumDescriptor() ([]byte, []int) { return fileDescriptorClient, []int{0} }

type Event int32

const (
	EVENT_UNKNOWN Event = 0
	EVENT_TRAIN   Event = 1
	EVENT_INFER   Event = 2
	EVENT_EVAL    Event = 3
)

var Event_name = map[int32]string{
	0: "EVENT_UNKNOWN",
	1: "EVENT_TRAIN",
	2: "EVENT_INFER",
	3: "EVENT_EVAL",
}
var Event_value = map[string]int32{
	"EVENT_UNKNOWN": 0,
	"EVENT_TRAIN":   1,
	"EVENT_INFER":   2,
	"EVENT_EVAL":    3,
}

func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptorClient, []int{1} }

type ExampleFile struct {
	Name      string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Created   time.Time `protobuf:"bytes,2,opt,name=created,stdtime" json:"created"`
	TotalSize int64     `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	Positions []int32   `protobuf:"varint,4,rep,packed,name=positions" json:"positions,omitempty"`
}

func (m *ExampleFile) Reset()                    { *m = ExampleFile{} }
func (*ExampleFile) ProtoMessage()               {}
func (*ExampleFile) Descriptor() ([]byte, []int) { return fileDescriptorClient, []int{0} }

func (m *ExampleFile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExampleFile) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *ExampleFile) GetTotalSize() int64 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

func (m *ExampleFile) GetPositions() []int32 {
	if m != nil {
		return m.Positions
	}
	return nil
}

type ExampleIndex struct {
	TotalExamples int64         `protobuf:"varint,1,opt,name=total_examples,json=totalExamples,proto3" json:"total_examples,omitempty"`
	TotalSize     int64         `protobuf:"varint,2,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	Files         []ExampleFile `protobuf:"bytes,3,rep,name=files" json:"files"`
}

func (m *ExampleIndex) Reset()                    { *m = ExampleIndex{} }
func (*ExampleIndex) ProtoMessage()               {}
func (*ExampleIndex) Descriptor() ([]byte, []int) { return fileDescriptorClient, []int{1} }

func (m *ExampleIndex) GetTotalExamples() int64 {
	if m != nil {
		return m.TotalExamples
	}
	return 0
}

func (m *ExampleIndex) GetTotalSize() int64 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

func (m *ExampleIndex) GetFiles() []ExampleFile {
	if m != nil {
		return m.Files
	}
	return nil
}

type Metric struct {
	FetchName string       `protobuf:"bytes,1,opt,name=fetch_name,json=fetchName,proto3" json:"fetch_name,omitempty"`
	Reduce    MetricReduce `protobuf:"varint,2,opt,name=reduce,proto3,enum=clientpb.MetricReduce" json:"reduce,omitempty"`
	Name      string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptorClient, []int{2} }

func (m *Metric) GetFetchName() string {
	if m != nil {
		return m.FetchName
	}
	return ""
}

func (m *Metric) GetReduce() MetricReduce {
	if m != nil {
		return m.Reduce
	}
	return REDUCE_UNKNOWN
}

func (m *Metric) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type EventTargets struct {
	Pre  []string `protobuf:"bytes,1,rep,name=pre" json:"pre,omitempty"`
	Post []string `protobuf:"bytes,2,rep,name=post" json:"post,omitempty"`
}

func (m *EventTargets) Reset()                    { *m = EventTargets{} }
func (*EventTargets) ProtoMessage()               {}
func (*EventTargets) Descriptor() ([]byte, []int) { return fileDescriptorClient, []int{3} }

func (m *EventTargets) GetPre() []string {
	if m != nil {
		return m.Pre
	}
	return nil
}

func (m *EventTargets) GetPost() []string {
	if m != nil {
		return m.Post
	}
	return nil
}

type ModelMeta struct {
	TrainableVariables []string               `protobuf:"bytes,1,rep,name=trainable_variables,json=trainableVariables" json:"trainable_variables,omitempty"`
	Metrics            []*Metric              `protobuf:"bytes,2,rep,name=metrics" json:"metrics,omitempty"`
	EventTargets       map[Event]EventTargets `protobuf:"bytes,3,rep,name=event_targets,json=eventTargets,castkey=Event" json:"event_targets" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ModelMeta) Reset()                    { *m = ModelMeta{} }
func (*ModelMeta) ProtoMessage()               {}
func (*ModelMeta) Descriptor() ([]byte, []int) { return fileDescriptorClient, []int{4} }

func (m *ModelMeta) GetTrainableVariables() []string {
	if m != nil {
		return m.TrainableVariables
	}
	return nil
}

func (m *ModelMeta) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *ModelMeta) GetEventTargets() map[Event]EventTargets {
	if m != nil {
		return m.EventTargets
	}
	return nil
}

func init() {
	proto.RegisterType((*ExampleFile)(nil), "clientpb.ExampleFile")
	proto.RegisterType((*ExampleIndex)(nil), "clientpb.ExampleIndex")
	proto.RegisterType((*Metric)(nil), "clientpb.Metric")
	proto.RegisterType((*EventTargets)(nil), "clientpb.EventTargets")
	proto.RegisterType((*ModelMeta)(nil), "clientpb.ModelMeta")
	proto.RegisterEnum("clientpb.MetricReduce", MetricReduce_name, MetricReduce_value)
	proto.RegisterEnum("clientpb.Event", Event_name, Event_value)
}
func (x MetricReduce) String() string {
	s, ok := MetricReduce_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Event) String() string {
	s, ok := Event_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ExampleFile) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExampleFile)
	if !ok {
		that2, ok := that.(ExampleFile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Created.Equal(that1.Created) {
		return false
	}
	if this.TotalSize != that1.TotalSize {
		return false
	}
	if len(this.Positions) != len(that1.Positions) {
		return false
	}
	for i := range this.Positions {
		if this.Positions[i] != that1.Positions[i] {
			return false
		}
	}
	return true
}
func (this *ExampleIndex) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ExampleIndex)
	if !ok {
		that2, ok := that.(ExampleIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TotalExamples != that1.TotalExamples {
		return false
	}
	if this.TotalSize != that1.TotalSize {
		return false
	}
	if len(this.Files) != len(that1.Files) {
		return false
	}
	for i := range this.Files {
		if !this.Files[i].Equal(&that1.Files[i]) {
			return false
		}
	}
	return true
}
func (this *Metric) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Metric)
	if !ok {
		that2, ok := that.(Metric)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.FetchName != that1.FetchName {
		return false
	}
	if this.Reduce != that1.Reduce {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *EventTargets) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EventTargets)
	if !ok {
		that2, ok := that.(EventTargets)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Pre) != len(that1.Pre) {
		return false
	}
	for i := range this.Pre {
		if this.Pre[i] != that1.Pre[i] {
			return false
		}
	}
	if len(this.Post) != len(that1.Post) {
		return false
	}
	for i := range this.Post {
		if this.Post[i] != that1.Post[i] {
			return false
		}
	}
	return true
}
func (this *ModelMeta) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ModelMeta)
	if !ok {
		that2, ok := that.(ModelMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.TrainableVariables) != len(that1.TrainableVariables) {
		return false
	}
	for i := range this.TrainableVariables {
		if this.TrainableVariables[i] != that1.TrainableVariables[i] {
			return false
		}
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if !this.Metrics[i].Equal(that1.Metrics[i]) {
			return false
		}
	}
	if len(this.EventTargets) != len(that1.EventTargets) {
		return false
	}
	for i := range this.EventTargets {
		a := this.EventTargets[i]
		b := that1.EventTargets[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	return true
}
func (this *ExampleFile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&clientpb.ExampleFile{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Created: "+fmt.Sprintf("%#v", this.Created)+",\n")
	s = append(s, "TotalSize: "+fmt.Sprintf("%#v", this.TotalSize)+",\n")
	s = append(s, "Positions: "+fmt.Sprintf("%#v", this.Positions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExampleIndex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&clientpb.ExampleIndex{")
	s = append(s, "TotalExamples: "+fmt.Sprintf("%#v", this.TotalExamples)+",\n")
	s = append(s, "TotalSize: "+fmt.Sprintf("%#v", this.TotalSize)+",\n")
	if this.Files != nil {
		vs := make([]*ExampleFile, len(this.Files))
		for i := range vs {
			vs[i] = &this.Files[i]
		}
		s = append(s, "Files: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Metric) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&clientpb.Metric{")
	s = append(s, "FetchName: "+fmt.Sprintf("%#v", this.FetchName)+",\n")
	s = append(s, "Reduce: "+fmt.Sprintf("%#v", this.Reduce)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EventTargets) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&clientpb.EventTargets{")
	s = append(s, "Pre: "+fmt.Sprintf("%#v", this.Pre)+",\n")
	s = append(s, "Post: "+fmt.Sprintf("%#v", this.Post)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ModelMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&clientpb.ModelMeta{")
	s = append(s, "TrainableVariables: "+fmt.Sprintf("%#v", this.TrainableVariables)+",\n")
	if this.Metrics != nil {
		s = append(s, "Metrics: "+fmt.Sprintf("%#v", this.Metrics)+",\n")
	}
	keysForEventTargets := make([]int32, 0, len(this.EventTargets))
	for k, _ := range this.EventTargets {
		keysForEventTargets = append(keysForEventTargets, int32(k))
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForEventTargets)
	mapStringForEventTargets := "map[Event]EventTargets{"
	for _, k := range keysForEventTargets {
		mapStringForEventTargets += fmt.Sprintf("%#v: %#v,", k, this.EventTargets[Event(k)])
	}
	mapStringForEventTargets += "}"
	if this.EventTargets != nil {
		s = append(s, "EventTargets: "+mapStringForEventTargets+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringClient(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ExampleFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExampleFile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintClient(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)))
	n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.TotalSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.TotalSize))
	}
	if len(m.Positions) > 0 {
		dAtA3 := make([]byte, len(m.Positions)*10)
		var j2 int
		for _, num1 := range m.Positions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintClient(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func (m *ExampleIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExampleIndex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalExamples != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.TotalExamples))
	}
	if m.TotalSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.TotalSize))
	}
	if len(m.Files) > 0 {
		for _, msg := range m.Files {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintClient(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Metric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metric) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FetchName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.FetchName)))
		i += copy(dAtA[i:], m.FetchName)
	}
	if m.Reduce != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClient(dAtA, i, uint64(m.Reduce))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClient(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *EventTargets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventTargets) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pre) > 0 {
		for _, s := range m.Pre {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Post) > 0 {
		for _, s := range m.Post {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ModelMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TrainableVariables) > 0 {
		for _, s := range m.TrainableVariables {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Metrics) > 0 {
		for _, msg := range m.Metrics {
			dAtA[i] = 0x12
			i++
			i = encodeVarintClient(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.EventTargets) > 0 {
		for k, _ := range m.EventTargets {
			dAtA[i] = 0x1a
			i++
			v := m.EventTargets[k]
			msgSize := 0
			if (&v) != nil {
				msgSize = (&v).Size()
				msgSize += 1 + sovClient(uint64(msgSize))
			}
			mapSize := 1 + sovClient(uint64(k)) + msgSize
			i = encodeVarintClient(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintClient(dAtA, i, uint64(k))
			dAtA[i] = 0x12
			i++
			i = encodeVarintClient(dAtA, i, uint64((&v).Size()))
			n4, err := (&v).MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n4
		}
	}
	return i, nil
}

func encodeFixed64Client(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Client(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintClient(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ExampleFile) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovClient(uint64(l))
	if m.TotalSize != 0 {
		n += 1 + sovClient(uint64(m.TotalSize))
	}
	if len(m.Positions) > 0 {
		l = 0
		for _, e := range m.Positions {
			l += sovClient(uint64(e))
		}
		n += 1 + sovClient(uint64(l)) + l
	}
	return n
}

func (m *ExampleIndex) Size() (n int) {
	var l int
	_ = l
	if m.TotalExamples != 0 {
		n += 1 + sovClient(uint64(m.TotalExamples))
	}
	if m.TotalSize != 0 {
		n += 1 + sovClient(uint64(m.TotalSize))
	}
	if len(m.Files) > 0 {
		for _, e := range m.Files {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	return n
}

func (m *Metric) Size() (n int) {
	var l int
	_ = l
	l = len(m.FetchName)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	if m.Reduce != 0 {
		n += 1 + sovClient(uint64(m.Reduce))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClient(uint64(l))
	}
	return n
}

func (m *EventTargets) Size() (n int) {
	var l int
	_ = l
	if len(m.Pre) > 0 {
		for _, s := range m.Pre {
			l = len(s)
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if len(m.Post) > 0 {
		for _, s := range m.Post {
			l = len(s)
			n += 1 + l + sovClient(uint64(l))
		}
	}
	return n
}

func (m *ModelMeta) Size() (n int) {
	var l int
	_ = l
	if len(m.TrainableVariables) > 0 {
		for _, s := range m.TrainableVariables {
			l = len(s)
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovClient(uint64(l))
		}
	}
	if len(m.EventTargets) > 0 {
		for k, v := range m.EventTargets {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovClient(uint64(k)) + 1 + l + sovClient(uint64(l))
			n += mapEntrySize + 1 + sovClient(uint64(mapEntrySize))
		}
	}
	return n
}

func sovClient(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozClient(x uint64) (n int) {
	return sovClient(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ExampleFile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExampleFile{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Created:` + strings.Replace(strings.Replace(this.Created.String(), "Timestamp", "google_protobuf.Timestamp", 1), `&`, ``, 1) + `,`,
		`TotalSize:` + fmt.Sprintf("%v", this.TotalSize) + `,`,
		`Positions:` + fmt.Sprintf("%v", this.Positions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExampleIndex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExampleIndex{`,
		`TotalExamples:` + fmt.Sprintf("%v", this.TotalExamples) + `,`,
		`TotalSize:` + fmt.Sprintf("%v", this.TotalSize) + `,`,
		`Files:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Files), "ExampleFile", "ExampleFile", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Metric) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Metric{`,
		`FetchName:` + fmt.Sprintf("%v", this.FetchName) + `,`,
		`Reduce:` + fmt.Sprintf("%v", this.Reduce) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EventTargets) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventTargets{`,
		`Pre:` + fmt.Sprintf("%v", this.Pre) + `,`,
		`Post:` + fmt.Sprintf("%v", this.Post) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModelMeta) String() string {
	if this == nil {
		return "nil"
	}
	keysForEventTargets := make([]int32, 0, len(this.EventTargets))
	for k, _ := range this.EventTargets {
		keysForEventTargets = append(keysForEventTargets, int32(k))
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForEventTargets)
	mapStringForEventTargets := "map[Event]EventTargets{"
	for _, k := range keysForEventTargets {
		mapStringForEventTargets += fmt.Sprintf("%v: %v,", k, this.EventTargets[Event(k)])
	}
	mapStringForEventTargets += "}"
	s := strings.Join([]string{`&ModelMeta{`,
		`TrainableVariables:` + fmt.Sprintf("%v", this.TrainableVariables) + `,`,
		`Metrics:` + strings.Replace(fmt.Sprintf("%v", this.Metrics), "Metric", "Metric", 1) + `,`,
		`EventTargets:` + mapStringForEventTargets + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringClient(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ExampleFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExampleFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExampleFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			m.TotalSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClient
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Positions = append(m.Positions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClient
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthClient
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClient
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Positions = append(m.Positions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExampleIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExampleIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExampleIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalExamples", wireType)
			}
			m.TotalExamples = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalExamples |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSize", wireType)
			}
			m.TotalSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, ExampleFile{})
			if err := m.Files[len(m.Files)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FetchName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reduce", wireType)
			}
			m.Reduce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reduce |= (MetricReduce(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventTargets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventTargets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventTargets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pre", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pre = append(m.Pre, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Post", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Post = append(m.Post, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainableVariables", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrainableVariables = append(m.TrainableVariables, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, &Metric{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTargets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClient
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventTargets == nil {
				m.EventTargets = make(map[Event]EventTargets)
			}
			var mapkey int32
			mapvalue := &EventTargets{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClient
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClient
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClient
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthClient
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthClient
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &EventTargets{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipClient(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthClient
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EventTargets[Event(mapkey)] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClient(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClient
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthClient
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowClient
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipClient(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthClient = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClient   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("protobuf/clientpb/client.proto", fileDescriptorClient) }

var fileDescriptorClient = []byte{
	// 703 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x54, 0xcf, 0x4f, 0x1a, 0x4f,
	0x1c, 0x65, 0x58, 0x40, 0x77, 0xf8, 0xf1, 0x1d, 0xe7, 0x9b, 0x36, 0x84, 0xa4, 0x0b, 0x21, 0x31,
	0x21, 0xc6, 0x2e, 0x4a, 0x4b, 0x5a, 0x7b, 0x68, 0x02, 0x75, 0x4d, 0x48, 0x65, 0x35, 0x23, 0x6a,
	0x7b, 0x22, 0x0b, 0x8c, 0xb8, 0x71, 0x61, 0xc9, 0xee, 0x60, 0xd4, 0x53, 0xe3, 0xa5, 0x57, 0xff,
	0x80, 0x1e, 0x7b, 0xe8, 0x9f, 0xe2, 0xd1, 0x63, 0x4f, 0xb5, 0x6e, 0x2f, 0x3d, 0xfa, 0x27, 0x34,
	0x3b, 0xbb, 0x0b, 0xa3, 0xde, 0x3e, 0xef, 0xcd, 0xfb, 0xbc, 0x79, 0xf3, 0x20, 0x0b, 0x95, 0x89,
	0x63, 0x33, 0xbb, 0x37, 0x3d, 0xaa, 0xf6, 0x2d, 0x93, 0x8e, 0xd9, 0xa4, 0x17, 0x0e, 0x2a, 0x3f,
	0xc0, 0x8b, 0x11, 0x5d, 0x28, 0x0e, 0x6d, 0x7b, 0x68, 0xd1, 0xea, 0x6c, 0x81, 0x99, 0x23, 0xea,
	0x32, 0x63, 0x34, 0x09, 0xa4, 0x85, 0x97, 0x43, 0x93, 0x1d, 0x4f, 0x7b, 0x6a, 0xdf, 0x1e, 0x55,
	0x87, 0xf6, 0xd0, 0x9e, 0x2b, 0x7d, 0xc4, 0x01, 0x9f, 0x02, 0x79, 0xf9, 0x3b, 0x80, 0x69, 0xed,
	0xcc, 0x18, 0x4d, 0x2c, 0xba, 0x65, 0x5a, 0x14, 0x63, 0x98, 0x18, 0x1b, 0x23, 0x9a, 0x07, 0x25,
	0x50, 0x91, 0x09, 0x9f, 0xf1, 0x7b, 0xb8, 0xd0, 0x77, 0xa8, 0xc1, 0xe8, 0x20, 0x1f, 0x2f, 0x81,
	0x4a, 0xba, 0x56, 0x50, 0x83, 0x14, 0x6a, 0xe4, 0xad, 0x76, 0xa2, 0x14, 0xcd, 0xc5, 0xeb, 0x5f,
	0xc5, 0xd8, 0xd5, 0x6d, 0x11, 0x90, 0x68, 0x09, 0xbf, 0x80, 0x90, 0xd9, 0xcc, 0xb0, 0xba, 0xae,
	0x79, 0x41, 0xf3, 0x52, 0x09, 0x54, 0x24, 0x22, 0x73, 0x66, 0xcf, 0xbc, 0xa0, 0xb8, 0x0c, 0xe5,
	0x89, 0xed, 0x9a, 0xcc, 0xb4, 0xc7, 0x6e, 0x3e, 0x51, 0x92, 0x2a, 0xc9, 0x66, 0xc2, 0x37, 0x21,
	0x73, 0xba, 0xfc, 0x15, 0xc0, 0x4c, 0x18, 0xb3, 0x35, 0x1e, 0xd0, 0x33, 0xbc, 0x0c, 0x73, 0x81,
	0x27, 0x0d, 0x58, 0x97, 0x27, 0x96, 0x48, 0x96, 0xb3, 0xa1, 0xd4, 0x7d, 0x74, 0x75, 0xfc, 0xf1,
	0xd5, 0xeb, 0x30, 0x79, 0x64, 0xfa, 0xcb, 0x52, 0x49, 0xaa, 0xa4, 0x6b, 0xcf, 0xd4, 0xa8, 0x67,
	0x55, 0xe8, 0x24, 0x4c, 0x13, 0x28, 0xcb, 0x27, 0x30, 0xd5, 0xa6, 0xcc, 0x31, 0xfb, 0xbe, 0xf7,
	0x11, 0x65, 0xfd, 0xe3, 0xae, 0x50, 0x98, 0xcc, 0x19, 0xdd, 0x6f, 0x4d, 0x85, 0x29, 0x87, 0x0e,
	0xa6, 0xfd, 0xe0, 0xda, 0x5c, 0xed, 0xf9, 0xdc, 0x3c, 0x30, 0x20, 0xfc, 0x94, 0x84, 0xaa, 0x59,
	0xf3, 0xd2, 0xbc, 0xf9, 0xf2, 0x6b, 0x98, 0xd1, 0x4e, 0xe9, 0x98, 0x75, 0x0c, 0x67, 0x48, 0x99,
	0x8b, 0x11, 0x94, 0x26, 0x8e, 0x7f, 0x97, 0x54, 0x91, 0x89, 0x3f, 0xfa, 0x5b, 0x13, 0xdb, 0x65,
	0xf9, 0x38, 0xa7, 0xf8, 0x5c, 0xfe, 0x16, 0x87, 0x72, 0xdb, 0x1e, 0x50, 0xab, 0x4d, 0x99, 0x81,
	0xab, 0xf0, 0x7f, 0xe6, 0x18, 0xe6, 0xd8, 0xe8, 0x59, 0xb4, 0x7b, 0x6a, 0x38, 0xa6, 0x3f, 0xb8,
	0xa1, 0x07, 0x9e, 0x1d, 0x1d, 0x44, 0x27, 0x78, 0x05, 0x2e, 0x8c, 0x78, 0x40, 0x97, 0xbb, 0xa6,
	0x6b, 0xe8, 0x49, 0xf2, 0x48, 0x80, 0x3f, 0xc3, 0x2c, 0xf5, 0x03, 0x76, 0x59, 0x90, 0x30, 0x2c,
	0x72, 0x59, 0xd8, 0x88, 0x82, 0xa8, 0xe2, 0x4b, 0xb4, 0x31, 0x73, 0xce, 0x9b, 0x59, 0xbf, 0xd8,
	0xcb, 0xdb, 0x62, 0x92, 0x1f, 0x91, 0x0c, 0x15, 0x14, 0x85, 0x43, 0xb8, 0xf4, 0x64, 0xc3, 0x2f,
	0xe0, 0x84, 0x9e, 0xf3, 0xb2, 0x93, 0xc4, 0x1f, 0xf1, 0x2a, 0x4c, 0x9e, 0x1a, 0xd6, 0x94, 0x86,
	0x7f, 0x4d, 0xa1, 0x65, 0x71, 0x9b, 0x04, 0xa2, 0x77, 0xf1, 0xb7, 0x60, 0xe5, 0x32, 0x0e, 0x33,
	0xe2, 0x2f, 0x80, 0x31, 0xcc, 0x11, 0x6d, 0x73, 0xff, 0x83, 0xd6, 0xdd, 0xd7, 0x3f, 0xea, 0x3b,
	0x87, 0x3a, 0x8a, 0xe1, 0xff, 0x60, 0x3a, 0xe4, 0xda, 0x5a, 0x43, 0x47, 0x00, 0xe7, 0x20, 0x8c,
	0x88, 0x96, 0x8e, 0xe2, 0x22, 0x6e, 0x7c, 0x42, 0x92, 0x80, 0xf7, 0xf6, 0xdb, 0x28, 0x21, 0x18,
	0xec, 0x92, 0x9d, 0x4d, 0x94, 0xc4, 0x59, 0x28, 0x47, 0xc4, 0x3a, 0x4a, 0x89, 0xb0, 0x8e, 0x16,
	0x84, 0xf5, 0xdd, 0xf5, 0x35, 0xb4, 0x28, 0xe2, 0x5a, 0x1d, 0xc9, 0x22, 0xae, 0xaf, 0x21, 0x28,
	0xe2, 0x37, 0x75, 0x94, 0x16, 0xf1, 0xc6, 0x1a, 0xca, 0x3c, 0xc0, 0x75, 0x94, 0x7d, 0x80, 0x37,
	0x50, 0x6e, 0x65, 0x1b, 0x06, 0xa5, 0xe3, 0x25, 0x98, 0xd5, 0x0e, 0x34, 0xbd, 0xf3, 0xf0, 0xed,
	0x01, 0xd5, 0x21, 0x8d, 0x96, 0xff, 0xf6, 0x19, 0xd1, 0xd2, 0xb7, 0x34, 0x12, 0x3c, 0x3e, 0x20,
	0xb4, 0x83, 0xc6, 0x36, 0x92, 0x9a, 0xab, 0x37, 0x77, 0x4a, 0xec, 0xe7, 0x9d, 0x12, 0xbb, 0xbf,
	0x53, 0xc0, 0x17, 0x4f, 0x01, 0x3f, 0x3c, 0x05, 0x5c, 0x7b, 0x0a, 0xb8, 0xf1, 0x14, 0xf0, 0xdb,
	0x53, 0xc0, 0x5f, 0x4f, 0x89, 0xdd, 0x7b, 0x0a, 0xb8, 0xfa, 0xa3, 0xc4, 0x7a, 0x29, 0xfe, 0xd9,
	0x78, 0xf5, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x59, 0x82, 0x6a, 0xf6, 0x04, 0x00, 0x00,
}
